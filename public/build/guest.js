(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));

  // node_modules/@mediapipe/holistic/holistic.js
  var require_holistic = __commonJS({
    "node_modules/@mediapipe/holistic/holistic.js"(exports) {
      (function() {
        "use strict";
        var x2;
        function aa(a2) {
          var b2 = 0;
          return function() {
            return b2 < a2.length ? { done: false, value: a2[b2++] } : { done: true };
          };
        }
        var ba = typeof Object.defineProperties == "function" ? Object.defineProperty : function(a2, b2, c2) {
          if (a2 == Array.prototype || a2 == Object.prototype)
            return a2;
          a2[b2] = c2.value;
          return a2;
        };
        function ca(a2) {
          a2 = [typeof globalThis == "object" && globalThis, a2, typeof window == "object" && window, typeof self == "object" && self, typeof global == "object" && global];
          for (var b2 = 0; b2 < a2.length; ++b2) {
            var c2 = a2[b2];
            if (c2 && c2.Math == Math)
              return c2;
          }
          throw Error("Cannot find global object");
        }
        var y2 = ca(this);
        function z2(a2, b2) {
          if (b2)
            a: {
              var c2 = y2;
              a2 = a2.split(".");
              for (var d2 = 0; d2 < a2.length - 1; d2++) {
                var e = a2[d2];
                if (!(e in c2))
                  break a;
                c2 = c2[e];
              }
              a2 = a2[a2.length - 1];
              d2 = c2[a2];
              b2 = b2(d2);
              b2 != d2 && b2 != null && ba(c2, a2, { configurable: true, writable: true, value: b2 });
            }
        }
        z2("Symbol", function(a2) {
          function b2(g2) {
            if (this instanceof b2)
              throw new TypeError("Symbol is not a constructor");
            return new c2(d2 + (g2 || "") + "_" + e++, g2);
          }
          function c2(g2, f2) {
            this.g = g2;
            ba(this, "description", { configurable: true, writable: true, value: f2 });
          }
          if (a2)
            return a2;
          c2.prototype.toString = function() {
            return this.g;
          };
          var d2 = "jscomp_symbol_" + (1e9 * Math.random() >>> 0) + "_", e = 0;
          return b2;
        });
        z2("Symbol.iterator", function(a2) {
          if (a2)
            return a2;
          a2 = Symbol("Symbol.iterator");
          for (var b2 = "Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "), c2 = 0; c2 < b2.length; c2++) {
            var d2 = y2[b2[c2]];
            typeof d2 === "function" && typeof d2.prototype[a2] != "function" && ba(d2.prototype, a2, { configurable: true, writable: true, value: function() {
              return da(aa(this));
            } });
          }
          return a2;
        });
        function da(a2) {
          a2 = { next: a2 };
          a2[Symbol.iterator] = function() {
            return this;
          };
          return a2;
        }
        function B2(a2) {
          var b2 = typeof Symbol != "undefined" && Symbol.iterator && a2[Symbol.iterator];
          return b2 ? b2.call(a2) : { next: aa(a2) };
        }
        function D2(a2) {
          if (!(a2 instanceof Array)) {
            a2 = B2(a2);
            for (var b2, c2 = []; !(b2 = a2.next()).done; )
              c2.push(b2.value);
            a2 = c2;
          }
          return a2;
        }
        var ea = typeof Object.create == "function" ? Object.create : function(a2) {
          function b2() {
          }
          b2.prototype = a2;
          return new b2();
        }, fa;
        if (typeof Object.setPrototypeOf == "function")
          fa = Object.setPrototypeOf;
        else {
          var ha;
          a: {
            var ia = { a: true }, ja = {};
            try {
              ja.__proto__ = ia;
              ha = ja.a;
              break a;
            } catch (a2) {
            }
            ha = false;
          }
          fa = ha ? function(a2, b2) {
            a2.__proto__ = b2;
            if (a2.__proto__ !== b2)
              throw new TypeError(a2 + " is not extensible");
            return a2;
          } : null;
        }
        var ka = fa;
        function E2(a2, b2) {
          a2.prototype = ea(b2.prototype);
          a2.prototype.constructor = a2;
          if (ka)
            ka(a2, b2);
          else
            for (var c2 in b2)
              if (c2 != "prototype")
                if (Object.defineProperties) {
                  var d2 = Object.getOwnPropertyDescriptor(b2, c2);
                  d2 && Object.defineProperty(a2, c2, d2);
                } else
                  a2[c2] = b2[c2];
          a2.da = b2.prototype;
        }
        function la() {
          this.l = false;
          this.i = null;
          this.h = void 0;
          this.g = 1;
          this.s = this.m = 0;
          this.j = null;
        }
        function ma(a2) {
          if (a2.l)
            throw new TypeError("Generator is already running");
          a2.l = true;
        }
        la.prototype.o = function(a2) {
          this.h = a2;
        };
        function na(a2, b2) {
          a2.j = { U: b2, V: true };
          a2.g = a2.m || a2.s;
        }
        la.prototype.return = function(a2) {
          this.j = { return: a2 };
          this.g = this.s;
        };
        function F2(a2, b2, c2) {
          a2.g = c2;
          return { value: b2 };
        }
        function oa(a2) {
          this.g = new la();
          this.h = a2;
        }
        function pa(a2, b2) {
          ma(a2.g);
          var c2 = a2.g.i;
          if (c2)
            return qa(a2, "return" in c2 ? c2["return"] : function(d2) {
              return { value: d2, done: true };
            }, b2, a2.g.return);
          a2.g.return(b2);
          return ra(a2);
        }
        function qa(a2, b2, c2, d2) {
          try {
            var e = b2.call(a2.g.i, c2);
            if (!(e instanceof Object))
              throw new TypeError("Iterator result " + e + " is not an object");
            if (!e.done)
              return a2.g.l = false, e;
            var g2 = e.value;
          } catch (f2) {
            return a2.g.i = null, na(a2.g, f2), ra(a2);
          }
          a2.g.i = null;
          d2.call(a2.g, g2);
          return ra(a2);
        }
        function ra(a2) {
          for (; a2.g.g; )
            try {
              var b2 = a2.h(a2.g);
              if (b2)
                return a2.g.l = false, { value: b2.value, done: false };
            } catch (c2) {
              a2.g.h = void 0, na(a2.g, c2);
            }
          a2.g.l = false;
          if (a2.g.j) {
            b2 = a2.g.j;
            a2.g.j = null;
            if (b2.V)
              throw b2.U;
            return { value: b2.return, done: true };
          }
          return { value: void 0, done: true };
        }
        function sa(a2) {
          this.next = function(b2) {
            ma(a2.g);
            a2.g.i ? b2 = qa(a2, a2.g.i.next, b2, a2.g.o) : (a2.g.o(b2), b2 = ra(a2));
            return b2;
          };
          this.throw = function(b2) {
            ma(a2.g);
            a2.g.i ? b2 = qa(a2, a2.g.i["throw"], b2, a2.g.o) : (na(a2.g, b2), b2 = ra(a2));
            return b2;
          };
          this.return = function(b2) {
            return pa(a2, b2);
          };
          this[Symbol.iterator] = function() {
            return this;
          };
        }
        function ta(a2) {
          function b2(d2) {
            return a2.next(d2);
          }
          function c2(d2) {
            return a2.throw(d2);
          }
          return new Promise(function(d2, e) {
            function g2(f2) {
              f2.done ? d2(f2.value) : Promise.resolve(f2.value).then(b2, c2).then(g2, e);
            }
            g2(a2.next());
          });
        }
        function H2(a2) {
          return ta(new sa(new oa(a2)));
        }
        z2("Promise", function(a2) {
          function b2(f2) {
            this.h = 0;
            this.i = void 0;
            this.g = [];
            this.o = false;
            var k2 = this.j();
            try {
              f2(k2.resolve, k2.reject);
            } catch (h2) {
              k2.reject(h2);
            }
          }
          function c2() {
            this.g = null;
          }
          function d2(f2) {
            return f2 instanceof b2 ? f2 : new b2(function(k2) {
              k2(f2);
            });
          }
          if (a2)
            return a2;
          c2.prototype.h = function(f2) {
            if (this.g == null) {
              this.g = [];
              var k2 = this;
              this.i(function() {
                k2.l();
              });
            }
            this.g.push(f2);
          };
          var e = y2.setTimeout;
          c2.prototype.i = function(f2) {
            e(f2, 0);
          };
          c2.prototype.l = function() {
            for (; this.g && this.g.length; ) {
              var f2 = this.g;
              this.g = [];
              for (var k2 = 0; k2 < f2.length; ++k2) {
                var h2 = f2[k2];
                f2[k2] = null;
                try {
                  h2();
                } catch (l2) {
                  this.j(l2);
                }
              }
            }
            this.g = null;
          };
          c2.prototype.j = function(f2) {
            this.i(function() {
              throw f2;
            });
          };
          b2.prototype.j = function() {
            function f2(l2) {
              return function(n2) {
                h2 || (h2 = true, l2.call(k2, n2));
              };
            }
            var k2 = this, h2 = false;
            return { resolve: f2(this.C), reject: f2(this.l) };
          };
          b2.prototype.C = function(f2) {
            if (f2 === this)
              this.l(new TypeError("A Promise cannot resolve to itself"));
            else if (f2 instanceof b2)
              this.F(f2);
            else {
              a:
                switch (typeof f2) {
                  case "object":
                    var k2 = f2 != null;
                    break a;
                  case "function":
                    k2 = true;
                    break a;
                  default:
                    k2 = false;
                }
              k2 ? this.v(f2) : this.m(f2);
            }
          };
          b2.prototype.v = function(f2) {
            var k2 = void 0;
            try {
              k2 = f2.then;
            } catch (h2) {
              this.l(h2);
              return;
            }
            typeof k2 == "function" ? this.G(k2, f2) : this.m(f2);
          };
          b2.prototype.l = function(f2) {
            this.s(2, f2);
          };
          b2.prototype.m = function(f2) {
            this.s(1, f2);
          };
          b2.prototype.s = function(f2, k2) {
            if (this.h != 0)
              throw Error("Cannot settle(" + f2 + ", " + k2 + "): Promise already settled in state" + this.h);
            this.h = f2;
            this.i = k2;
            this.h === 2 && this.D();
            this.A();
          };
          b2.prototype.D = function() {
            var f2 = this;
            e(function() {
              if (f2.B()) {
                var k2 = y2.console;
                typeof k2 !== "undefined" && k2.error(f2.i);
              }
            }, 1);
          };
          b2.prototype.B = function() {
            if (this.o)
              return false;
            var f2 = y2.CustomEvent, k2 = y2.Event, h2 = y2.dispatchEvent;
            if (typeof h2 === "undefined")
              return true;
            typeof f2 === "function" ? f2 = new f2("unhandledrejection", { cancelable: true }) : typeof k2 === "function" ? f2 = new k2("unhandledrejection", { cancelable: true }) : (f2 = y2.document.createEvent("CustomEvent"), f2.initCustomEvent("unhandledrejection", false, true, f2));
            f2.promise = this;
            f2.reason = this.i;
            return h2(f2);
          };
          b2.prototype.A = function() {
            if (this.g != null) {
              for (var f2 = 0; f2 < this.g.length; ++f2)
                g2.h(this.g[f2]);
              this.g = null;
            }
          };
          var g2 = new c2();
          b2.prototype.F = function(f2) {
            var k2 = this.j();
            f2.J(k2.resolve, k2.reject);
          };
          b2.prototype.G = function(f2, k2) {
            var h2 = this.j();
            try {
              f2.call(k2, h2.resolve, h2.reject);
            } catch (l2) {
              h2.reject(l2);
            }
          };
          b2.prototype.then = function(f2, k2) {
            function h2(p3, m2) {
              return typeof p3 == "function" ? function(q3) {
                try {
                  l2(p3(q3));
                } catch (t) {
                  n2(t);
                }
              } : m2;
            }
            var l2, n2, r2 = new b2(function(p3, m2) {
              l2 = p3;
              n2 = m2;
            });
            this.J(h2(f2, l2), h2(k2, n2));
            return r2;
          };
          b2.prototype.catch = function(f2) {
            return this.then(void 0, f2);
          };
          b2.prototype.J = function(f2, k2) {
            function h2() {
              switch (l2.h) {
                case 1:
                  f2(l2.i);
                  break;
                case 2:
                  k2(l2.i);
                  break;
                default:
                  throw Error("Unexpected state: " + l2.h);
              }
            }
            var l2 = this;
            this.g == null ? g2.h(h2) : this.g.push(h2);
            this.o = true;
          };
          b2.resolve = d2;
          b2.reject = function(f2) {
            return new b2(function(k2, h2) {
              h2(f2);
            });
          };
          b2.race = function(f2) {
            return new b2(function(k2, h2) {
              for (var l2 = B2(f2), n2 = l2.next(); !n2.done; n2 = l2.next())
                d2(n2.value).J(k2, h2);
            });
          };
          b2.all = function(f2) {
            var k2 = B2(f2), h2 = k2.next();
            return h2.done ? d2([]) : new b2(function(l2, n2) {
              function r2(q3) {
                return function(t) {
                  p3[q3] = t;
                  m2--;
                  m2 == 0 && l2(p3);
                };
              }
              var p3 = [], m2 = 0;
              do
                p3.push(void 0), m2++, d2(h2.value).J(r2(p3.length - 1), n2), h2 = k2.next();
              while (!h2.done);
            });
          };
          return b2;
        });
        function ua(a2, b2) {
          a2 instanceof String && (a2 += "");
          var c2 = 0, d2 = false, e = { next: function() {
            if (!d2 && c2 < a2.length) {
              var g2 = c2++;
              return { value: b2(g2, a2[g2]), done: false };
            }
            d2 = true;
            return { done: true, value: void 0 };
          } };
          e[Symbol.iterator] = function() {
            return e;
          };
          return e;
        }
        var va = typeof Object.assign == "function" ? Object.assign : function(a2, b2) {
          for (var c2 = 1; c2 < arguments.length; c2++) {
            var d2 = arguments[c2];
            if (d2)
              for (var e in d2)
                Object.prototype.hasOwnProperty.call(d2, e) && (a2[e] = d2[e]);
          }
          return a2;
        };
        z2("Object.assign", function(a2) {
          return a2 || va;
        });
        z2("Object.is", function(a2) {
          return a2 ? a2 : function(b2, c2) {
            return b2 === c2 ? b2 !== 0 || 1 / b2 === 1 / c2 : b2 !== b2 && c2 !== c2;
          };
        });
        z2("Array.prototype.includes", function(a2) {
          return a2 ? a2 : function(b2, c2) {
            var d2 = this;
            d2 instanceof String && (d2 = String(d2));
            var e = d2.length;
            c2 = c2 || 0;
            for (0 > c2 && (c2 = Math.max(c2 + e, 0)); c2 < e; c2++) {
              var g2 = d2[c2];
              if (g2 === b2 || Object.is(g2, b2))
                return true;
            }
            return false;
          };
        });
        z2("String.prototype.includes", function(a2) {
          return a2 ? a2 : function(b2, c2) {
            if (this == null)
              throw new TypeError("The 'this' value for String.prototype.includes must not be null or undefined");
            if (b2 instanceof RegExp)
              throw new TypeError("First argument to String.prototype.includes must not be a regular expression");
            return this.indexOf(b2, c2 || 0) !== -1;
          };
        });
        z2("Array.prototype.keys", function(a2) {
          return a2 ? a2 : function() {
            return ua(this, function(b2) {
              return b2;
            });
          };
        });
        var wa = this || self;
        function I2(a2, b2) {
          a2 = a2.split(".");
          var c2 = wa;
          a2[0] in c2 || typeof c2.execScript == "undefined" || c2.execScript("var " + a2[0]);
          for (var d2; a2.length && (d2 = a2.shift()); )
            a2.length || b2 === void 0 ? c2[d2] && c2[d2] !== Object.prototype[d2] ? c2 = c2[d2] : c2 = c2[d2] = {} : c2[d2] = b2;
        }
        ;
        function xa(a2) {
          wa.setTimeout(function() {
            throw a2;
          }, 0);
        }
        ;
        function ya(a2) {
          xa(a2);
          return;
          throw Error("invalid error level: 1");
        }
        function za(a2, b2) {
          ya(Error("Invalid wire type: " + a2 + " (at position " + b2 + ")"));
        }
        function Aa() {
          ya(Error("Failed to read varint, encoding is invalid."));
        }
        ;
        function Ba(a2, b2) {
          b2 = String.fromCharCode.apply(null, b2);
          return a2 == null ? b2 : a2 + b2;
        }
        var Ca, Da = typeof TextDecoder !== "undefined", Ea, Fa = typeof TextEncoder !== "undefined";
        function Ga(a2) {
          if (Fa)
            a2 = (Ea || (Ea = new TextEncoder())).encode(a2);
          else {
            var b2 = void 0;
            b2 = b2 === void 0 ? false : b2;
            for (var c2 = 0, d2 = new Uint8Array(3 * a2.length), e = 0; e < a2.length; e++) {
              var g2 = a2.charCodeAt(e);
              if (128 > g2)
                d2[c2++] = g2;
              else {
                if (2048 > g2)
                  d2[c2++] = g2 >> 6 | 192;
                else {
                  if (55296 <= g2 && 57343 >= g2) {
                    if (56319 >= g2 && e < a2.length) {
                      var f2 = a2.charCodeAt(++e);
                      if (56320 <= f2 && 57343 >= f2) {
                        g2 = 1024 * (g2 - 55296) + f2 - 56320 + 65536;
                        d2[c2++] = g2 >> 18 | 240;
                        d2[c2++] = g2 >> 12 & 63 | 128;
                        d2[c2++] = g2 >> 6 & 63 | 128;
                        d2[c2++] = g2 & 63 | 128;
                        continue;
                      } else
                        e--;
                    }
                    if (b2)
                      throw Error("Found an unpaired surrogate");
                    g2 = 65533;
                  }
                  d2[c2++] = g2 >> 12 | 224;
                  d2[c2++] = g2 >> 6 & 63 | 128;
                }
                d2[c2++] = g2 & 63 | 128;
              }
            }
            a2 = d2.subarray(0, c2);
          }
          return a2;
        }
        ;
        var Ha = {}, Ia = null;
        function Ja(a2) {
          var b2;
          b2 === void 0 && (b2 = 0);
          Ka();
          b2 = Ha[b2];
          for (var c2 = Array(Math.floor(a2.length / 3)), d2 = b2[64] || "", e = 0, g2 = 0; e < a2.length - 2; e += 3) {
            var f2 = a2[e], k2 = a2[e + 1], h2 = a2[e + 2], l2 = b2[f2 >> 2];
            f2 = b2[(f2 & 3) << 4 | k2 >> 4];
            k2 = b2[(k2 & 15) << 2 | h2 >> 6];
            h2 = b2[h2 & 63];
            c2[g2++] = l2 + f2 + k2 + h2;
          }
          l2 = 0;
          h2 = d2;
          switch (a2.length - e) {
            case 2:
              l2 = a2[e + 1], h2 = b2[(l2 & 15) << 2] || d2;
            case 1:
              a2 = a2[e], c2[g2] = b2[a2 >> 2] + b2[(a2 & 3) << 4 | l2 >> 4] + h2 + d2;
          }
          return c2.join("");
        }
        function La(a2) {
          var b2 = a2.length, c2 = 3 * b2 / 4;
          c2 % 3 ? c2 = Math.floor(c2) : "=.".indexOf(a2[b2 - 1]) != -1 && (c2 = "=.".indexOf(a2[b2 - 2]) != -1 ? c2 - 2 : c2 - 1);
          var d2 = new Uint8Array(c2), e = 0;
          Ma(a2, function(g2) {
            d2[e++] = g2;
          });
          return d2.subarray(0, e);
        }
        function Ma(a2, b2) {
          function c2(h2) {
            for (; d2 < a2.length; ) {
              var l2 = a2.charAt(d2++), n2 = Ia[l2];
              if (n2 != null)
                return n2;
              if (!/^[\s\xa0]*$/.test(l2))
                throw Error("Unknown base64 encoding at char: " + l2);
            }
            return h2;
          }
          Ka();
          for (var d2 = 0; ; ) {
            var e = c2(-1), g2 = c2(0), f2 = c2(64), k2 = c2(64);
            if (k2 === 64 && e === -1)
              break;
            b2(e << 2 | g2 >> 4);
            f2 != 64 && (b2(g2 << 4 & 240 | f2 >> 2), k2 != 64 && b2(f2 << 6 & 192 | k2));
          }
        }
        function Ka() {
          if (!Ia) {
            Ia = {};
            for (var a2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""), b2 = ["+/=", "+/", "-_=", "-_.", "-_"], c2 = 0; 5 > c2; c2++) {
              var d2 = a2.concat(b2[c2].split(""));
              Ha[c2] = d2;
              for (var e = 0; e < d2.length; e++) {
                var g2 = d2[e];
                Ia[g2] === void 0 && (Ia[g2] = e);
              }
            }
          }
        }
        ;
        var Na = typeof Uint8Array === "function", Oa;
        function Pa(a2) {
          this.g = a2;
          if (a2 !== null && a2.length === 0)
            throw Error("ByteString should be constructed with non-empty values");
        }
        Pa.prototype.toJSON = function() {
          if (this.g == null)
            var a2 = "";
          else
            a2 = this.g, a2 = this.g = a2 == null || typeof a2 === "string" ? a2 : Na && a2 instanceof Uint8Array ? Ja(a2) : null;
          return a2;
        };
        var Qa = typeof Uint8Array.prototype.slice === "function";
        function Ra(a2, b2, c2) {
          return b2 === c2 ? Oa || (Oa = new Uint8Array(0)) : Qa ? a2.slice(b2, c2) : new Uint8Array(a2.subarray(b2, c2));
        }
        var K2 = 0, L2 = 0;
        function Sa(a2) {
          if (a2.constructor === Uint8Array)
            return a2;
          if (a2.constructor === ArrayBuffer)
            return new Uint8Array(a2);
          if (a2.constructor === Array)
            return new Uint8Array(a2);
          if (a2.constructor === String)
            return La(a2);
          if (a2.constructor === Pa) {
            if (a2.g == null)
              var b2 = Oa || (Oa = new Uint8Array(0));
            else {
              b2 = Uint8Array;
              var c2 = a2.g;
              c2 = c2 == null || Na && c2 != null && c2 instanceof Uint8Array ? c2 : typeof c2 === "string" ? La(c2) : null;
              a2 = a2.g = c2;
              b2 = new b2(a2);
            }
            return b2;
          }
          if (a2 instanceof Uint8Array)
            return new Uint8Array(a2.buffer, a2.byteOffset, a2.byteLength);
          throw Error("Type not convertible to a Uint8Array, expected a Uint8Array, an ArrayBuffer, a base64 encoded string, or Array of numbers");
        }
        ;
        function Ta(a2, b2) {
          b2 = b2 === void 0 ? {} : b2;
          b2 = b2.u === void 0 ? false : b2.u;
          this.h = null;
          this.g = this.i = this.m = 0;
          this.l = false;
          this.u = b2;
          a2 && Ua(this, a2);
        }
        function Ua(a2, b2) {
          a2.h = Sa(b2);
          a2.m = 0;
          a2.i = a2.h.length;
          a2.g = a2.m;
        }
        Ta.prototype.reset = function() {
          this.g = this.m;
        };
        function Va(a2) {
          for (var b2 = 128, c2 = 0, d2 = 0, e = 0; 4 > e && 128 <= b2; e++)
            b2 = a2.h[a2.g++], c2 |= (b2 & 127) << 7 * e;
          128 <= b2 && (b2 = a2.h[a2.g++], c2 |= (b2 & 127) << 28, d2 |= (b2 & 127) >> 4);
          if (128 <= b2)
            for (e = 0; 5 > e && 128 <= b2; e++)
              b2 = a2.h[a2.g++], d2 |= (b2 & 127) << 7 * e + 3;
          if (128 > b2) {
            a2 = c2 >>> 0;
            b2 = d2 >>> 0;
            if (d2 = b2 & 2147483648)
              a2 = ~a2 + 1 >>> 0, b2 = ~b2 >>> 0, a2 == 0 && (b2 = b2 + 1 >>> 0);
            a2 = 4294967296 * b2 + (a2 >>> 0);
            return d2 ? -a2 : a2;
          }
          a2.l = true;
          Aa();
        }
        function M2(a2) {
          a2.g > a2.i && (a2.l = true, ya(Error("Tried to read past the end of the data " + a2.g + " > " + a2.i)));
        }
        Ta.prototype.j = function() {
          var a2 = this.h, b2 = a2[this.g], c2 = b2 & 127;
          if (128 > b2)
            return this.g += 1, M2(this), c2;
          b2 = a2[this.g + 1];
          c2 |= (b2 & 127) << 7;
          if (128 > b2)
            return this.g += 2, M2(this), c2;
          b2 = a2[this.g + 2];
          c2 |= (b2 & 127) << 14;
          if (128 > b2)
            return this.g += 3, M2(this), c2;
          b2 = a2[this.g + 3];
          c2 |= (b2 & 127) << 21;
          if (128 > b2)
            return this.g += 4, M2(this), c2;
          b2 = a2[this.g + 4];
          c2 |= (b2 & 15) << 28;
          if (128 > b2)
            return this.g += 5, M2(this), c2 >>> 0;
          this.g += 5;
          if (128 <= a2[this.g++] && 128 <= a2[this.g++] && 128 <= a2[this.g++] && 128 <= a2[this.g++] && 128 <= a2[this.g++])
            return this.l = true, Aa(), c2;
          M2(this);
          return c2;
        };
        Ta.prototype.o = function() {
          var a2 = this.h[this.g], b2 = this.h[this.g + 1];
          var c2 = this.h[this.g + 2];
          var d2 = this.h[this.g + 3];
          this.g += 4;
          M2(this);
          c2 = (a2 << 0 | b2 << 8 | c2 << 16 | d2 << 24) >>> 0;
          a2 = 2 * (c2 >> 31) + 1;
          b2 = c2 >>> 23 & 255;
          c2 &= 8388607;
          return b2 == 255 ? c2 ? NaN : Infinity * a2 : b2 == 0 ? a2 * Math.pow(2, -149) * c2 : a2 * Math.pow(2, b2 - 150) * (c2 + Math.pow(2, 23));
        };
        var Wa = [];
        function Xa() {
          this.g = new Uint8Array(64);
          this.h = 0;
        }
        function N2(a2, b2) {
          if (!(a2.h + 1 < a2.g.length)) {
            var c2 = a2.g;
            a2.g = new Uint8Array(Math.ceil(1 + 2 * a2.g.length));
            a2.g.set(c2);
          }
          a2.g[a2.h++] = b2;
        }
        Xa.prototype.length = function() {
          return this.h;
        };
        Xa.prototype.end = function() {
          var a2 = this.g, b2 = this.h;
          this.h = 0;
          return Ra(a2, 0, b2);
        };
        function Ya(a2, b2) {
          for (; 127 < b2; )
            N2(a2, b2 & 127 | 128), b2 >>>= 7;
          N2(a2, b2);
        }
        ;
        function Za(a2) {
          var b2 = {}, c2 = b2.N === void 0 ? false : b2.N;
          this.m = { u: b2.u === void 0 ? false : b2.u };
          this.N = c2;
          b2 = this.m;
          Wa.length ? (c2 = Wa.pop(), b2 && (c2.u = b2.u), a2 && Ua(c2, a2), a2 = c2) : a2 = new Ta(a2, b2);
          this.g = a2;
          this.l = this.g.g;
          this.h = this.i = -1;
          this.j = false;
        }
        Za.prototype.reset = function() {
          this.g.reset();
          this.h = this.i = -1;
        };
        function $a(a2) {
          var b2 = a2.g;
          (b2 = b2.g == b2.i) || (b2 = a2.j) || (b2 = a2.g, b2 = b2.l || 0 > b2.g || b2.g > b2.i);
          if (b2)
            return false;
          a2.l = a2.g.g;
          var c2 = a2.g.j();
          b2 = c2 >>> 3;
          c2 &= 7;
          if (!(0 <= c2 && 5 >= c2))
            return a2.j = true, za(c2, a2.l), false;
          a2.i = b2;
          a2.h = c2;
          return true;
        }
        function ab(a2) {
          switch (a2.h) {
            case 0:
              if (a2.h != 0)
                ab(a2);
              else
                a: {
                  a2 = a2.g;
                  for (var b2 = a2.g, c2 = 0; 10 > c2; c2++) {
                    if ((a2.h[b2] & 128) === 0) {
                      a2.g = b2 + 1;
                      M2(a2);
                      break a;
                    }
                    b2++;
                  }
                  a2.l = true;
                  Aa();
                }
              break;
            case 1:
              a2 = a2.g;
              a2.g += 8;
              M2(a2);
              break;
            case 2:
              a2.h != 2 ? ab(a2) : (b2 = a2.g.j(), a2 = a2.g, a2.g += b2, M2(a2));
              break;
            case 5:
              a2 = a2.g;
              a2.g += 4;
              M2(a2);
              break;
            case 3:
              b2 = a2.i;
              do {
                if (!$a(a2)) {
                  a2.j = true;
                  ya(Error("Unmatched start-group tag: stream EOF"));
                  break;
                }
                if (a2.h == 4) {
                  a2.i != b2 && (a2.j = true, ya(Error("Unmatched end-group tag")));
                  break;
                }
                ab(a2);
              } while (1);
              break;
            default:
              a2.j = true, za(a2.h, a2.l);
          }
        }
        function bb3(a2, b2, c2) {
          a2.N || (a2 = Ra(a2.g.h, c2, a2.g.g), (c2 = b2.o) ? c2.push(a2) : b2.o = [a2]);
        }
        function cb(a2, b2, c2) {
          var d2 = a2.g.i, e = a2.g.j(), g2 = a2.g.g + e;
          a2.g.i = g2;
          c2(b2, a2);
          c2 = g2 - a2.g.g;
          if (c2 !== 0)
            throw Error("Message parsing ended unexpectedly. Expected to read " + (e + " bytes, instead read " + (e - c2) + " bytes, either the data ended unexpectedly or the message misreported its own length"));
          a2.g.g = g2;
          a2.g.i = d2;
          return b2;
        }
        function db(a2, b2, c2) {
          var d2 = a2.g.j();
          for (d2 = a2.g.g + d2; a2.g.g < d2; )
            c2.push(b2.call(a2.g));
        }
        var eb = [];
        function fb() {
          this.h = [];
          this.i = 0;
          this.g = new Xa();
        }
        function gb(a2, b2) {
          b2.length !== 0 && (a2.h.push(b2), a2.i += b2.length);
        }
        function hb(a2, b2, c2) {
          Ya(a2.g, 8 * b2 + 2);
          Ya(a2.g, c2.length);
          gb(a2, a2.g.end());
          gb(a2, c2);
        }
        ;
        var ib = typeof Symbol === "function" && typeof Symbol() === "symbol" ? Symbol(void 0) : void 0;
        function jb(a2, b2) {
          Object.isFrozen(a2) || (ib ? a2[ib] |= b2 : a2.g !== void 0 ? a2.g |= b2 : Object.defineProperties(a2, { g: { value: b2, configurable: true, writable: true, enumerable: false } }));
        }
        function kb(a2) {
          if (!a2)
            return 0;
          var b2;
          ib ? b2 = a2[ib] : b2 = a2.g;
          return b2 == null ? 0 : b2;
        }
        function lb(a2) {
          if (!Array.isArray(a2))
            return a2;
          jb(a2, 1);
          return a2;
        }
        function mb(a2) {
          if (!Array.isArray(a2))
            throw Error("cannot mark non-array as immutable");
          jb(a2, 2);
        }
        ;
        function nb(a2) {
          return a2 !== null && typeof a2 === "object" && a2.constructor === Object;
        }
        function ob(a2) {
          switch (typeof a2) {
            case "number":
              return isFinite(a2) ? a2 : String(a2);
            case "object":
              return Na && a2 != null && a2 instanceof Uint8Array ? Ja(a2) : a2;
            default:
              return a2;
          }
        }
        ;
        function pb(a2, b2) {
          if (a2 != null)
            return Array.isArray(a2) || nb(a2) ? qb(a2, b2) : b2(a2);
        }
        function qb(a2, b2) {
          if (Array.isArray(a2)) {
            for (var c2 = Array(a2.length), d2 = 0; d2 < a2.length; d2++)
              c2[d2] = pb(a2[d2], b2);
            kb(a2) & 1 && lb(c2);
            return c2;
          }
          c2 = {};
          for (d2 in a2)
            c2[d2] = pb(a2[d2], b2);
          return c2;
        }
        ;
        var rb;
        function O2(a2, b2, c2) {
          var d2 = rb;
          rb = null;
          a2 || (a2 = d2);
          d2 = this.constructor.ba;
          a2 || (a2 = d2 ? [d2] : []);
          this.j = (d2 ? 0 : -1) - (this.constructor.$ || 0);
          this.m = this.g = null;
          this.h = a2;
          a: {
            d2 = this.h.length;
            a2 = d2 - 1;
            if (d2 && (d2 = this.h[a2], nb(d2))) {
              this.l = a2 - this.j;
              this.i = d2;
              break a;
            }
            b2 !== void 0 && -1 < b2 ? (this.l = Math.max(b2, a2 + 1 - this.j), this.i = null) : this.l = Number.MAX_VALUE;
          }
          if (c2)
            for (b2 = 0; b2 < c2.length; b2++)
              a2 = c2[b2], a2 < this.l ? (a2 += this.j, (d2 = this.h[a2]) ? lb(d2) : this.h[a2] = sb) : (tb(this), (d2 = this.i[a2]) ? lb(d2) : this.i[a2] = sb);
        }
        var sb = Object.freeze(lb([]));
        function tb(a2) {
          var b2 = a2.l + a2.j;
          a2.h[b2] || (a2.i = a2.h[b2] = {});
        }
        function P2(a2, b2, c2) {
          return b2 === -1 ? null : (c2 === void 0 ? 0 : c2) || b2 >= a2.l ? a2.i ? a2.i[b2] : void 0 : a2.h[b2 + a2.j];
        }
        function ub(a2, b2, c2) {
          c2 = c2 === void 0 ? true : c2;
          var d2 = d2 === void 0 ? false : d2;
          var e = P2(a2, b2, d2);
          e == null && (e = sb);
          e === sb ? (e = lb([]), Q2(a2, b2, e, d2)) : c2 && Array.isArray(e) && kb(e) & 2 && (e = e.slice(), Q2(a2, b2, e, d2));
          return e;
        }
        function vb(a2) {
          var b2 = ub(a2, 3, false);
          a2.m || (a2.m = {});
          if (!a2.m[3]) {
            for (var c2 = 0; c2 < b2.length; c2++)
              b2[c2] = +b2[c2];
            a2.m[3] = true;
          }
          return b2;
        }
        function R2(a2, b2, c2) {
          a2 = P2(a2, b2);
          return a2 == null ? c2 : a2;
        }
        function S2(a2, b2, c2) {
          a2 = P2(a2, b2);
          a2 = a2 == null ? a2 : +a2;
          return a2 == null ? c2 === void 0 ? 0 : c2 : a2;
        }
        function Q2(a2, b2, c2, d2) {
          (d2 === void 0 ? 0 : d2) || b2 >= a2.l ? (tb(a2), a2.i[b2] = c2) : a2.h[b2 + a2.j] = c2;
        }
        function wb(a2, b2, c2) {
          if (c2 === -1)
            return null;
          a2.g || (a2.g = {});
          var d2 = a2.g[c2];
          if (d2)
            return d2;
          var e = P2(a2, c2, false);
          if (e == null)
            return d2;
          b2 = new b2(e);
          return a2.g[c2] = b2;
        }
        function xb(a2, b2, c2) {
          a2.g || (a2.g = {});
          var d2 = a2.g[c2];
          if (!d2) {
            var e = ub(a2, c2, false);
            d2 = [];
            for (var g2 = Array.isArray(e) ? !!(kb(e) & 2) : false, f2 = 0; f2 < e.length; f2++)
              d2[f2] = new b2(e[f2]), g2 && mb(d2[f2].h);
            g2 && (mb(d2), Object.freeze(d2));
            a2.g[c2] = d2;
          }
          return d2;
        }
        function yb(a2, b2, c2, d2, e) {
          var g2 = xb(a2, d2, b2);
          c2 = c2 ? c2 : new d2();
          a2 = ub(a2, b2);
          e != void 0 ? (g2.splice(e, 0, c2), a2.splice(e, 0, T2(c2))) : (g2.push(c2), a2.push(T2(c2)));
        }
        O2.prototype.toJSON = function() {
          var a2 = T2(this);
          return qb(a2, ob);
        };
        function T2(a2) {
          if (a2.g)
            for (var b2 in a2.g) {
              var c2 = a2.g[b2];
              if (Array.isArray(c2))
                for (var d2 = 0; d2 < c2.length; d2++)
                  c2[d2] && T2(c2[d2]);
              else
                c2 && T2(c2);
            }
          return a2.h;
        }
        O2.prototype.toString = function() {
          return T2(this).toString();
        };
        function zb(a2, b2) {
          if (a2 = a2.o) {
            gb(b2, b2.g.end());
            for (var c2 = 0; c2 < a2.length; c2++)
              gb(b2, a2[c2]);
          }
        }
        function Ab(a2) {
          var b2 = a2[0];
          switch (a2.length) {
            case 2:
              var c2 = a2[1];
              return function(h2, l2, n2) {
                return b2(h2, l2, n2, c2);
              };
            case 3:
              var d2 = a2[1], e = a2[2];
              return function(h2, l2, n2) {
                return b2(h2, l2, n2, d2, e);
              };
            case 4:
              var g2 = a2[1], f2 = a2[2], k2 = a2[3];
              return function(h2, l2, n2) {
                return b2(h2, l2, n2, g2, f2, k2);
              };
            default:
              throw Error("unsupported number of parameters, expected [2-4], got " + a2.length);
          }
        }
        function U2(a2, b2, c2) {
          for (; $a(b2) && b2.h != 4; ) {
            var d2 = b2.i, e = c2[d2];
            if (e) {
              if (Array.isArray(e) && (e = c2[d2] = Ab(e)), !e(b2, a2, d2)) {
                d2 = b2;
                e = a2;
                var g2 = d2.l;
                ab(d2);
                bb3(d2, e, g2);
              }
            } else
              d2 = b2, e = a2, g2 = d2.l, ab(d2), bb3(d2, e, g2);
          }
          return a2;
        }
        function Bb(a2, b2) {
          var c2 = new fb();
          b2(a2, c2);
          a2 = c2.i + c2.g.length();
          if (a2 === 0)
            c2 = new Uint8Array(0);
          else {
            a2 = new Uint8Array(a2);
            for (var d2 = c2.h, e = d2.length, g2 = b2 = 0; g2 < e; g2++) {
              var f2 = d2[g2];
              f2.length !== 0 && (a2.set(f2, b2), b2 += f2.length);
            }
            d2 = c2.g;
            e = d2.h;
            e !== 0 && (a2.set(d2.g.subarray(0, e), b2), d2.h = 0);
            c2.h = [a2];
            c2 = a2;
          }
          return c2;
        }
        function Cb(a2, b2, c2) {
          if (eb.length) {
            var d2 = eb.pop();
            a2 && (Ua(d2.g, a2), d2.i = -1, d2.h = -1);
            a2 = d2;
          } else
            a2 = new Za(a2);
          try {
            return c2(new b2(), a2);
          } finally {
            b2 = a2.g, b2.h = null, b2.m = 0, b2.i = 0, b2.g = 0, b2.l = false, b2.u = false, a2.i = -1, a2.h = -1, a2.j = false, 100 > eb.length && eb.push(a2);
          }
        }
        function W2(a2, b2, c2) {
          b2 = P2(b2, c2);
          if (b2 != null) {
            Ya(a2.g, 8 * c2 + 5);
            a2 = a2.g;
            var d2 = b2;
            d2 = (c2 = 0 > d2 ? 1 : 0) ? -d2 : d2;
            d2 === 0 ? 0 < 1 / d2 ? K2 = L2 = 0 : (L2 = 0, K2 = 2147483648) : isNaN(d2) ? (L2 = 0, K2 = 2147483647) : 34028234663852886e22 < d2 ? (L2 = 0, K2 = (c2 << 31 | 2139095040) >>> 0) : 11754943508222875e-54 > d2 ? (d2 = Math.round(d2 / Math.pow(2, -149)), L2 = 0, K2 = (c2 << 31 | d2) >>> 0) : (b2 = Math.floor(Math.log(d2) / Math.LN2), d2 *= Math.pow(2, -b2), d2 = Math.round(8388608 * d2), 16777216 <= d2 && ++b2, L2 = 0, K2 = (c2 << 31 | b2 + 127 << 23 | d2 & 8388607) >>> 0);
            c2 = K2;
            N2(a2, c2 >>> 0 & 255);
            N2(a2, c2 >>> 8 & 255);
            N2(a2, c2 >>> 16 & 255);
            N2(a2, c2 >>> 24 & 255);
          }
        }
        function X2(a2, b2, c2) {
          if (a2.h !== 5)
            return false;
          Q2(b2, c2, a2.g.o());
          return true;
        }
        function Db(a2, b2, c2) {
          if (a2.h !== 5 && a2.h !== 2)
            return false;
          b2 = ub(b2, c2);
          a2.h == 2 ? db(a2, Ta.prototype.o, b2) : b2.push(a2.g.o());
          return true;
        }
        function Eb(a2, b2, c2) {
          if (a2.h !== 0)
            return false;
          Q2(b2, c2, Va(a2.g));
          return true;
        }
        function Fb(a2, b2, c2) {
          if (a2.h !== 0)
            return false;
          Q2(b2, c2, a2.g.j());
          return true;
        }
        function Gb(a2, b2, c2) {
          if (a2.h !== 2)
            return false;
          var d2 = a2.g.j();
          a2 = a2.g;
          var e = a2.g;
          a2.g += d2;
          M2(a2);
          a2 = a2.h;
          var g2;
          if (Da)
            (g2 = Ca) || (g2 = Ca = new TextDecoder("utf-8", { fatal: false })), g2 = g2.decode(a2.subarray(e, e + d2));
          else {
            d2 = e + d2;
            for (var f2 = [], k2 = null, h2, l2, n2; e < d2; )
              h2 = a2[e++], 128 > h2 ? f2.push(h2) : 224 > h2 ? e >= d2 ? f2.push(65533) : (l2 = a2[e++], 194 > h2 || (l2 & 192) !== 128 ? (e--, f2.push(65533)) : f2.push((h2 & 31) << 6 | l2 & 63)) : 240 > h2 ? e >= d2 - 1 ? f2.push(65533) : (l2 = a2[e++], (l2 & 192) !== 128 || h2 === 224 && 160 > l2 || h2 === 237 && 160 <= l2 || ((g2 = a2[e++]) & 192) !== 128 ? (e--, f2.push(65533)) : f2.push((h2 & 15) << 12 | (l2 & 63) << 6 | g2 & 63)) : 244 >= h2 ? e >= d2 - 2 ? f2.push(65533) : (l2 = a2[e++], (l2 & 192) !== 128 || (h2 << 28) + (l2 - 144) >> 30 !== 0 || ((g2 = a2[e++]) & 192) !== 128 || ((n2 = a2[e++]) & 192) !== 128 ? (e--, f2.push(65533)) : (h2 = (h2 & 7) << 18 | (l2 & 63) << 12 | (g2 & 63) << 6 | n2 & 63, h2 -= 65536, f2.push((h2 >> 10 & 1023) + 55296, (h2 & 1023) + 56320))) : f2.push(65533), 8192 <= f2.length && (k2 = Ba(k2, f2), f2.length = 0);
            g2 = Ba(k2, f2);
          }
          Q2(b2, c2, g2);
          return true;
        }
        function Hb(a2, b2, c2, d2, e) {
          if (a2.h !== 2)
            return false;
          a2 = cb(a2, new d2(), e);
          var g2 = g2 === void 0 ? false : g2;
          b2.g || (b2.g = {});
          d2 = a2 ? T2(a2) : a2;
          b2.g[c2] = a2;
          Q2(b2, c2, d2, g2);
          return true;
        }
        function Ib(a2, b2, c2, d2, e) {
          if (a2.h !== 2)
            return false;
          a2 = cb(a2, new d2(), e);
          yb(b2, c2, a2, d2, void 0);
          return true;
        }
        function Jb(a2, b2, c2) {
          if (a2.h !== 0 && a2.h !== 2)
            return false;
          b2 = ub(b2, c2);
          a2.h == 2 ? db(a2, Ta.prototype.j, b2) : b2.push(a2.g.j());
          return true;
        }
        function Kb(a2, b2, c2) {
          if (a2.h !== 0)
            return false;
          Q2(b2, c2, Va(a2.g));
          return true;
        }
        ;
        function Y2(a2) {
          O2.call(this, a2, -1, Lb);
        }
        var Mb;
        E2(Y2, O2);
        Y2.prototype.getRows = function() {
          return P2(this, 1);
        };
        Y2.prototype.getCols = function() {
          return P2(this, 2);
        };
        Y2.prototype.getPackedDataList = function() {
          return vb(this);
        };
        Y2.prototype.getLayout = function() {
          return R2(this, 4, 0);
        };
        function Nb(a2, b2) {
          return U2(a2, b2, Mb || (Mb = { 1: Fb, 2: Fb, 3: Db, 4: Kb }));
        }
        var Lb = [3];
        function Ob(a2) {
          O2.call(this, a2);
        }
        var Pb;
        E2(Ob, O2);
        function Qb(a2, b2) {
          var c2 = P2(a2, 1);
          if (c2 != null && c2 != null) {
            Ya(b2.g, 8);
            var d2 = b2.g;
            if (0 <= c2)
              Ya(d2, c2);
            else {
              for (var e = 0; 9 > e; e++)
                N2(d2, c2 & 127 | 128), c2 >>= 7;
              N2(d2, 1);
            }
          }
          W2(b2, a2, 2);
          d2 = P2(a2, 3);
          d2 != null && hb(b2, 3, Ga(d2));
          d2 = P2(a2, 4);
          d2 != null && hb(b2, 4, Ga(d2));
          zb(a2, b2);
        }
        function Rb(a2, b2) {
          return U2(a2, b2, Pb || (Pb = { 1: Fb, 2: X2, 3: Gb, 4: Gb }));
        }
        ;
        function Sb(a2) {
          O2.call(this, a2, -1, Tb);
        }
        var Ub;
        E2(Sb, O2);
        Sb.prototype.addClassification = function(a2, b2) {
          yb(this, 1, a2, Ob, b2);
          return this;
        };
        function Vb(a2, b2) {
          return U2(a2, b2, Ub || (Ub = { 1: [Ib, Ob, Rb] }));
        }
        var Tb = [1];
        function Wb(a2) {
          O2.call(this, a2);
        }
        var Xb;
        E2(Wb, O2);
        function Yb(a2, b2) {
          W2(b2, a2, 1);
          W2(b2, a2, 2);
          W2(b2, a2, 3);
          W2(b2, a2, 4);
          W2(b2, a2, 5);
          zb(a2, b2);
        }
        function Zb(a2, b2) {
          return U2(a2, b2, Xb || (Xb = { 1: X2, 2: X2, 3: X2, 4: X2, 5: X2 }));
        }
        ;
        function $b(a2) {
          O2.call(this, a2, -1, ac);
        }
        var bc;
        E2($b, O2);
        function cc(a2, b2) {
          return U2(a2, b2, bc || (bc = { 1: [Ib, Wb, Zb] }));
        }
        var ac = [1];
        function dc(a2) {
          O2.call(this, a2);
        }
        var ec;
        E2(dc, O2);
        function fc(a2, b2) {
          W2(b2, a2, 1);
          W2(b2, a2, 2);
          W2(b2, a2, 3);
          W2(b2, a2, 4);
          W2(b2, a2, 5);
          var c2 = P2(a2, 6);
          if (c2 != null && c2 != null) {
            Ya(b2.g, 48);
            var d2 = b2.g, e = c2;
            c2 = 0 > e;
            e = Math.abs(e);
            var g2 = e >>> 0;
            e = Math.floor((e - g2) / 4294967296);
            e >>>= 0;
            c2 && (e = ~e >>> 0, g2 = (~g2 >>> 0) + 1, 4294967295 < g2 && (g2 = 0, e++, 4294967295 < e && (e = 0)));
            K2 = g2;
            L2 = e;
            c2 = K2;
            for (g2 = L2; 0 < g2 || 127 < c2; )
              N2(d2, c2 & 127 | 128), c2 = (c2 >>> 7 | g2 << 25) >>> 0, g2 >>>= 7;
            N2(d2, c2);
          }
          zb(a2, b2);
        }
        function gc(a2, b2) {
          return U2(a2, b2, ec || (ec = { 1: X2, 2: X2, 3: X2, 4: X2, 5: X2, 6: Eb }));
        }
        ;
        function Z2(a2) {
          O2.call(this, a2, -1, hc);
        }
        var ic;
        E2(Z2, O2);
        Z2.prototype.getVertexType = function() {
          return R2(this, 1, 0);
        };
        Z2.prototype.getPrimitiveType = function() {
          return R2(this, 2, 0);
        };
        Z2.prototype.getVertexBufferList = function() {
          return vb(this);
        };
        Z2.prototype.getIndexBufferList = function() {
          return ub(this, 4);
        };
        function jc(a2, b2) {
          return U2(a2, b2, ic || (ic = { 1: Kb, 2: Kb, 3: Db, 4: Jb }));
        }
        var hc = [3, 4];
        function kc(a2) {
          O2.call(this, a2);
        }
        var lc;
        E2(kc, O2);
        kc.prototype.getMesh = function() {
          return wb(this, Z2, 1);
        };
        kc.prototype.getPoseTransformMatrix = function() {
          return wb(this, Y2, 2);
        };
        function mc(a2, b2) {
          return U2(a2, b2, lc || (lc = { 1: [Hb, Z2, jc], 2: [Hb, Y2, Nb] }));
        }
        ;
        var nc = [[61, 146], [146, 91], [91, 181], [181, 84], [84, 17], [17, 314], [314, 405], [405, 321], [321, 375], [375, 291], [61, 185], [185, 40], [40, 39], [39, 37], [37, 0], [0, 267], [267, 269], [269, 270], [270, 409], [409, 291], [78, 95], [95, 88], [88, 178], [178, 87], [87, 14], [14, 317], [317, 402], [402, 318], [318, 324], [324, 308], [78, 191], [191, 80], [80, 81], [81, 82], [82, 13], [13, 312], [312, 311], [311, 310], [310, 415], [415, 308]], oc = [[263, 249], [249, 390], [390, 373], [373, 374], [374, 380], [380, 381], [381, 382], [382, 362], [263, 466], [466, 388], [388, 387], [387, 386], [
          386,
          385
        ], [385, 384], [384, 398], [398, 362]], pc = [[276, 283], [283, 282], [282, 295], [295, 285], [300, 293], [293, 334], [334, 296], [296, 336]], qc = [[33, 7], [7, 163], [163, 144], [144, 145], [145, 153], [153, 154], [154, 155], [155, 133], [33, 246], [246, 161], [161, 160], [160, 159], [159, 158], [158, 157], [157, 173], [173, 133]], rc = [[46, 53], [53, 52], [52, 65], [65, 55], [70, 63], [63, 105], [105, 66], [66, 107]], sc = [
          [10, 338],
          [338, 297],
          [297, 332],
          [332, 284],
          [284, 251],
          [251, 389],
          [389, 356],
          [356, 454],
          [454, 323],
          [323, 361],
          [361, 288],
          [288, 397],
          [397, 365],
          [365, 379],
          [379, 378],
          [378, 400],
          [400, 377],
          [377, 152],
          [152, 148],
          [148, 176],
          [176, 149],
          [149, 150],
          [150, 136],
          [136, 172],
          [172, 58],
          [58, 132],
          [132, 93],
          [93, 234],
          [234, 127],
          [127, 162],
          [162, 21],
          [21, 54],
          [54, 103],
          [103, 67],
          [67, 109],
          [109, 10]
        ], tc = [].concat(D2(nc), D2(oc), D2(pc), D2(qc), D2(rc), D2(sc));
        function uc(a2, b2, c2) {
          c2 = a2.createShader(c2 === 0 ? a2.VERTEX_SHADER : a2.FRAGMENT_SHADER);
          a2.shaderSource(c2, b2);
          a2.compileShader(c2);
          if (!a2.getShaderParameter(c2, a2.COMPILE_STATUS))
            throw Error("Could not compile WebGL shader.\n\n" + a2.getShaderInfoLog(c2));
          return c2;
        }
        ;
        function vc(a2) {
          return xb(a2, Ob, 1).map(function(b2) {
            return { index: R2(b2, 1, 0), score: S2(b2, 2), label: P2(b2, 3) != null ? R2(b2, 3, "") : void 0, displayName: P2(b2, 4) != null ? R2(b2, 4, "") : void 0 };
          });
        }
        ;
        function wc(a2) {
          return { x: S2(a2, 1), y: S2(a2, 2), z: S2(a2, 3), visibility: P2(a2, 4) != null ? S2(a2, 4) : void 0 };
        }
        function xc(a2) {
          return xb(Cb(a2, $b, cc), Wb, 1).map(wc);
        }
        ;
        function yc(a2, b2) {
          this.h = a2;
          this.g = b2;
          this.l = 0;
        }
        function zc(a2, b2, c2) {
          Ac(a2, b2);
          if (typeof a2.g.canvas.transferToImageBitmap === "function")
            return Promise.resolve(a2.g.canvas.transferToImageBitmap());
          if (c2)
            return Promise.resolve(a2.g.canvas);
          if (typeof createImageBitmap === "function")
            return createImageBitmap(a2.g.canvas);
          a2.i === void 0 && (a2.i = document.createElement("canvas"));
          return new Promise(function(d2) {
            a2.i.height = a2.g.canvas.height;
            a2.i.width = a2.g.canvas.width;
            a2.i.getContext("2d", {}).drawImage(a2.g.canvas, 0, 0, a2.g.canvas.width, a2.g.canvas.height);
            d2(a2.i);
          });
        }
        function Ac(a2, b2) {
          var c2 = a2.g;
          if (a2.m === void 0) {
            var d2 = uc(c2, "\n  attribute vec2 aVertex;\n  attribute vec2 aTex;\n  varying vec2 vTex;\n  void main(void) {\n    gl_Position = vec4(aVertex, 0.0, 1.0);\n    vTex = aTex;\n  }", 0), e = uc(c2, "\n  precision mediump float;\n  varying vec2 vTex;\n  uniform sampler2D sampler0;\n  void main(){\n    gl_FragColor = texture2D(sampler0, vTex);\n  }", 1), g2 = c2.createProgram();
            c2.attachShader(g2, d2);
            c2.attachShader(g2, e);
            c2.linkProgram(g2);
            if (!c2.getProgramParameter(g2, c2.LINK_STATUS))
              throw Error("Could not compile WebGL program.\n\n" + c2.getProgramInfoLog(g2));
            d2 = a2.m = g2;
            c2.useProgram(d2);
            e = c2.getUniformLocation(d2, "sampler0");
            a2.j = { I: c2.getAttribLocation(d2, "aVertex"), H: c2.getAttribLocation(d2, "aTex"), ca: e };
            a2.s = c2.createBuffer();
            c2.bindBuffer(c2.ARRAY_BUFFER, a2.s);
            c2.enableVertexAttribArray(a2.j.I);
            c2.vertexAttribPointer(a2.j.I, 2, c2.FLOAT, false, 0, 0);
            c2.bufferData(c2.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]), c2.STATIC_DRAW);
            c2.bindBuffer(c2.ARRAY_BUFFER, null);
            a2.o = c2.createBuffer();
            c2.bindBuffer(c2.ARRAY_BUFFER, a2.o);
            c2.enableVertexAttribArray(a2.j.H);
            c2.vertexAttribPointer(a2.j.H, 2, c2.FLOAT, false, 0, 0);
            c2.bufferData(c2.ARRAY_BUFFER, new Float32Array([0, 1, 0, 0, 1, 0, 1, 1]), c2.STATIC_DRAW);
            c2.bindBuffer(c2.ARRAY_BUFFER, null);
            c2.uniform1i(e, 0);
          }
          d2 = a2.j;
          c2.useProgram(a2.m);
          c2.canvas.width = b2.width;
          c2.canvas.height = b2.height;
          c2.viewport(0, 0, b2.width, b2.height);
          c2.activeTexture(c2.TEXTURE0);
          a2.h.bindTexture2d(b2.glName);
          c2.enableVertexAttribArray(d2.I);
          c2.bindBuffer(c2.ARRAY_BUFFER, a2.s);
          c2.vertexAttribPointer(d2.I, 2, c2.FLOAT, false, 0, 0);
          c2.enableVertexAttribArray(d2.H);
          c2.bindBuffer(c2.ARRAY_BUFFER, a2.o);
          c2.vertexAttribPointer(d2.H, 2, c2.FLOAT, false, 0, 0);
          c2.bindFramebuffer(c2.DRAW_FRAMEBUFFER ? c2.DRAW_FRAMEBUFFER : c2.FRAMEBUFFER, null);
          c2.clearColor(0, 0, 0, 0);
          c2.clear(c2.COLOR_BUFFER_BIT);
          c2.colorMask(true, true, true, true);
          c2.drawArrays(c2.TRIANGLE_FAN, 0, 4);
          c2.disableVertexAttribArray(d2.I);
          c2.disableVertexAttribArray(d2.H);
          c2.bindBuffer(c2.ARRAY_BUFFER, null);
          a2.h.bindTexture2d(0);
        }
        function Bc(a2) {
          this.g = a2;
        }
        ;
        var Cc = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 253, 15, 26, 11]);
        function Dc(a2, b2) {
          return b2 + a2;
        }
        function Ec(a2, b2) {
          window[a2] = b2;
        }
        function Fc(a2) {
          var b2 = document.createElement("script");
          b2.setAttribute("src", a2);
          b2.setAttribute("crossorigin", "anonymous");
          return new Promise(function(c2) {
            b2.addEventListener("load", function() {
              c2();
            }, false);
            b2.addEventListener("error", function() {
              c2();
            }, false);
            document.body.appendChild(b2);
          });
        }
        function Gc() {
          return H2(function(a2) {
            switch (a2.g) {
              case 1:
                return a2.m = 2, F2(a2, WebAssembly.instantiate(Cc), 4);
              case 4:
                a2.g = 3;
                a2.m = 0;
                break;
              case 2:
                return a2.m = 0, a2.j = null, a2.return(false);
              case 3:
                return a2.return(true);
            }
          });
        }
        function Hc(a2) {
          this.g = a2;
          this.listeners = {};
          this.j = {};
          this.F = {};
          this.m = {};
          this.s = {};
          this.G = this.o = this.R = true;
          this.C = Promise.resolve();
          this.P = "";
          this.B = {};
          this.locateFile = a2 && a2.locateFile || Dc;
          if (typeof window === "object")
            var b2 = window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf("/")) + "/";
          else if (typeof location !== "undefined")
            b2 = location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf("/")) + "/";
          else
            throw Error("solutions can only be loaded on a web page or in a web worker");
          this.S = b2;
          if (a2.options) {
            b2 = B2(Object.keys(a2.options));
            for (var c2 = b2.next(); !c2.done; c2 = b2.next()) {
              c2 = c2.value;
              var d2 = a2.options[c2].default;
              d2 !== void 0 && (this.j[c2] = typeof d2 === "function" ? d2() : d2);
            }
          }
        }
        x2 = Hc.prototype;
        x2.close = function() {
          this.i && this.i.delete();
          return Promise.resolve();
        };
        function Ic(a2) {
          var b2, c2, d2, e, g2, f2, k2, h2, l2, n2, r2;
          return H2(function(p3) {
            switch (p3.g) {
              case 1:
                if (!a2.R)
                  return p3.return();
                b2 = a2.g.files === void 0 ? [] : typeof a2.g.files === "function" ? a2.g.files(a2.j) : a2.g.files;
                return F2(p3, Gc(), 2);
              case 2:
                c2 = p3.h;
                if (typeof window === "object")
                  return Ec("createMediapipeSolutionsWasm", { locateFile: a2.locateFile }), Ec("createMediapipeSolutionsPackedAssets", { locateFile: a2.locateFile }), f2 = b2.filter(function(m2) {
                    return m2.data !== void 0;
                  }), k2 = b2.filter(function(m2) {
                    return m2.data === void 0;
                  }), h2 = Promise.all(f2.map(function(m2) {
                    var q3 = Jc(a2, m2.url);
                    if (m2.path !== void 0) {
                      var t = m2.path;
                      q3 = q3.then(function(w2) {
                        a2.overrideFile(t, w2);
                        return Promise.resolve(w2);
                      });
                    }
                    return q3;
                  })), l2 = Promise.all(k2.map(function(m2) {
                    return m2.simd === void 0 || m2.simd && c2 || !m2.simd && !c2 ? Fc(a2.locateFile(m2.url, a2.S)) : Promise.resolve();
                  })).then(function() {
                    var m2, q3, t;
                    return H2(function(w2) {
                      if (w2.g == 1)
                        return m2 = window.createMediapipeSolutionsWasm, q3 = window.createMediapipeSolutionsPackedAssets, t = a2, F2(w2, m2(q3), 2);
                      t.h = w2.h;
                      w2.g = 0;
                    });
                  }), n2 = function() {
                    return H2(function(m2) {
                      a2.g.graph && a2.g.graph.url ? m2 = F2(m2, Jc(a2, a2.g.graph.url), 0) : (m2.g = 0, m2 = void 0);
                      return m2;
                    });
                  }(), F2(p3, Promise.all([l2, h2, n2]), 7);
                if (typeof importScripts !== "function")
                  throw Error("solutions can only be loaded on a web page or in a web worker");
                d2 = b2.filter(function(m2) {
                  return m2.simd === void 0 || m2.simd && c2 || !m2.simd && !c2;
                }).map(function(m2) {
                  return a2.locateFile(m2.url, a2.S);
                });
                importScripts.apply(null, D2(d2));
                e = a2;
                return F2(p3, createMediapipeSolutionsWasm(Module), 6);
              case 6:
                e.h = p3.h;
                a2.l = new OffscreenCanvas(1, 1);
                a2.h.canvas = a2.l;
                g2 = a2.h.GL.createContext(a2.l, {
                  antialias: false,
                  alpha: false,
                  aa: typeof WebGL2RenderingContext !== "undefined" ? 2 : 1
                });
                a2.h.GL.makeContextCurrent(g2);
                p3.g = 4;
                break;
              case 7:
                a2.l = document.createElement("canvas");
                r2 = a2.l.getContext("webgl2", {});
                if (!r2 && (r2 = a2.l.getContext("webgl", {}), !r2))
                  return alert("Failed to create WebGL canvas context when passing video frame."), p3.return();
                a2.D = r2;
                a2.h.canvas = a2.l;
                a2.h.createContext(a2.l, true, true, {});
              case 4:
                a2.i = new a2.h.SolutionWasm(), a2.R = false, p3.g = 0;
            }
          });
        }
        function Kc(a2) {
          var b2, c2, d2, e, g2, f2, k2, h2;
          return H2(function(l2) {
            if (l2.g == 1) {
              if (a2.g.graph && a2.g.graph.url && a2.P === a2.g.graph.url)
                return l2.return();
              a2.o = true;
              if (!a2.g.graph || !a2.g.graph.url) {
                l2.g = 2;
                return;
              }
              a2.P = a2.g.graph.url;
              return F2(l2, Jc(a2, a2.g.graph.url), 3);
            }
            l2.g != 2 && (b2 = l2.h, a2.i.loadGraph(b2));
            c2 = B2(Object.keys(a2.B));
            for (d2 = c2.next(); !d2.done; d2 = c2.next())
              e = d2.value, a2.i.overrideFile(e, a2.B[e]);
            a2.B = {};
            if (a2.g.listeners)
              for (g2 = B2(a2.g.listeners), f2 = g2.next(); !f2.done; f2 = g2.next())
                k2 = f2.value, Lc(a2, k2);
            h2 = a2.j;
            a2.j = {};
            a2.setOptions(h2);
            l2.g = 0;
          });
        }
        x2.reset = function() {
          var a2 = this;
          return H2(function(b2) {
            a2.i && (a2.i.reset(), a2.m = {}, a2.s = {});
            b2.g = 0;
          });
        };
        x2.setOptions = function(a2, b2) {
          var c2 = this;
          if (b2 = b2 || this.g.options) {
            for (var d2 = [], e = [], g2 = {}, f2 = B2(Object.keys(a2)), k2 = f2.next(); !k2.done; g2 = { K: g2.K, L: g2.L }, k2 = f2.next()) {
              var h2 = k2.value;
              h2 in this.j && this.j[h2] === a2[h2] || (this.j[h2] = a2[h2], k2 = b2[h2], k2 !== void 0 && (k2.onChange && (g2.K = k2.onChange, g2.L = a2[h2], d2.push(function(l2) {
                return function() {
                  var n2;
                  return H2(function(r2) {
                    if (r2.g == 1)
                      return F2(r2, l2.K(l2.L), 2);
                    n2 = r2.h;
                    n2 === true && (c2.o = true);
                    r2.g = 0;
                  });
                };
              }(g2))), k2.graphOptionXref && (h2 = { valueNumber: k2.type === 1 ? a2[h2] : 0, valueBoolean: k2.type === 0 ? a2[h2] : false, valueString: k2.type === 2 ? a2[h2] : "" }, k2 = Object.assign(Object.assign(Object.assign({}, { calculatorName: "", calculatorIndex: 0 }), k2.graphOptionXref), h2), e.push(k2))));
            }
            if (d2.length !== 0 || e.length !== 0)
              this.o = true, this.A = (this.A === void 0 ? [] : this.A).concat(e), this.v = (this.v === void 0 ? [] : this.v).concat(d2);
          }
        };
        function Mc(a2) {
          var b2, c2, d2, e, g2, f2, k2;
          return H2(function(h2) {
            switch (h2.g) {
              case 1:
                if (!a2.o)
                  return h2.return();
                if (!a2.v) {
                  h2.g = 2;
                  break;
                }
                b2 = B2(a2.v);
                c2 = b2.next();
              case 3:
                if (c2.done) {
                  h2.g = 5;
                  break;
                }
                d2 = c2.value;
                return F2(h2, d2(), 4);
              case 4:
                c2 = b2.next();
                h2.g = 3;
                break;
              case 5:
                a2.v = void 0;
              case 2:
                if (a2.A) {
                  e = new a2.h.GraphOptionChangeRequestList();
                  g2 = B2(a2.A);
                  for (f2 = g2.next(); !f2.done; f2 = g2.next())
                    k2 = f2.value, e.push_back(k2);
                  a2.i.changeOptions(e);
                  e.delete();
                  a2.A = void 0;
                }
                a2.o = false;
                h2.g = 0;
            }
          });
        }
        x2.initialize = function() {
          var a2 = this;
          return H2(function(b2) {
            return b2.g == 1 ? F2(b2, Ic(a2), 2) : b2.g != 3 ? F2(b2, Kc(a2), 3) : F2(b2, Mc(a2), 0);
          });
        };
        function Jc(a2, b2) {
          var c2, d2;
          return H2(function(e) {
            if (b2 in a2.F)
              return e.return(a2.F[b2]);
            c2 = a2.locateFile(b2, "");
            d2 = fetch(c2).then(function(g2) {
              return g2.arrayBuffer();
            });
            a2.F[b2] = d2;
            return e.return(d2);
          });
        }
        x2.overrideFile = function(a2, b2) {
          this.i ? this.i.overrideFile(a2, b2) : this.B[a2] = b2;
        };
        x2.clearOverriddenFiles = function() {
          this.B = {};
          this.i && this.i.clearOverriddenFiles();
        };
        x2.send = function(a2, b2) {
          var c2 = this, d2, e, g2, f2, k2, h2, l2, n2, r2;
          return H2(function(p3) {
            switch (p3.g) {
              case 1:
                if (!c2.g.inputs)
                  return p3.return();
                d2 = 1e3 * (b2 === void 0 || b2 === null ? performance.now() : b2);
                return F2(p3, c2.C, 2);
              case 2:
                return F2(p3, c2.initialize(), 3);
              case 3:
                e = new c2.h.PacketDataList();
                g2 = B2(Object.keys(a2));
                for (f2 = g2.next(); !f2.done; f2 = g2.next())
                  if (k2 = f2.value, h2 = c2.g.inputs[k2]) {
                    a: {
                      var m2 = a2[k2];
                      switch (h2.type) {
                        case "video":
                          var q3 = c2.m[h2.stream];
                          q3 || (q3 = new yc(c2.h, c2.D), c2.m[h2.stream] = q3);
                          q3.l === 0 && (q3.l = q3.h.createTexture());
                          if (typeof HTMLVideoElement !== "undefined" && m2 instanceof HTMLVideoElement) {
                            var t = m2.videoWidth;
                            var w2 = m2.videoHeight;
                          } else
                            typeof HTMLImageElement !== "undefined" && m2 instanceof HTMLImageElement ? (t = m2.naturalWidth, w2 = m2.naturalHeight) : (t = m2.width, w2 = m2.height);
                          w2 = { glName: q3.l, width: t, height: w2 };
                          t = q3.g;
                          t.canvas.width = w2.width;
                          t.canvas.height = w2.height;
                          t.activeTexture(t.TEXTURE0);
                          q3.h.bindTexture2d(q3.l);
                          t.texImage2D(t.TEXTURE_2D, 0, t.RGBA, t.RGBA, t.UNSIGNED_BYTE, m2);
                          q3.h.bindTexture2d(0);
                          q3 = w2;
                          break a;
                        case "detections":
                          q3 = c2.m[h2.stream];
                          q3 || (q3 = new Bc(c2.h), c2.m[h2.stream] = q3);
                          q3.data || (q3.data = new q3.g.DetectionListData());
                          q3.data.reset(m2.length);
                          for (w2 = 0; w2 < m2.length; ++w2) {
                            t = m2[w2];
                            var v2 = q3.data, C2 = v2.setBoundingBox, J2 = w2;
                            var G2 = t.T;
                            var u2 = new dc();
                            Q2(u2, 1, G2.X);
                            Q2(u2, 2, G2.Y);
                            Q2(u2, 3, G2.height);
                            Q2(u2, 4, G2.width);
                            Q2(u2, 5, G2.rotation);
                            Q2(u2, 6, G2.W);
                            G2 = Bb(u2, fc);
                            C2.call(v2, J2, G2);
                            if (t.O)
                              for (v2 = 0; v2 < t.O.length; ++v2) {
                                u2 = t.O[v2];
                                var A2 = u2.visibility ? true : false;
                                C2 = q3.data;
                                J2 = C2.addNormalizedLandmark;
                                G2 = w2;
                                u2 = Object.assign(Object.assign({}, u2), { visibility: A2 ? u2.visibility : 0 });
                                A2 = new Wb();
                                Q2(A2, 1, u2.x);
                                Q2(A2, 2, u2.y);
                                Q2(A2, 3, u2.z);
                                u2.visibility && Q2(A2, 4, u2.visibility);
                                u2 = Bb(A2, Yb);
                                J2.call(C2, G2, u2);
                              }
                            if (t.M)
                              for (v2 = 0; v2 < t.M.length; ++v2)
                                C2 = q3.data, J2 = C2.addClassification, G2 = w2, u2 = t.M[v2], A2 = new Ob(), Q2(A2, 2, u2.score), u2.index && Q2(A2, 1, u2.index), u2.label && Q2(A2, 3, u2.label), u2.displayName && Q2(A2, 4, u2.displayName), u2 = Bb(A2, Qb), J2.call(C2, G2, u2);
                          }
                          q3 = q3.data;
                          break a;
                        default:
                          q3 = {};
                      }
                    }
                    l2 = q3;
                    n2 = h2.stream;
                    switch (h2.type) {
                      case "video":
                        e.pushTexture2d(Object.assign(Object.assign({}, l2), { stream: n2, timestamp: d2 }));
                        break;
                      case "detections":
                        r2 = l2;
                        r2.stream = n2;
                        r2.timestamp = d2;
                        e.pushDetectionList(r2);
                        break;
                      default:
                        throw Error("Unknown input config type: '" + h2.type + "'");
                    }
                  }
                c2.i.send(e);
                return F2(p3, c2.C, 4);
              case 4:
                e.delete(), p3.g = 0;
            }
          });
        };
        function Nc(a2, b2, c2) {
          var d2, e, g2, f2, k2, h2, l2, n2, r2, p3, m2, q3, t, w2;
          return H2(function(v2) {
            switch (v2.g) {
              case 1:
                if (!c2)
                  return v2.return(b2);
                d2 = {};
                e = 0;
                g2 = B2(Object.keys(c2));
                for (f2 = g2.next(); !f2.done; f2 = g2.next())
                  k2 = f2.value, h2 = c2[k2], typeof h2 !== "string" && h2.type === "texture" && b2[h2.stream] !== void 0 && ++e;
                1 < e && (a2.G = false);
                l2 = B2(Object.keys(c2));
                f2 = l2.next();
              case 2:
                if (f2.done) {
                  v2.g = 4;
                  break;
                }
                n2 = f2.value;
                r2 = c2[n2];
                if (typeof r2 === "string")
                  return t = d2, w2 = n2, F2(v2, Oc(a2, n2, b2[r2]), 14);
                p3 = b2[r2.stream];
                if (r2.type === "detection_list") {
                  if (p3) {
                    var C2 = p3.getRectList();
                    for (var J2 = p3.getLandmarksList(), G2 = p3.getClassificationsList(), u2 = [], A2 = 0; A2 < C2.size(); ++A2) {
                      var V2 = Cb(C2.get(A2), dc, gc);
                      V2 = { T: { X: S2(V2, 1), Y: S2(V2, 2), height: S2(V2, 3), width: S2(V2, 4), rotation: S2(V2, 5, 0), W: R2(V2, 6, 0) }, O: xc(J2.get(A2)), M: vc(Cb(G2.get(A2), Sb, Vb)) };
                      u2.push(V2);
                    }
                    C2 = u2;
                  } else
                    C2 = [];
                  d2[n2] = C2;
                  v2.g = 7;
                  break;
                }
                if (r2.type === "proto_list") {
                  if (p3) {
                    C2 = Array(p3.size());
                    for (J2 = 0; J2 < p3.size(); J2++)
                      C2[J2] = p3.get(J2);
                    p3.delete();
                  } else
                    C2 = [];
                  d2[n2] = C2;
                  v2.g = 7;
                  break;
                }
                if (p3 === void 0) {
                  v2.g = 3;
                  break;
                }
                if (r2.type === "float_list") {
                  d2[n2] = p3;
                  v2.g = 7;
                  break;
                }
                if (r2.type === "proto") {
                  d2[n2] = p3;
                  v2.g = 7;
                  break;
                }
                if (r2.type !== "texture")
                  throw Error("Unknown output config type: '" + r2.type + "'");
                m2 = a2.s[n2];
                m2 || (m2 = new yc(a2.h, a2.D), a2.s[n2] = m2);
                return F2(v2, zc(m2, p3, a2.G), 13);
              case 13:
                q3 = v2.h, d2[n2] = q3;
              case 7:
                r2.transform && d2[n2] && (d2[n2] = r2.transform(d2[n2]));
                v2.g = 3;
                break;
              case 14:
                t[w2] = v2.h;
              case 3:
                f2 = l2.next();
                v2.g = 2;
                break;
              case 4:
                return v2.return(d2);
            }
          });
        }
        function Oc(a2, b2, c2) {
          var d2;
          return H2(function(e) {
            return typeof c2 === "number" || c2 instanceof Uint8Array || c2 instanceof a2.h.Uint8BlobList ? e.return(c2) : c2 instanceof a2.h.Texture2dDataOut ? (d2 = a2.s[b2], d2 || (d2 = new yc(a2.h, a2.D), a2.s[b2] = d2), e.return(zc(d2, c2, a2.G))) : e.return(void 0);
          });
        }
        function Lc(a2, b2) {
          for (var c2 = b2.name || "$", d2 = [].concat(D2(b2.wants)), e = new a2.h.StringList(), g2 = B2(b2.wants), f2 = g2.next(); !f2.done; f2 = g2.next())
            e.push_back(f2.value);
          g2 = a2.h.PacketListener.implement({ onResults: function(k2) {
            for (var h2 = {}, l2 = 0; l2 < b2.wants.length; ++l2)
              h2[d2[l2]] = k2.get(l2);
            var n2 = a2.listeners[c2];
            n2 && (a2.C = Nc(a2, h2, b2.outs).then(function(r2) {
              r2 = n2(r2);
              for (var p3 = 0; p3 < b2.wants.length; ++p3) {
                var m2 = h2[d2[p3]];
                typeof m2 === "object" && m2.hasOwnProperty && m2.hasOwnProperty("delete") && m2.delete();
              }
              r2 && (a2.C = r2);
            }));
          } });
          a2.i.attachMultiListener(e, g2);
          e.delete();
        }
        x2.onResults = function(a2, b2) {
          this.listeners[b2 || "$"] = a2;
        };
        I2("Solution", Hc);
        I2("OptionType", { BOOL: 0, NUMBER: 1, Z: 2, 0: "BOOL", 1: "NUMBER", 2: "STRING" });
        function Pc(a2) {
          return a2.map(Qc);
        }
        function Qc(a2) {
          a2 = Cb(a2, kc, mc);
          var b2 = a2.getMesh();
          if (!b2)
            return a2;
          var c2 = new Float32Array(b2.getVertexBufferList());
          b2.getVertexBufferList = function() {
            return c2;
          };
          var d2 = new Uint32Array(b2.getIndexBufferList());
          b2.getIndexBufferList = function() {
            return d2;
          };
          return a2;
        }
        ;
        function Rc(a2) {
          var b2 = this;
          a2 = a2 || {};
          this.g = new Hc({
            locateFile: a2.locateFile,
            files: [{ url: "holistic_solution_packed_assets_loader.js" }, { simd: false, url: "holistic_solution_wasm_bin.js" }, { simd: true, url: "holistic_solution_simd_wasm_bin.js" }],
            graph: { url: "holistic.binarypb" },
            inputs: { image: { type: "video", stream: "input_frames_gpu" } },
            listeners: [{ wants: "left_hand_landmarks right_hand_landmarks face_landmarks pose_landmarks world_landmarks segmentation_mask image_transformed multi_face_geometry".split(" "), outs: { image: {
              type: "texture",
              stream: "image_transformed"
            }, leftHandLandmarks: { type: "proto", stream: "left_hand_landmarks", transform: xc }, rightHandLandmarks: { type: "proto", stream: "right_hand_landmarks", transform: xc }, faceLandmarks: { type: "proto", stream: "face_landmarks", transform: xc }, poseLandmarks: { type: "proto", stream: "pose_landmarks", transform: xc }, ea: { type: "proto", stream: "world_landmarks", transform: xc }, segmentationMask: { type: "texture", stream: "segmentation_mask" }, multiFaceGeometry: { type: "proto_list", stream: "multi_face_geometry", transform: Pc } } }],
            options: { useCpuInference: { type: 0, graphOptionXref: { calculatorType: "InferenceCalculator", fieldName: "use_cpu_inference" }, default: "iPad Simulator;iPhone Simulator;iPod Simulator;iPad;iPhone;iPod".split(";").includes(navigator.platform) || navigator.userAgent.includes("Mac") && "ontouchend" in document }, enableFaceGeometry: { type: 0, graphOptionXref: { calculatorName: "EnableFaceGeometryConstant", calculatorType: "ConstantSidePacketCalculator", fieldName: "bool_value" } }, selfieMode: { type: 0, graphOptionXref: {
              calculatorType: "GlScalerCalculator",
              calculatorIndex: 1,
              fieldName: "flip_horizontal"
            } }, modelComplexity: { type: 1, default: 1, graphOptionXref: { calculatorType: "ConstantSidePacketCalculator", calculatorName: "ConstantSidePacketCalculatorModelComplexity", fieldName: "int_value" }, onChange: function(c2) {
              var d2, e, g2, f2;
              return H2(function(k2) {
                if (k2.g == 1) {
                  d2 = "";
                  switch (c2) {
                    case 1:
                      d2 = "pose_landmark_full.tflite";
                      break;
                    case 2:
                      d2 = "pose_landmark_heavy.tflite";
                      break;
                    default:
                      d2 = "pose_landmark_lite.tflite";
                  }
                  e = "third_party/mediapipe/modules/pose_landmark/" + d2;
                  g2 = b2.g.locateFile(d2, "");
                  return F2(k2, fetch(g2), 3);
                }
                if (k2.g != 2)
                  return F2(k2, k2.h.arrayBuffer(), 2);
                f2 = k2.h;
                b2.g.overrideFile(e, f2);
                return F2(k2, b2.g.reset(), 0);
              });
            } }, smoothLandmarks: { type: 0, graphOptionXref: { calculatorType: "ConstantSidePacketCalculator", calculatorName: "ConstantSidePacketCalculatorSmoothLandmarks", fieldName: "bool_value" } }, enableSegmentation: { type: 0, graphOptionXref: { calculatorType: "ConstantSidePacketCalculator", calculatorName: "ConstantSidePacketCalculatorEnableSegmentation", fieldName: "bool_value" } }, smoothSegmentation: {
              type: 0,
              graphOptionXref: { calculatorType: "ConstantSidePacketCalculator", calculatorName: "ConstantSidePacketCalculatorSmoothSegmentation", fieldName: "bool_value" }
            }, refineFaceLandmarks: { type: 0, graphOptionXref: { calculatorType: "ConstantSidePacketCalculator", calculatorName: "ConstantSidePacketCalculatorRefineFaceLandmarks", fieldName: "bool_value" } }, minDetectionConfidence: { type: 1, graphOptionXref: {
              calculatorType: "TensorsToDetectionsCalculator",
              calculatorName: "holisticlandmarkgpu__poselandmarkgpu__posedetectiongpu__TensorsToDetectionsCalculator",
              fieldName: "min_score_thresh"
            } }, minTrackingConfidence: { type: 1, graphOptionXref: { calculatorType: "ThresholdingCalculator", calculatorName: "holisticlandmarkgpu__poselandmarkgpu__poselandmarkbyroigpu__tensorstoposelandmarksandsegmentation__ThresholdingCalculator", fieldName: "threshold" } }, cameraNear: { type: 1, graphOptionXref: { calculatorType: "FaceGeometryEnvGeneratorCalculator", fieldName: "near" } }, cameraFar: { type: 1, graphOptionXref: { calculatorType: "FaceGeometryEnvGeneratorCalculator", fieldName: "far" } }, cameraVerticalFovDegrees: {
              type: 1,
              graphOptionXref: { calculatorType: "FaceGeometryEnvGeneratorCalculator", fieldName: "vertical_fov_degrees" }
            } }
          });
        }
        x2 = Rc.prototype;
        x2.close = function() {
          this.g.close();
          return Promise.resolve();
        };
        x2.onResults = function(a2) {
          this.g.onResults(a2);
        };
        x2.initialize = function() {
          var a2 = this;
          return H2(function(b2) {
            return F2(b2, a2.g.initialize(), 0);
          });
        };
        x2.reset = function() {
          this.g.reset();
        };
        x2.send = function(a2) {
          var b2 = this;
          return H2(function(c2) {
            return F2(c2, b2.g.send(a2), 0);
          });
        };
        x2.setOptions = function(a2) {
          this.g.setOptions(a2);
        };
        I2("Holistic", Rc);
        I2("FACE_GEOMETRY", { Layout: { COLUMN_MAJOR: 0, ROW_MAJOR: 1, 0: "COLUMN_MAJOR", 1: "ROW_MAJOR" }, PrimitiveType: { TRIANGLE: 0, 0: "TRIANGLE" }, VertexType: { VERTEX_PT: 0, 0: "VERTEX_PT" }, DEFAULT_CAMERA_PARAMS: { verticalFovDegrees: 63, near: 1, far: 1e4 } });
        I2("FACEMESH_LIPS", nc);
        I2("FACEMESH_LEFT_EYE", oc);
        I2("FACEMESH_LEFT_EYEBROW", pc);
        I2("FACEMESH_LEFT_IRIS", [[474, 475], [475, 476], [476, 477], [477, 474]]);
        I2("FACEMESH_RIGHT_EYE", qc);
        I2("FACEMESH_RIGHT_EYEBROW", rc);
        I2("FACEMESH_RIGHT_IRIS", [[469, 470], [470, 471], [471, 472], [472, 469]]);
        I2("FACEMESH_FACE_OVAL", sc);
        I2("FACEMESH_CONTOURS", tc);
        I2("FACEMESH_TESSELATION", [
          [127, 34],
          [34, 139],
          [139, 127],
          [11, 0],
          [0, 37],
          [37, 11],
          [232, 231],
          [231, 120],
          [120, 232],
          [72, 37],
          [37, 39],
          [39, 72],
          [128, 121],
          [121, 47],
          [47, 128],
          [232, 121],
          [121, 128],
          [128, 232],
          [104, 69],
          [69, 67],
          [67, 104],
          [175, 171],
          [171, 148],
          [148, 175],
          [118, 50],
          [50, 101],
          [101, 118],
          [73, 39],
          [39, 40],
          [40, 73],
          [9, 151],
          [151, 108],
          [108, 9],
          [48, 115],
          [115, 131],
          [131, 48],
          [194, 204],
          [204, 211],
          [211, 194],
          [74, 40],
          [40, 185],
          [185, 74],
          [80, 42],
          [42, 183],
          [183, 80],
          [40, 92],
          [92, 186],
          [186, 40],
          [230, 229],
          [229, 118],
          [118, 230],
          [202, 212],
          [
            212,
            214
          ],
          [214, 202],
          [83, 18],
          [18, 17],
          [17, 83],
          [76, 61],
          [61, 146],
          [146, 76],
          [160, 29],
          [29, 30],
          [30, 160],
          [56, 157],
          [157, 173],
          [173, 56],
          [106, 204],
          [204, 194],
          [194, 106],
          [135, 214],
          [214, 192],
          [192, 135],
          [203, 165],
          [165, 98],
          [98, 203],
          [21, 71],
          [71, 68],
          [68, 21],
          [51, 45],
          [45, 4],
          [4, 51],
          [144, 24],
          [24, 23],
          [23, 144],
          [77, 146],
          [146, 91],
          [91, 77],
          [205, 50],
          [50, 187],
          [187, 205],
          [201, 200],
          [200, 18],
          [18, 201],
          [91, 106],
          [106, 182],
          [182, 91],
          [90, 91],
          [91, 181],
          [181, 90],
          [85, 84],
          [84, 17],
          [17, 85],
          [206, 203],
          [203, 36],
          [36, 206],
          [148, 171],
          [171, 140],
          [140, 148],
          [
            92,
            40
          ],
          [40, 39],
          [39, 92],
          [193, 189],
          [189, 244],
          [244, 193],
          [159, 158],
          [158, 28],
          [28, 159],
          [247, 246],
          [246, 161],
          [161, 247],
          [236, 3],
          [3, 196],
          [196, 236],
          [54, 68],
          [68, 104],
          [104, 54],
          [193, 168],
          [168, 8],
          [8, 193],
          [117, 228],
          [228, 31],
          [31, 117],
          [189, 193],
          [193, 55],
          [55, 189],
          [98, 97],
          [97, 99],
          [99, 98],
          [126, 47],
          [47, 100],
          [100, 126],
          [166, 79],
          [79, 218],
          [218, 166],
          [155, 154],
          [154, 26],
          [26, 155],
          [209, 49],
          [49, 131],
          [131, 209],
          [135, 136],
          [136, 150],
          [150, 135],
          [47, 126],
          [126, 217],
          [217, 47],
          [223, 52],
          [52, 53],
          [53, 223],
          [45, 51],
          [51, 134],
          [134, 45],
          [211, 170],
          [
            170,
            140
          ],
          [140, 211],
          [67, 69],
          [69, 108],
          [108, 67],
          [43, 106],
          [106, 91],
          [91, 43],
          [230, 119],
          [119, 120],
          [120, 230],
          [226, 130],
          [130, 247],
          [247, 226],
          [63, 53],
          [53, 52],
          [52, 63],
          [238, 20],
          [20, 242],
          [242, 238],
          [46, 70],
          [70, 156],
          [156, 46],
          [78, 62],
          [62, 96],
          [96, 78],
          [46, 53],
          [53, 63],
          [63, 46],
          [143, 34],
          [34, 227],
          [227, 143],
          [123, 117],
          [117, 111],
          [111, 123],
          [44, 125],
          [125, 19],
          [19, 44],
          [236, 134],
          [134, 51],
          [51, 236],
          [216, 206],
          [206, 205],
          [205, 216],
          [154, 153],
          [153, 22],
          [22, 154],
          [39, 37],
          [37, 167],
          [167, 39],
          [200, 201],
          [201, 208],
          [208, 200],
          [36, 142],
          [142, 100],
          [
            100,
            36
          ],
          [57, 212],
          [212, 202],
          [202, 57],
          [20, 60],
          [60, 99],
          [99, 20],
          [28, 158],
          [158, 157],
          [157, 28],
          [35, 226],
          [226, 113],
          [113, 35],
          [160, 159],
          [159, 27],
          [27, 160],
          [204, 202],
          [202, 210],
          [210, 204],
          [113, 225],
          [225, 46],
          [46, 113],
          [43, 202],
          [202, 204],
          [204, 43],
          [62, 76],
          [76, 77],
          [77, 62],
          [137, 123],
          [123, 116],
          [116, 137],
          [41, 38],
          [38, 72],
          [72, 41],
          [203, 129],
          [129, 142],
          [142, 203],
          [64, 98],
          [98, 240],
          [240, 64],
          [49, 102],
          [102, 64],
          [64, 49],
          [41, 73],
          [73, 74],
          [74, 41],
          [212, 216],
          [216, 207],
          [207, 212],
          [42, 74],
          [74, 184],
          [184, 42],
          [169, 170],
          [170, 211],
          [211, 169],
          [
            170,
            149
          ],
          [149, 176],
          [176, 170],
          [105, 66],
          [66, 69],
          [69, 105],
          [122, 6],
          [6, 168],
          [168, 122],
          [123, 147],
          [147, 187],
          [187, 123],
          [96, 77],
          [77, 90],
          [90, 96],
          [65, 55],
          [55, 107],
          [107, 65],
          [89, 90],
          [90, 180],
          [180, 89],
          [101, 100],
          [100, 120],
          [120, 101],
          [63, 105],
          [105, 104],
          [104, 63],
          [93, 137],
          [137, 227],
          [227, 93],
          [15, 86],
          [86, 85],
          [85, 15],
          [129, 102],
          [102, 49],
          [49, 129],
          [14, 87],
          [87, 86],
          [86, 14],
          [55, 8],
          [8, 9],
          [9, 55],
          [100, 47],
          [47, 121],
          [121, 100],
          [145, 23],
          [23, 22],
          [22, 145],
          [88, 89],
          [89, 179],
          [179, 88],
          [6, 122],
          [122, 196],
          [196, 6],
          [88, 95],
          [95, 96],
          [96, 88],
          [138, 172],
          [172, 136],
          [136, 138],
          [215, 58],
          [58, 172],
          [172, 215],
          [115, 48],
          [48, 219],
          [219, 115],
          [42, 80],
          [80, 81],
          [81, 42],
          [195, 3],
          [3, 51],
          [51, 195],
          [43, 146],
          [146, 61],
          [61, 43],
          [171, 175],
          [175, 199],
          [199, 171],
          [81, 82],
          [82, 38],
          [38, 81],
          [53, 46],
          [46, 225],
          [225, 53],
          [144, 163],
          [163, 110],
          [110, 144],
          [52, 65],
          [65, 66],
          [66, 52],
          [229, 228],
          [228, 117],
          [117, 229],
          [34, 127],
          [127, 234],
          [234, 34],
          [107, 108],
          [108, 69],
          [69, 107],
          [109, 108],
          [108, 151],
          [151, 109],
          [48, 64],
          [64, 235],
          [235, 48],
          [62, 78],
          [78, 191],
          [191, 62],
          [129, 209],
          [209, 126],
          [126, 129],
          [111, 35],
          [35, 143],
          [
            143,
            111
          ],
          [117, 123],
          [123, 50],
          [50, 117],
          [222, 65],
          [65, 52],
          [52, 222],
          [19, 125],
          [125, 141],
          [141, 19],
          [221, 55],
          [55, 65],
          [65, 221],
          [3, 195],
          [195, 197],
          [197, 3],
          [25, 7],
          [7, 33],
          [33, 25],
          [220, 237],
          [237, 44],
          [44, 220],
          [70, 71],
          [71, 139],
          [139, 70],
          [122, 193],
          [193, 245],
          [245, 122],
          [247, 130],
          [130, 33],
          [33, 247],
          [71, 21],
          [21, 162],
          [162, 71],
          [170, 169],
          [169, 150],
          [150, 170],
          [188, 174],
          [174, 196],
          [196, 188],
          [216, 186],
          [186, 92],
          [92, 216],
          [2, 97],
          [97, 167],
          [167, 2],
          [141, 125],
          [125, 241],
          [241, 141],
          [164, 167],
          [167, 37],
          [37, 164],
          [72, 38],
          [38, 12],
          [12, 72],
          [38, 82],
          [82, 13],
          [13, 38],
          [63, 68],
          [68, 71],
          [71, 63],
          [226, 35],
          [35, 111],
          [111, 226],
          [101, 50],
          [50, 205],
          [205, 101],
          [206, 92],
          [92, 165],
          [165, 206],
          [209, 198],
          [198, 217],
          [217, 209],
          [165, 167],
          [167, 97],
          [97, 165],
          [220, 115],
          [115, 218],
          [218, 220],
          [133, 112],
          [112, 243],
          [243, 133],
          [239, 238],
          [238, 241],
          [241, 239],
          [214, 135],
          [135, 169],
          [169, 214],
          [190, 173],
          [173, 133],
          [133, 190],
          [171, 208],
          [208, 32],
          [32, 171],
          [125, 44],
          [44, 237],
          [237, 125],
          [86, 87],
          [87, 178],
          [178, 86],
          [85, 86],
          [86, 179],
          [179, 85],
          [84, 85],
          [85, 180],
          [180, 84],
          [83, 84],
          [84, 181],
          [181, 83],
          [201, 83],
          [83, 182],
          [182, 201],
          [137, 93],
          [93, 132],
          [132, 137],
          [76, 62],
          [62, 183],
          [183, 76],
          [61, 76],
          [76, 184],
          [184, 61],
          [57, 61],
          [61, 185],
          [185, 57],
          [212, 57],
          [57, 186],
          [186, 212],
          [214, 207],
          [207, 187],
          [187, 214],
          [34, 143],
          [143, 156],
          [156, 34],
          [79, 239],
          [239, 237],
          [237, 79],
          [123, 137],
          [137, 177],
          [177, 123],
          [44, 1],
          [1, 4],
          [4, 44],
          [201, 194],
          [194, 32],
          [32, 201],
          [64, 102],
          [102, 129],
          [129, 64],
          [213, 215],
          [215, 138],
          [138, 213],
          [59, 166],
          [166, 219],
          [219, 59],
          [242, 99],
          [99, 97],
          [97, 242],
          [2, 94],
          [94, 141],
          [141, 2],
          [75, 59],
          [59, 235],
          [235, 75],
          [24, 110],
          [110, 228],
          [
            228,
            24
          ],
          [25, 130],
          [130, 226],
          [226, 25],
          [23, 24],
          [24, 229],
          [229, 23],
          [22, 23],
          [23, 230],
          [230, 22],
          [26, 22],
          [22, 231],
          [231, 26],
          [112, 26],
          [26, 232],
          [232, 112],
          [189, 190],
          [190, 243],
          [243, 189],
          [221, 56],
          [56, 190],
          [190, 221],
          [28, 56],
          [56, 221],
          [221, 28],
          [27, 28],
          [28, 222],
          [222, 27],
          [29, 27],
          [27, 223],
          [223, 29],
          [30, 29],
          [29, 224],
          [224, 30],
          [247, 30],
          [30, 225],
          [225, 247],
          [238, 79],
          [79, 20],
          [20, 238],
          [166, 59],
          [59, 75],
          [75, 166],
          [60, 75],
          [75, 240],
          [240, 60],
          [147, 177],
          [177, 215],
          [215, 147],
          [20, 79],
          [79, 166],
          [166, 20],
          [187, 147],
          [147, 213],
          [213, 187],
          [112, 233],
          [233, 244],
          [244, 112],
          [233, 128],
          [128, 245],
          [245, 233],
          [128, 114],
          [114, 188],
          [188, 128],
          [114, 217],
          [217, 174],
          [174, 114],
          [131, 115],
          [115, 220],
          [220, 131],
          [217, 198],
          [198, 236],
          [236, 217],
          [198, 131],
          [131, 134],
          [134, 198],
          [177, 132],
          [132, 58],
          [58, 177],
          [143, 35],
          [35, 124],
          [124, 143],
          [110, 163],
          [163, 7],
          [7, 110],
          [228, 110],
          [110, 25],
          [25, 228],
          [356, 389],
          [389, 368],
          [368, 356],
          [11, 302],
          [302, 267],
          [267, 11],
          [452, 350],
          [350, 349],
          [349, 452],
          [302, 303],
          [303, 269],
          [269, 302],
          [357, 343],
          [343, 277],
          [277, 357],
          [452, 453],
          [453, 357],
          [357, 452],
          [333, 332],
          [
            332,
            297
          ],
          [297, 333],
          [175, 152],
          [152, 377],
          [377, 175],
          [347, 348],
          [348, 330],
          [330, 347],
          [303, 304],
          [304, 270],
          [270, 303],
          [9, 336],
          [336, 337],
          [337, 9],
          [278, 279],
          [279, 360],
          [360, 278],
          [418, 262],
          [262, 431],
          [431, 418],
          [304, 408],
          [408, 409],
          [409, 304],
          [310, 415],
          [415, 407],
          [407, 310],
          [270, 409],
          [409, 410],
          [410, 270],
          [450, 348],
          [348, 347],
          [347, 450],
          [422, 430],
          [430, 434],
          [434, 422],
          [313, 314],
          [314, 17],
          [17, 313],
          [306, 307],
          [307, 375],
          [375, 306],
          [387, 388],
          [388, 260],
          [260, 387],
          [286, 414],
          [414, 398],
          [398, 286],
          [335, 406],
          [406, 418],
          [418, 335],
          [364, 367],
          [
            367,
            416
          ],
          [416, 364],
          [423, 358],
          [358, 327],
          [327, 423],
          [251, 284],
          [284, 298],
          [298, 251],
          [281, 5],
          [5, 4],
          [4, 281],
          [373, 374],
          [374, 253],
          [253, 373],
          [307, 320],
          [320, 321],
          [321, 307],
          [425, 427],
          [427, 411],
          [411, 425],
          [421, 313],
          [313, 18],
          [18, 421],
          [321, 405],
          [405, 406],
          [406, 321],
          [320, 404],
          [404, 405],
          [405, 320],
          [315, 16],
          [16, 17],
          [17, 315],
          [426, 425],
          [425, 266],
          [266, 426],
          [377, 400],
          [400, 369],
          [369, 377],
          [322, 391],
          [391, 269],
          [269, 322],
          [417, 465],
          [465, 464],
          [464, 417],
          [386, 257],
          [257, 258],
          [258, 386],
          [466, 260],
          [260, 388],
          [388, 466],
          [456, 399],
          [399, 419],
          [419, 456],
          [284, 332],
          [332, 333],
          [333, 284],
          [417, 285],
          [285, 8],
          [8, 417],
          [346, 340],
          [340, 261],
          [261, 346],
          [413, 441],
          [441, 285],
          [285, 413],
          [327, 460],
          [460, 328],
          [328, 327],
          [355, 371],
          [371, 329],
          [329, 355],
          [392, 439],
          [439, 438],
          [438, 392],
          [382, 341],
          [341, 256],
          [256, 382],
          [429, 420],
          [420, 360],
          [360, 429],
          [364, 394],
          [394, 379],
          [379, 364],
          [277, 343],
          [343, 437],
          [437, 277],
          [443, 444],
          [444, 283],
          [283, 443],
          [275, 440],
          [440, 363],
          [363, 275],
          [431, 262],
          [262, 369],
          [369, 431],
          [297, 338],
          [338, 337],
          [337, 297],
          [273, 375],
          [375, 321],
          [321, 273],
          [450, 451],
          [
            451,
            349
          ],
          [349, 450],
          [446, 342],
          [342, 467],
          [467, 446],
          [293, 334],
          [334, 282],
          [282, 293],
          [458, 461],
          [461, 462],
          [462, 458],
          [276, 353],
          [353, 383],
          [383, 276],
          [308, 324],
          [324, 325],
          [325, 308],
          [276, 300],
          [300, 293],
          [293, 276],
          [372, 345],
          [345, 447],
          [447, 372],
          [352, 345],
          [345, 340],
          [340, 352],
          [274, 1],
          [1, 19],
          [19, 274],
          [456, 248],
          [248, 281],
          [281, 456],
          [436, 427],
          [427, 425],
          [425, 436],
          [381, 256],
          [256, 252],
          [252, 381],
          [269, 391],
          [391, 393],
          [393, 269],
          [200, 199],
          [199, 428],
          [428, 200],
          [266, 330],
          [330, 329],
          [329, 266],
          [287, 273],
          [273, 422],
          [422, 287],
          [250, 462],
          [
            462,
            328
          ],
          [328, 250],
          [258, 286],
          [286, 384],
          [384, 258],
          [265, 353],
          [353, 342],
          [342, 265],
          [387, 259],
          [259, 257],
          [257, 387],
          [424, 431],
          [431, 430],
          [430, 424],
          [342, 353],
          [353, 276],
          [276, 342],
          [273, 335],
          [335, 424],
          [424, 273],
          [292, 325],
          [325, 307],
          [307, 292],
          [366, 447],
          [447, 345],
          [345, 366],
          [271, 303],
          [303, 302],
          [302, 271],
          [423, 266],
          [266, 371],
          [371, 423],
          [294, 455],
          [455, 460],
          [460, 294],
          [279, 278],
          [278, 294],
          [294, 279],
          [271, 272],
          [272, 304],
          [304, 271],
          [432, 434],
          [434, 427],
          [427, 432],
          [272, 407],
          [407, 408],
          [408, 272],
          [394, 430],
          [430, 431],
          [431, 394],
          [395, 369],
          [369, 400],
          [400, 395],
          [334, 333],
          [333, 299],
          [299, 334],
          [351, 417],
          [417, 168],
          [168, 351],
          [352, 280],
          [280, 411],
          [411, 352],
          [325, 319],
          [319, 320],
          [320, 325],
          [295, 296],
          [296, 336],
          [336, 295],
          [319, 403],
          [403, 404],
          [404, 319],
          [330, 348],
          [348, 349],
          [349, 330],
          [293, 298],
          [298, 333],
          [333, 293],
          [323, 454],
          [454, 447],
          [447, 323],
          [15, 16],
          [16, 315],
          [315, 15],
          [358, 429],
          [429, 279],
          [279, 358],
          [14, 15],
          [15, 316],
          [316, 14],
          [285, 336],
          [336, 9],
          [9, 285],
          [329, 349],
          [349, 350],
          [350, 329],
          [374, 380],
          [380, 252],
          [252, 374],
          [318, 402],
          [402, 403],
          [403, 318],
          [6, 197],
          [
            197,
            419
          ],
          [419, 6],
          [318, 319],
          [319, 325],
          [325, 318],
          [367, 364],
          [364, 365],
          [365, 367],
          [435, 367],
          [367, 397],
          [397, 435],
          [344, 438],
          [438, 439],
          [439, 344],
          [272, 271],
          [271, 311],
          [311, 272],
          [195, 5],
          [5, 281],
          [281, 195],
          [273, 287],
          [287, 291],
          [291, 273],
          [396, 428],
          [428, 199],
          [199, 396],
          [311, 271],
          [271, 268],
          [268, 311],
          [283, 444],
          [444, 445],
          [445, 283],
          [373, 254],
          [254, 339],
          [339, 373],
          [282, 334],
          [334, 296],
          [296, 282],
          [449, 347],
          [347, 346],
          [346, 449],
          [264, 447],
          [447, 454],
          [454, 264],
          [336, 296],
          [296, 299],
          [299, 336],
          [338, 10],
          [10, 151],
          [151, 338],
          [278, 439],
          [
            439,
            455
          ],
          [455, 278],
          [292, 407],
          [407, 415],
          [415, 292],
          [358, 371],
          [371, 355],
          [355, 358],
          [340, 345],
          [345, 372],
          [372, 340],
          [346, 347],
          [347, 280],
          [280, 346],
          [442, 443],
          [443, 282],
          [282, 442],
          [19, 94],
          [94, 370],
          [370, 19],
          [441, 442],
          [442, 295],
          [295, 441],
          [248, 419],
          [419, 197],
          [197, 248],
          [263, 255],
          [255, 359],
          [359, 263],
          [440, 275],
          [275, 274],
          [274, 440],
          [300, 383],
          [383, 368],
          [368, 300],
          [351, 412],
          [412, 465],
          [465, 351],
          [263, 467],
          [467, 466],
          [466, 263],
          [301, 368],
          [368, 389],
          [389, 301],
          [395, 378],
          [378, 379],
          [379, 395],
          [412, 351],
          [351, 419],
          [419, 412],
          [436, 426],
          [426, 322],
          [322, 436],
          [2, 164],
          [164, 393],
          [393, 2],
          [370, 462],
          [462, 461],
          [461, 370],
          [164, 0],
          [0, 267],
          [267, 164],
          [302, 11],
          [11, 12],
          [12, 302],
          [268, 12],
          [12, 13],
          [13, 268],
          [293, 300],
          [300, 301],
          [301, 293],
          [446, 261],
          [261, 340],
          [340, 446],
          [330, 266],
          [266, 425],
          [425, 330],
          [426, 423],
          [423, 391],
          [391, 426],
          [429, 355],
          [355, 437],
          [437, 429],
          [391, 327],
          [327, 326],
          [326, 391],
          [440, 457],
          [457, 438],
          [438, 440],
          [341, 382],
          [382, 362],
          [362, 341],
          [459, 457],
          [457, 461],
          [461, 459],
          [434, 430],
          [430, 394],
          [394, 434],
          [414, 463],
          [463, 362],
          [362, 414],
          [396, 369],
          [369, 262],
          [262, 396],
          [354, 461],
          [461, 457],
          [457, 354],
          [316, 403],
          [403, 402],
          [402, 316],
          [315, 404],
          [404, 403],
          [403, 315],
          [314, 405],
          [405, 404],
          [404, 314],
          [313, 406],
          [406, 405],
          [405, 313],
          [421, 418],
          [418, 406],
          [406, 421],
          [366, 401],
          [401, 361],
          [361, 366],
          [306, 408],
          [408, 407],
          [407, 306],
          [291, 409],
          [409, 408],
          [408, 291],
          [287, 410],
          [410, 409],
          [409, 287],
          [432, 436],
          [436, 410],
          [410, 432],
          [434, 416],
          [416, 411],
          [411, 434],
          [264, 368],
          [368, 383],
          [383, 264],
          [309, 438],
          [438, 457],
          [457, 309],
          [352, 376],
          [376, 401],
          [401, 352],
          [274, 275],
          [275, 4],
          [4, 274],
          [421, 428],
          [
            428,
            262
          ],
          [262, 421],
          [294, 327],
          [327, 358],
          [358, 294],
          [433, 416],
          [416, 367],
          [367, 433],
          [289, 455],
          [455, 439],
          [439, 289],
          [462, 370],
          [370, 326],
          [326, 462],
          [2, 326],
          [326, 370],
          [370, 2],
          [305, 460],
          [460, 455],
          [455, 305],
          [254, 449],
          [449, 448],
          [448, 254],
          [255, 261],
          [261, 446],
          [446, 255],
          [253, 450],
          [450, 449],
          [449, 253],
          [252, 451],
          [451, 450],
          [450, 252],
          [256, 452],
          [452, 451],
          [451, 256],
          [341, 453],
          [453, 452],
          [452, 341],
          [413, 464],
          [464, 463],
          [463, 413],
          [441, 413],
          [413, 414],
          [414, 441],
          [258, 442],
          [442, 441],
          [441, 258],
          [257, 443],
          [443, 442],
          [442, 257],
          [259, 444],
          [444, 443],
          [443, 259],
          [260, 445],
          [445, 444],
          [444, 260],
          [467, 342],
          [342, 445],
          [445, 467],
          [459, 458],
          [458, 250],
          [250, 459],
          [289, 392],
          [392, 290],
          [290, 289],
          [290, 328],
          [328, 460],
          [460, 290],
          [376, 433],
          [433, 435],
          [435, 376],
          [250, 290],
          [290, 392],
          [392, 250],
          [411, 416],
          [416, 433],
          [433, 411],
          [341, 463],
          [463, 464],
          [464, 341],
          [453, 464],
          [464, 465],
          [465, 453],
          [357, 465],
          [465, 412],
          [412, 357],
          [343, 412],
          [412, 399],
          [399, 343],
          [360, 363],
          [363, 440],
          [440, 360],
          [437, 399],
          [399, 456],
          [456, 437],
          [420, 456],
          [456, 363],
          [363, 420],
          [401, 435],
          [435, 288],
          [288, 401],
          [
            372,
            383
          ],
          [383, 353],
          [353, 372],
          [339, 255],
          [255, 249],
          [249, 339],
          [448, 261],
          [261, 255],
          [255, 448],
          [133, 243],
          [243, 190],
          [190, 133],
          [133, 155],
          [155, 112],
          [112, 133],
          [33, 246],
          [246, 247],
          [247, 33],
          [33, 130],
          [130, 25],
          [25, 33],
          [398, 384],
          [384, 286],
          [286, 398],
          [362, 398],
          [398, 414],
          [414, 362],
          [362, 463],
          [463, 341],
          [341, 362],
          [263, 359],
          [359, 467],
          [467, 263],
          [263, 249],
          [249, 255],
          [255, 263],
          [466, 467],
          [467, 260],
          [260, 466],
          [75, 60],
          [60, 166],
          [166, 75],
          [238, 239],
          [239, 79],
          [79, 238],
          [162, 127],
          [127, 139],
          [139, 162],
          [72, 11],
          [11, 37],
          [37, 72],
          [121, 232],
          [
            232,
            120
          ],
          [120, 121],
          [73, 72],
          [72, 39],
          [39, 73],
          [114, 128],
          [128, 47],
          [47, 114],
          [233, 232],
          [232, 128],
          [128, 233],
          [103, 104],
          [104, 67],
          [67, 103],
          [152, 175],
          [175, 148],
          [148, 152],
          [119, 118],
          [118, 101],
          [101, 119],
          [74, 73],
          [73, 40],
          [40, 74],
          [107, 9],
          [9, 108],
          [108, 107],
          [49, 48],
          [48, 131],
          [131, 49],
          [32, 194],
          [194, 211],
          [211, 32],
          [184, 74],
          [74, 185],
          [185, 184],
          [191, 80],
          [80, 183],
          [183, 191],
          [185, 40],
          [40, 186],
          [186, 185],
          [119, 230],
          [230, 118],
          [118, 119],
          [210, 202],
          [202, 214],
          [214, 210],
          [84, 83],
          [83, 17],
          [17, 84],
          [77, 76],
          [76, 146],
          [146, 77],
          [161, 160],
          [160, 30],
          [30, 161],
          [190, 56],
          [56, 173],
          [173, 190],
          [182, 106],
          [106, 194],
          [194, 182],
          [138, 135],
          [135, 192],
          [192, 138],
          [129, 203],
          [203, 98],
          [98, 129],
          [54, 21],
          [21, 68],
          [68, 54],
          [5, 51],
          [51, 4],
          [4, 5],
          [145, 144],
          [144, 23],
          [23, 145],
          [90, 77],
          [77, 91],
          [91, 90],
          [207, 205],
          [205, 187],
          [187, 207],
          [83, 201],
          [201, 18],
          [18, 83],
          [181, 91],
          [91, 182],
          [182, 181],
          [180, 90],
          [90, 181],
          [181, 180],
          [16, 85],
          [85, 17],
          [17, 16],
          [205, 206],
          [206, 36],
          [36, 205],
          [176, 148],
          [148, 140],
          [140, 176],
          [165, 92],
          [92, 39],
          [39, 165],
          [245, 193],
          [193, 244],
          [244, 245],
          [27, 159],
          [159, 28],
          [28, 27],
          [
            30,
            247
          ],
          [247, 161],
          [161, 30],
          [174, 236],
          [236, 196],
          [196, 174],
          [103, 54],
          [54, 104],
          [104, 103],
          [55, 193],
          [193, 8],
          [8, 55],
          [111, 117],
          [117, 31],
          [31, 111],
          [221, 189],
          [189, 55],
          [55, 221],
          [240, 98],
          [98, 99],
          [99, 240],
          [142, 126],
          [126, 100],
          [100, 142],
          [219, 166],
          [166, 218],
          [218, 219],
          [112, 155],
          [155, 26],
          [26, 112],
          [198, 209],
          [209, 131],
          [131, 198],
          [169, 135],
          [135, 150],
          [150, 169],
          [114, 47],
          [47, 217],
          [217, 114],
          [224, 223],
          [223, 53],
          [53, 224],
          [220, 45],
          [45, 134],
          [134, 220],
          [32, 211],
          [211, 140],
          [140, 32],
          [109, 67],
          [67, 108],
          [108, 109],
          [146, 43],
          [43, 91],
          [91, 146],
          [231, 230],
          [230, 120],
          [120, 231],
          [113, 226],
          [226, 247],
          [247, 113],
          [105, 63],
          [63, 52],
          [52, 105],
          [241, 238],
          [238, 242],
          [242, 241],
          [124, 46],
          [46, 156],
          [156, 124],
          [95, 78],
          [78, 96],
          [96, 95],
          [70, 46],
          [46, 63],
          [63, 70],
          [116, 143],
          [143, 227],
          [227, 116],
          [116, 123],
          [123, 111],
          [111, 116],
          [1, 44],
          [44, 19],
          [19, 1],
          [3, 236],
          [236, 51],
          [51, 3],
          [207, 216],
          [216, 205],
          [205, 207],
          [26, 154],
          [154, 22],
          [22, 26],
          [165, 39],
          [39, 167],
          [167, 165],
          [199, 200],
          [200, 208],
          [208, 199],
          [101, 36],
          [36, 100],
          [100, 101],
          [43, 57],
          [57, 202],
          [202, 43],
          [242, 20],
          [20, 99],
          [99, 242],
          [56, 28],
          [
            28,
            157
          ],
          [157, 56],
          [124, 35],
          [35, 113],
          [113, 124],
          [29, 160],
          [160, 27],
          [27, 29],
          [211, 204],
          [204, 210],
          [210, 211],
          [124, 113],
          [113, 46],
          [46, 124],
          [106, 43],
          [43, 204],
          [204, 106],
          [96, 62],
          [62, 77],
          [77, 96],
          [227, 137],
          [137, 116],
          [116, 227],
          [73, 41],
          [41, 72],
          [72, 73],
          [36, 203],
          [203, 142],
          [142, 36],
          [235, 64],
          [64, 240],
          [240, 235],
          [48, 49],
          [49, 64],
          [64, 48],
          [42, 41],
          [41, 74],
          [74, 42],
          [214, 212],
          [212, 207],
          [207, 214],
          [183, 42],
          [42, 184],
          [184, 183],
          [210, 169],
          [169, 211],
          [211, 210],
          [140, 170],
          [170, 176],
          [176, 140],
          [104, 105],
          [105, 69],
          [69, 104],
          [193, 122],
          [122, 168],
          [168, 193],
          [50, 123],
          [123, 187],
          [187, 50],
          [89, 96],
          [96, 90],
          [90, 89],
          [66, 65],
          [65, 107],
          [107, 66],
          [179, 89],
          [89, 180],
          [180, 179],
          [119, 101],
          [101, 120],
          [120, 119],
          [68, 63],
          [63, 104],
          [104, 68],
          [234, 93],
          [93, 227],
          [227, 234],
          [16, 15],
          [15, 85],
          [85, 16],
          [209, 129],
          [129, 49],
          [49, 209],
          [15, 14],
          [14, 86],
          [86, 15],
          [107, 55],
          [55, 9],
          [9, 107],
          [120, 100],
          [100, 121],
          [121, 120],
          [153, 145],
          [145, 22],
          [22, 153],
          [178, 88],
          [88, 179],
          [179, 178],
          [197, 6],
          [6, 196],
          [196, 197],
          [89, 88],
          [88, 96],
          [96, 89],
          [135, 138],
          [138, 136],
          [136, 135],
          [138, 215],
          [215, 172],
          [172, 138],
          [
            218,
            115
          ],
          [115, 219],
          [219, 218],
          [41, 42],
          [42, 81],
          [81, 41],
          [5, 195],
          [195, 51],
          [51, 5],
          [57, 43],
          [43, 61],
          [61, 57],
          [208, 171],
          [171, 199],
          [199, 208],
          [41, 81],
          [81, 38],
          [38, 41],
          [224, 53],
          [53, 225],
          [225, 224],
          [24, 144],
          [144, 110],
          [110, 24],
          [105, 52],
          [52, 66],
          [66, 105],
          [118, 229],
          [229, 117],
          [117, 118],
          [227, 34],
          [34, 234],
          [234, 227],
          [66, 107],
          [107, 69],
          [69, 66],
          [10, 109],
          [109, 151],
          [151, 10],
          [219, 48],
          [48, 235],
          [235, 219],
          [183, 62],
          [62, 191],
          [191, 183],
          [142, 129],
          [129, 126],
          [126, 142],
          [116, 111],
          [111, 143],
          [143, 116],
          [118, 117],
          [117, 50],
          [50, 118],
          [223, 222],
          [
            222,
            52
          ],
          [52, 223],
          [94, 19],
          [19, 141],
          [141, 94],
          [222, 221],
          [221, 65],
          [65, 222],
          [196, 3],
          [3, 197],
          [197, 196],
          [45, 220],
          [220, 44],
          [44, 45],
          [156, 70],
          [70, 139],
          [139, 156],
          [188, 122],
          [122, 245],
          [245, 188],
          [139, 71],
          [71, 162],
          [162, 139],
          [149, 170],
          [170, 150],
          [150, 149],
          [122, 188],
          [188, 196],
          [196, 122],
          [206, 216],
          [216, 92],
          [92, 206],
          [164, 2],
          [2, 167],
          [167, 164],
          [242, 141],
          [141, 241],
          [241, 242],
          [0, 164],
          [164, 37],
          [37, 0],
          [11, 72],
          [72, 12],
          [12, 11],
          [12, 38],
          [38, 13],
          [13, 12],
          [70, 63],
          [63, 71],
          [71, 70],
          [31, 226],
          [226, 111],
          [111, 31],
          [36, 101],
          [101, 205],
          [205, 36],
          [203, 206],
          [206, 165],
          [165, 203],
          [126, 209],
          [209, 217],
          [217, 126],
          [98, 165],
          [165, 97],
          [97, 98],
          [237, 220],
          [220, 218],
          [218, 237],
          [237, 239],
          [239, 241],
          [241, 237],
          [210, 214],
          [214, 169],
          [169, 210],
          [140, 171],
          [171, 32],
          [32, 140],
          [241, 125],
          [125, 237],
          [237, 241],
          [179, 86],
          [86, 178],
          [178, 179],
          [180, 85],
          [85, 179],
          [179, 180],
          [181, 84],
          [84, 180],
          [180, 181],
          [182, 83],
          [83, 181],
          [181, 182],
          [194, 201],
          [201, 182],
          [182, 194],
          [177, 137],
          [137, 132],
          [132, 177],
          [184, 76],
          [76, 183],
          [183, 184],
          [185, 61],
          [61, 184],
          [184, 185],
          [186, 57],
          [57, 185],
          [185, 186],
          [216, 212],
          [
            212,
            186
          ],
          [186, 216],
          [192, 214],
          [214, 187],
          [187, 192],
          [139, 34],
          [34, 156],
          [156, 139],
          [218, 79],
          [79, 237],
          [237, 218],
          [147, 123],
          [123, 177],
          [177, 147],
          [45, 44],
          [44, 4],
          [4, 45],
          [208, 201],
          [201, 32],
          [32, 208],
          [98, 64],
          [64, 129],
          [129, 98],
          [192, 213],
          [213, 138],
          [138, 192],
          [235, 59],
          [59, 219],
          [219, 235],
          [141, 242],
          [242, 97],
          [97, 141],
          [97, 2],
          [2, 141],
          [141, 97],
          [240, 75],
          [75, 235],
          [235, 240],
          [229, 24],
          [24, 228],
          [228, 229],
          [31, 25],
          [25, 226],
          [226, 31],
          [230, 23],
          [23, 229],
          [229, 230],
          [231, 22],
          [22, 230],
          [230, 231],
          [232, 26],
          [26, 231],
          [231, 232],
          [233, 112],
          [112, 232],
          [232, 233],
          [244, 189],
          [189, 243],
          [243, 244],
          [189, 221],
          [221, 190],
          [190, 189],
          [222, 28],
          [28, 221],
          [221, 222],
          [223, 27],
          [27, 222],
          [222, 223],
          [224, 29],
          [29, 223],
          [223, 224],
          [225, 30],
          [30, 224],
          [224, 225],
          [113, 247],
          [247, 225],
          [225, 113],
          [99, 60],
          [60, 240],
          [240, 99],
          [213, 147],
          [147, 215],
          [215, 213],
          [60, 20],
          [20, 166],
          [166, 60],
          [192, 187],
          [187, 213],
          [213, 192],
          [243, 112],
          [112, 244],
          [244, 243],
          [244, 233],
          [233, 245],
          [245, 244],
          [245, 128],
          [128, 188],
          [188, 245],
          [188, 114],
          [114, 174],
          [174, 188],
          [134, 131],
          [131, 220],
          [220, 134],
          [174, 217],
          [217, 236],
          [236, 174],
          [236, 198],
          [198, 134],
          [134, 236],
          [215, 177],
          [177, 58],
          [58, 215],
          [156, 143],
          [143, 124],
          [124, 156],
          [25, 110],
          [110, 7],
          [7, 25],
          [31, 228],
          [228, 25],
          [25, 31],
          [264, 356],
          [356, 368],
          [368, 264],
          [0, 11],
          [11, 267],
          [267, 0],
          [451, 452],
          [452, 349],
          [349, 451],
          [267, 302],
          [302, 269],
          [269, 267],
          [350, 357],
          [357, 277],
          [277, 350],
          [350, 452],
          [452, 357],
          [357, 350],
          [299, 333],
          [333, 297],
          [297, 299],
          [396, 175],
          [175, 377],
          [377, 396],
          [280, 347],
          [347, 330],
          [330, 280],
          [269, 303],
          [303, 270],
          [270, 269],
          [151, 9],
          [9, 337],
          [337, 151],
          [344, 278],
          [278, 360],
          [360, 344],
          [424, 418],
          [
            418,
            431
          ],
          [431, 424],
          [270, 304],
          [304, 409],
          [409, 270],
          [272, 310],
          [310, 407],
          [407, 272],
          [322, 270],
          [270, 410],
          [410, 322],
          [449, 450],
          [450, 347],
          [347, 449],
          [432, 422],
          [422, 434],
          [434, 432],
          [18, 313],
          [313, 17],
          [17, 18],
          [291, 306],
          [306, 375],
          [375, 291],
          [259, 387],
          [387, 260],
          [260, 259],
          [424, 335],
          [335, 418],
          [418, 424],
          [434, 364],
          [364, 416],
          [416, 434],
          [391, 423],
          [423, 327],
          [327, 391],
          [301, 251],
          [251, 298],
          [298, 301],
          [275, 281],
          [281, 4],
          [4, 275],
          [254, 373],
          [373, 253],
          [253, 254],
          [375, 307],
          [307, 321],
          [321, 375],
          [280, 425],
          [425, 411],
          [411, 280],
          [200, 421],
          [
            421,
            18
          ],
          [18, 200],
          [335, 321],
          [321, 406],
          [406, 335],
          [321, 320],
          [320, 405],
          [405, 321],
          [314, 315],
          [315, 17],
          [17, 314],
          [423, 426],
          [426, 266],
          [266, 423],
          [396, 377],
          [377, 369],
          [369, 396],
          [270, 322],
          [322, 269],
          [269, 270],
          [413, 417],
          [417, 464],
          [464, 413],
          [385, 386],
          [386, 258],
          [258, 385],
          [248, 456],
          [456, 419],
          [419, 248],
          [298, 284],
          [284, 333],
          [333, 298],
          [168, 417],
          [417, 8],
          [8, 168],
          [448, 346],
          [346, 261],
          [261, 448],
          [417, 413],
          [413, 285],
          [285, 417],
          [326, 327],
          [327, 328],
          [328, 326],
          [277, 355],
          [355, 329],
          [329, 277],
          [309, 392],
          [392, 438],
          [438, 309],
          [381, 382],
          [
            382,
            256
          ],
          [256, 381],
          [279, 429],
          [429, 360],
          [360, 279],
          [365, 364],
          [364, 379],
          [379, 365],
          [355, 277],
          [277, 437],
          [437, 355],
          [282, 443],
          [443, 283],
          [283, 282],
          [281, 275],
          [275, 363],
          [363, 281],
          [395, 431],
          [431, 369],
          [369, 395],
          [299, 297],
          [297, 337],
          [337, 299],
          [335, 273],
          [273, 321],
          [321, 335],
          [348, 450],
          [450, 349],
          [349, 348],
          [359, 446],
          [446, 467],
          [467, 359],
          [283, 293],
          [293, 282],
          [282, 283],
          [250, 458],
          [458, 462],
          [462, 250],
          [300, 276],
          [276, 383],
          [383, 300],
          [292, 308],
          [308, 325],
          [325, 292],
          [283, 276],
          [276, 293],
          [293, 283],
          [264, 372],
          [372, 447],
          [447, 264],
          [346, 352],
          [352, 340],
          [340, 346],
          [354, 274],
          [274, 19],
          [19, 354],
          [363, 456],
          [456, 281],
          [281, 363],
          [426, 436],
          [436, 425],
          [425, 426],
          [380, 381],
          [381, 252],
          [252, 380],
          [267, 269],
          [269, 393],
          [393, 267],
          [421, 200],
          [200, 428],
          [428, 421],
          [371, 266],
          [266, 329],
          [329, 371],
          [432, 287],
          [287, 422],
          [422, 432],
          [290, 250],
          [250, 328],
          [328, 290],
          [385, 258],
          [258, 384],
          [384, 385],
          [446, 265],
          [265, 342],
          [342, 446],
          [386, 387],
          [387, 257],
          [257, 386],
          [422, 424],
          [424, 430],
          [430, 422],
          [445, 342],
          [342, 276],
          [276, 445],
          [422, 273],
          [273, 424],
          [424, 422],
          [306, 292],
          [292, 307],
          [307, 306],
          [
            352,
            366
          ],
          [366, 345],
          [345, 352],
          [268, 271],
          [271, 302],
          [302, 268],
          [358, 423],
          [423, 371],
          [371, 358],
          [327, 294],
          [294, 460],
          [460, 327],
          [331, 279],
          [279, 294],
          [294, 331],
          [303, 271],
          [271, 304],
          [304, 303],
          [436, 432],
          [432, 427],
          [427, 436],
          [304, 272],
          [272, 408],
          [408, 304],
          [395, 394],
          [394, 431],
          [431, 395],
          [378, 395],
          [395, 400],
          [400, 378],
          [296, 334],
          [334, 299],
          [299, 296],
          [6, 351],
          [351, 168],
          [168, 6],
          [376, 352],
          [352, 411],
          [411, 376],
          [307, 325],
          [325, 320],
          [320, 307],
          [285, 295],
          [295, 336],
          [336, 285],
          [320, 319],
          [319, 404],
          [404, 320],
          [329, 330],
          [330, 349],
          [349, 329],
          [334, 293],
          [293, 333],
          [333, 334],
          [366, 323],
          [323, 447],
          [447, 366],
          [316, 15],
          [15, 315],
          [315, 316],
          [331, 358],
          [358, 279],
          [279, 331],
          [317, 14],
          [14, 316],
          [316, 317],
          [8, 285],
          [285, 9],
          [9, 8],
          [277, 329],
          [329, 350],
          [350, 277],
          [253, 374],
          [374, 252],
          [252, 253],
          [319, 318],
          [318, 403],
          [403, 319],
          [351, 6],
          [6, 419],
          [419, 351],
          [324, 318],
          [318, 325],
          [325, 324],
          [397, 367],
          [367, 365],
          [365, 397],
          [288, 435],
          [435, 397],
          [397, 288],
          [278, 344],
          [344, 439],
          [439, 278],
          [310, 272],
          [272, 311],
          [311, 310],
          [248, 195],
          [195, 281],
          [281, 248],
          [375, 273],
          [273, 291],
          [291, 375],
          [175, 396],
          [396, 199],
          [199, 175],
          [312, 311],
          [311, 268],
          [268, 312],
          [276, 283],
          [283, 445],
          [445, 276],
          [390, 373],
          [373, 339],
          [339, 390],
          [295, 282],
          [282, 296],
          [296, 295],
          [448, 449],
          [449, 346],
          [346, 448],
          [356, 264],
          [264, 454],
          [454, 356],
          [337, 336],
          [336, 299],
          [299, 337],
          [337, 338],
          [338, 151],
          [151, 337],
          [294, 278],
          [278, 455],
          [455, 294],
          [308, 292],
          [292, 415],
          [415, 308],
          [429, 358],
          [358, 355],
          [355, 429],
          [265, 340],
          [340, 372],
          [372, 265],
          [352, 346],
          [346, 280],
          [280, 352],
          [295, 442],
          [442, 282],
          [282, 295],
          [354, 19],
          [19, 370],
          [370, 354],
          [285, 441],
          [441, 295],
          [295, 285],
          [
            195,
            248
          ],
          [248, 197],
          [197, 195],
          [457, 440],
          [440, 274],
          [274, 457],
          [301, 300],
          [300, 368],
          [368, 301],
          [417, 351],
          [351, 465],
          [465, 417],
          [251, 301],
          [301, 389],
          [389, 251],
          [394, 395],
          [395, 379],
          [379, 394],
          [399, 412],
          [412, 419],
          [419, 399],
          [410, 436],
          [436, 322],
          [322, 410],
          [326, 2],
          [2, 393],
          [393, 326],
          [354, 370],
          [370, 461],
          [461, 354],
          [393, 164],
          [164, 267],
          [267, 393],
          [268, 302],
          [302, 12],
          [12, 268],
          [312, 268],
          [268, 13],
          [13, 312],
          [298, 293],
          [293, 301],
          [301, 298],
          [265, 446],
          [446, 340],
          [340, 265],
          [280, 330],
          [330, 425],
          [425, 280],
          [322, 426],
          [426, 391],
          [391, 322],
          [
            420,
            429
          ],
          [429, 437],
          [437, 420],
          [393, 391],
          [391, 326],
          [326, 393],
          [344, 440],
          [440, 438],
          [438, 344],
          [458, 459],
          [459, 461],
          [461, 458],
          [364, 434],
          [434, 394],
          [394, 364],
          [428, 396],
          [396, 262],
          [262, 428],
          [274, 354],
          [354, 457],
          [457, 274],
          [317, 316],
          [316, 402],
          [402, 317],
          [316, 315],
          [315, 403],
          [403, 316],
          [315, 314],
          [314, 404],
          [404, 315],
          [314, 313],
          [313, 405],
          [405, 314],
          [313, 421],
          [421, 406],
          [406, 313],
          [323, 366],
          [366, 361],
          [361, 323],
          [292, 306],
          [306, 407],
          [407, 292],
          [306, 291],
          [291, 408],
          [408, 306],
          [291, 287],
          [287, 409],
          [409, 291],
          [287, 432],
          [432, 410],
          [410, 287],
          [427, 434],
          [434, 411],
          [411, 427],
          [372, 264],
          [264, 383],
          [383, 372],
          [459, 309],
          [309, 457],
          [457, 459],
          [366, 352],
          [352, 401],
          [401, 366],
          [1, 274],
          [274, 4],
          [4, 1],
          [418, 421],
          [421, 262],
          [262, 418],
          [331, 294],
          [294, 358],
          [358, 331],
          [435, 433],
          [433, 367],
          [367, 435],
          [392, 289],
          [289, 439],
          [439, 392],
          [328, 462],
          [462, 326],
          [326, 328],
          [94, 2],
          [2, 370],
          [370, 94],
          [289, 305],
          [305, 455],
          [455, 289],
          [339, 254],
          [254, 448],
          [448, 339],
          [359, 255],
          [255, 446],
          [446, 359],
          [254, 253],
          [253, 449],
          [449, 254],
          [253, 252],
          [252, 450],
          [450, 253],
          [252, 256],
          [256, 451],
          [451, 252],
          [
            256,
            341
          ],
          [341, 452],
          [452, 256],
          [414, 413],
          [413, 463],
          [463, 414],
          [286, 441],
          [441, 414],
          [414, 286],
          [286, 258],
          [258, 441],
          [441, 286],
          [258, 257],
          [257, 442],
          [442, 258],
          [257, 259],
          [259, 443],
          [443, 257],
          [259, 260],
          [260, 444],
          [444, 259],
          [260, 467],
          [467, 445],
          [445, 260],
          [309, 459],
          [459, 250],
          [250, 309],
          [305, 289],
          [289, 290],
          [290, 305],
          [305, 290],
          [290, 460],
          [460, 305],
          [401, 376],
          [376, 435],
          [435, 401],
          [309, 250],
          [250, 392],
          [392, 309],
          [376, 411],
          [411, 433],
          [433, 376],
          [453, 341],
          [341, 464],
          [464, 453],
          [357, 453],
          [453, 465],
          [465, 357],
          [343, 357],
          [357, 412],
          [412, 343],
          [437, 343],
          [343, 399],
          [399, 437],
          [344, 360],
          [360, 440],
          [440, 344],
          [420, 437],
          [437, 456],
          [456, 420],
          [360, 420],
          [420, 363],
          [363, 360],
          [361, 401],
          [401, 288],
          [288, 361],
          [265, 372],
          [372, 353],
          [353, 265],
          [390, 339],
          [339, 249],
          [249, 390],
          [339, 448],
          [448, 255],
          [255, 339]
        ]);
        I2("HAND_CONNECTIONS", [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [5, 6], [6, 7], [7, 8], [5, 9], [9, 10], [10, 11], [11, 12], [9, 13], [13, 14], [14, 15], [15, 16], [13, 17], [0, 17], [17, 18], [18, 19], [19, 20]]);
        I2("POSE_CONNECTIONS", [[0, 1], [1, 2], [2, 3], [3, 7], [0, 4], [4, 5], [5, 6], [6, 8], [9, 10], [11, 12], [11, 13], [13, 15], [15, 17], [15, 19], [15, 21], [17, 19], [12, 14], [14, 16], [16, 18], [16, 20], [16, 22], [18, 20], [11, 23], [12, 24], [23, 24], [23, 25], [24, 26], [25, 27], [26, 28], [27, 29], [28, 30], [29, 31], [30, 32], [27, 31], [28, 32]]);
        I2("POSE_LANDMARKS", { NOSE: 0, LEFT_EYE_INNER: 1, LEFT_EYE: 2, LEFT_EYE_OUTER: 3, RIGHT_EYE_INNER: 4, RIGHT_EYE: 5, RIGHT_EYE_OUTER: 6, LEFT_EAR: 7, RIGHT_EAR: 8, LEFT_RIGHT: 9, RIGHT_LEFT: 10, LEFT_SHOULDER: 11, RIGHT_SHOULDER: 12, LEFT_ELBOW: 13, RIGHT_ELBOW: 14, LEFT_WRIST: 15, RIGHT_WRIST: 16, LEFT_PINKY: 17, RIGHT_PINKY: 18, LEFT_INDEX: 19, RIGHT_INDEX: 20, LEFT_THUMB: 21, RIGHT_THUMB: 22, LEFT_HIP: 23, RIGHT_HIP: 24, LEFT_KNEE: 25, RIGHT_KNEE: 26, LEFT_ANKLE: 27, RIGHT_ANKLE: 28, LEFT_HEEL: 29, RIGHT_HEEL: 30, LEFT_FOOT_INDEX: 31, RIGHT_FOOT_INDEX: 32 });
        I2("POSE_LANDMARKS_LEFT", { LEFT_EYE_INNER: 1, LEFT_EYE: 2, LEFT_EYE_OUTER: 3, LEFT_EAR: 7, LEFT_RIGHT: 9, LEFT_SHOULDER: 11, LEFT_ELBOW: 13, LEFT_WRIST: 15, LEFT_PINKY: 17, LEFT_INDEX: 19, LEFT_THUMB: 21, LEFT_HIP: 23, LEFT_KNEE: 25, LEFT_ANKLE: 27, LEFT_HEEL: 29, LEFT_FOOT_INDEX: 31 });
        I2("POSE_LANDMARKS_RIGHT", { RIGHT_EYE_INNER: 4, RIGHT_EYE: 5, RIGHT_EYE_OUTER: 6, RIGHT_EAR: 8, RIGHT_LEFT: 10, RIGHT_SHOULDER: 12, RIGHT_ELBOW: 14, RIGHT_WRIST: 16, RIGHT_PINKY: 18, RIGHT_INDEX: 20, RIGHT_THUMB: 22, RIGHT_HIP: 24, RIGHT_KNEE: 26, RIGHT_ANKLE: 28, RIGHT_HEEL: 30, RIGHT_FOOT_INDEX: 32 });
        I2("POSE_LANDMARKS_NEUTRAL", { NOSE: 0 });
        I2("matrixDataToMatrix", function(a2) {
          for (var b2 = a2.getCols(), c2 = a2.getRows(), d2 = a2.getPackedDataList(), e = [], g2 = 0; g2 < c2; g2++)
            e.push(Array(b2));
          for (g2 = 0; g2 < c2; g2++)
            for (var f2 = 0; f2 < b2; f2++) {
              var k2 = a2.getLayout() === 1 ? g2 * b2 + f2 : f2 * c2 + g2;
              e[g2][f2] = d2[k2];
            }
          return e;
        });
        I2("VERSION", "0.5.1635989137");
      }).call(exports);
    }
  });

  // node_modules/@mediapipe/camera_utils/camera_utils.js
  var require_camera_utils = __commonJS({
    "node_modules/@mediapipe/camera_utils/camera_utils.js"(exports) {
      (function() {
        "use strict";
        function n2(a2) {
          var b2 = 0;
          return function() {
            return b2 < a2.length ? { done: false, value: a2[b2++] } : { done: true };
          };
        }
        var q3 = typeof Object.defineProperties == "function" ? Object.defineProperty : function(a2, b2, e) {
          if (a2 == Array.prototype || a2 == Object.prototype)
            return a2;
          a2[b2] = e.value;
          return a2;
        };
        function t(a2) {
          a2 = [typeof globalThis == "object" && globalThis, a2, typeof window == "object" && window, typeof self == "object" && self, typeof global == "object" && global];
          for (var b2 = 0; b2 < a2.length; ++b2) {
            var e = a2[b2];
            if (e && e.Math == Math)
              return e;
          }
          throw Error("Cannot find global object");
        }
        var u2 = t(this);
        function v2(a2, b2) {
          if (b2)
            a: {
              var e = u2;
              a2 = a2.split(".");
              for (var f2 = 0; f2 < a2.length - 1; f2++) {
                var h2 = a2[f2];
                if (!(h2 in e))
                  break a;
                e = e[h2];
              }
              a2 = a2[a2.length - 1];
              f2 = e[a2];
              b2 = b2(f2);
              b2 != f2 && b2 != null && q3(e, a2, { configurable: true, writable: true, value: b2 });
            }
        }
        v2("Symbol", function(a2) {
          function b2(l2) {
            if (this instanceof b2)
              throw new TypeError("Symbol is not a constructor");
            return new e(f2 + (l2 || "") + "_" + h2++, l2);
          }
          function e(l2, c2) {
            this.g = l2;
            q3(this, "description", { configurable: true, writable: true, value: c2 });
          }
          if (a2)
            return a2;
          e.prototype.toString = function() {
            return this.g;
          };
          var f2 = "jscomp_symbol_" + (1e9 * Math.random() >>> 0) + "_", h2 = 0;
          return b2;
        });
        v2("Symbol.iterator", function(a2) {
          if (a2)
            return a2;
          a2 = Symbol("Symbol.iterator");
          for (var b2 = "Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "), e = 0; e < b2.length; e++) {
            var f2 = u2[b2[e]];
            typeof f2 === "function" && typeof f2.prototype[a2] != "function" && q3(f2.prototype, a2, { configurable: true, writable: true, value: function() {
              return w2(n2(this));
            } });
          }
          return a2;
        });
        function w2(a2) {
          a2 = { next: a2 };
          a2[Symbol.iterator] = function() {
            return this;
          };
          return a2;
        }
        function x2(a2) {
          var b2 = typeof Symbol != "undefined" && Symbol.iterator && a2[Symbol.iterator];
          return b2 ? b2.call(a2) : { next: n2(a2) };
        }
        function y2() {
          this.i = false;
          this.g = null;
          this.o = void 0;
          this.j = 1;
          this.m = 0;
          this.h = null;
        }
        function z2(a2) {
          if (a2.i)
            throw new TypeError("Generator is already running");
          a2.i = true;
        }
        y2.prototype.l = function(a2) {
          this.o = a2;
        };
        function A2(a2, b2) {
          a2.h = { F: b2, G: true };
          a2.j = a2.m;
        }
        y2.prototype.return = function(a2) {
          this.h = { return: a2 };
          this.j = this.m;
        };
        function B2(a2) {
          this.g = new y2();
          this.h = a2;
        }
        function C2(a2, b2) {
          z2(a2.g);
          var e = a2.g.g;
          if (e)
            return D2(a2, "return" in e ? e["return"] : function(f2) {
              return { value: f2, done: true };
            }, b2, a2.g.return);
          a2.g.return(b2);
          return H2(a2);
        }
        function D2(a2, b2, e, f2) {
          try {
            var h2 = b2.call(a2.g.g, e);
            if (!(h2 instanceof Object))
              throw new TypeError("Iterator result " + h2 + " is not an object");
            if (!h2.done)
              return a2.g.i = false, h2;
            var l2 = h2.value;
          } catch (c2) {
            return a2.g.g = null, A2(a2.g, c2), H2(a2);
          }
          a2.g.g = null;
          f2.call(a2.g, l2);
          return H2(a2);
        }
        function H2(a2) {
          for (; a2.g.j; )
            try {
              var b2 = a2.h(a2.g);
              if (b2)
                return a2.g.i = false, { value: b2.value, done: false };
            } catch (e) {
              a2.g.o = void 0, A2(a2.g, e);
            }
          a2.g.i = false;
          if (a2.g.h) {
            b2 = a2.g.h;
            a2.g.h = null;
            if (b2.G)
              throw b2.F;
            return { value: b2.return, done: true };
          }
          return { value: void 0, done: true };
        }
        function I2(a2) {
          this.next = function(b2) {
            z2(a2.g);
            a2.g.g ? b2 = D2(a2, a2.g.g.next, b2, a2.g.l) : (a2.g.l(b2), b2 = H2(a2));
            return b2;
          };
          this.throw = function(b2) {
            z2(a2.g);
            a2.g.g ? b2 = D2(a2, a2.g.g["throw"], b2, a2.g.l) : (A2(a2.g, b2), b2 = H2(a2));
            return b2;
          };
          this.return = function(b2) {
            return C2(a2, b2);
          };
          this[Symbol.iterator] = function() {
            return this;
          };
        }
        function J2(a2) {
          function b2(f2) {
            return a2.next(f2);
          }
          function e(f2) {
            return a2.throw(f2);
          }
          return new Promise(function(f2, h2) {
            function l2(c2) {
              c2.done ? f2(c2.value) : Promise.resolve(c2.value).then(b2, e).then(l2, h2);
            }
            l2(a2.next());
          });
        }
        v2("Promise", function(a2) {
          function b2(c2) {
            this.h = 0;
            this.i = void 0;
            this.g = [];
            this.o = false;
            var d2 = this.j();
            try {
              c2(d2.resolve, d2.reject);
            } catch (g2) {
              d2.reject(g2);
            }
          }
          function e() {
            this.g = null;
          }
          function f2(c2) {
            return c2 instanceof b2 ? c2 : new b2(function(d2) {
              d2(c2);
            });
          }
          if (a2)
            return a2;
          e.prototype.h = function(c2) {
            if (this.g == null) {
              this.g = [];
              var d2 = this;
              this.i(function() {
                d2.l();
              });
            }
            this.g.push(c2);
          };
          var h2 = u2.setTimeout;
          e.prototype.i = function(c2) {
            h2(c2, 0);
          };
          e.prototype.l = function() {
            for (; this.g && this.g.length; ) {
              var c2 = this.g;
              this.g = [];
              for (var d2 = 0; d2 < c2.length; ++d2) {
                var g2 = c2[d2];
                c2[d2] = null;
                try {
                  g2();
                } catch (k2) {
                  this.j(k2);
                }
              }
            }
            this.g = null;
          };
          e.prototype.j = function(c2) {
            this.i(function() {
              throw c2;
            });
          };
          b2.prototype.j = function() {
            function c2(k2) {
              return function(m2) {
                g2 || (g2 = true, k2.call(d2, m2));
              };
            }
            var d2 = this, g2 = false;
            return { resolve: c2(this.A), reject: c2(this.l) };
          };
          b2.prototype.A = function(c2) {
            if (c2 === this)
              this.l(new TypeError("A Promise cannot resolve to itself"));
            else if (c2 instanceof b2)
              this.C(c2);
            else {
              a:
                switch (typeof c2) {
                  case "object":
                    var d2 = c2 != null;
                    break a;
                  case "function":
                    d2 = true;
                    break a;
                  default:
                    d2 = false;
                }
              d2 ? this.v(c2) : this.m(c2);
            }
          };
          b2.prototype.v = function(c2) {
            var d2 = void 0;
            try {
              d2 = c2.then;
            } catch (g2) {
              this.l(g2);
              return;
            }
            typeof d2 == "function" ? this.D(d2, c2) : this.m(c2);
          };
          b2.prototype.l = function(c2) {
            this.u(2, c2);
          };
          b2.prototype.m = function(c2) {
            this.u(1, c2);
          };
          b2.prototype.u = function(c2, d2) {
            if (this.h != 0)
              throw Error("Cannot settle(" + c2 + ", " + d2 + "): Promise already settled in state" + this.h);
            this.h = c2;
            this.i = d2;
            this.h === 2 && this.B();
            this.H();
          };
          b2.prototype.B = function() {
            var c2 = this;
            h2(function() {
              if (c2.I()) {
                var d2 = u2.console;
                typeof d2 !== "undefined" && d2.error(c2.i);
              }
            }, 1);
          };
          b2.prototype.I = function() {
            if (this.o)
              return false;
            var c2 = u2.CustomEvent, d2 = u2.Event, g2 = u2.dispatchEvent;
            if (typeof g2 === "undefined")
              return true;
            typeof c2 === "function" ? c2 = new c2("unhandledrejection", { cancelable: true }) : typeof d2 === "function" ? c2 = new d2("unhandledrejection", { cancelable: true }) : (c2 = u2.document.createEvent("CustomEvent"), c2.initCustomEvent("unhandledrejection", false, true, c2));
            c2.promise = this;
            c2.reason = this.i;
            return g2(c2);
          };
          b2.prototype.H = function() {
            if (this.g != null) {
              for (var c2 = 0; c2 < this.g.length; ++c2)
                l2.h(this.g[c2]);
              this.g = null;
            }
          };
          var l2 = new e();
          b2.prototype.C = function(c2) {
            var d2 = this.j();
            c2.s(d2.resolve, d2.reject);
          };
          b2.prototype.D = function(c2, d2) {
            var g2 = this.j();
            try {
              c2.call(d2, g2.resolve, g2.reject);
            } catch (k2) {
              g2.reject(k2);
            }
          };
          b2.prototype.then = function(c2, d2) {
            function g2(p3, r2) {
              return typeof p3 == "function" ? function(E2) {
                try {
                  k2(p3(E2));
                } catch (F2) {
                  m2(F2);
                }
              } : r2;
            }
            var k2, m2, G2 = new b2(function(p3, r2) {
              k2 = p3;
              m2 = r2;
            });
            this.s(g2(c2, k2), g2(d2, m2));
            return G2;
          };
          b2.prototype.catch = function(c2) {
            return this.then(void 0, c2);
          };
          b2.prototype.s = function(c2, d2) {
            function g2() {
              switch (k2.h) {
                case 1:
                  c2(k2.i);
                  break;
                case 2:
                  d2(k2.i);
                  break;
                default:
                  throw Error("Unexpected state: " + k2.h);
              }
            }
            var k2 = this;
            this.g == null ? l2.h(g2) : this.g.push(g2);
            this.o = true;
          };
          b2.resolve = f2;
          b2.reject = function(c2) {
            return new b2(function(d2, g2) {
              g2(c2);
            });
          };
          b2.race = function(c2) {
            return new b2(function(d2, g2) {
              for (var k2 = x2(c2), m2 = k2.next(); !m2.done; m2 = k2.next())
                f2(m2.value).s(d2, g2);
            });
          };
          b2.all = function(c2) {
            var d2 = x2(c2), g2 = d2.next();
            return g2.done ? f2([]) : new b2(function(k2, m2) {
              function G2(E2) {
                return function(F2) {
                  p3[E2] = F2;
                  r2--;
                  r2 == 0 && k2(p3);
                };
              }
              var p3 = [], r2 = 0;
              do
                p3.push(void 0), r2++, f2(g2.value).s(G2(p3.length - 1), m2), g2 = d2.next();
              while (!g2.done);
            });
          };
          return b2;
        });
        var K2 = typeof Object.assign == "function" ? Object.assign : function(a2, b2) {
          for (var e = 1; e < arguments.length; e++) {
            var f2 = arguments[e];
            if (f2)
              for (var h2 in f2)
                Object.prototype.hasOwnProperty.call(f2, h2) && (a2[h2] = f2[h2]);
          }
          return a2;
        };
        v2("Object.assign", function(a2) {
          return a2 || K2;
        });
        var L2 = this || self;
        var M2 = { facingMode: "user", width: 640, height: 480 };
        function N2(a2, b2) {
          this.video = a2;
          this.i = 0;
          this.h = Object.assign(Object.assign({}, M2), b2);
        }
        N2.prototype.stop = function() {
          var a2 = this, b2, e, f2, h2;
          return J2(new I2(new B2(function(l2) {
            if (a2.g) {
              b2 = a2.g.getTracks();
              e = x2(b2);
              for (f2 = e.next(); !f2.done; f2 = e.next())
                h2 = f2.value, h2.stop();
              a2.g = void 0;
            }
            l2.j = 0;
          })));
        };
        N2.prototype.start = function() {
          var a2 = this, b2;
          return J2(new I2(new B2(function(e) {
            navigator.mediaDevices && navigator.mediaDevices.getUserMedia || alert("No navigator.mediaDevices.getUserMedia exists.");
            b2 = a2.h;
            return e.return(navigator.mediaDevices.getUserMedia({ video: { facingMode: b2.facingMode, width: b2.width, height: b2.height } }).then(function(f2) {
              O2(a2, f2);
            }).catch(function(f2) {
              var h2 = "Failed to acquire camera feed: " + f2;
              console.error(h2);
              alert(h2);
              throw f2;
            }));
          })));
        };
        function P2(a2) {
          window.requestAnimationFrame(function() {
            Q2(a2);
          });
        }
        function O2(a2, b2) {
          a2.g = b2;
          a2.video.srcObject = b2;
          a2.video.onloadedmetadata = function() {
            a2.video.play();
            P2(a2);
          };
        }
        function Q2(a2) {
          var b2 = null;
          a2.video.paused || a2.video.currentTime === a2.i || (a2.i = a2.video.currentTime, b2 = a2.h.onFrame());
          b2 ? b2.then(function() {
            P2(a2);
          }) : P2(a2);
        }
        var R2 = ["Camera"], S2 = L2;
        R2[0] in S2 || typeof S2.execScript == "undefined" || S2.execScript("var " + R2[0]);
        for (var T2; R2.length && (T2 = R2.shift()); )
          R2.length || N2 === void 0 ? S2[T2] && S2[T2] !== Object.prototype[T2] ? S2 = S2[T2] : S2 = S2[T2] = {} : S2[T2] = N2;
      }).call(exports);
    }
  });

  // src/state.ts
  var state_default = {
    "binds": {
      "n": "control selfie",
      "m": "control not selfie",
      "h": "hi! | hey ! | hey you! | hello...",
      "i": "it's doer 1 | it's me, doer 1 | doer 1 that's me",
      "f1": "control help",
      "f2": "control not help"
    },
    "vars": {},
    "selfie": false,
    avatar: {
      doer: "./vrm/doer.2.vrm",
      current: "./vrm/doer.2.vrm"
    },
    visible: true
  };

  // src/value.ts
  var Value = class {
    constructor(value = void 0) {
      this.$ = value;
    }
    set(value) {
      this.$ = value;
      this.poke();
      return this;
    }
    on(subscribe2) {
      if (this.reactions === void 0) {
        this.reactions = /* @__PURE__ */ new Set();
      }
      this.reactions.add(subscribe2);
      subscribe2(this.$);
      return () => this.reactions.delete(subscribe2);
    }
    subscribe(subscribe2) {
      return this.on(subscribe2);
    }
    log(msg) {
      this.on(() => console.log(msg, this.$));
      return this;
    }
    poke() {
      if (this.reactions === void 0)
        return;
      for (let callback of this.reactions) {
        callback(this.$);
      }
      return this;
    }
    do(fn) {
      fn();
      return this;
    }
    re(fn) {
      this.on(fn);
      return this;
    }
    me() {
      return new Value(this.$);
    }
    fa(v2, transform, filter) {
      v2.on((state2) => {
        if (filter) {
          if (!filter(state2))
            return;
        }
        if (transform) {
          this.set(transform(state2));
        } else {
          this.set(state2);
        }
      });
      return this;
    }
    la(timing, fn) {
      let i2 = 0;
      setInterval(() => {
        fn(i2++);
      }, timing);
      return this;
    }
    save(where) {
      try {
        const v2 = JSON.parse(localStorage.getItem(where));
        if (v2 !== void 0 && v2 !== null) {
          this.set(v2);
        }
      } catch (ex) {
      }
      this.on((v2) => {
        localStorage.setItem(where, JSON.stringify(v2));
      });
      return this;
    }
  };

  // src/timing.ts
  var tick = new Value(0);
  var avatar_current = new Value(state_default.avatar.current).save("avatar_current_2");
  var avatar_doer = new Value(state_default.avatar.doer).save("avatar_doer_1");
  var voice_current = new Value("Guy | UK English").save("voice_current");
  var voice_doer = new Value("Aus | UK English").save("voice_doer");
  var scouter = new Value("green").save("scouter");
  var videos = new Value(["BzIeSMDe85U", "MePBW53Rtpw", "lyDJOPuanO0"]);
  var video = new Value("doer1.8").save("video_2");
  var open_ui = new Value(true).save("ui");
  var open_home = new Value(true);
  var open_game = new Value(false);
  var open_text = new Value(void 0);
  var open_loading = new Value(false);
  var open_help = new Value(false);
  var open_stats = new Value(false).save("stats");
  var open_heard = new Value(true).save("heard");
  var open_debug = new Value(false).save("debugger");
  var open_targeting = new Value(false).save("targeting_3");
  var open_live = new Value(false);
  var open_hostid = new Value(true);
  var loc = location.search.slice(1).split("&").map((i2) => i2.split("="));
  var args = new Value(new Map(loc));
  var camera = new Value();
  var camera_el = new Value();
  var toggle_selfie = new Value(state_default.selfie).save("selfie");
  var toggle_visible = new Value(state_default.visible).save("visible");
  var do_echo = new Value(true).save("do_echo");
  var do_vary = new Value(true);
  var time = new Value(new AFRAME.THREE.Uniform(0));
  var size = new Value(new AFRAME.THREE.Vector3(1, 1, 1));
  open_game.on(($g) => {
    if (open_game.$) {
      open_loading.set(true);
    }
  });
  var motd = new Value(`\u{1F38A}v0.2.2\u{1F38A}

\u2705 WebSocket MMO
\u274C Recording Mode

\u274C Targeting
\u274C AI DOER \u274C Gameplay 
\u274C Factions \u274C Rules 

Camera data is processed by mediapipe via tensorflow locally.

Microphone data is handled by the browser provider, ie: Chrome / Edge / etc.

Cookies are not used to track your personal data by us. localStorage is used for persistance. 
There are iframes to 3rd parties that may attempt to track you, like youtube. 
Users can load assets remotely using HTTP to other websites. We're not responsible for their content, contact the host directly.
If that's a problem then reject this terms of use by closing your browser or navigating away from this website.

Accountless. 

Age 18+ only.

`);
  var ticker = () => {
    requestAnimationFrame(ticker);
    tick.set(tick.$ + 1);
  };
  var loading = new Value(`Loading...

 WASD Move > Q+E Rotate
 Enter > Chat
     ~ > Command
 Space > Jump
 
 Default Binds:

 N: Selfie
 M: NotSelfie
 H: Hi | Hi! | Hello | Heya | Yo
 F1: Help
 F2: NotHelp
`);
  ticker();
  var helptext = new Value(`\u{1F916}Commands\u{1F916}

~ echo 
echo on, persisted

~ not echo 
echo off, persisted

~ avatar ...url 
set avatar to URL, persisted

~ clear avatar 
set avatar to default

~ bind key ...commands 
bind key to commands, persisted

~ not bind key
unbinds key, persisted

~ var name ...commands 
binds variable name to commands

~ not var name 
unbinds variable name

~ stats 
show fps stats

~ not stats
hide fps stats

~ heard
show top heard messages

~ not heard
hide top heard messages

~ help
show this help

~ not help
hide this help

~ voice ...nameToSearch
set voice to nameToSearch ie: aus would find an Australian voice or UK for British, persisted
per browser

~ swap
swap places with your doer

~ visible
show your avatar

~ not visible
hide your avatar

~ selfie
selfie camera mode

~ not selfie
not selfie camera mode

~ target
show targeting UI, persists

~ not target
hide targeting UI, persists

~ scouter ...color
set your targeting UI to be that color, persists

~ not scouter
reset scout color to green, persists
`);

  // src/component/net.ts
  var host = new Value(args.$.has("host"));
  var guest = new Value(args.$.has("join"));
  var room = new Value(args.$.get("join"));
  var passcode = new Value("").save("passcode");
  var scene;
  var paths = {};
  var state = {};
  var update = {};
  var interop = 0;
  AFRAME.registerSystem("net", {
    init() {
      scene = this.el.object3D;
      this.tick = AFRAME.utils.throttleTick(this.tick, 200, this);
      guest.on(() => {
        if (!guest.$)
          return;
        this.connect();
        console.log(scene.components);
      });
      host.on(() => {
        if (!host.$)
          return;
        this.connect();
      });
    },
    process() {
      for (let entry of Object.entries(update)) {
        const [path, value] = entry;
        if (state[path]) {
          Object.assign(state[path], value);
        } else {
          state[path] = value;
        }
      }
    },
    tick() {
      if (!host.$)
        return;
      this.process();
      if (!this.ready) {
        update = {};
        return;
      }
      this.ws.send("UPD" /* UPDATE */ + this.password + JSON.stringify(update));
      update = {};
    },
    fullUpdate() {
      this.ws.send("UPD" /* UPDATE */ + this.password + JSON.stringify(state));
    },
    connect() {
      if (this.ws)
        return;
      console.log("connecting");
      const lhost = window.location.host === "a.goblin.life" ? "ws.goblin.life" : window.location.host;
      const ws = new WebSocket(`${window.location.protocol === "https" ? "wss" : "ws"}://${lhost}/`);
      this.ws = ws;
      ws.addEventListener("close", () => {
        console.log("closed");
        this.ws = void 0;
        setTimeout(() => {
          this.connect();
        }, 1e4);
      });
      ws.addEventListener("open", () => {
        console.log("connected");
        if (host.$) {
          console.log("send host");
          this.ws.send("HST" /* HOST */ + room.$);
        }
        if (guest.$) {
          this.ws.send("JON" /* JOIN */ + room.$);
          this.ready = true;
        }
      });
      ws.addEventListener("message", (e) => {
        switch ("" + e.data.slice(0, 3)) {
          default:
            console.log(e.data.slice(0, 3));
            break;
          case "ERR" /* ERROR */:
            console.log("ERROR", e.data.slice(3));
            break;
          case "UPD" /* UPDATE */:
            if (host.$)
              return;
            interop = 0;
            const update3 = JSON.parse(e.data.slice(3));
            for (let entry of Object.entries(update3)) {
              const [path, value] = entry;
              if (!paths[path])
                continue;
              if (!state[path]) {
                state[path] = value;
              } else {
                Object.assign(state[path], value);
              }
              paths[path].components.host.netUpdate(value);
            }
            break;
          case "HST" /* HOST */:
            console.log("got host");
            this.password = "" + e.data.slice(3, 39);
            passcode.set(this.password);
            room.set("" + e.data.slice(39));
            this.ready = true;
            this.fullUpdate();
            break;
        }
      });
    }
  });
  function Mixins(el) {
    return el.mixinEls.map((el2) => el2.id).join(".");
  }
  function MakePath(el) {
    if (el.tagName === "A-SCENE") {
      return "";
    } else {
      const target = el.parentNode;
      const p3 = MakePath(target);
      const host2 = el.components.host?.data !== void 0 && typeof el.components.host.data === "string" ? el.components.host.data : false;
      return (p3 !== "" ? p3 + "/" : "") + (host2 || el.id || Mixins(el)) || "";
    }
  }
  var p = new AFRAME.THREE.Vector3();
  var s = new AFRAME.THREE.Vector3();
  var q = new AFRAME.THREE.Quaternion();
  AFRAME.registerComponent("host", {
    schema: {
      type: "string"
    },
    init() {
      this.slowtick = AFRAME.utils.throttleTick(this.slowtick, 200, this);
      this.netpath = MakePath(this.el);
      let i2 = 2;
      const og = this.netpath;
      while (paths[this.netpath]) {
        this.netpath = og + i2;
        i2++;
      }
      paths[this.netpath] = this.el;
      this.cancel = host.on(($h) => {
        if (!$h)
          return;
        this.markUpdate();
        state[this.netpath] = update[this.netpath];
      });
    },
    markUpdate() {
      const u2 = update[this.netpath] = update[this.netpath] || {};
      const o3d = this.el.object3D;
      u2.p = o3d.position.toArray(u2.p);
      u2.q = o3d.quaternion.toArray(u2.q);
      u2.s = o3d.scale.toArray(u2.s);
      u2.v = o3d.visible ? 1 : 0;
    },
    slowtick() {
      let type = this.el.components["ammo-body"].data.type;
      if (guest.$ && (type === "kinematic" || type === "dynamic")) {
        type = this.el.components["ammo-body"].data.type = "static";
      }
      if (!host.$ || type === "static")
        return;
      this.markUpdate();
    },
    tick(_2, dt) {
      this.slowtick();
      interop += dt / 1e3;
      if (guest.$ && state[this.netpath] && this.lastUpdate > interop) {
        const i2 = Math.min(1, interop / 350);
        const o3d = this.el.object3D;
        q.fromArray(state[this.netpath].q);
        if (Math.abs(o3d.quaternion.angleTo(q)) > 1e-3)
          o3d.quaternion.slerp(q, i2);
        p.fromArray(state[this.netpath].p);
        if (o3d.position.distanceTo(p) > 1e-3)
          o3d.position.lerp(p, i2);
        s.fromArray(state[this.netpath].s);
        if (o3d.scale.distanceTo(s) > 1e-3)
          o3d.scale.lerp(s, i2);
      }
    },
    netUpdate(update3) {
      this.lastUpdate = interop + 250;
      const o3d = this.el.object3D;
      if (update3.v !== void 0) {
        o3d.visible = update3.v;
      }
    },
    remove() {
      delete paths[this.netpath];
      this.cancel();
    }
  });
  AFRAME.registerComponent("avatar", {
    init() {
    }
  });

  // node_modules/three/build/three.module.js
  var REVISION = "137";
  var CullFaceNone = 0;
  var CullFaceBack = 1;
  var CullFaceFront = 2;
  var PCFShadowMap = 1;
  var PCFSoftShadowMap = 2;
  var VSMShadowMap = 3;
  var FrontSide = 0;
  var BackSide = 1;
  var DoubleSide = 2;
  var FlatShading = 1;
  var NoBlending = 0;
  var NormalBlending = 1;
  var AdditiveBlending = 2;
  var SubtractiveBlending = 3;
  var MultiplyBlending = 4;
  var CustomBlending = 5;
  var AddEquation = 100;
  var SubtractEquation = 101;
  var ReverseSubtractEquation = 102;
  var MinEquation = 103;
  var MaxEquation = 104;
  var ZeroFactor = 200;
  var OneFactor = 201;
  var SrcColorFactor = 202;
  var OneMinusSrcColorFactor = 203;
  var SrcAlphaFactor = 204;
  var OneMinusSrcAlphaFactor = 205;
  var DstAlphaFactor = 206;
  var OneMinusDstAlphaFactor = 207;
  var DstColorFactor = 208;
  var OneMinusDstColorFactor = 209;
  var SrcAlphaSaturateFactor = 210;
  var NeverDepth = 0;
  var AlwaysDepth = 1;
  var LessDepth = 2;
  var LessEqualDepth = 3;
  var EqualDepth = 4;
  var GreaterEqualDepth = 5;
  var GreaterDepth = 6;
  var NotEqualDepth = 7;
  var MultiplyOperation = 0;
  var MixOperation = 1;
  var AddOperation = 2;
  var NoToneMapping = 0;
  var LinearToneMapping = 1;
  var ReinhardToneMapping = 2;
  var CineonToneMapping = 3;
  var ACESFilmicToneMapping = 4;
  var CustomToneMapping = 5;
  var UVMapping = 300;
  var CubeReflectionMapping = 301;
  var CubeRefractionMapping = 302;
  var EquirectangularReflectionMapping = 303;
  var EquirectangularRefractionMapping = 304;
  var CubeUVReflectionMapping = 306;
  var CubeUVRefractionMapping = 307;
  var RepeatWrapping = 1e3;
  var ClampToEdgeWrapping = 1001;
  var MirroredRepeatWrapping = 1002;
  var NearestFilter = 1003;
  var NearestMipmapNearestFilter = 1004;
  var NearestMipmapLinearFilter = 1005;
  var LinearFilter = 1006;
  var LinearMipmapNearestFilter = 1007;
  var LinearMipmapLinearFilter = 1008;
  var UnsignedByteType = 1009;
  var ByteType = 1010;
  var ShortType = 1011;
  var UnsignedShortType = 1012;
  var IntType = 1013;
  var UnsignedIntType = 1014;
  var FloatType = 1015;
  var HalfFloatType = 1016;
  var UnsignedShort4444Type = 1017;
  var UnsignedShort5551Type = 1018;
  var UnsignedInt248Type = 1020;
  var AlphaFormat = 1021;
  var RGBFormat = 1022;
  var RGBAFormat = 1023;
  var LuminanceFormat = 1024;
  var LuminanceAlphaFormat = 1025;
  var DepthFormat = 1026;
  var DepthStencilFormat = 1027;
  var RedFormat = 1028;
  var RedIntegerFormat = 1029;
  var RGFormat = 1030;
  var RGIntegerFormat = 1031;
  var RGBAIntegerFormat = 1033;
  var RGB_S3TC_DXT1_Format = 33776;
  var RGBA_S3TC_DXT1_Format = 33777;
  var RGBA_S3TC_DXT3_Format = 33778;
  var RGBA_S3TC_DXT5_Format = 33779;
  var RGB_PVRTC_4BPPV1_Format = 35840;
  var RGB_PVRTC_2BPPV1_Format = 35841;
  var RGBA_PVRTC_4BPPV1_Format = 35842;
  var RGBA_PVRTC_2BPPV1_Format = 35843;
  var RGB_ETC1_Format = 36196;
  var RGB_ETC2_Format = 37492;
  var RGBA_ETC2_EAC_Format = 37496;
  var RGBA_ASTC_4x4_Format = 37808;
  var RGBA_ASTC_5x4_Format = 37809;
  var RGBA_ASTC_5x5_Format = 37810;
  var RGBA_ASTC_6x5_Format = 37811;
  var RGBA_ASTC_6x6_Format = 37812;
  var RGBA_ASTC_8x5_Format = 37813;
  var RGBA_ASTC_8x6_Format = 37814;
  var RGBA_ASTC_8x8_Format = 37815;
  var RGBA_ASTC_10x5_Format = 37816;
  var RGBA_ASTC_10x6_Format = 37817;
  var RGBA_ASTC_10x8_Format = 37818;
  var RGBA_ASTC_10x10_Format = 37819;
  var RGBA_ASTC_12x10_Format = 37820;
  var RGBA_ASTC_12x12_Format = 37821;
  var RGBA_BPTC_Format = 36492;
  var LoopOnce = 2200;
  var LoopRepeat = 2201;
  var LoopPingPong = 2202;
  var InterpolateDiscrete = 2300;
  var InterpolateLinear = 2301;
  var InterpolateSmooth = 2302;
  var ZeroCurvatureEnding = 2400;
  var ZeroSlopeEnding = 2401;
  var WrapAroundEnding = 2402;
  var NormalAnimationBlendMode = 2500;
  var AdditiveAnimationBlendMode = 2501;
  var TrianglesDrawMode = 0;
  var LinearEncoding = 3e3;
  var sRGBEncoding = 3001;
  var BasicDepthPacking = 3200;
  var RGBADepthPacking = 3201;
  var TangentSpaceNormalMap = 0;
  var ObjectSpaceNormalMap = 1;
  var KeepStencilOp = 7680;
  var AlwaysStencilFunc = 519;
  var StaticDrawUsage = 35044;
  var DynamicDrawUsage = 35048;
  var GLSL3 = "300 es";
  var _SRGBAFormat = 1035;
  var EventDispatcher = class {
    addEventListener(type, listener) {
      if (this._listeners === void 0)
        this._listeners = {};
      const listeners = this._listeners;
      if (listeners[type] === void 0) {
        listeners[type] = [];
      }
      if (listeners[type].indexOf(listener) === -1) {
        listeners[type].push(listener);
      }
    }
    hasEventListener(type, listener) {
      if (this._listeners === void 0)
        return false;
      const listeners = this._listeners;
      return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
    }
    removeEventListener(type, listener) {
      if (this._listeners === void 0)
        return;
      const listeners = this._listeners;
      const listenerArray = listeners[type];
      if (listenerArray !== void 0) {
        const index = listenerArray.indexOf(listener);
        if (index !== -1) {
          listenerArray.splice(index, 1);
        }
      }
    }
    dispatchEvent(event) {
      if (this._listeners === void 0)
        return;
      const listeners = this._listeners;
      const listenerArray = listeners[event.type];
      if (listenerArray !== void 0) {
        event.target = this;
        const array = listenerArray.slice(0);
        for (let i2 = 0, l2 = array.length; i2 < l2; i2++) {
          array[i2].call(this, event);
        }
        event.target = null;
      }
    }
  };
  var _lut = [];
  for (let i2 = 0; i2 < 256; i2++) {
    _lut[i2] = (i2 < 16 ? "0" : "") + i2.toString(16);
  }
  var DEG2RAD = Math.PI / 180;
  var RAD2DEG = 180 / Math.PI;
  function generateUUID() {
    const d0 = Math.random() * 4294967295 | 0;
    const d1 = Math.random() * 4294967295 | 0;
    const d2 = Math.random() * 4294967295 | 0;
    const d3 = Math.random() * 4294967295 | 0;
    const uuid = _lut[d0 & 255] + _lut[d0 >> 8 & 255] + _lut[d0 >> 16 & 255] + _lut[d0 >> 24 & 255] + "-" + _lut[d1 & 255] + _lut[d1 >> 8 & 255] + "-" + _lut[d1 >> 16 & 15 | 64] + _lut[d1 >> 24 & 255] + "-" + _lut[d2 & 63 | 128] + _lut[d2 >> 8 & 255] + "-" + _lut[d2 >> 16 & 255] + _lut[d2 >> 24 & 255] + _lut[d3 & 255] + _lut[d3 >> 8 & 255] + _lut[d3 >> 16 & 255] + _lut[d3 >> 24 & 255];
    return uuid.toUpperCase();
  }
  function clamp(value, min, max) {
    return Math.max(min, Math.min(max, value));
  }
  function euclideanModulo(n2, m2) {
    return (n2 % m2 + m2) % m2;
  }
  function lerp(x2, y2, t) {
    return (1 - t) * x2 + t * y2;
  }
  function isPowerOfTwo(value) {
    return (value & value - 1) === 0 && value !== 0;
  }
  function ceilPowerOfTwo(value) {
    return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
  }
  function floorPowerOfTwo(value) {
    return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
  }
  var Vector2 = class {
    constructor(x2 = 0, y2 = 0) {
      this.x = x2;
      this.y = y2;
    }
    get width() {
      return this.x;
    }
    set width(value) {
      this.x = value;
    }
    get height() {
      return this.y;
    }
    set height(value) {
      this.y = value;
    }
    set(x2, y2) {
      this.x = x2;
      this.y = y2;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      return this;
    }
    setX(x2) {
      this.x = x2;
      return this;
    }
    setY(y2) {
      this.y = y2;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y);
    }
    copy(v2) {
      this.x = v2.x;
      this.y = v2.y;
      return this;
    }
    add(v2, w2) {
      if (w2 !== void 0) {
        console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
        return this.addVectors(v2, w2);
      }
      this.x += v2.x;
      this.y += v2.y;
      return this;
    }
    addScalar(s3) {
      this.x += s3;
      this.y += s3;
      return this;
    }
    addVectors(a2, b2) {
      this.x = a2.x + b2.x;
      this.y = a2.y + b2.y;
      return this;
    }
    addScaledVector(v2, s3) {
      this.x += v2.x * s3;
      this.y += v2.y * s3;
      return this;
    }
    sub(v2, w2) {
      if (w2 !== void 0) {
        console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
        return this.subVectors(v2, w2);
      }
      this.x -= v2.x;
      this.y -= v2.y;
      return this;
    }
    subScalar(s3) {
      this.x -= s3;
      this.y -= s3;
      return this;
    }
    subVectors(a2, b2) {
      this.x = a2.x - b2.x;
      this.y = a2.y - b2.y;
      return this;
    }
    multiply(v2) {
      this.x *= v2.x;
      this.y *= v2.y;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      return this;
    }
    divide(v2) {
      this.x /= v2.x;
      this.y /= v2.y;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    applyMatrix3(m2) {
      const x2 = this.x, y2 = this.y;
      const e = m2.elements;
      this.x = e[0] * x2 + e[3] * y2 + e[6];
      this.y = e[1] * x2 + e[4] * y2 + e[7];
      return this;
    }
    min(v2) {
      this.x = Math.min(this.x, v2.x);
      this.y = Math.min(this.y, v2.y);
      return this;
    }
    max(v2) {
      this.x = Math.max(this.x, v2.x);
      this.y = Math.max(this.y, v2.y);
      return this;
    }
    clamp(min, max) {
      this.x = Math.max(min.x, Math.min(max.x, this.x));
      this.y = Math.max(min.y, Math.min(max.y, this.y));
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = Math.max(minVal, Math.min(maxVal, this.x));
      this.y = Math.max(minVal, Math.min(maxVal, this.y));
      return this;
    }
    clampLength(min, max) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      return this;
    }
    roundToZero() {
      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      return this;
    }
    dot(v2) {
      return this.x * v2.x + this.y * v2.y;
    }
    cross(v2) {
      return this.x * v2.y - this.y * v2.x;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    angle() {
      const angle = Math.atan2(-this.y, -this.x) + Math.PI;
      return angle;
    }
    distanceTo(v2) {
      return Math.sqrt(this.distanceToSquared(v2));
    }
    distanceToSquared(v2) {
      const dx = this.x - v2.x, dy = this.y - v2.y;
      return dx * dx + dy * dy;
    }
    manhattanDistanceTo(v2) {
      return Math.abs(this.x - v2.x) + Math.abs(this.y - v2.y);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v2, alpha) {
      this.x += (v2.x - this.x) * alpha;
      this.y += (v2.y - this.y) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      return this;
    }
    equals(v2) {
      return v2.x === this.x && v2.y === this.y;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      return array;
    }
    fromBufferAttribute(attribute, index, offset) {
      if (offset !== void 0) {
        console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute().");
      }
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      return this;
    }
    rotateAround(center, angle) {
      const c2 = Math.cos(angle), s3 = Math.sin(angle);
      const x2 = this.x - center.x;
      const y2 = this.y - center.y;
      this.x = x2 * c2 - y2 * s3 + center.x;
      this.y = x2 * s3 + y2 * c2 + center.y;
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
    }
  };
  Vector2.prototype.isVector2 = true;
  var Matrix3 = class {
    constructor() {
      this.elements = [
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1
      ];
      if (arguments.length > 0) {
        console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
      }
    }
    set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
      const te2 = this.elements;
      te2[0] = n11;
      te2[1] = n21;
      te2[2] = n31;
      te2[3] = n12;
      te2[4] = n22;
      te2[5] = n32;
      te2[6] = n13;
      te2[7] = n23;
      te2[8] = n33;
      return this;
    }
    identity() {
      this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
      return this;
    }
    copy(m2) {
      const te2 = this.elements;
      const me2 = m2.elements;
      te2[0] = me2[0];
      te2[1] = me2[1];
      te2[2] = me2[2];
      te2[3] = me2[3];
      te2[4] = me2[4];
      te2[5] = me2[5];
      te2[6] = me2[6];
      te2[7] = me2[7];
      te2[8] = me2[8];
      return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
      xAxis.setFromMatrix3Column(this, 0);
      yAxis.setFromMatrix3Column(this, 1);
      zAxis.setFromMatrix3Column(this, 2);
      return this;
    }
    setFromMatrix4(m2) {
      const me2 = m2.elements;
      this.set(me2[0], me2[4], me2[8], me2[1], me2[5], me2[9], me2[2], me2[6], me2[10]);
      return this;
    }
    multiply(m2) {
      return this.multiplyMatrices(this, m2);
    }
    premultiply(m2) {
      return this.multiplyMatrices(m2, this);
    }
    multiplyMatrices(a2, b2) {
      const ae2 = a2.elements;
      const be = b2.elements;
      const te2 = this.elements;
      const a11 = ae2[0], a12 = ae2[3], a13 = ae2[6];
      const a21 = ae2[1], a22 = ae2[4], a23 = ae2[7];
      const a31 = ae2[2], a32 = ae2[5], a33 = ae2[8];
      const b11 = be[0], b12 = be[3], b13 = be[6];
      const b21 = be[1], b22 = be[4], b23 = be[7];
      const b31 = be[2], b32 = be[5], b33 = be[8];
      te2[0] = a11 * b11 + a12 * b21 + a13 * b31;
      te2[3] = a11 * b12 + a12 * b22 + a13 * b32;
      te2[6] = a11 * b13 + a12 * b23 + a13 * b33;
      te2[1] = a21 * b11 + a22 * b21 + a23 * b31;
      te2[4] = a21 * b12 + a22 * b22 + a23 * b32;
      te2[7] = a21 * b13 + a22 * b23 + a23 * b33;
      te2[2] = a31 * b11 + a32 * b21 + a33 * b31;
      te2[5] = a31 * b12 + a32 * b22 + a33 * b32;
      te2[8] = a31 * b13 + a32 * b23 + a33 * b33;
      return this;
    }
    multiplyScalar(s3) {
      const te2 = this.elements;
      te2[0] *= s3;
      te2[3] *= s3;
      te2[6] *= s3;
      te2[1] *= s3;
      te2[4] *= s3;
      te2[7] *= s3;
      te2[2] *= s3;
      te2[5] *= s3;
      te2[8] *= s3;
      return this;
    }
    determinant() {
      const te2 = this.elements;
      const a2 = te2[0], b2 = te2[1], c2 = te2[2], d2 = te2[3], e = te2[4], f2 = te2[5], g2 = te2[6], h2 = te2[7], i2 = te2[8];
      return a2 * e * i2 - a2 * f2 * h2 - b2 * d2 * i2 + b2 * f2 * g2 + c2 * d2 * h2 - c2 * e * g2;
    }
    invert() {
      const te2 = this.elements, n11 = te2[0], n21 = te2[1], n31 = te2[2], n12 = te2[3], n22 = te2[4], n32 = te2[5], n13 = te2[6], n23 = te2[7], n33 = te2[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
      if (det === 0)
        return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
      const detInv = 1 / det;
      te2[0] = t11 * detInv;
      te2[1] = (n31 * n23 - n33 * n21) * detInv;
      te2[2] = (n32 * n21 - n31 * n22) * detInv;
      te2[3] = t12 * detInv;
      te2[4] = (n33 * n11 - n31 * n13) * detInv;
      te2[5] = (n31 * n12 - n32 * n11) * detInv;
      te2[6] = t13 * detInv;
      te2[7] = (n21 * n13 - n23 * n11) * detInv;
      te2[8] = (n22 * n11 - n21 * n12) * detInv;
      return this;
    }
    transpose() {
      let tmp2;
      const m2 = this.elements;
      tmp2 = m2[1];
      m2[1] = m2[3];
      m2[3] = tmp2;
      tmp2 = m2[2];
      m2[2] = m2[6];
      m2[6] = tmp2;
      tmp2 = m2[5];
      m2[5] = m2[7];
      m2[7] = tmp2;
      return this;
    }
    getNormalMatrix(matrix4) {
      return this.setFromMatrix4(matrix4).invert().transpose();
    }
    transposeIntoArray(r2) {
      const m2 = this.elements;
      r2[0] = m2[0];
      r2[1] = m2[3];
      r2[2] = m2[6];
      r2[3] = m2[1];
      r2[4] = m2[4];
      r2[5] = m2[7];
      r2[6] = m2[2];
      r2[7] = m2[5];
      r2[8] = m2[8];
      return this;
    }
    setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
      const c2 = Math.cos(rotation);
      const s3 = Math.sin(rotation);
      this.set(sx * c2, sx * s3, -sx * (c2 * cx + s3 * cy) + cx + tx, -sy * s3, sy * c2, -sy * (-s3 * cx + c2 * cy) + cy + ty, 0, 0, 1);
      return this;
    }
    scale(sx, sy) {
      const te2 = this.elements;
      te2[0] *= sx;
      te2[3] *= sx;
      te2[6] *= sx;
      te2[1] *= sy;
      te2[4] *= sy;
      te2[7] *= sy;
      return this;
    }
    rotate(theta) {
      const c2 = Math.cos(theta);
      const s3 = Math.sin(theta);
      const te2 = this.elements;
      const a11 = te2[0], a12 = te2[3], a13 = te2[6];
      const a21 = te2[1], a22 = te2[4], a23 = te2[7];
      te2[0] = c2 * a11 + s3 * a21;
      te2[3] = c2 * a12 + s3 * a22;
      te2[6] = c2 * a13 + s3 * a23;
      te2[1] = -s3 * a11 + c2 * a21;
      te2[4] = -s3 * a12 + c2 * a22;
      te2[7] = -s3 * a13 + c2 * a23;
      return this;
    }
    translate(tx, ty) {
      const te2 = this.elements;
      te2[0] += tx * te2[2];
      te2[3] += tx * te2[5];
      te2[6] += tx * te2[8];
      te2[1] += ty * te2[2];
      te2[4] += ty * te2[5];
      te2[7] += ty * te2[8];
      return this;
    }
    equals(matrix) {
      const te2 = this.elements;
      const me2 = matrix.elements;
      for (let i2 = 0; i2 < 9; i2++) {
        if (te2[i2] !== me2[i2])
          return false;
      }
      return true;
    }
    fromArray(array, offset = 0) {
      for (let i2 = 0; i2 < 9; i2++) {
        this.elements[i2] = array[i2 + offset];
      }
      return this;
    }
    toArray(array = [], offset = 0) {
      const te2 = this.elements;
      array[offset] = te2[0];
      array[offset + 1] = te2[1];
      array[offset + 2] = te2[2];
      array[offset + 3] = te2[3];
      array[offset + 4] = te2[4];
      array[offset + 5] = te2[5];
      array[offset + 6] = te2[6];
      array[offset + 7] = te2[7];
      array[offset + 8] = te2[8];
      return array;
    }
    clone() {
      return new this.constructor().fromArray(this.elements);
    }
  };
  Matrix3.prototype.isMatrix3 = true;
  function arrayNeedsUint32(array) {
    for (let i2 = array.length - 1; i2 >= 0; --i2) {
      if (array[i2] > 65535)
        return true;
    }
    return false;
  }
  function createElementNS(name) {
    return document.createElementNS("http://www.w3.org/1999/xhtml", name);
  }
  var _colorKeywords = {
    "aliceblue": 15792383,
    "antiquewhite": 16444375,
    "aqua": 65535,
    "aquamarine": 8388564,
    "azure": 15794175,
    "beige": 16119260,
    "bisque": 16770244,
    "black": 0,
    "blanchedalmond": 16772045,
    "blue": 255,
    "blueviolet": 9055202,
    "brown": 10824234,
    "burlywood": 14596231,
    "cadetblue": 6266528,
    "chartreuse": 8388352,
    "chocolate": 13789470,
    "coral": 16744272,
    "cornflowerblue": 6591981,
    "cornsilk": 16775388,
    "crimson": 14423100,
    "cyan": 65535,
    "darkblue": 139,
    "darkcyan": 35723,
    "darkgoldenrod": 12092939,
    "darkgray": 11119017,
    "darkgreen": 25600,
    "darkgrey": 11119017,
    "darkkhaki": 12433259,
    "darkmagenta": 9109643,
    "darkolivegreen": 5597999,
    "darkorange": 16747520,
    "darkorchid": 10040012,
    "darkred": 9109504,
    "darksalmon": 15308410,
    "darkseagreen": 9419919,
    "darkslateblue": 4734347,
    "darkslategray": 3100495,
    "darkslategrey": 3100495,
    "darkturquoise": 52945,
    "darkviolet": 9699539,
    "deeppink": 16716947,
    "deepskyblue": 49151,
    "dimgray": 6908265,
    "dimgrey": 6908265,
    "dodgerblue": 2003199,
    "firebrick": 11674146,
    "floralwhite": 16775920,
    "forestgreen": 2263842,
    "fuchsia": 16711935,
    "gainsboro": 14474460,
    "ghostwhite": 16316671,
    "gold": 16766720,
    "goldenrod": 14329120,
    "gray": 8421504,
    "green": 32768,
    "greenyellow": 11403055,
    "grey": 8421504,
    "honeydew": 15794160,
    "hotpink": 16738740,
    "indianred": 13458524,
    "indigo": 4915330,
    "ivory": 16777200,
    "khaki": 15787660,
    "lavender": 15132410,
    "lavenderblush": 16773365,
    "lawngreen": 8190976,
    "lemonchiffon": 16775885,
    "lightblue": 11393254,
    "lightcoral": 15761536,
    "lightcyan": 14745599,
    "lightgoldenrodyellow": 16448210,
    "lightgray": 13882323,
    "lightgreen": 9498256,
    "lightgrey": 13882323,
    "lightpink": 16758465,
    "lightsalmon": 16752762,
    "lightseagreen": 2142890,
    "lightskyblue": 8900346,
    "lightslategray": 7833753,
    "lightslategrey": 7833753,
    "lightsteelblue": 11584734,
    "lightyellow": 16777184,
    "lime": 65280,
    "limegreen": 3329330,
    "linen": 16445670,
    "magenta": 16711935,
    "maroon": 8388608,
    "mediumaquamarine": 6737322,
    "mediumblue": 205,
    "mediumorchid": 12211667,
    "mediumpurple": 9662683,
    "mediumseagreen": 3978097,
    "mediumslateblue": 8087790,
    "mediumspringgreen": 64154,
    "mediumturquoise": 4772300,
    "mediumvioletred": 13047173,
    "midnightblue": 1644912,
    "mintcream": 16121850,
    "mistyrose": 16770273,
    "moccasin": 16770229,
    "navajowhite": 16768685,
    "navy": 128,
    "oldlace": 16643558,
    "olive": 8421376,
    "olivedrab": 7048739,
    "orange": 16753920,
    "orangered": 16729344,
    "orchid": 14315734,
    "palegoldenrod": 15657130,
    "palegreen": 10025880,
    "paleturquoise": 11529966,
    "palevioletred": 14381203,
    "papayawhip": 16773077,
    "peachpuff": 16767673,
    "peru": 13468991,
    "pink": 16761035,
    "plum": 14524637,
    "powderblue": 11591910,
    "purple": 8388736,
    "rebeccapurple": 6697881,
    "red": 16711680,
    "rosybrown": 12357519,
    "royalblue": 4286945,
    "saddlebrown": 9127187,
    "salmon": 16416882,
    "sandybrown": 16032864,
    "seagreen": 3050327,
    "seashell": 16774638,
    "sienna": 10506797,
    "silver": 12632256,
    "skyblue": 8900331,
    "slateblue": 6970061,
    "slategray": 7372944,
    "slategrey": 7372944,
    "snow": 16775930,
    "springgreen": 65407,
    "steelblue": 4620980,
    "tan": 13808780,
    "teal": 32896,
    "thistle": 14204888,
    "tomato": 16737095,
    "turquoise": 4251856,
    "violet": 15631086,
    "wheat": 16113331,
    "white": 16777215,
    "whitesmoke": 16119285,
    "yellow": 16776960,
    "yellowgreen": 10145074
  };
  var _hslA = { h: 0, s: 0, l: 0 };
  var _hslB = { h: 0, s: 0, l: 0 };
  function hue2rgb(p3, q3, t) {
    if (t < 0)
      t += 1;
    if (t > 1)
      t -= 1;
    if (t < 1 / 6)
      return p3 + (q3 - p3) * 6 * t;
    if (t < 1 / 2)
      return q3;
    if (t < 2 / 3)
      return p3 + (q3 - p3) * 6 * (2 / 3 - t);
    return p3;
  }
  function SRGBToLinear(c2) {
    return c2 < 0.04045 ? c2 * 0.0773993808 : Math.pow(c2 * 0.9478672986 + 0.0521327014, 2.4);
  }
  function LinearToSRGB(c2) {
    return c2 < 31308e-7 ? c2 * 12.92 : 1.055 * Math.pow(c2, 0.41666) - 0.055;
  }
  var Color = class {
    constructor(r2, g2, b2) {
      if (g2 === void 0 && b2 === void 0) {
        return this.set(r2);
      }
      return this.setRGB(r2, g2, b2);
    }
    set(value) {
      if (value && value.isColor) {
        this.copy(value);
      } else if (typeof value === "number") {
        this.setHex(value);
      } else if (typeof value === "string") {
        this.setStyle(value);
      }
      return this;
    }
    setScalar(scalar) {
      this.r = scalar;
      this.g = scalar;
      this.b = scalar;
      return this;
    }
    setHex(hex) {
      hex = Math.floor(hex);
      this.r = (hex >> 16 & 255) / 255;
      this.g = (hex >> 8 & 255) / 255;
      this.b = (hex & 255) / 255;
      return this;
    }
    setRGB(r2, g2, b2) {
      this.r = r2;
      this.g = g2;
      this.b = b2;
      return this;
    }
    setHSL(h2, s3, l2) {
      h2 = euclideanModulo(h2, 1);
      s3 = clamp(s3, 0, 1);
      l2 = clamp(l2, 0, 1);
      if (s3 === 0) {
        this.r = this.g = this.b = l2;
      } else {
        const p3 = l2 <= 0.5 ? l2 * (1 + s3) : l2 + s3 - l2 * s3;
        const q3 = 2 * l2 - p3;
        this.r = hue2rgb(q3, p3, h2 + 1 / 3);
        this.g = hue2rgb(q3, p3, h2);
        this.b = hue2rgb(q3, p3, h2 - 1 / 3);
      }
      return this;
    }
    setStyle(style) {
      function handleAlpha(string) {
        if (string === void 0)
          return;
        if (parseFloat(string) < 1) {
          console.warn("THREE.Color: Alpha component of " + style + " will be ignored.");
        }
      }
      let m2;
      if (m2 = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(style)) {
        let color;
        const name = m2[1];
        const components = m2[2];
        switch (name) {
          case "rgb":
          case "rgba":
            if (color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
              this.r = Math.min(255, parseInt(color[1], 10)) / 255;
              this.g = Math.min(255, parseInt(color[2], 10)) / 255;
              this.b = Math.min(255, parseInt(color[3], 10)) / 255;
              handleAlpha(color[4]);
              return this;
            }
            if (color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
              this.r = Math.min(100, parseInt(color[1], 10)) / 100;
              this.g = Math.min(100, parseInt(color[2], 10)) / 100;
              this.b = Math.min(100, parseInt(color[3], 10)) / 100;
              handleAlpha(color[4]);
              return this;
            }
            break;
          case "hsl":
          case "hsla":
            if (color = /^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
              const h2 = parseFloat(color[1]) / 360;
              const s3 = parseInt(color[2], 10) / 100;
              const l2 = parseInt(color[3], 10) / 100;
              handleAlpha(color[4]);
              return this.setHSL(h2, s3, l2);
            }
            break;
        }
      } else if (m2 = /^\#([A-Fa-f\d]+)$/.exec(style)) {
        const hex = m2[1];
        const size2 = hex.length;
        if (size2 === 3) {
          this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;
          this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;
          this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;
          return this;
        } else if (size2 === 6) {
          this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;
          this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;
          this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;
          return this;
        }
      }
      if (style && style.length > 0) {
        return this.setColorName(style);
      }
      return this;
    }
    setColorName(style) {
      const hex = _colorKeywords[style.toLowerCase()];
      if (hex !== void 0) {
        this.setHex(hex);
      } else {
        console.warn("THREE.Color: Unknown color " + style);
      }
      return this;
    }
    clone() {
      return new this.constructor(this.r, this.g, this.b);
    }
    copy(color) {
      this.r = color.r;
      this.g = color.g;
      this.b = color.b;
      return this;
    }
    copySRGBToLinear(color) {
      this.r = SRGBToLinear(color.r);
      this.g = SRGBToLinear(color.g);
      this.b = SRGBToLinear(color.b);
      return this;
    }
    copyLinearToSRGB(color) {
      this.r = LinearToSRGB(color.r);
      this.g = LinearToSRGB(color.g);
      this.b = LinearToSRGB(color.b);
      return this;
    }
    convertSRGBToLinear() {
      this.copySRGBToLinear(this);
      return this;
    }
    convertLinearToSRGB() {
      this.copyLinearToSRGB(this);
      return this;
    }
    getHex() {
      return this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;
    }
    getHexString() {
      return ("000000" + this.getHex().toString(16)).slice(-6);
    }
    getHSL(target) {
      const r2 = this.r, g2 = this.g, b2 = this.b;
      const max = Math.max(r2, g2, b2);
      const min = Math.min(r2, g2, b2);
      let hue, saturation;
      const lightness = (min + max) / 2;
      if (min === max) {
        hue = 0;
        saturation = 0;
      } else {
        const delta = max - min;
        saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);
        switch (max) {
          case r2:
            hue = (g2 - b2) / delta + (g2 < b2 ? 6 : 0);
            break;
          case g2:
            hue = (b2 - r2) / delta + 2;
            break;
          case b2:
            hue = (r2 - g2) / delta + 4;
            break;
        }
        hue /= 6;
      }
      target.h = hue;
      target.s = saturation;
      target.l = lightness;
      return target;
    }
    getStyle() {
      return "rgb(" + (this.r * 255 | 0) + "," + (this.g * 255 | 0) + "," + (this.b * 255 | 0) + ")";
    }
    offsetHSL(h2, s3, l2) {
      this.getHSL(_hslA);
      _hslA.h += h2;
      _hslA.s += s3;
      _hslA.l += l2;
      this.setHSL(_hslA.h, _hslA.s, _hslA.l);
      return this;
    }
    add(color) {
      this.r += color.r;
      this.g += color.g;
      this.b += color.b;
      return this;
    }
    addColors(color1, color2) {
      this.r = color1.r + color2.r;
      this.g = color1.g + color2.g;
      this.b = color1.b + color2.b;
      return this;
    }
    addScalar(s3) {
      this.r += s3;
      this.g += s3;
      this.b += s3;
      return this;
    }
    sub(color) {
      this.r = Math.max(0, this.r - color.r);
      this.g = Math.max(0, this.g - color.g);
      this.b = Math.max(0, this.b - color.b);
      return this;
    }
    multiply(color) {
      this.r *= color.r;
      this.g *= color.g;
      this.b *= color.b;
      return this;
    }
    multiplyScalar(s3) {
      this.r *= s3;
      this.g *= s3;
      this.b *= s3;
      return this;
    }
    lerp(color, alpha) {
      this.r += (color.r - this.r) * alpha;
      this.g += (color.g - this.g) * alpha;
      this.b += (color.b - this.b) * alpha;
      return this;
    }
    lerpColors(color1, color2, alpha) {
      this.r = color1.r + (color2.r - color1.r) * alpha;
      this.g = color1.g + (color2.g - color1.g) * alpha;
      this.b = color1.b + (color2.b - color1.b) * alpha;
      return this;
    }
    lerpHSL(color, alpha) {
      this.getHSL(_hslA);
      color.getHSL(_hslB);
      const h2 = lerp(_hslA.h, _hslB.h, alpha);
      const s3 = lerp(_hslA.s, _hslB.s, alpha);
      const l2 = lerp(_hslA.l, _hslB.l, alpha);
      this.setHSL(h2, s3, l2);
      return this;
    }
    equals(c2) {
      return c2.r === this.r && c2.g === this.g && c2.b === this.b;
    }
    fromArray(array, offset = 0) {
      this.r = array[offset];
      this.g = array[offset + 1];
      this.b = array[offset + 2];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.r;
      array[offset + 1] = this.g;
      array[offset + 2] = this.b;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.r = attribute.getX(index);
      this.g = attribute.getY(index);
      this.b = attribute.getZ(index);
      if (attribute.normalized === true) {
        this.r /= 255;
        this.g /= 255;
        this.b /= 255;
      }
      return this;
    }
    toJSON() {
      return this.getHex();
    }
  };
  Color.NAMES = _colorKeywords;
  Color.prototype.isColor = true;
  Color.prototype.r = 1;
  Color.prototype.g = 1;
  Color.prototype.b = 1;
  var _canvas;
  var ImageUtils = class {
    static getDataURL(image) {
      if (/^data:/i.test(image.src)) {
        return image.src;
      }
      if (typeof HTMLCanvasElement == "undefined") {
        return image.src;
      }
      let canvas;
      if (image instanceof HTMLCanvasElement) {
        canvas = image;
      } else {
        if (_canvas === void 0)
          _canvas = createElementNS("canvas");
        _canvas.width = image.width;
        _canvas.height = image.height;
        const context = _canvas.getContext("2d");
        if (image instanceof ImageData) {
          context.putImageData(image, 0, 0);
        } else {
          context.drawImage(image, 0, 0, image.width, image.height);
        }
        canvas = _canvas;
      }
      if (canvas.width > 2048 || canvas.height > 2048) {
        console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", image);
        return canvas.toDataURL("image/jpeg", 0.6);
      } else {
        return canvas.toDataURL("image/png");
      }
    }
    static sRGBToLinear(image) {
      if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
        const canvas = createElementNS("canvas");
        canvas.width = image.width;
        canvas.height = image.height;
        const context = canvas.getContext("2d");
        context.drawImage(image, 0, 0, image.width, image.height);
        const imageData = context.getImageData(0, 0, image.width, image.height);
        const data = imageData.data;
        for (let i2 = 0; i2 < data.length; i2++) {
          data[i2] = SRGBToLinear(data[i2] / 255) * 255;
        }
        context.putImageData(imageData, 0, 0);
        return canvas;
      } else if (image.data) {
        const data = image.data.slice(0);
        for (let i2 = 0; i2 < data.length; i2++) {
          if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {
            data[i2] = Math.floor(SRGBToLinear(data[i2] / 255) * 255);
          } else {
            data[i2] = SRGBToLinear(data[i2]);
          }
        }
        return {
          data,
          width: image.width,
          height: image.height
        };
      } else {
        console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");
        return image;
      }
    }
  };
  var textureId = 0;
  var Texture = class extends EventDispatcher {
    constructor(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding) {
      super();
      Object.defineProperty(this, "id", { value: textureId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.image = image;
      this.mipmaps = [];
      this.mapping = mapping;
      this.wrapS = wrapS;
      this.wrapT = wrapT;
      this.magFilter = magFilter;
      this.minFilter = minFilter;
      this.anisotropy = anisotropy;
      this.format = format;
      this.internalFormat = null;
      this.type = type;
      this.offset = new Vector2(0, 0);
      this.repeat = new Vector2(1, 1);
      this.center = new Vector2(0, 0);
      this.rotation = 0;
      this.matrixAutoUpdate = true;
      this.matrix = new Matrix3();
      this.generateMipmaps = true;
      this.premultiplyAlpha = false;
      this.flipY = true;
      this.unpackAlignment = 4;
      this.encoding = encoding;
      this.userData = {};
      this.version = 0;
      this.onUpdate = null;
      this.isRenderTargetTexture = false;
      this.needsPMREMUpdate = false;
    }
    updateMatrix() {
      this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.name = source.name;
      this.image = source.image;
      this.mipmaps = source.mipmaps.slice(0);
      this.mapping = source.mapping;
      this.wrapS = source.wrapS;
      this.wrapT = source.wrapT;
      this.magFilter = source.magFilter;
      this.minFilter = source.minFilter;
      this.anisotropy = source.anisotropy;
      this.format = source.format;
      this.internalFormat = source.internalFormat;
      this.type = source.type;
      this.offset.copy(source.offset);
      this.repeat.copy(source.repeat);
      this.center.copy(source.center);
      this.rotation = source.rotation;
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      this.matrix.copy(source.matrix);
      this.generateMipmaps = source.generateMipmaps;
      this.premultiplyAlpha = source.premultiplyAlpha;
      this.flipY = source.flipY;
      this.unpackAlignment = source.unpackAlignment;
      this.encoding = source.encoding;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      return this;
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      if (!isRootObject && meta.textures[this.uuid] !== void 0) {
        return meta.textures[this.uuid];
      }
      const output = {
        metadata: {
          version: 4.5,
          type: "Texture",
          generator: "Texture.toJSON"
        },
        uuid: this.uuid,
        name: this.name,
        mapping: this.mapping,
        repeat: [this.repeat.x, this.repeat.y],
        offset: [this.offset.x, this.offset.y],
        center: [this.center.x, this.center.y],
        rotation: this.rotation,
        wrap: [this.wrapS, this.wrapT],
        format: this.format,
        type: this.type,
        encoding: this.encoding,
        minFilter: this.minFilter,
        magFilter: this.magFilter,
        anisotropy: this.anisotropy,
        flipY: this.flipY,
        premultiplyAlpha: this.premultiplyAlpha,
        unpackAlignment: this.unpackAlignment
      };
      if (this.image !== void 0) {
        const image = this.image;
        if (image.uuid === void 0) {
          image.uuid = generateUUID();
        }
        if (!isRootObject && meta.images[image.uuid] === void 0) {
          let url;
          if (Array.isArray(image)) {
            url = [];
            for (let i2 = 0, l2 = image.length; i2 < l2; i2++) {
              if (image[i2].isDataTexture) {
                url.push(serializeImage(image[i2].image));
              } else {
                url.push(serializeImage(image[i2]));
              }
            }
          } else {
            url = serializeImage(image);
          }
          meta.images[image.uuid] = {
            uuid: image.uuid,
            url
          };
        }
        output.image = image.uuid;
      }
      if (JSON.stringify(this.userData) !== "{}")
        output.userData = this.userData;
      if (!isRootObject) {
        meta.textures[this.uuid] = output;
      }
      return output;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
    transformUv(uv) {
      if (this.mapping !== UVMapping)
        return uv;
      uv.applyMatrix3(this.matrix);
      if (uv.x < 0 || uv.x > 1) {
        switch (this.wrapS) {
          case RepeatWrapping:
            uv.x = uv.x - Math.floor(uv.x);
            break;
          case ClampToEdgeWrapping:
            uv.x = uv.x < 0 ? 0 : 1;
            break;
          case MirroredRepeatWrapping:
            if (Math.abs(Math.floor(uv.x) % 2) === 1) {
              uv.x = Math.ceil(uv.x) - uv.x;
            } else {
              uv.x = uv.x - Math.floor(uv.x);
            }
            break;
        }
      }
      if (uv.y < 0 || uv.y > 1) {
        switch (this.wrapT) {
          case RepeatWrapping:
            uv.y = uv.y - Math.floor(uv.y);
            break;
          case ClampToEdgeWrapping:
            uv.y = uv.y < 0 ? 0 : 1;
            break;
          case MirroredRepeatWrapping:
            if (Math.abs(Math.floor(uv.y) % 2) === 1) {
              uv.y = Math.ceil(uv.y) - uv.y;
            } else {
              uv.y = uv.y - Math.floor(uv.y);
            }
            break;
        }
      }
      if (this.flipY) {
        uv.y = 1 - uv.y;
      }
      return uv;
    }
    set needsUpdate(value) {
      if (value === true)
        this.version++;
    }
  };
  Texture.DEFAULT_IMAGE = void 0;
  Texture.DEFAULT_MAPPING = UVMapping;
  Texture.prototype.isTexture = true;
  function serializeImage(image) {
    if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
      return ImageUtils.getDataURL(image);
    } else {
      if (image.data) {
        return {
          data: Array.prototype.slice.call(image.data),
          width: image.width,
          height: image.height,
          type: image.data.constructor.name
        };
      } else {
        console.warn("THREE.Texture: Unable to serialize Texture.");
        return {};
      }
    }
  }
  var Vector4 = class {
    constructor(x2 = 0, y2 = 0, z2 = 0, w2 = 1) {
      this.x = x2;
      this.y = y2;
      this.z = z2;
      this.w = w2;
    }
    get width() {
      return this.z;
    }
    set width(value) {
      this.z = value;
    }
    get height() {
      return this.w;
    }
    set height(value) {
      this.w = value;
    }
    set(x2, y2, z2, w2) {
      this.x = x2;
      this.y = y2;
      this.z = z2;
      this.w = w2;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      this.z = scalar;
      this.w = scalar;
      return this;
    }
    setX(x2) {
      this.x = x2;
      return this;
    }
    setY(y2) {
      this.y = y2;
      return this;
    }
    setZ(z2) {
      this.z = z2;
      return this;
    }
    setW(w2) {
      this.w = w2;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        case 2:
          this.z = value;
          break;
        case 3:
          this.w = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        case 3:
          return this.w;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y, this.z, this.w);
    }
    copy(v2) {
      this.x = v2.x;
      this.y = v2.y;
      this.z = v2.z;
      this.w = v2.w !== void 0 ? v2.w : 1;
      return this;
    }
    add(v2, w2) {
      if (w2 !== void 0) {
        console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
        return this.addVectors(v2, w2);
      }
      this.x += v2.x;
      this.y += v2.y;
      this.z += v2.z;
      this.w += v2.w;
      return this;
    }
    addScalar(s3) {
      this.x += s3;
      this.y += s3;
      this.z += s3;
      this.w += s3;
      return this;
    }
    addVectors(a2, b2) {
      this.x = a2.x + b2.x;
      this.y = a2.y + b2.y;
      this.z = a2.z + b2.z;
      this.w = a2.w + b2.w;
      return this;
    }
    addScaledVector(v2, s3) {
      this.x += v2.x * s3;
      this.y += v2.y * s3;
      this.z += v2.z * s3;
      this.w += v2.w * s3;
      return this;
    }
    sub(v2, w2) {
      if (w2 !== void 0) {
        console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
        return this.subVectors(v2, w2);
      }
      this.x -= v2.x;
      this.y -= v2.y;
      this.z -= v2.z;
      this.w -= v2.w;
      return this;
    }
    subScalar(s3) {
      this.x -= s3;
      this.y -= s3;
      this.z -= s3;
      this.w -= s3;
      return this;
    }
    subVectors(a2, b2) {
      this.x = a2.x - b2.x;
      this.y = a2.y - b2.y;
      this.z = a2.z - b2.z;
      this.w = a2.w - b2.w;
      return this;
    }
    multiply(v2) {
      this.x *= v2.x;
      this.y *= v2.y;
      this.z *= v2.z;
      this.w *= v2.w;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      this.w *= scalar;
      return this;
    }
    applyMatrix4(m2) {
      const x2 = this.x, y2 = this.y, z2 = this.z, w2 = this.w;
      const e = m2.elements;
      this.x = e[0] * x2 + e[4] * y2 + e[8] * z2 + e[12] * w2;
      this.y = e[1] * x2 + e[5] * y2 + e[9] * z2 + e[13] * w2;
      this.z = e[2] * x2 + e[6] * y2 + e[10] * z2 + e[14] * w2;
      this.w = e[3] * x2 + e[7] * y2 + e[11] * z2 + e[15] * w2;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    setAxisAngleFromQuaternion(q3) {
      this.w = 2 * Math.acos(q3.w);
      const s3 = Math.sqrt(1 - q3.w * q3.w);
      if (s3 < 1e-4) {
        this.x = 1;
        this.y = 0;
        this.z = 0;
      } else {
        this.x = q3.x / s3;
        this.y = q3.y / s3;
        this.z = q3.z / s3;
      }
      return this;
    }
    setAxisAngleFromRotationMatrix(m2) {
      let angle, x2, y2, z2;
      const epsilon = 0.01, epsilon2 = 0.1, te2 = m2.elements, m11 = te2[0], m12 = te2[4], m13 = te2[8], m21 = te2[1], m22 = te2[5], m23 = te2[9], m31 = te2[2], m32 = te2[6], m33 = te2[10];
      if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
        if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
          this.set(1, 0, 0, 0);
          return this;
        }
        angle = Math.PI;
        const xx = (m11 + 1) / 2;
        const yy = (m22 + 1) / 2;
        const zz = (m33 + 1) / 2;
        const xy = (m12 + m21) / 4;
        const xz = (m13 + m31) / 4;
        const yz = (m23 + m32) / 4;
        if (xx > yy && xx > zz) {
          if (xx < epsilon) {
            x2 = 0;
            y2 = 0.707106781;
            z2 = 0.707106781;
          } else {
            x2 = Math.sqrt(xx);
            y2 = xy / x2;
            z2 = xz / x2;
          }
        } else if (yy > zz) {
          if (yy < epsilon) {
            x2 = 0.707106781;
            y2 = 0;
            z2 = 0.707106781;
          } else {
            y2 = Math.sqrt(yy);
            x2 = xy / y2;
            z2 = yz / y2;
          }
        } else {
          if (zz < epsilon) {
            x2 = 0.707106781;
            y2 = 0.707106781;
            z2 = 0;
          } else {
            z2 = Math.sqrt(zz);
            x2 = xz / z2;
            y2 = yz / z2;
          }
        }
        this.set(x2, y2, z2, angle);
        return this;
      }
      let s3 = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12));
      if (Math.abs(s3) < 1e-3)
        s3 = 1;
      this.x = (m32 - m23) / s3;
      this.y = (m13 - m31) / s3;
      this.z = (m21 - m12) / s3;
      this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
      return this;
    }
    min(v2) {
      this.x = Math.min(this.x, v2.x);
      this.y = Math.min(this.y, v2.y);
      this.z = Math.min(this.z, v2.z);
      this.w = Math.min(this.w, v2.w);
      return this;
    }
    max(v2) {
      this.x = Math.max(this.x, v2.x);
      this.y = Math.max(this.y, v2.y);
      this.z = Math.max(this.z, v2.z);
      this.w = Math.max(this.w, v2.w);
      return this;
    }
    clamp(min, max) {
      this.x = Math.max(min.x, Math.min(max.x, this.x));
      this.y = Math.max(min.y, Math.min(max.y, this.y));
      this.z = Math.max(min.z, Math.min(max.z, this.z));
      this.w = Math.max(min.w, Math.min(max.w, this.w));
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = Math.max(minVal, Math.min(maxVal, this.x));
      this.y = Math.max(minVal, Math.min(maxVal, this.y));
      this.z = Math.max(minVal, Math.min(maxVal, this.z));
      this.w = Math.max(minVal, Math.min(maxVal, this.w));
      return this;
    }
    clampLength(min, max) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      this.w = Math.floor(this.w);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      this.w = Math.ceil(this.w);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      this.w = Math.round(this.w);
      return this;
    }
    roundToZero() {
      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
      this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
      this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      this.w = -this.w;
      return this;
    }
    dot(v2) {
      return this.x * v2.x + this.y * v2.y + this.z * v2.z + this.w * v2.w;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v2, alpha) {
      this.x += (v2.x - this.x) * alpha;
      this.y += (v2.y - this.y) * alpha;
      this.z += (v2.z - this.z) * alpha;
      this.w += (v2.w - this.w) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      this.z = v1.z + (v2.z - v1.z) * alpha;
      this.w = v1.w + (v2.w - v1.w) * alpha;
      return this;
    }
    equals(v2) {
      return v2.x === this.x && v2.y === this.y && v2.z === this.z && v2.w === this.w;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      this.z = array[offset + 2];
      this.w = array[offset + 3];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      array[offset + 2] = this.z;
      array[offset + 3] = this.w;
      return array;
    }
    fromBufferAttribute(attribute, index, offset) {
      if (offset !== void 0) {
        console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute().");
      }
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      this.z = attribute.getZ(index);
      this.w = attribute.getW(index);
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      this.z = Math.random();
      this.w = Math.random();
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
      yield this.z;
      yield this.w;
    }
  };
  Vector4.prototype.isVector4 = true;
  var WebGLRenderTarget = class extends EventDispatcher {
    constructor(width2, height2, options = {}) {
      super();
      this.width = width2;
      this.height = height2;
      this.depth = 1;
      this.scissor = new Vector4(0, 0, width2, height2);
      this.scissorTest = false;
      this.viewport = new Vector4(0, 0, width2, height2);
      this.texture = new Texture(void 0, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
      this.texture.isRenderTargetTexture = true;
      this.texture.image = { width: width2, height: height2, depth: 1 };
      this.texture.generateMipmaps = options.generateMipmaps !== void 0 ? options.generateMipmaps : false;
      this.texture.internalFormat = options.internalFormat !== void 0 ? options.internalFormat : null;
      this.texture.minFilter = options.minFilter !== void 0 ? options.minFilter : LinearFilter;
      this.depthBuffer = options.depthBuffer !== void 0 ? options.depthBuffer : true;
      this.stencilBuffer = options.stencilBuffer !== void 0 ? options.stencilBuffer : false;
      this.depthTexture = options.depthTexture !== void 0 ? options.depthTexture : null;
    }
    setTexture(texture) {
      texture.image = {
        width: this.width,
        height: this.height,
        depth: this.depth
      };
      this.texture = texture;
    }
    setSize(width2, height2, depth = 1) {
      if (this.width !== width2 || this.height !== height2 || this.depth !== depth) {
        this.width = width2;
        this.height = height2;
        this.depth = depth;
        this.texture.image.width = width2;
        this.texture.image.height = height2;
        this.texture.image.depth = depth;
        this.dispose();
      }
      this.viewport.set(0, 0, width2, height2);
      this.scissor.set(0, 0, width2, height2);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.width = source.width;
      this.height = source.height;
      this.depth = source.depth;
      this.viewport.copy(source.viewport);
      this.texture = source.texture.clone();
      this.texture.image = Object.assign({}, source.texture.image);
      this.depthBuffer = source.depthBuffer;
      this.stencilBuffer = source.stencilBuffer;
      this.depthTexture = source.depthTexture;
      return this;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
  };
  WebGLRenderTarget.prototype.isWebGLRenderTarget = true;
  var WebGLMultipleRenderTargets = class extends WebGLRenderTarget {
    constructor(width2, height2, count) {
      super(width2, height2);
      const texture = this.texture;
      this.texture = [];
      for (let i2 = 0; i2 < count; i2++) {
        this.texture[i2] = texture.clone();
      }
    }
    setSize(width2, height2, depth = 1) {
      if (this.width !== width2 || this.height !== height2 || this.depth !== depth) {
        this.width = width2;
        this.height = height2;
        this.depth = depth;
        for (let i2 = 0, il = this.texture.length; i2 < il; i2++) {
          this.texture[i2].image.width = width2;
          this.texture[i2].image.height = height2;
          this.texture[i2].image.depth = depth;
        }
        this.dispose();
      }
      this.viewport.set(0, 0, width2, height2);
      this.scissor.set(0, 0, width2, height2);
      return this;
    }
    copy(source) {
      this.dispose();
      this.width = source.width;
      this.height = source.height;
      this.depth = source.depth;
      this.viewport.set(0, 0, this.width, this.height);
      this.scissor.set(0, 0, this.width, this.height);
      this.depthBuffer = source.depthBuffer;
      this.stencilBuffer = source.stencilBuffer;
      this.depthTexture = source.depthTexture;
      this.texture.length = 0;
      for (let i2 = 0, il = source.texture.length; i2 < il; i2++) {
        this.texture[i2] = source.texture[i2].clone();
      }
      return this;
    }
  };
  WebGLMultipleRenderTargets.prototype.isWebGLMultipleRenderTargets = true;
  var WebGLMultisampleRenderTarget = class extends WebGLRenderTarget {
    constructor(width2, height2, options = {}) {
      super(width2, height2, options);
      this.samples = 4;
      this.ignoreDepthForMultisampleCopy = options.ignoreDepth !== void 0 ? options.ignoreDepth : true;
      this.useRenderToTexture = options.useRenderToTexture !== void 0 ? options.useRenderToTexture : false;
      this.useRenderbuffer = this.useRenderToTexture === false;
    }
    copy(source) {
      super.copy.call(this, source);
      this.samples = source.samples;
      this.useRenderToTexture = source.useRenderToTexture;
      this.useRenderbuffer = source.useRenderbuffer;
      return this;
    }
  };
  WebGLMultisampleRenderTarget.prototype.isWebGLMultisampleRenderTarget = true;
  var Quaternion = class {
    constructor(x2 = 0, y2 = 0, z2 = 0, w2 = 1) {
      this._x = x2;
      this._y = y2;
      this._z = z2;
      this._w = w2;
    }
    static slerp(qa, qb, qm, t) {
      console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.");
      return qm.slerpQuaternions(qa, qb, t);
    }
    static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
      let x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3];
      const x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
      if (t === 0) {
        dst[dstOffset + 0] = x0;
        dst[dstOffset + 1] = y0;
        dst[dstOffset + 2] = z0;
        dst[dstOffset + 3] = w0;
        return;
      }
      if (t === 1) {
        dst[dstOffset + 0] = x1;
        dst[dstOffset + 1] = y1;
        dst[dstOffset + 2] = z1;
        dst[dstOffset + 3] = w1;
        return;
      }
      if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
        let s3 = 1 - t;
        const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;
        if (sqrSin > Number.EPSILON) {
          const sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);
          s3 = Math.sin(s3 * len) / sin;
          t = Math.sin(t * len) / sin;
        }
        const tDir = t * dir;
        x0 = x0 * s3 + x1 * tDir;
        y0 = y0 * s3 + y1 * tDir;
        z0 = z0 * s3 + z1 * tDir;
        w0 = w0 * s3 + w1 * tDir;
        if (s3 === 1 - t) {
          const f2 = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
          x0 *= f2;
          y0 *= f2;
          z0 *= f2;
          w0 *= f2;
        }
      }
      dst[dstOffset] = x0;
      dst[dstOffset + 1] = y0;
      dst[dstOffset + 2] = z0;
      dst[dstOffset + 3] = w0;
    }
    static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
      const x0 = src0[srcOffset0];
      const y0 = src0[srcOffset0 + 1];
      const z0 = src0[srcOffset0 + 2];
      const w0 = src0[srcOffset0 + 3];
      const x1 = src1[srcOffset1];
      const y1 = src1[srcOffset1 + 1];
      const z1 = src1[srcOffset1 + 2];
      const w1 = src1[srcOffset1 + 3];
      dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
      dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
      dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
      dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
      return dst;
    }
    get x() {
      return this._x;
    }
    set x(value) {
      this._x = value;
      this._onChangeCallback();
    }
    get y() {
      return this._y;
    }
    set y(value) {
      this._y = value;
      this._onChangeCallback();
    }
    get z() {
      return this._z;
    }
    set z(value) {
      this._z = value;
      this._onChangeCallback();
    }
    get w() {
      return this._w;
    }
    set w(value) {
      this._w = value;
      this._onChangeCallback();
    }
    set(x2, y2, z2, w2) {
      this._x = x2;
      this._y = y2;
      this._z = z2;
      this._w = w2;
      this._onChangeCallback();
      return this;
    }
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._w);
    }
    copy(quaternion) {
      this._x = quaternion.x;
      this._y = quaternion.y;
      this._z = quaternion.z;
      this._w = quaternion.w;
      this._onChangeCallback();
      return this;
    }
    setFromEuler(euler2, update3) {
      if (!(euler2 && euler2.isEuler)) {
        throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
      }
      const x2 = euler2._x, y2 = euler2._y, z2 = euler2._z, order = euler2._order;
      const cos = Math.cos;
      const sin = Math.sin;
      const c1 = cos(x2 / 2);
      const c2 = cos(y2 / 2);
      const c3 = cos(z2 / 2);
      const s1 = sin(x2 / 2);
      const s22 = sin(y2 / 2);
      const s3 = sin(z2 / 2);
      switch (order) {
        case "XYZ":
          this._x = s1 * c2 * c3 + c1 * s22 * s3;
          this._y = c1 * s22 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s22 * c3;
          this._w = c1 * c2 * c3 - s1 * s22 * s3;
          break;
        case "YXZ":
          this._x = s1 * c2 * c3 + c1 * s22 * s3;
          this._y = c1 * s22 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s22 * c3;
          this._w = c1 * c2 * c3 + s1 * s22 * s3;
          break;
        case "ZXY":
          this._x = s1 * c2 * c3 - c1 * s22 * s3;
          this._y = c1 * s22 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s22 * c3;
          this._w = c1 * c2 * c3 - s1 * s22 * s3;
          break;
        case "ZYX":
          this._x = s1 * c2 * c3 - c1 * s22 * s3;
          this._y = c1 * s22 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s22 * c3;
          this._w = c1 * c2 * c3 + s1 * s22 * s3;
          break;
        case "YZX":
          this._x = s1 * c2 * c3 + c1 * s22 * s3;
          this._y = c1 * s22 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s22 * c3;
          this._w = c1 * c2 * c3 - s1 * s22 * s3;
          break;
        case "XZY":
          this._x = s1 * c2 * c3 - c1 * s22 * s3;
          this._y = c1 * s22 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s22 * c3;
          this._w = c1 * c2 * c3 + s1 * s22 * s3;
          break;
        default:
          console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order);
      }
      if (update3 !== false)
        this._onChangeCallback();
      return this;
    }
    setFromAxisAngle(axis, angle) {
      const halfAngle = angle / 2, s3 = Math.sin(halfAngle);
      this._x = axis.x * s3;
      this._y = axis.y * s3;
      this._z = axis.z * s3;
      this._w = Math.cos(halfAngle);
      this._onChangeCallback();
      return this;
    }
    setFromRotationMatrix(m2) {
      const te2 = m2.elements, m11 = te2[0], m12 = te2[4], m13 = te2[8], m21 = te2[1], m22 = te2[5], m23 = te2[9], m31 = te2[2], m32 = te2[6], m33 = te2[10], trace = m11 + m22 + m33;
      if (trace > 0) {
        const s3 = 0.5 / Math.sqrt(trace + 1);
        this._w = 0.25 / s3;
        this._x = (m32 - m23) * s3;
        this._y = (m13 - m31) * s3;
        this._z = (m21 - m12) * s3;
      } else if (m11 > m22 && m11 > m33) {
        const s3 = 2 * Math.sqrt(1 + m11 - m22 - m33);
        this._w = (m32 - m23) / s3;
        this._x = 0.25 * s3;
        this._y = (m12 + m21) / s3;
        this._z = (m13 + m31) / s3;
      } else if (m22 > m33) {
        const s3 = 2 * Math.sqrt(1 + m22 - m11 - m33);
        this._w = (m13 - m31) / s3;
        this._x = (m12 + m21) / s3;
        this._y = 0.25 * s3;
        this._z = (m23 + m32) / s3;
      } else {
        const s3 = 2 * Math.sqrt(1 + m33 - m11 - m22);
        this._w = (m21 - m12) / s3;
        this._x = (m13 + m31) / s3;
        this._y = (m23 + m32) / s3;
        this._z = 0.25 * s3;
      }
      this._onChangeCallback();
      return this;
    }
    setFromUnitVectors(vFrom, vTo) {
      let r2 = vFrom.dot(vTo) + 1;
      if (r2 < Number.EPSILON) {
        r2 = 0;
        if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
          this._x = -vFrom.y;
          this._y = vFrom.x;
          this._z = 0;
          this._w = r2;
        } else {
          this._x = 0;
          this._y = -vFrom.z;
          this._z = vFrom.y;
          this._w = r2;
        }
      } else {
        this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
        this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
        this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
        this._w = r2;
      }
      return this.normalize();
    }
    angleTo(q3) {
      return 2 * Math.acos(Math.abs(clamp(this.dot(q3), -1, 1)));
    }
    rotateTowards(q3, step) {
      const angle = this.angleTo(q3);
      if (angle === 0)
        return this;
      const t = Math.min(1, step / angle);
      this.slerp(q3, t);
      return this;
    }
    identity() {
      return this.set(0, 0, 0, 1);
    }
    invert() {
      return this.conjugate();
    }
    conjugate() {
      this._x *= -1;
      this._y *= -1;
      this._z *= -1;
      this._onChangeCallback();
      return this;
    }
    dot(v2) {
      return this._x * v2._x + this._y * v2._y + this._z * v2._z + this._w * v2._w;
    }
    lengthSq() {
      return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    }
    length() {
      return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
    }
    normalize() {
      let l2 = this.length();
      if (l2 === 0) {
        this._x = 0;
        this._y = 0;
        this._z = 0;
        this._w = 1;
      } else {
        l2 = 1 / l2;
        this._x = this._x * l2;
        this._y = this._y * l2;
        this._z = this._z * l2;
        this._w = this._w * l2;
      }
      this._onChangeCallback();
      return this;
    }
    multiply(q3, p3) {
      if (p3 !== void 0) {
        console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.");
        return this.multiplyQuaternions(q3, p3);
      }
      return this.multiplyQuaternions(this, q3);
    }
    premultiply(q3) {
      return this.multiplyQuaternions(q3, this);
    }
    multiplyQuaternions(a2, b2) {
      const qax = a2._x, qay = a2._y, qaz = a2._z, qaw = a2._w;
      const qbx = b2._x, qby = b2._y, qbz = b2._z, qbw = b2._w;
      this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
      this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
      this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
      this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
      this._onChangeCallback();
      return this;
    }
    slerp(qb, t) {
      if (t === 0)
        return this;
      if (t === 1)
        return this.copy(qb);
      const x2 = this._x, y2 = this._y, z2 = this._z, w2 = this._w;
      let cosHalfTheta = w2 * qb._w + x2 * qb._x + y2 * qb._y + z2 * qb._z;
      if (cosHalfTheta < 0) {
        this._w = -qb._w;
        this._x = -qb._x;
        this._y = -qb._y;
        this._z = -qb._z;
        cosHalfTheta = -cosHalfTheta;
      } else {
        this.copy(qb);
      }
      if (cosHalfTheta >= 1) {
        this._w = w2;
        this._x = x2;
        this._y = y2;
        this._z = z2;
        return this;
      }
      const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
      if (sqrSinHalfTheta <= Number.EPSILON) {
        const s3 = 1 - t;
        this._w = s3 * w2 + t * this._w;
        this._x = s3 * x2 + t * this._x;
        this._y = s3 * y2 + t * this._y;
        this._z = s3 * z2 + t * this._z;
        this.normalize();
        this._onChangeCallback();
        return this;
      }
      const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
      const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
      const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
      this._w = w2 * ratioA + this._w * ratioB;
      this._x = x2 * ratioA + this._x * ratioB;
      this._y = y2 * ratioA + this._y * ratioB;
      this._z = z2 * ratioA + this._z * ratioB;
      this._onChangeCallback();
      return this;
    }
    slerpQuaternions(qa, qb, t) {
      return this.copy(qa).slerp(qb, t);
    }
    random() {
      const u1 = Math.random();
      const sqrt1u1 = Math.sqrt(1 - u1);
      const sqrtu1 = Math.sqrt(u1);
      const u2 = 2 * Math.PI * Math.random();
      const u3 = 2 * Math.PI * Math.random();
      return this.set(sqrt1u1 * Math.cos(u2), sqrtu1 * Math.sin(u3), sqrtu1 * Math.cos(u3), sqrt1u1 * Math.sin(u2));
    }
    equals(quaternion) {
      return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
    }
    fromArray(array, offset = 0) {
      this._x = array[offset];
      this._y = array[offset + 1];
      this._z = array[offset + 2];
      this._w = array[offset + 3];
      this._onChangeCallback();
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this._x;
      array[offset + 1] = this._y;
      array[offset + 2] = this._z;
      array[offset + 3] = this._w;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this._x = attribute.getX(index);
      this._y = attribute.getY(index);
      this._z = attribute.getZ(index);
      this._w = attribute.getW(index);
      return this;
    }
    _onChange(callback) {
      this._onChangeCallback = callback;
      return this;
    }
    _onChangeCallback() {
    }
  };
  Quaternion.prototype.isQuaternion = true;
  var Vector3 = class {
    constructor(x2 = 0, y2 = 0, z2 = 0) {
      this.x = x2;
      this.y = y2;
      this.z = z2;
    }
    set(x2, y2, z2) {
      if (z2 === void 0)
        z2 = this.z;
      this.x = x2;
      this.y = y2;
      this.z = z2;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      this.z = scalar;
      return this;
    }
    setX(x2) {
      this.x = x2;
      return this;
    }
    setY(y2) {
      this.y = y2;
      return this;
    }
    setZ(z2) {
      this.z = z2;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        case 2:
          this.z = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y, this.z);
    }
    copy(v2) {
      this.x = v2.x;
      this.y = v2.y;
      this.z = v2.z;
      return this;
    }
    add(v2, w2) {
      if (w2 !== void 0) {
        console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
        return this.addVectors(v2, w2);
      }
      this.x += v2.x;
      this.y += v2.y;
      this.z += v2.z;
      return this;
    }
    addScalar(s3) {
      this.x += s3;
      this.y += s3;
      this.z += s3;
      return this;
    }
    addVectors(a2, b2) {
      this.x = a2.x + b2.x;
      this.y = a2.y + b2.y;
      this.z = a2.z + b2.z;
      return this;
    }
    addScaledVector(v2, s3) {
      this.x += v2.x * s3;
      this.y += v2.y * s3;
      this.z += v2.z * s3;
      return this;
    }
    sub(v2, w2) {
      if (w2 !== void 0) {
        console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
        return this.subVectors(v2, w2);
      }
      this.x -= v2.x;
      this.y -= v2.y;
      this.z -= v2.z;
      return this;
    }
    subScalar(s3) {
      this.x -= s3;
      this.y -= s3;
      this.z -= s3;
      return this;
    }
    subVectors(a2, b2) {
      this.x = a2.x - b2.x;
      this.y = a2.y - b2.y;
      this.z = a2.z - b2.z;
      return this;
    }
    multiply(v2, w2) {
      if (w2 !== void 0) {
        console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.");
        return this.multiplyVectors(v2, w2);
      }
      this.x *= v2.x;
      this.y *= v2.y;
      this.z *= v2.z;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      return this;
    }
    multiplyVectors(a2, b2) {
      this.x = a2.x * b2.x;
      this.y = a2.y * b2.y;
      this.z = a2.z * b2.z;
      return this;
    }
    applyEuler(euler2) {
      if (!(euler2 && euler2.isEuler)) {
        console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.");
      }
      return this.applyQuaternion(_quaternion$4.setFromEuler(euler2));
    }
    applyAxisAngle(axis, angle) {
      return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));
    }
    applyMatrix3(m2) {
      const x2 = this.x, y2 = this.y, z2 = this.z;
      const e = m2.elements;
      this.x = e[0] * x2 + e[3] * y2 + e[6] * z2;
      this.y = e[1] * x2 + e[4] * y2 + e[7] * z2;
      this.z = e[2] * x2 + e[5] * y2 + e[8] * z2;
      return this;
    }
    applyNormalMatrix(m2) {
      return this.applyMatrix3(m2).normalize();
    }
    applyMatrix4(m2) {
      const x2 = this.x, y2 = this.y, z2 = this.z;
      const e = m2.elements;
      const w2 = 1 / (e[3] * x2 + e[7] * y2 + e[11] * z2 + e[15]);
      this.x = (e[0] * x2 + e[4] * y2 + e[8] * z2 + e[12]) * w2;
      this.y = (e[1] * x2 + e[5] * y2 + e[9] * z2 + e[13]) * w2;
      this.z = (e[2] * x2 + e[6] * y2 + e[10] * z2 + e[14]) * w2;
      return this;
    }
    applyQuaternion(q3) {
      const x2 = this.x, y2 = this.y, z2 = this.z;
      const qx = q3.x, qy = q3.y, qz = q3.z, qw = q3.w;
      const ix = qw * x2 + qy * z2 - qz * y2;
      const iy = qw * y2 + qz * x2 - qx * z2;
      const iz = qw * z2 + qx * y2 - qy * x2;
      const iw = -qx * x2 - qy * y2 - qz * z2;
      this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
      this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
      this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
      return this;
    }
    project(camera3) {
      return this.applyMatrix4(camera3.matrixWorldInverse).applyMatrix4(camera3.projectionMatrix);
    }
    unproject(camera3) {
      return this.applyMatrix4(camera3.projectionMatrixInverse).applyMatrix4(camera3.matrixWorld);
    }
    transformDirection(m2) {
      const x2 = this.x, y2 = this.y, z2 = this.z;
      const e = m2.elements;
      this.x = e[0] * x2 + e[4] * y2 + e[8] * z2;
      this.y = e[1] * x2 + e[5] * y2 + e[9] * z2;
      this.z = e[2] * x2 + e[6] * y2 + e[10] * z2;
      return this.normalize();
    }
    divide(v2) {
      this.x /= v2.x;
      this.y /= v2.y;
      this.z /= v2.z;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    min(v2) {
      this.x = Math.min(this.x, v2.x);
      this.y = Math.min(this.y, v2.y);
      this.z = Math.min(this.z, v2.z);
      return this;
    }
    max(v2) {
      this.x = Math.max(this.x, v2.x);
      this.y = Math.max(this.y, v2.y);
      this.z = Math.max(this.z, v2.z);
      return this;
    }
    clamp(min, max) {
      this.x = Math.max(min.x, Math.min(max.x, this.x));
      this.y = Math.max(min.y, Math.min(max.y, this.y));
      this.z = Math.max(min.z, Math.min(max.z, this.z));
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = Math.max(minVal, Math.min(maxVal, this.x));
      this.y = Math.max(minVal, Math.min(maxVal, this.y));
      this.z = Math.max(minVal, Math.min(maxVal, this.z));
      return this;
    }
    clampLength(min, max) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      return this;
    }
    roundToZero() {
      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
      this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      return this;
    }
    dot(v2) {
      return this.x * v2.x + this.y * v2.y + this.z * v2.z;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v2, alpha) {
      this.x += (v2.x - this.x) * alpha;
      this.y += (v2.y - this.y) * alpha;
      this.z += (v2.z - this.z) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      this.z = v1.z + (v2.z - v1.z) * alpha;
      return this;
    }
    cross(v2, w2) {
      if (w2 !== void 0) {
        console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.");
        return this.crossVectors(v2, w2);
      }
      return this.crossVectors(this, v2);
    }
    crossVectors(a2, b2) {
      const ax = a2.x, ay = a2.y, az = a2.z;
      const bx = b2.x, by = b2.y, bz = b2.z;
      this.x = ay * bz - az * by;
      this.y = az * bx - ax * bz;
      this.z = ax * by - ay * bx;
      return this;
    }
    projectOnVector(v2) {
      const denominator = v2.lengthSq();
      if (denominator === 0)
        return this.set(0, 0, 0);
      const scalar = v2.dot(this) / denominator;
      return this.copy(v2).multiplyScalar(scalar);
    }
    projectOnPlane(planeNormal) {
      _vector$c.copy(this).projectOnVector(planeNormal);
      return this.sub(_vector$c);
    }
    reflect(normal) {
      return this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));
    }
    angleTo(v2) {
      const denominator = Math.sqrt(this.lengthSq() * v2.lengthSq());
      if (denominator === 0)
        return Math.PI / 2;
      const theta = this.dot(v2) / denominator;
      return Math.acos(clamp(theta, -1, 1));
    }
    distanceTo(v2) {
      return Math.sqrt(this.distanceToSquared(v2));
    }
    distanceToSquared(v2) {
      const dx = this.x - v2.x, dy = this.y - v2.y, dz = this.z - v2.z;
      return dx * dx + dy * dy + dz * dz;
    }
    manhattanDistanceTo(v2) {
      return Math.abs(this.x - v2.x) + Math.abs(this.y - v2.y) + Math.abs(this.z - v2.z);
    }
    setFromSpherical(s3) {
      return this.setFromSphericalCoords(s3.radius, s3.phi, s3.theta);
    }
    setFromSphericalCoords(radius, phi, theta) {
      const sinPhiRadius = Math.sin(phi) * radius;
      this.x = sinPhiRadius * Math.sin(theta);
      this.y = Math.cos(phi) * radius;
      this.z = sinPhiRadius * Math.cos(theta);
      return this;
    }
    setFromCylindrical(c2) {
      return this.setFromCylindricalCoords(c2.radius, c2.theta, c2.y);
    }
    setFromCylindricalCoords(radius, theta, y2) {
      this.x = radius * Math.sin(theta);
      this.y = y2;
      this.z = radius * Math.cos(theta);
      return this;
    }
    setFromMatrixPosition(m2) {
      const e = m2.elements;
      this.x = e[12];
      this.y = e[13];
      this.z = e[14];
      return this;
    }
    setFromMatrixScale(m2) {
      const sx = this.setFromMatrixColumn(m2, 0).length();
      const sy = this.setFromMatrixColumn(m2, 1).length();
      const sz = this.setFromMatrixColumn(m2, 2).length();
      this.x = sx;
      this.y = sy;
      this.z = sz;
      return this;
    }
    setFromMatrixColumn(m2, index) {
      return this.fromArray(m2.elements, index * 4);
    }
    setFromMatrix3Column(m2, index) {
      return this.fromArray(m2.elements, index * 3);
    }
    equals(v2) {
      return v2.x === this.x && v2.y === this.y && v2.z === this.z;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      this.z = array[offset + 2];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      array[offset + 2] = this.z;
      return array;
    }
    fromBufferAttribute(attribute, index, offset) {
      if (offset !== void 0) {
        console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute().");
      }
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      this.z = attribute.getZ(index);
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      this.z = Math.random();
      return this;
    }
    randomDirection() {
      const u2 = (Math.random() - 0.5) * 2;
      const t = Math.random() * Math.PI * 2;
      const f2 = Math.sqrt(1 - u2 ** 2);
      this.x = f2 * Math.cos(t);
      this.y = f2 * Math.sin(t);
      this.z = u2;
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
      yield this.z;
    }
  };
  Vector3.prototype.isVector3 = true;
  var _vector$c = /* @__PURE__ */ new Vector3();
  var _quaternion$4 = /* @__PURE__ */ new Quaternion();
  var Box3 = class {
    constructor(min = new Vector3(Infinity, Infinity, Infinity), max = new Vector3(-Infinity, -Infinity, -Infinity)) {
      this.min = min;
      this.max = max;
    }
    set(min, max) {
      this.min.copy(min);
      this.max.copy(max);
      return this;
    }
    setFromArray(array) {
      let minX = Infinity;
      let minY = Infinity;
      let minZ = Infinity;
      let maxX = -Infinity;
      let maxY = -Infinity;
      let maxZ = -Infinity;
      for (let i2 = 0, l2 = array.length; i2 < l2; i2 += 3) {
        const x2 = array[i2];
        const y2 = array[i2 + 1];
        const z2 = array[i2 + 2];
        if (x2 < minX)
          minX = x2;
        if (y2 < minY)
          minY = y2;
        if (z2 < minZ)
          minZ = z2;
        if (x2 > maxX)
          maxX = x2;
        if (y2 > maxY)
          maxY = y2;
        if (z2 > maxZ)
          maxZ = z2;
      }
      this.min.set(minX, minY, minZ);
      this.max.set(maxX, maxY, maxZ);
      return this;
    }
    setFromBufferAttribute(attribute) {
      let minX = Infinity;
      let minY = Infinity;
      let minZ = Infinity;
      let maxX = -Infinity;
      let maxY = -Infinity;
      let maxZ = -Infinity;
      for (let i2 = 0, l2 = attribute.count; i2 < l2; i2++) {
        const x2 = attribute.getX(i2);
        const y2 = attribute.getY(i2);
        const z2 = attribute.getZ(i2);
        if (x2 < minX)
          minX = x2;
        if (y2 < minY)
          minY = y2;
        if (z2 < minZ)
          minZ = z2;
        if (x2 > maxX)
          maxX = x2;
        if (y2 > maxY)
          maxY = y2;
        if (z2 > maxZ)
          maxZ = z2;
      }
      this.min.set(minX, minY, minZ);
      this.max.set(maxX, maxY, maxZ);
      return this;
    }
    setFromPoints(points2) {
      this.makeEmpty();
      for (let i2 = 0, il = points2.length; i2 < il; i2++) {
        this.expandByPoint(points2[i2]);
      }
      return this;
    }
    setFromCenterAndSize(center, size2) {
      const halfSize = _vector$b.copy(size2).multiplyScalar(0.5);
      this.min.copy(center).sub(halfSize);
      this.max.copy(center).add(halfSize);
      return this;
    }
    setFromObject(object, precise = false) {
      this.makeEmpty();
      return this.expandByObject(object, precise);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(box) {
      this.min.copy(box.min);
      this.max.copy(box.max);
      return this;
    }
    makeEmpty() {
      this.min.x = this.min.y = this.min.z = Infinity;
      this.max.x = this.max.y = this.max.z = -Infinity;
      return this;
    }
    isEmpty() {
      return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    }
    getCenter(target) {
      return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
    getSize(target) {
      return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
    }
    expandByPoint(point) {
      this.min.min(point);
      this.max.max(point);
      return this;
    }
    expandByVector(vector) {
      this.min.sub(vector);
      this.max.add(vector);
      return this;
    }
    expandByScalar(scalar) {
      this.min.addScalar(-scalar);
      this.max.addScalar(scalar);
      return this;
    }
    expandByObject(object, precise = false) {
      object.updateWorldMatrix(false, false);
      const geometry = object.geometry;
      if (geometry !== void 0) {
        if (precise && geometry.attributes != void 0 && geometry.attributes.position !== void 0) {
          const position = geometry.attributes.position;
          for (let i2 = 0, l2 = position.count; i2 < l2; i2++) {
            _vector$b.fromBufferAttribute(position, i2).applyMatrix4(object.matrixWorld);
            this.expandByPoint(_vector$b);
          }
        } else {
          if (geometry.boundingBox === null) {
            geometry.computeBoundingBox();
          }
          _box$3.copy(geometry.boundingBox);
          _box$3.applyMatrix4(object.matrixWorld);
          this.union(_box$3);
        }
      }
      const children2 = object.children;
      for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
        this.expandByObject(children2[i2], precise);
      }
      return this;
    }
    containsPoint(point) {
      return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;
    }
    containsBox(box) {
      return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
    }
    getParameter(point, target) {
      return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));
    }
    intersectsBox(box) {
      return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
    }
    intersectsSphere(sphere) {
      this.clampPoint(sphere.center, _vector$b);
      return _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
    }
    intersectsPlane(plane) {
      let min, max;
      if (plane.normal.x > 0) {
        min = plane.normal.x * this.min.x;
        max = plane.normal.x * this.max.x;
      } else {
        min = plane.normal.x * this.max.x;
        max = plane.normal.x * this.min.x;
      }
      if (plane.normal.y > 0) {
        min += plane.normal.y * this.min.y;
        max += plane.normal.y * this.max.y;
      } else {
        min += plane.normal.y * this.max.y;
        max += plane.normal.y * this.min.y;
      }
      if (plane.normal.z > 0) {
        min += plane.normal.z * this.min.z;
        max += plane.normal.z * this.max.z;
      } else {
        min += plane.normal.z * this.max.z;
        max += plane.normal.z * this.min.z;
      }
      return min <= -plane.constant && max >= -plane.constant;
    }
    intersectsTriangle(triangle) {
      if (this.isEmpty()) {
        return false;
      }
      this.getCenter(_center);
      _extents.subVectors(this.max, _center);
      _v0$2.subVectors(triangle.a, _center);
      _v1$7.subVectors(triangle.b, _center);
      _v2$3.subVectors(triangle.c, _center);
      _f0.subVectors(_v1$7, _v0$2);
      _f1.subVectors(_v2$3, _v1$7);
      _f2.subVectors(_v0$2, _v2$3);
      let axes = [
        0,
        -_f0.z,
        _f0.y,
        0,
        -_f1.z,
        _f1.y,
        0,
        -_f2.z,
        _f2.y,
        _f0.z,
        0,
        -_f0.x,
        _f1.z,
        0,
        -_f1.x,
        _f2.z,
        0,
        -_f2.x,
        -_f0.y,
        _f0.x,
        0,
        -_f1.y,
        _f1.x,
        0,
        -_f2.y,
        _f2.x,
        0
      ];
      if (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {
        return false;
      }
      axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
      if (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {
        return false;
      }
      _triangleNormal.crossVectors(_f0, _f1);
      axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
      return satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents);
    }
    clampPoint(point, target) {
      return target.copy(point).clamp(this.min, this.max);
    }
    distanceToPoint(point) {
      const clampedPoint = _vector$b.copy(point).clamp(this.min, this.max);
      return clampedPoint.sub(point).length();
    }
    getBoundingSphere(target) {
      this.getCenter(target.center);
      target.radius = this.getSize(_vector$b).length() * 0.5;
      return target;
    }
    intersect(box) {
      this.min.max(box.min);
      this.max.min(box.max);
      if (this.isEmpty())
        this.makeEmpty();
      return this;
    }
    union(box) {
      this.min.min(box.min);
      this.max.max(box.max);
      return this;
    }
    applyMatrix4(matrix) {
      if (this.isEmpty())
        return this;
      _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix);
      _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix);
      _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix);
      _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix);
      _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix);
      _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix);
      _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix);
      _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix);
      this.setFromPoints(_points);
      return this;
    }
    translate(offset) {
      this.min.add(offset);
      this.max.add(offset);
      return this;
    }
    equals(box) {
      return box.min.equals(this.min) && box.max.equals(this.max);
    }
  };
  Box3.prototype.isBox3 = true;
  var _points = [
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3()
  ];
  var _vector$b = /* @__PURE__ */ new Vector3();
  var _box$3 = /* @__PURE__ */ new Box3();
  var _v0$2 = /* @__PURE__ */ new Vector3();
  var _v1$7 = /* @__PURE__ */ new Vector3();
  var _v2$3 = /* @__PURE__ */ new Vector3();
  var _f0 = /* @__PURE__ */ new Vector3();
  var _f1 = /* @__PURE__ */ new Vector3();
  var _f2 = /* @__PURE__ */ new Vector3();
  var _center = /* @__PURE__ */ new Vector3();
  var _extents = /* @__PURE__ */ new Vector3();
  var _triangleNormal = /* @__PURE__ */ new Vector3();
  var _testAxis = /* @__PURE__ */ new Vector3();
  function satForAxes(axes, v0, v1, v2, extents) {
    for (let i2 = 0, j2 = axes.length - 3; i2 <= j2; i2 += 3) {
      _testAxis.fromArray(axes, i2);
      const r2 = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);
      const p0 = v0.dot(_testAxis);
      const p1 = v1.dot(_testAxis);
      const p22 = v2.dot(_testAxis);
      if (Math.max(-Math.max(p0, p1, p22), Math.min(p0, p1, p22)) > r2) {
        return false;
      }
    }
    return true;
  }
  var _box$2 = /* @__PURE__ */ new Box3();
  var _v1$6 = /* @__PURE__ */ new Vector3();
  var _toFarthestPoint = /* @__PURE__ */ new Vector3();
  var _toPoint = /* @__PURE__ */ new Vector3();
  var Sphere = class {
    constructor(center = new Vector3(), radius = -1) {
      this.center = center;
      this.radius = radius;
    }
    set(center, radius) {
      this.center.copy(center);
      this.radius = radius;
      return this;
    }
    setFromPoints(points2, optionalCenter) {
      const center = this.center;
      if (optionalCenter !== void 0) {
        center.copy(optionalCenter);
      } else {
        _box$2.setFromPoints(points2).getCenter(center);
      }
      let maxRadiusSq = 0;
      for (let i2 = 0, il = points2.length; i2 < il; i2++) {
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points2[i2]));
      }
      this.radius = Math.sqrt(maxRadiusSq);
      return this;
    }
    copy(sphere) {
      this.center.copy(sphere.center);
      this.radius = sphere.radius;
      return this;
    }
    isEmpty() {
      return this.radius < 0;
    }
    makeEmpty() {
      this.center.set(0, 0, 0);
      this.radius = -1;
      return this;
    }
    containsPoint(point) {
      return point.distanceToSquared(this.center) <= this.radius * this.radius;
    }
    distanceToPoint(point) {
      return point.distanceTo(this.center) - this.radius;
    }
    intersectsSphere(sphere) {
      const radiusSum = this.radius + sphere.radius;
      return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
    }
    intersectsBox(box) {
      return box.intersectsSphere(this);
    }
    intersectsPlane(plane) {
      return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
    }
    clampPoint(point, target) {
      const deltaLengthSq = this.center.distanceToSquared(point);
      target.copy(point);
      if (deltaLengthSq > this.radius * this.radius) {
        target.sub(this.center).normalize();
        target.multiplyScalar(this.radius).add(this.center);
      }
      return target;
    }
    getBoundingBox(target) {
      if (this.isEmpty()) {
        target.makeEmpty();
        return target;
      }
      target.set(this.center, this.center);
      target.expandByScalar(this.radius);
      return target;
    }
    applyMatrix4(matrix) {
      this.center.applyMatrix4(matrix);
      this.radius = this.radius * matrix.getMaxScaleOnAxis();
      return this;
    }
    translate(offset) {
      this.center.add(offset);
      return this;
    }
    expandByPoint(point) {
      _toPoint.subVectors(point, this.center);
      const lengthSq = _toPoint.lengthSq();
      if (lengthSq > this.radius * this.radius) {
        const length = Math.sqrt(lengthSq);
        const missingRadiusHalf = (length - this.radius) * 0.5;
        this.center.add(_toPoint.multiplyScalar(missingRadiusHalf / length));
        this.radius += missingRadiusHalf;
      }
      return this;
    }
    union(sphere) {
      if (this.center.equals(sphere.center) === true) {
        _toFarthestPoint.set(0, 0, 1).multiplyScalar(sphere.radius);
      } else {
        _toFarthestPoint.subVectors(sphere.center, this.center).normalize().multiplyScalar(sphere.radius);
      }
      this.expandByPoint(_v1$6.copy(sphere.center).add(_toFarthestPoint));
      this.expandByPoint(_v1$6.copy(sphere.center).sub(_toFarthestPoint));
      return this;
    }
    equals(sphere) {
      return sphere.center.equals(this.center) && sphere.radius === this.radius;
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  var _vector$a = /* @__PURE__ */ new Vector3();
  var _segCenter = /* @__PURE__ */ new Vector3();
  var _segDir = /* @__PURE__ */ new Vector3();
  var _diff = /* @__PURE__ */ new Vector3();
  var _edge1 = /* @__PURE__ */ new Vector3();
  var _edge2 = /* @__PURE__ */ new Vector3();
  var _normal$1 = /* @__PURE__ */ new Vector3();
  var Ray = class {
    constructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {
      this.origin = origin;
      this.direction = direction;
    }
    set(origin, direction) {
      this.origin.copy(origin);
      this.direction.copy(direction);
      return this;
    }
    copy(ray) {
      this.origin.copy(ray.origin);
      this.direction.copy(ray.direction);
      return this;
    }
    at(t, target) {
      return target.copy(this.direction).multiplyScalar(t).add(this.origin);
    }
    lookAt(v2) {
      this.direction.copy(v2).sub(this.origin).normalize();
      return this;
    }
    recast(t) {
      this.origin.copy(this.at(t, _vector$a));
      return this;
    }
    closestPointToPoint(point, target) {
      target.subVectors(point, this.origin);
      const directionDistance = target.dot(this.direction);
      if (directionDistance < 0) {
        return target.copy(this.origin);
      }
      return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
    }
    distanceToPoint(point) {
      return Math.sqrt(this.distanceSqToPoint(point));
    }
    distanceSqToPoint(point) {
      const directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction);
      if (directionDistance < 0) {
        return this.origin.distanceToSquared(point);
      }
      _vector$a.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
      return _vector$a.distanceToSquared(point);
    }
    distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
      _segCenter.copy(v0).add(v1).multiplyScalar(0.5);
      _segDir.copy(v1).sub(v0).normalize();
      _diff.copy(this.origin).sub(_segCenter);
      const segExtent = v0.distanceTo(v1) * 0.5;
      const a01 = -this.direction.dot(_segDir);
      const b0 = _diff.dot(this.direction);
      const b1 = -_diff.dot(_segDir);
      const c2 = _diff.lengthSq();
      const det = Math.abs(1 - a01 * a01);
      let s0, s1, sqrDist, extDet;
      if (det > 0) {
        s0 = a01 * b1 - b0;
        s1 = a01 * b0 - b1;
        extDet = segExtent * det;
        if (s0 >= 0) {
          if (s1 >= -extDet) {
            if (s1 <= extDet) {
              const invDet = 1 / det;
              s0 *= invDet;
              s1 *= invDet;
              sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c2;
            } else {
              s1 = segExtent;
              s0 = Math.max(0, -(a01 * s1 + b0));
              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c2;
            }
          } else {
            s1 = -segExtent;
            s0 = Math.max(0, -(a01 * s1 + b0));
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c2;
          }
        } else {
          if (s1 <= -extDet) {
            s0 = Math.max(0, -(-a01 * segExtent + b0));
            s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c2;
          } else if (s1 <= extDet) {
            s0 = 0;
            s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = s1 * (s1 + 2 * b1) + c2;
          } else {
            s0 = Math.max(0, -(a01 * segExtent + b0));
            s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c2;
          }
        }
      } else {
        s1 = a01 > 0 ? -segExtent : segExtent;
        s0 = Math.max(0, -(a01 * s1 + b0));
        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c2;
      }
      if (optionalPointOnRay) {
        optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);
      }
      if (optionalPointOnSegment) {
        optionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);
      }
      return sqrDist;
    }
    intersectSphere(sphere, target) {
      _vector$a.subVectors(sphere.center, this.origin);
      const tca = _vector$a.dot(this.direction);
      const d2 = _vector$a.dot(_vector$a) - tca * tca;
      const radius2 = sphere.radius * sphere.radius;
      if (d2 > radius2)
        return null;
      const thc = Math.sqrt(radius2 - d2);
      const t0 = tca - thc;
      const t1 = tca + thc;
      if (t0 < 0 && t1 < 0)
        return null;
      if (t0 < 0)
        return this.at(t1, target);
      return this.at(t0, target);
    }
    intersectsSphere(sphere) {
      return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
    }
    distanceToPlane(plane) {
      const denominator = plane.normal.dot(this.direction);
      if (denominator === 0) {
        if (plane.distanceToPoint(this.origin) === 0) {
          return 0;
        }
        return null;
      }
      const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
      return t >= 0 ? t : null;
    }
    intersectPlane(plane, target) {
      const t = this.distanceToPlane(plane);
      if (t === null) {
        return null;
      }
      return this.at(t, target);
    }
    intersectsPlane(plane) {
      const distToPoint = plane.distanceToPoint(this.origin);
      if (distToPoint === 0) {
        return true;
      }
      const denominator = plane.normal.dot(this.direction);
      if (denominator * distToPoint < 0) {
        return true;
      }
      return false;
    }
    intersectBox(box, target) {
      let tmin, tmax, tymin, tymax, tzmin, tzmax;
      const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
      const origin = this.origin;
      if (invdirx >= 0) {
        tmin = (box.min.x - origin.x) * invdirx;
        tmax = (box.max.x - origin.x) * invdirx;
      } else {
        tmin = (box.max.x - origin.x) * invdirx;
        tmax = (box.min.x - origin.x) * invdirx;
      }
      if (invdiry >= 0) {
        tymin = (box.min.y - origin.y) * invdiry;
        tymax = (box.max.y - origin.y) * invdiry;
      } else {
        tymin = (box.max.y - origin.y) * invdiry;
        tymax = (box.min.y - origin.y) * invdiry;
      }
      if (tmin > tymax || tymin > tmax)
        return null;
      if (tymin > tmin || tmin !== tmin)
        tmin = tymin;
      if (tymax < tmax || tmax !== tmax)
        tmax = tymax;
      if (invdirz >= 0) {
        tzmin = (box.min.z - origin.z) * invdirz;
        tzmax = (box.max.z - origin.z) * invdirz;
      } else {
        tzmin = (box.max.z - origin.z) * invdirz;
        tzmax = (box.min.z - origin.z) * invdirz;
      }
      if (tmin > tzmax || tzmin > tmax)
        return null;
      if (tzmin > tmin || tmin !== tmin)
        tmin = tzmin;
      if (tzmax < tmax || tmax !== tmax)
        tmax = tzmax;
      if (tmax < 0)
        return null;
      return this.at(tmin >= 0 ? tmin : tmax, target);
    }
    intersectsBox(box) {
      return this.intersectBox(box, _vector$a) !== null;
    }
    intersectTriangle(a2, b2, c2, backfaceCulling, target) {
      _edge1.subVectors(b2, a2);
      _edge2.subVectors(c2, a2);
      _normal$1.crossVectors(_edge1, _edge2);
      let DdN = this.direction.dot(_normal$1);
      let sign2;
      if (DdN > 0) {
        if (backfaceCulling)
          return null;
        sign2 = 1;
      } else if (DdN < 0) {
        sign2 = -1;
        DdN = -DdN;
      } else {
        return null;
      }
      _diff.subVectors(this.origin, a2);
      const DdQxE2 = sign2 * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
      if (DdQxE2 < 0) {
        return null;
      }
      const DdE1xQ = sign2 * this.direction.dot(_edge1.cross(_diff));
      if (DdE1xQ < 0) {
        return null;
      }
      if (DdQxE2 + DdE1xQ > DdN) {
        return null;
      }
      const QdN = -sign2 * _diff.dot(_normal$1);
      if (QdN < 0) {
        return null;
      }
      return this.at(QdN / DdN, target);
    }
    applyMatrix4(matrix4) {
      this.origin.applyMatrix4(matrix4);
      this.direction.transformDirection(matrix4);
      return this;
    }
    equals(ray) {
      return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  var Matrix4 = class {
    constructor() {
      this.elements = [
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      ];
      if (arguments.length > 0) {
        console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
      }
    }
    set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
      const te2 = this.elements;
      te2[0] = n11;
      te2[4] = n12;
      te2[8] = n13;
      te2[12] = n14;
      te2[1] = n21;
      te2[5] = n22;
      te2[9] = n23;
      te2[13] = n24;
      te2[2] = n31;
      te2[6] = n32;
      te2[10] = n33;
      te2[14] = n34;
      te2[3] = n41;
      te2[7] = n42;
      te2[11] = n43;
      te2[15] = n44;
      return this;
    }
    identity() {
      this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      return this;
    }
    clone() {
      return new Matrix4().fromArray(this.elements);
    }
    copy(m2) {
      const te2 = this.elements;
      const me2 = m2.elements;
      te2[0] = me2[0];
      te2[1] = me2[1];
      te2[2] = me2[2];
      te2[3] = me2[3];
      te2[4] = me2[4];
      te2[5] = me2[5];
      te2[6] = me2[6];
      te2[7] = me2[7];
      te2[8] = me2[8];
      te2[9] = me2[9];
      te2[10] = me2[10];
      te2[11] = me2[11];
      te2[12] = me2[12];
      te2[13] = me2[13];
      te2[14] = me2[14];
      te2[15] = me2[15];
      return this;
    }
    copyPosition(m2) {
      const te2 = this.elements, me2 = m2.elements;
      te2[12] = me2[12];
      te2[13] = me2[13];
      te2[14] = me2[14];
      return this;
    }
    setFromMatrix3(m2) {
      const me2 = m2.elements;
      this.set(me2[0], me2[3], me2[6], 0, me2[1], me2[4], me2[7], 0, me2[2], me2[5], me2[8], 0, 0, 0, 0, 1);
      return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
      xAxis.setFromMatrixColumn(this, 0);
      yAxis.setFromMatrixColumn(this, 1);
      zAxis.setFromMatrixColumn(this, 2);
      return this;
    }
    makeBasis(xAxis, yAxis, zAxis) {
      this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);
      return this;
    }
    extractRotation(m2) {
      const te2 = this.elements;
      const me2 = m2.elements;
      const scaleX = 1 / _v1$5.setFromMatrixColumn(m2, 0).length();
      const scaleY = 1 / _v1$5.setFromMatrixColumn(m2, 1).length();
      const scaleZ = 1 / _v1$5.setFromMatrixColumn(m2, 2).length();
      te2[0] = me2[0] * scaleX;
      te2[1] = me2[1] * scaleX;
      te2[2] = me2[2] * scaleX;
      te2[3] = 0;
      te2[4] = me2[4] * scaleY;
      te2[5] = me2[5] * scaleY;
      te2[6] = me2[6] * scaleY;
      te2[7] = 0;
      te2[8] = me2[8] * scaleZ;
      te2[9] = me2[9] * scaleZ;
      te2[10] = me2[10] * scaleZ;
      te2[11] = 0;
      te2[12] = 0;
      te2[13] = 0;
      te2[14] = 0;
      te2[15] = 1;
      return this;
    }
    makeRotationFromEuler(euler2) {
      if (!(euler2 && euler2.isEuler)) {
        console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
      }
      const te2 = this.elements;
      const x2 = euler2.x, y2 = euler2.y, z2 = euler2.z;
      const a2 = Math.cos(x2), b2 = Math.sin(x2);
      const c2 = Math.cos(y2), d2 = Math.sin(y2);
      const e = Math.cos(z2), f2 = Math.sin(z2);
      if (euler2.order === "XYZ") {
        const ae2 = a2 * e, af = a2 * f2, be = b2 * e, bf = b2 * f2;
        te2[0] = c2 * e;
        te2[4] = -c2 * f2;
        te2[8] = d2;
        te2[1] = af + be * d2;
        te2[5] = ae2 - bf * d2;
        te2[9] = -b2 * c2;
        te2[2] = bf - ae2 * d2;
        te2[6] = be + af * d2;
        te2[10] = a2 * c2;
      } else if (euler2.order === "YXZ") {
        const ce2 = c2 * e, cf = c2 * f2, de2 = d2 * e, df = d2 * f2;
        te2[0] = ce2 + df * b2;
        te2[4] = de2 * b2 - cf;
        te2[8] = a2 * d2;
        te2[1] = a2 * f2;
        te2[5] = a2 * e;
        te2[9] = -b2;
        te2[2] = cf * b2 - de2;
        te2[6] = df + ce2 * b2;
        te2[10] = a2 * c2;
      } else if (euler2.order === "ZXY") {
        const ce2 = c2 * e, cf = c2 * f2, de2 = d2 * e, df = d2 * f2;
        te2[0] = ce2 - df * b2;
        te2[4] = -a2 * f2;
        te2[8] = de2 + cf * b2;
        te2[1] = cf + de2 * b2;
        te2[5] = a2 * e;
        te2[9] = df - ce2 * b2;
        te2[2] = -a2 * d2;
        te2[6] = b2;
        te2[10] = a2 * c2;
      } else if (euler2.order === "ZYX") {
        const ae2 = a2 * e, af = a2 * f2, be = b2 * e, bf = b2 * f2;
        te2[0] = c2 * e;
        te2[4] = be * d2 - af;
        te2[8] = ae2 * d2 + bf;
        te2[1] = c2 * f2;
        te2[5] = bf * d2 + ae2;
        te2[9] = af * d2 - be;
        te2[2] = -d2;
        te2[6] = b2 * c2;
        te2[10] = a2 * c2;
      } else if (euler2.order === "YZX") {
        const ac = a2 * c2, ad = a2 * d2, bc = b2 * c2, bd = b2 * d2;
        te2[0] = c2 * e;
        te2[4] = bd - ac * f2;
        te2[8] = bc * f2 + ad;
        te2[1] = f2;
        te2[5] = a2 * e;
        te2[9] = -b2 * e;
        te2[2] = -d2 * e;
        te2[6] = ad * f2 + bc;
        te2[10] = ac - bd * f2;
      } else if (euler2.order === "XZY") {
        const ac = a2 * c2, ad = a2 * d2, bc = b2 * c2, bd = b2 * d2;
        te2[0] = c2 * e;
        te2[4] = -f2;
        te2[8] = d2 * e;
        te2[1] = ac * f2 + bd;
        te2[5] = a2 * e;
        te2[9] = ad * f2 - bc;
        te2[2] = bc * f2 - ad;
        te2[6] = b2 * e;
        te2[10] = bd * f2 + ac;
      }
      te2[3] = 0;
      te2[7] = 0;
      te2[11] = 0;
      te2[12] = 0;
      te2[13] = 0;
      te2[14] = 0;
      te2[15] = 1;
      return this;
    }
    makeRotationFromQuaternion(q3) {
      return this.compose(_zero, q3, _one);
    }
    lookAt(eye, target, up) {
      const te2 = this.elements;
      _z.subVectors(eye, target);
      if (_z.lengthSq() === 0) {
        _z.z = 1;
      }
      _z.normalize();
      _x.crossVectors(up, _z);
      if (_x.lengthSq() === 0) {
        if (Math.abs(up.z) === 1) {
          _z.x += 1e-4;
        } else {
          _z.z += 1e-4;
        }
        _z.normalize();
        _x.crossVectors(up, _z);
      }
      _x.normalize();
      _y.crossVectors(_z, _x);
      te2[0] = _x.x;
      te2[4] = _y.x;
      te2[8] = _z.x;
      te2[1] = _x.y;
      te2[5] = _y.y;
      te2[9] = _z.y;
      te2[2] = _x.z;
      te2[6] = _y.z;
      te2[10] = _z.z;
      return this;
    }
    multiply(m2, n2) {
      if (n2 !== void 0) {
        console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.");
        return this.multiplyMatrices(m2, n2);
      }
      return this.multiplyMatrices(this, m2);
    }
    premultiply(m2) {
      return this.multiplyMatrices(m2, this);
    }
    multiplyMatrices(a2, b2) {
      const ae2 = a2.elements;
      const be = b2.elements;
      const te2 = this.elements;
      const a11 = ae2[0], a12 = ae2[4], a13 = ae2[8], a14 = ae2[12];
      const a21 = ae2[1], a22 = ae2[5], a23 = ae2[9], a24 = ae2[13];
      const a31 = ae2[2], a32 = ae2[6], a33 = ae2[10], a34 = ae2[14];
      const a41 = ae2[3], a42 = ae2[7], a43 = ae2[11], a44 = ae2[15];
      const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
      const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
      const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
      const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
      te2[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
      te2[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
      te2[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
      te2[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
      te2[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
      te2[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
      te2[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
      te2[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
      te2[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
      te2[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
      te2[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
      te2[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
      te2[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
      te2[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
      te2[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
      te2[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
      return this;
    }
    multiplyScalar(s3) {
      const te2 = this.elements;
      te2[0] *= s3;
      te2[4] *= s3;
      te2[8] *= s3;
      te2[12] *= s3;
      te2[1] *= s3;
      te2[5] *= s3;
      te2[9] *= s3;
      te2[13] *= s3;
      te2[2] *= s3;
      te2[6] *= s3;
      te2[10] *= s3;
      te2[14] *= s3;
      te2[3] *= s3;
      te2[7] *= s3;
      te2[11] *= s3;
      te2[15] *= s3;
      return this;
    }
    determinant() {
      const te2 = this.elements;
      const n11 = te2[0], n12 = te2[4], n13 = te2[8], n14 = te2[12];
      const n21 = te2[1], n22 = te2[5], n23 = te2[9], n24 = te2[13];
      const n31 = te2[2], n32 = te2[6], n33 = te2[10], n34 = te2[14];
      const n41 = te2[3], n42 = te2[7], n43 = te2[11], n44 = te2[15];
      return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
    }
    transpose() {
      const te2 = this.elements;
      let tmp2;
      tmp2 = te2[1];
      te2[1] = te2[4];
      te2[4] = tmp2;
      tmp2 = te2[2];
      te2[2] = te2[8];
      te2[8] = tmp2;
      tmp2 = te2[6];
      te2[6] = te2[9];
      te2[9] = tmp2;
      tmp2 = te2[3];
      te2[3] = te2[12];
      te2[12] = tmp2;
      tmp2 = te2[7];
      te2[7] = te2[13];
      te2[13] = tmp2;
      tmp2 = te2[11];
      te2[11] = te2[14];
      te2[14] = tmp2;
      return this;
    }
    setPosition(x2, y2, z2) {
      const te2 = this.elements;
      if (x2.isVector3) {
        te2[12] = x2.x;
        te2[13] = x2.y;
        te2[14] = x2.z;
      } else {
        te2[12] = x2;
        te2[13] = y2;
        te2[14] = z2;
      }
      return this;
    }
    invert() {
      const te2 = this.elements, n11 = te2[0], n21 = te2[1], n31 = te2[2], n41 = te2[3], n12 = te2[4], n22 = te2[5], n32 = te2[6], n42 = te2[7], n13 = te2[8], n23 = te2[9], n33 = te2[10], n43 = te2[11], n14 = te2[12], n24 = te2[13], n34 = te2[14], n44 = te2[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
      const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
      if (det === 0)
        return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      const detInv = 1 / det;
      te2[0] = t11 * detInv;
      te2[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
      te2[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
      te2[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
      te2[4] = t12 * detInv;
      te2[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
      te2[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
      te2[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
      te2[8] = t13 * detInv;
      te2[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
      te2[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
      te2[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
      te2[12] = t14 * detInv;
      te2[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
      te2[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
      te2[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
      return this;
    }
    scale(v2) {
      const te2 = this.elements;
      const x2 = v2.x, y2 = v2.y, z2 = v2.z;
      te2[0] *= x2;
      te2[4] *= y2;
      te2[8] *= z2;
      te2[1] *= x2;
      te2[5] *= y2;
      te2[9] *= z2;
      te2[2] *= x2;
      te2[6] *= y2;
      te2[10] *= z2;
      te2[3] *= x2;
      te2[7] *= y2;
      te2[11] *= z2;
      return this;
    }
    getMaxScaleOnAxis() {
      const te2 = this.elements;
      const scaleXSq = te2[0] * te2[0] + te2[1] * te2[1] + te2[2] * te2[2];
      const scaleYSq = te2[4] * te2[4] + te2[5] * te2[5] + te2[6] * te2[6];
      const scaleZSq = te2[8] * te2[8] + te2[9] * te2[9] + te2[10] * te2[10];
      return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
    }
    makeTranslation(x2, y2, z2) {
      this.set(1, 0, 0, x2, 0, 1, 0, y2, 0, 0, 1, z2, 0, 0, 0, 1);
      return this;
    }
    makeRotationX(theta) {
      const c2 = Math.cos(theta), s3 = Math.sin(theta);
      this.set(1, 0, 0, 0, 0, c2, -s3, 0, 0, s3, c2, 0, 0, 0, 0, 1);
      return this;
    }
    makeRotationY(theta) {
      const c2 = Math.cos(theta), s3 = Math.sin(theta);
      this.set(c2, 0, s3, 0, 0, 1, 0, 0, -s3, 0, c2, 0, 0, 0, 0, 1);
      return this;
    }
    makeRotationZ(theta) {
      const c2 = Math.cos(theta), s3 = Math.sin(theta);
      this.set(c2, -s3, 0, 0, s3, c2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      return this;
    }
    makeRotationAxis(axis, angle) {
      const c2 = Math.cos(angle);
      const s3 = Math.sin(angle);
      const t = 1 - c2;
      const x2 = axis.x, y2 = axis.y, z2 = axis.z;
      const tx = t * x2, ty = t * y2;
      this.set(tx * x2 + c2, tx * y2 - s3 * z2, tx * z2 + s3 * y2, 0, tx * y2 + s3 * z2, ty * y2 + c2, ty * z2 - s3 * x2, 0, tx * z2 - s3 * y2, ty * z2 + s3 * x2, t * z2 * z2 + c2, 0, 0, 0, 0, 1);
      return this;
    }
    makeScale(x2, y2, z2) {
      this.set(x2, 0, 0, 0, 0, y2, 0, 0, 0, 0, z2, 0, 0, 0, 0, 1);
      return this;
    }
    makeShear(xy, xz, yx, yz, zx, zy) {
      this.set(1, yx, zx, 0, xy, 1, zy, 0, xz, yz, 1, 0, 0, 0, 0, 1);
      return this;
    }
    compose(position, quaternion, scale3) {
      const te2 = this.elements;
      const x2 = quaternion._x, y2 = quaternion._y, z2 = quaternion._z, w2 = quaternion._w;
      const x22 = x2 + x2, y22 = y2 + y2, z22 = z2 + z2;
      const xx = x2 * x22, xy = x2 * y22, xz = x2 * z22;
      const yy = y2 * y22, yz = y2 * z22, zz = z2 * z22;
      const wx = w2 * x22, wy = w2 * y22, wz = w2 * z22;
      const sx = scale3.x, sy = scale3.y, sz = scale3.z;
      te2[0] = (1 - (yy + zz)) * sx;
      te2[1] = (xy + wz) * sx;
      te2[2] = (xz - wy) * sx;
      te2[3] = 0;
      te2[4] = (xy - wz) * sy;
      te2[5] = (1 - (xx + zz)) * sy;
      te2[6] = (yz + wx) * sy;
      te2[7] = 0;
      te2[8] = (xz + wy) * sz;
      te2[9] = (yz - wx) * sz;
      te2[10] = (1 - (xx + yy)) * sz;
      te2[11] = 0;
      te2[12] = position.x;
      te2[13] = position.y;
      te2[14] = position.z;
      te2[15] = 1;
      return this;
    }
    decompose(position, quaternion, scale3) {
      const te2 = this.elements;
      let sx = _v1$5.set(te2[0], te2[1], te2[2]).length();
      const sy = _v1$5.set(te2[4], te2[5], te2[6]).length();
      const sz = _v1$5.set(te2[8], te2[9], te2[10]).length();
      const det = this.determinant();
      if (det < 0)
        sx = -sx;
      position.x = te2[12];
      position.y = te2[13];
      position.z = te2[14];
      _m1$2.copy(this);
      const invSX = 1 / sx;
      const invSY = 1 / sy;
      const invSZ = 1 / sz;
      _m1$2.elements[0] *= invSX;
      _m1$2.elements[1] *= invSX;
      _m1$2.elements[2] *= invSX;
      _m1$2.elements[4] *= invSY;
      _m1$2.elements[5] *= invSY;
      _m1$2.elements[6] *= invSY;
      _m1$2.elements[8] *= invSZ;
      _m1$2.elements[9] *= invSZ;
      _m1$2.elements[10] *= invSZ;
      quaternion.setFromRotationMatrix(_m1$2);
      scale3.x = sx;
      scale3.y = sy;
      scale3.z = sz;
      return this;
    }
    makePerspective(left, right, top, bottom, near, far) {
      if (far === void 0) {
        console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
      }
      const te2 = this.elements;
      const x2 = 2 * near / (right - left);
      const y2 = 2 * near / (top - bottom);
      const a2 = (right + left) / (right - left);
      const b2 = (top + bottom) / (top - bottom);
      const c2 = -(far + near) / (far - near);
      const d2 = -2 * far * near / (far - near);
      te2[0] = x2;
      te2[4] = 0;
      te2[8] = a2;
      te2[12] = 0;
      te2[1] = 0;
      te2[5] = y2;
      te2[9] = b2;
      te2[13] = 0;
      te2[2] = 0;
      te2[6] = 0;
      te2[10] = c2;
      te2[14] = d2;
      te2[3] = 0;
      te2[7] = 0;
      te2[11] = -1;
      te2[15] = 0;
      return this;
    }
    makeOrthographic(left, right, top, bottom, near, far) {
      const te2 = this.elements;
      const w2 = 1 / (right - left);
      const h2 = 1 / (top - bottom);
      const p3 = 1 / (far - near);
      const x2 = (right + left) * w2;
      const y2 = (top + bottom) * h2;
      const z2 = (far + near) * p3;
      te2[0] = 2 * w2;
      te2[4] = 0;
      te2[8] = 0;
      te2[12] = -x2;
      te2[1] = 0;
      te2[5] = 2 * h2;
      te2[9] = 0;
      te2[13] = -y2;
      te2[2] = 0;
      te2[6] = 0;
      te2[10] = -2 * p3;
      te2[14] = -z2;
      te2[3] = 0;
      te2[7] = 0;
      te2[11] = 0;
      te2[15] = 1;
      return this;
    }
    equals(matrix) {
      const te2 = this.elements;
      const me2 = matrix.elements;
      for (let i2 = 0; i2 < 16; i2++) {
        if (te2[i2] !== me2[i2])
          return false;
      }
      return true;
    }
    fromArray(array, offset = 0) {
      for (let i2 = 0; i2 < 16; i2++) {
        this.elements[i2] = array[i2 + offset];
      }
      return this;
    }
    toArray(array = [], offset = 0) {
      const te2 = this.elements;
      array[offset] = te2[0];
      array[offset + 1] = te2[1];
      array[offset + 2] = te2[2];
      array[offset + 3] = te2[3];
      array[offset + 4] = te2[4];
      array[offset + 5] = te2[5];
      array[offset + 6] = te2[6];
      array[offset + 7] = te2[7];
      array[offset + 8] = te2[8];
      array[offset + 9] = te2[9];
      array[offset + 10] = te2[10];
      array[offset + 11] = te2[11];
      array[offset + 12] = te2[12];
      array[offset + 13] = te2[13];
      array[offset + 14] = te2[14];
      array[offset + 15] = te2[15];
      return array;
    }
  };
  Matrix4.prototype.isMatrix4 = true;
  var _v1$5 = /* @__PURE__ */ new Vector3();
  var _m1$2 = /* @__PURE__ */ new Matrix4();
  var _zero = /* @__PURE__ */ new Vector3(0, 0, 0);
  var _one = /* @__PURE__ */ new Vector3(1, 1, 1);
  var _x = /* @__PURE__ */ new Vector3();
  var _y = /* @__PURE__ */ new Vector3();
  var _z = /* @__PURE__ */ new Vector3();
  var _matrix$1 = /* @__PURE__ */ new Matrix4();
  var _quaternion$3 = /* @__PURE__ */ new Quaternion();
  var Euler = class {
    constructor(x2 = 0, y2 = 0, z2 = 0, order = Euler.DefaultOrder) {
      this._x = x2;
      this._y = y2;
      this._z = z2;
      this._order = order;
    }
    get x() {
      return this._x;
    }
    set x(value) {
      this._x = value;
      this._onChangeCallback();
    }
    get y() {
      return this._y;
    }
    set y(value) {
      this._y = value;
      this._onChangeCallback();
    }
    get z() {
      return this._z;
    }
    set z(value) {
      this._z = value;
      this._onChangeCallback();
    }
    get order() {
      return this._order;
    }
    set order(value) {
      this._order = value;
      this._onChangeCallback();
    }
    set(x2, y2, z2, order = this._order) {
      this._x = x2;
      this._y = y2;
      this._z = z2;
      this._order = order;
      this._onChangeCallback();
      return this;
    }
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._order);
    }
    copy(euler2) {
      this._x = euler2._x;
      this._y = euler2._y;
      this._z = euler2._z;
      this._order = euler2._order;
      this._onChangeCallback();
      return this;
    }
    setFromRotationMatrix(m2, order = this._order, update3 = true) {
      const te2 = m2.elements;
      const m11 = te2[0], m12 = te2[4], m13 = te2[8];
      const m21 = te2[1], m22 = te2[5], m23 = te2[9];
      const m31 = te2[2], m32 = te2[6], m33 = te2[10];
      switch (order) {
        case "XYZ":
          this._y = Math.asin(clamp(m13, -1, 1));
          if (Math.abs(m13) < 0.9999999) {
            this._x = Math.atan2(-m23, m33);
            this._z = Math.atan2(-m12, m11);
          } else {
            this._x = Math.atan2(m32, m22);
            this._z = 0;
          }
          break;
        case "YXZ":
          this._x = Math.asin(-clamp(m23, -1, 1));
          if (Math.abs(m23) < 0.9999999) {
            this._y = Math.atan2(m13, m33);
            this._z = Math.atan2(m21, m22);
          } else {
            this._y = Math.atan2(-m31, m11);
            this._z = 0;
          }
          break;
        case "ZXY":
          this._x = Math.asin(clamp(m32, -1, 1));
          if (Math.abs(m32) < 0.9999999) {
            this._y = Math.atan2(-m31, m33);
            this._z = Math.atan2(-m12, m22);
          } else {
            this._y = 0;
            this._z = Math.atan2(m21, m11);
          }
          break;
        case "ZYX":
          this._y = Math.asin(-clamp(m31, -1, 1));
          if (Math.abs(m31) < 0.9999999) {
            this._x = Math.atan2(m32, m33);
            this._z = Math.atan2(m21, m11);
          } else {
            this._x = 0;
            this._z = Math.atan2(-m12, m22);
          }
          break;
        case "YZX":
          this._z = Math.asin(clamp(m21, -1, 1));
          if (Math.abs(m21) < 0.9999999) {
            this._x = Math.atan2(-m23, m22);
            this._y = Math.atan2(-m31, m11);
          } else {
            this._x = 0;
            this._y = Math.atan2(m13, m33);
          }
          break;
        case "XZY":
          this._z = Math.asin(-clamp(m12, -1, 1));
          if (Math.abs(m12) < 0.9999999) {
            this._x = Math.atan2(m32, m22);
            this._y = Math.atan2(m13, m11);
          } else {
            this._x = Math.atan2(-m23, m33);
            this._y = 0;
          }
          break;
        default:
          console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + order);
      }
      this._order = order;
      if (update3 === true)
        this._onChangeCallback();
      return this;
    }
    setFromQuaternion(q3, order, update3) {
      _matrix$1.makeRotationFromQuaternion(q3);
      return this.setFromRotationMatrix(_matrix$1, order, update3);
    }
    setFromVector3(v2, order = this._order) {
      return this.set(v2.x, v2.y, v2.z, order);
    }
    reorder(newOrder) {
      _quaternion$3.setFromEuler(this);
      return this.setFromQuaternion(_quaternion$3, newOrder);
    }
    equals(euler2) {
      return euler2._x === this._x && euler2._y === this._y && euler2._z === this._z && euler2._order === this._order;
    }
    fromArray(array) {
      this._x = array[0];
      this._y = array[1];
      this._z = array[2];
      if (array[3] !== void 0)
        this._order = array[3];
      this._onChangeCallback();
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this._x;
      array[offset + 1] = this._y;
      array[offset + 2] = this._z;
      array[offset + 3] = this._order;
      return array;
    }
    toVector3(optionalResult) {
      if (optionalResult) {
        return optionalResult.set(this._x, this._y, this._z);
      } else {
        return new Vector3(this._x, this._y, this._z);
      }
    }
    _onChange(callback) {
      this._onChangeCallback = callback;
      return this;
    }
    _onChangeCallback() {
    }
  };
  Euler.prototype.isEuler = true;
  Euler.DefaultOrder = "XYZ";
  Euler.RotationOrders = ["XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"];
  var Layers = class {
    constructor() {
      this.mask = 1 | 0;
    }
    set(channel) {
      this.mask = (1 << channel | 0) >>> 0;
    }
    enable(channel) {
      this.mask |= 1 << channel | 0;
    }
    enableAll() {
      this.mask = 4294967295 | 0;
    }
    toggle(channel) {
      this.mask ^= 1 << channel | 0;
    }
    disable(channel) {
      this.mask &= ~(1 << channel | 0);
    }
    disableAll() {
      this.mask = 0;
    }
    test(layers) {
      return (this.mask & layers.mask) !== 0;
    }
    isEnabled(channel) {
      return (this.mask & (1 << channel | 0)) !== 0;
    }
  };
  var _object3DId = 0;
  var _v1$4 = /* @__PURE__ */ new Vector3();
  var _q1 = /* @__PURE__ */ new Quaternion();
  var _m1$1 = /* @__PURE__ */ new Matrix4();
  var _target = /* @__PURE__ */ new Vector3();
  var _position$3 = /* @__PURE__ */ new Vector3();
  var _scale$2 = /* @__PURE__ */ new Vector3();
  var _quaternion$2 = /* @__PURE__ */ new Quaternion();
  var _xAxis = /* @__PURE__ */ new Vector3(1, 0, 0);
  var _yAxis = /* @__PURE__ */ new Vector3(0, 1, 0);
  var _zAxis = /* @__PURE__ */ new Vector3(0, 0, 1);
  var _addedEvent = { type: "added" };
  var _removedEvent = { type: "removed" };
  var Object3D = class extends EventDispatcher {
    constructor() {
      super();
      Object.defineProperty(this, "id", { value: _object3DId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "Object3D";
      this.parent = null;
      this.children = [];
      this.up = Object3D.DefaultUp.clone();
      const position = new Vector3();
      const rotation = new Euler();
      const quaternion = new Quaternion();
      const scale3 = new Vector3(1, 1, 1);
      function onRotationChange() {
        quaternion.setFromEuler(rotation, false);
      }
      function onQuaternionChange() {
        rotation.setFromQuaternion(quaternion, void 0, false);
      }
      rotation._onChange(onRotationChange);
      quaternion._onChange(onQuaternionChange);
      Object.defineProperties(this, {
        position: {
          configurable: true,
          enumerable: true,
          value: position
        },
        rotation: {
          configurable: true,
          enumerable: true,
          value: rotation
        },
        quaternion: {
          configurable: true,
          enumerable: true,
          value: quaternion
        },
        scale: {
          configurable: true,
          enumerable: true,
          value: scale3
        },
        modelViewMatrix: {
          value: new Matrix4()
        },
        normalMatrix: {
          value: new Matrix3()
        }
      });
      this.matrix = new Matrix4();
      this.matrixWorld = new Matrix4();
      this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
      this.matrixWorldNeedsUpdate = false;
      this.layers = new Layers();
      this.visible = true;
      this.castShadow = false;
      this.receiveShadow = false;
      this.frustumCulled = true;
      this.renderOrder = 0;
      this.animations = [];
      this.userData = {};
    }
    onBeforeRender() {
    }
    onAfterRender() {
    }
    applyMatrix4(matrix) {
      if (this.matrixAutoUpdate)
        this.updateMatrix();
      this.matrix.premultiply(matrix);
      this.matrix.decompose(this.position, this.quaternion, this.scale);
    }
    applyQuaternion(q3) {
      this.quaternion.premultiply(q3);
      return this;
    }
    setRotationFromAxisAngle(axis, angle) {
      this.quaternion.setFromAxisAngle(axis, angle);
    }
    setRotationFromEuler(euler2) {
      this.quaternion.setFromEuler(euler2, true);
    }
    setRotationFromMatrix(m2) {
      this.quaternion.setFromRotationMatrix(m2);
    }
    setRotationFromQuaternion(q3) {
      this.quaternion.copy(q3);
    }
    rotateOnAxis(axis, angle) {
      _q1.setFromAxisAngle(axis, angle);
      this.quaternion.multiply(_q1);
      return this;
    }
    rotateOnWorldAxis(axis, angle) {
      _q1.setFromAxisAngle(axis, angle);
      this.quaternion.premultiply(_q1);
      return this;
    }
    rotateX(angle) {
      return this.rotateOnAxis(_xAxis, angle);
    }
    rotateY(angle) {
      return this.rotateOnAxis(_yAxis, angle);
    }
    rotateZ(angle) {
      return this.rotateOnAxis(_zAxis, angle);
    }
    translateOnAxis(axis, distance) {
      _v1$4.copy(axis).applyQuaternion(this.quaternion);
      this.position.add(_v1$4.multiplyScalar(distance));
      return this;
    }
    translateX(distance) {
      return this.translateOnAxis(_xAxis, distance);
    }
    translateY(distance) {
      return this.translateOnAxis(_yAxis, distance);
    }
    translateZ(distance) {
      return this.translateOnAxis(_zAxis, distance);
    }
    localToWorld(vector) {
      return vector.applyMatrix4(this.matrixWorld);
    }
    worldToLocal(vector) {
      return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());
    }
    lookAt(x2, y2, z2) {
      if (x2.isVector3) {
        _target.copy(x2);
      } else {
        _target.set(x2, y2, z2);
      }
      const parent = this.parent;
      this.updateWorldMatrix(true, false);
      _position$3.setFromMatrixPosition(this.matrixWorld);
      if (this.isCamera || this.isLight) {
        _m1$1.lookAt(_position$3, _target, this.up);
      } else {
        _m1$1.lookAt(_target, _position$3, this.up);
      }
      this.quaternion.setFromRotationMatrix(_m1$1);
      if (parent) {
        _m1$1.extractRotation(parent.matrixWorld);
        _q1.setFromRotationMatrix(_m1$1);
        this.quaternion.premultiply(_q1.invert());
      }
    }
    add(object) {
      if (arguments.length > 1) {
        for (let i2 = 0; i2 < arguments.length; i2++) {
          this.add(arguments[i2]);
        }
        return this;
      }
      if (object === this) {
        console.error("THREE.Object3D.add: object can't be added as a child of itself.", object);
        return this;
      }
      if (object && object.isObject3D) {
        if (object.parent !== null) {
          object.parent.remove(object);
        }
        object.parent = this;
        this.children.push(object);
        object.dispatchEvent(_addedEvent);
      } else {
        console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object);
      }
      return this;
    }
    remove(object) {
      if (arguments.length > 1) {
        for (let i2 = 0; i2 < arguments.length; i2++) {
          this.remove(arguments[i2]);
        }
        return this;
      }
      const index = this.children.indexOf(object);
      if (index !== -1) {
        object.parent = null;
        this.children.splice(index, 1);
        object.dispatchEvent(_removedEvent);
      }
      return this;
    }
    removeFromParent() {
      const parent = this.parent;
      if (parent !== null) {
        parent.remove(this);
      }
      return this;
    }
    clear() {
      for (let i2 = 0; i2 < this.children.length; i2++) {
        const object = this.children[i2];
        object.parent = null;
        object.dispatchEvent(_removedEvent);
      }
      this.children.length = 0;
      return this;
    }
    attach(object) {
      this.updateWorldMatrix(true, false);
      _m1$1.copy(this.matrixWorld).invert();
      if (object.parent !== null) {
        object.parent.updateWorldMatrix(true, false);
        _m1$1.multiply(object.parent.matrixWorld);
      }
      object.applyMatrix4(_m1$1);
      this.add(object);
      object.updateWorldMatrix(false, true);
      return this;
    }
    getObjectById(id) {
      return this.getObjectByProperty("id", id);
    }
    getObjectByName(name) {
      return this.getObjectByProperty("name", name);
    }
    getObjectByProperty(name, value) {
      if (this[name] === value)
        return this;
      for (let i2 = 0, l2 = this.children.length; i2 < l2; i2++) {
        const child = this.children[i2];
        const object = child.getObjectByProperty(name, value);
        if (object !== void 0) {
          return object;
        }
      }
      return void 0;
    }
    getWorldPosition(target) {
      this.updateWorldMatrix(true, false);
      return target.setFromMatrixPosition(this.matrixWorld);
    }
    getWorldQuaternion(target) {
      this.updateWorldMatrix(true, false);
      this.matrixWorld.decompose(_position$3, target, _scale$2);
      return target;
    }
    getWorldScale(target) {
      this.updateWorldMatrix(true, false);
      this.matrixWorld.decompose(_position$3, _quaternion$2, target);
      return target;
    }
    getWorldDirection(target) {
      this.updateWorldMatrix(true, false);
      const e = this.matrixWorld.elements;
      return target.set(e[8], e[9], e[10]).normalize();
    }
    raycast() {
    }
    traverse(callback) {
      callback(this);
      const children2 = this.children;
      for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
        children2[i2].traverse(callback);
      }
    }
    traverseVisible(callback) {
      if (this.visible === false)
        return;
      callback(this);
      const children2 = this.children;
      for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
        children2[i2].traverseVisible(callback);
      }
    }
    traverseAncestors(callback) {
      const parent = this.parent;
      if (parent !== null) {
        callback(parent);
        parent.traverseAncestors(callback);
      }
    }
    updateMatrix() {
      this.matrix.compose(this.position, this.quaternion, this.scale);
      this.matrixWorldNeedsUpdate = true;
    }
    updateMatrixWorld(force) {
      if (this.matrixAutoUpdate)
        this.updateMatrix();
      if (this.matrixWorldNeedsUpdate || force) {
        if (this.parent === null) {
          this.matrixWorld.copy(this.matrix);
        } else {
          this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
        }
        this.matrixWorldNeedsUpdate = false;
        force = true;
      }
      const children2 = this.children;
      for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
        children2[i2].updateMatrixWorld(force);
      }
    }
    updateWorldMatrix(updateParents, updateChildren) {
      const parent = this.parent;
      if (updateParents === true && parent !== null) {
        parent.updateWorldMatrix(true, false);
      }
      if (this.matrixAutoUpdate)
        this.updateMatrix();
      if (this.parent === null) {
        this.matrixWorld.copy(this.matrix);
      } else {
        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
      }
      if (updateChildren === true) {
        const children2 = this.children;
        for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
          children2[i2].updateWorldMatrix(false, true);
        }
      }
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      const output = {};
      if (isRootObject) {
        meta = {
          geometries: {},
          materials: {},
          textures: {},
          images: {},
          shapes: {},
          skeletons: {},
          animations: {}
        };
        output.metadata = {
          version: 4.5,
          type: "Object",
          generator: "Object3D.toJSON"
        };
      }
      const object = {};
      object.uuid = this.uuid;
      object.type = this.type;
      if (this.name !== "")
        object.name = this.name;
      if (this.castShadow === true)
        object.castShadow = true;
      if (this.receiveShadow === true)
        object.receiveShadow = true;
      if (this.visible === false)
        object.visible = false;
      if (this.frustumCulled === false)
        object.frustumCulled = false;
      if (this.renderOrder !== 0)
        object.renderOrder = this.renderOrder;
      if (JSON.stringify(this.userData) !== "{}")
        object.userData = this.userData;
      object.layers = this.layers.mask;
      object.matrix = this.matrix.toArray();
      if (this.matrixAutoUpdate === false)
        object.matrixAutoUpdate = false;
      if (this.isInstancedMesh) {
        object.type = "InstancedMesh";
        object.count = this.count;
        object.instanceMatrix = this.instanceMatrix.toJSON();
        if (this.instanceColor !== null)
          object.instanceColor = this.instanceColor.toJSON();
      }
      function serialize(library, element2) {
        if (library[element2.uuid] === void 0) {
          library[element2.uuid] = element2.toJSON(meta);
        }
        return element2.uuid;
      }
      if (this.isScene) {
        if (this.background) {
          if (this.background.isColor) {
            object.background = this.background.toJSON();
          } else if (this.background.isTexture) {
            object.background = this.background.toJSON(meta).uuid;
          }
        }
        if (this.environment && this.environment.isTexture) {
          object.environment = this.environment.toJSON(meta).uuid;
        }
      } else if (this.isMesh || this.isLine || this.isPoints) {
        object.geometry = serialize(meta.geometries, this.geometry);
        const parameters = this.geometry.parameters;
        if (parameters !== void 0 && parameters.shapes !== void 0) {
          const shapes = parameters.shapes;
          if (Array.isArray(shapes)) {
            for (let i2 = 0, l2 = shapes.length; i2 < l2; i2++) {
              const shape = shapes[i2];
              serialize(meta.shapes, shape);
            }
          } else {
            serialize(meta.shapes, shapes);
          }
        }
      }
      if (this.isSkinnedMesh) {
        object.bindMode = this.bindMode;
        object.bindMatrix = this.bindMatrix.toArray();
        if (this.skeleton !== void 0) {
          serialize(meta.skeletons, this.skeleton);
          object.skeleton = this.skeleton.uuid;
        }
      }
      if (this.material !== void 0) {
        if (Array.isArray(this.material)) {
          const uuids = [];
          for (let i2 = 0, l2 = this.material.length; i2 < l2; i2++) {
            uuids.push(serialize(meta.materials, this.material[i2]));
          }
          object.material = uuids;
        } else {
          object.material = serialize(meta.materials, this.material);
        }
      }
      if (this.children.length > 0) {
        object.children = [];
        for (let i2 = 0; i2 < this.children.length; i2++) {
          object.children.push(this.children[i2].toJSON(meta).object);
        }
      }
      if (this.animations.length > 0) {
        object.animations = [];
        for (let i2 = 0; i2 < this.animations.length; i2++) {
          const animation = this.animations[i2];
          object.animations.push(serialize(meta.animations, animation));
        }
      }
      if (isRootObject) {
        const geometries = extractFromCache(meta.geometries);
        const materials = extractFromCache(meta.materials);
        const textures = extractFromCache(meta.textures);
        const images = extractFromCache(meta.images);
        const shapes = extractFromCache(meta.shapes);
        const skeletons = extractFromCache(meta.skeletons);
        const animations = extractFromCache(meta.animations);
        if (geometries.length > 0)
          output.geometries = geometries;
        if (materials.length > 0)
          output.materials = materials;
        if (textures.length > 0)
          output.textures = textures;
        if (images.length > 0)
          output.images = images;
        if (shapes.length > 0)
          output.shapes = shapes;
        if (skeletons.length > 0)
          output.skeletons = skeletons;
        if (animations.length > 0)
          output.animations = animations;
      }
      output.object = object;
      return output;
      function extractFromCache(cache) {
        const values = [];
        for (const key in cache) {
          const data = cache[key];
          delete data.metadata;
          values.push(data);
        }
        return values;
      }
    }
    clone(recursive) {
      return new this.constructor().copy(this, recursive);
    }
    copy(source, recursive = true) {
      this.name = source.name;
      this.up.copy(source.up);
      this.position.copy(source.position);
      this.rotation.order = source.rotation.order;
      this.quaternion.copy(source.quaternion);
      this.scale.copy(source.scale);
      this.matrix.copy(source.matrix);
      this.matrixWorld.copy(source.matrixWorld);
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
      this.layers.mask = source.layers.mask;
      this.visible = source.visible;
      this.castShadow = source.castShadow;
      this.receiveShadow = source.receiveShadow;
      this.frustumCulled = source.frustumCulled;
      this.renderOrder = source.renderOrder;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      if (recursive === true) {
        for (let i2 = 0; i2 < source.children.length; i2++) {
          const child = source.children[i2];
          this.add(child.clone());
        }
      }
      return this;
    }
  };
  Object3D.DefaultUp = new Vector3(0, 1, 0);
  Object3D.DefaultMatrixAutoUpdate = true;
  Object3D.prototype.isObject3D = true;
  var _v0$1 = /* @__PURE__ */ new Vector3();
  var _v1$3 = /* @__PURE__ */ new Vector3();
  var _v2$2 = /* @__PURE__ */ new Vector3();
  var _v3$1 = /* @__PURE__ */ new Vector3();
  var _vab = /* @__PURE__ */ new Vector3();
  var _vac = /* @__PURE__ */ new Vector3();
  var _vbc = /* @__PURE__ */ new Vector3();
  var _vap = /* @__PURE__ */ new Vector3();
  var _vbp = /* @__PURE__ */ new Vector3();
  var _vcp = /* @__PURE__ */ new Vector3();
  var Triangle = class {
    constructor(a2 = new Vector3(), b2 = new Vector3(), c2 = new Vector3()) {
      this.a = a2;
      this.b = b2;
      this.c = c2;
    }
    static getNormal(a2, b2, c2, target) {
      target.subVectors(c2, b2);
      _v0$1.subVectors(a2, b2);
      target.cross(_v0$1);
      const targetLengthSq = target.lengthSq();
      if (targetLengthSq > 0) {
        return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
      }
      return target.set(0, 0, 0);
    }
    static getBarycoord(point, a2, b2, c2, target) {
      _v0$1.subVectors(c2, a2);
      _v1$3.subVectors(b2, a2);
      _v2$2.subVectors(point, a2);
      const dot00 = _v0$1.dot(_v0$1);
      const dot01 = _v0$1.dot(_v1$3);
      const dot02 = _v0$1.dot(_v2$2);
      const dot11 = _v1$3.dot(_v1$3);
      const dot12 = _v1$3.dot(_v2$2);
      const denom = dot00 * dot11 - dot01 * dot01;
      if (denom === 0) {
        return target.set(-2, -1, -1);
      }
      const invDenom = 1 / denom;
      const u2 = (dot11 * dot02 - dot01 * dot12) * invDenom;
      const v2 = (dot00 * dot12 - dot01 * dot02) * invDenom;
      return target.set(1 - u2 - v2, v2, u2);
    }
    static containsPoint(point, a2, b2, c2) {
      this.getBarycoord(point, a2, b2, c2, _v3$1);
      return _v3$1.x >= 0 && _v3$1.y >= 0 && _v3$1.x + _v3$1.y <= 1;
    }
    static getUV(point, p1, p22, p3, uv1, uv2, uv3, target) {
      this.getBarycoord(point, p1, p22, p3, _v3$1);
      target.set(0, 0);
      target.addScaledVector(uv1, _v3$1.x);
      target.addScaledVector(uv2, _v3$1.y);
      target.addScaledVector(uv3, _v3$1.z);
      return target;
    }
    static isFrontFacing(a2, b2, c2, direction) {
      _v0$1.subVectors(c2, b2);
      _v1$3.subVectors(a2, b2);
      return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;
    }
    set(a2, b2, c2) {
      this.a.copy(a2);
      this.b.copy(b2);
      this.c.copy(c2);
      return this;
    }
    setFromPointsAndIndices(points2, i0, i1, i2) {
      this.a.copy(points2[i0]);
      this.b.copy(points2[i1]);
      this.c.copy(points2[i2]);
      return this;
    }
    setFromAttributeAndIndices(attribute, i0, i1, i2) {
      this.a.fromBufferAttribute(attribute, i0);
      this.b.fromBufferAttribute(attribute, i1);
      this.c.fromBufferAttribute(attribute, i2);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(triangle) {
      this.a.copy(triangle.a);
      this.b.copy(triangle.b);
      this.c.copy(triangle.c);
      return this;
    }
    getArea() {
      _v0$1.subVectors(this.c, this.b);
      _v1$3.subVectors(this.a, this.b);
      return _v0$1.cross(_v1$3).length() * 0.5;
    }
    getMidpoint(target) {
      return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
    }
    getNormal(target) {
      return Triangle.getNormal(this.a, this.b, this.c, target);
    }
    getPlane(target) {
      return target.setFromCoplanarPoints(this.a, this.b, this.c);
    }
    getBarycoord(point, target) {
      return Triangle.getBarycoord(point, this.a, this.b, this.c, target);
    }
    getUV(point, uv1, uv2, uv3, target) {
      return Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);
    }
    containsPoint(point) {
      return Triangle.containsPoint(point, this.a, this.b, this.c);
    }
    isFrontFacing(direction) {
      return Triangle.isFrontFacing(this.a, this.b, this.c, direction);
    }
    intersectsBox(box) {
      return box.intersectsTriangle(this);
    }
    closestPointToPoint(p3, target) {
      const a2 = this.a, b2 = this.b, c2 = this.c;
      let v2, w2;
      _vab.subVectors(b2, a2);
      _vac.subVectors(c2, a2);
      _vap.subVectors(p3, a2);
      const d1 = _vab.dot(_vap);
      const d2 = _vac.dot(_vap);
      if (d1 <= 0 && d2 <= 0) {
        return target.copy(a2);
      }
      _vbp.subVectors(p3, b2);
      const d3 = _vab.dot(_vbp);
      const d4 = _vac.dot(_vbp);
      if (d3 >= 0 && d4 <= d3) {
        return target.copy(b2);
      }
      const vc = d1 * d4 - d3 * d2;
      if (vc <= 0 && d1 >= 0 && d3 <= 0) {
        v2 = d1 / (d1 - d3);
        return target.copy(a2).addScaledVector(_vab, v2);
      }
      _vcp.subVectors(p3, c2);
      const d5 = _vab.dot(_vcp);
      const d6 = _vac.dot(_vcp);
      if (d6 >= 0 && d5 <= d6) {
        return target.copy(c2);
      }
      const vb = d5 * d2 - d1 * d6;
      if (vb <= 0 && d2 >= 0 && d6 <= 0) {
        w2 = d2 / (d2 - d6);
        return target.copy(a2).addScaledVector(_vac, w2);
      }
      const va = d3 * d6 - d5 * d4;
      if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
        _vbc.subVectors(c2, b2);
        w2 = (d4 - d3) / (d4 - d3 + (d5 - d6));
        return target.copy(b2).addScaledVector(_vbc, w2);
      }
      const denom = 1 / (va + vb + vc);
      v2 = vb * denom;
      w2 = vc * denom;
      return target.copy(a2).addScaledVector(_vab, v2).addScaledVector(_vac, w2);
    }
    equals(triangle) {
      return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
    }
  };
  var materialId = 0;
  var Material = class extends EventDispatcher {
    constructor() {
      super();
      Object.defineProperty(this, "id", { value: materialId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "Material";
      this.fog = true;
      this.blending = NormalBlending;
      this.side = FrontSide;
      this.vertexColors = false;
      this.opacity = 1;
      this.transparent = false;
      this.blendSrc = SrcAlphaFactor;
      this.blendDst = OneMinusSrcAlphaFactor;
      this.blendEquation = AddEquation;
      this.blendSrcAlpha = null;
      this.blendDstAlpha = null;
      this.blendEquationAlpha = null;
      this.depthFunc = LessEqualDepth;
      this.depthTest = true;
      this.depthWrite = true;
      this.stencilWriteMask = 255;
      this.stencilFunc = AlwaysStencilFunc;
      this.stencilRef = 0;
      this.stencilFuncMask = 255;
      this.stencilFail = KeepStencilOp;
      this.stencilZFail = KeepStencilOp;
      this.stencilZPass = KeepStencilOp;
      this.stencilWrite = false;
      this.clippingPlanes = null;
      this.clipIntersection = false;
      this.clipShadows = false;
      this.shadowSide = null;
      this.colorWrite = true;
      this.precision = null;
      this.polygonOffset = false;
      this.polygonOffsetFactor = 0;
      this.polygonOffsetUnits = 0;
      this.dithering = false;
      this.alphaToCoverage = false;
      this.premultipliedAlpha = false;
      this.visible = true;
      this.toneMapped = true;
      this.userData = {};
      this.version = 0;
      this._alphaTest = 0;
    }
    get alphaTest() {
      return this._alphaTest;
    }
    set alphaTest(value) {
      if (this._alphaTest > 0 !== value > 0) {
        this.version++;
      }
      this._alphaTest = value;
    }
    onBuild() {
    }
    onBeforeRender() {
    }
    onBeforeCompile() {
    }
    customProgramCacheKey() {
      return this.onBeforeCompile.toString();
    }
    setValues(values) {
      if (values === void 0)
        return;
      for (const key in values) {
        const newValue = values[key];
        if (newValue === void 0) {
          console.warn("THREE.Material: '" + key + "' parameter is undefined.");
          continue;
        }
        if (key === "shading") {
          console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
          this.flatShading = newValue === FlatShading ? true : false;
          continue;
        }
        const currentValue = this[key];
        if (currentValue === void 0) {
          console.warn("THREE." + this.type + ": '" + key + "' is not a property of this material.");
          continue;
        }
        if (currentValue && currentValue.isColor) {
          currentValue.set(newValue);
        } else if (currentValue && currentValue.isVector3 && (newValue && newValue.isVector3)) {
          currentValue.copy(newValue);
        } else {
          this[key] = newValue;
        }
      }
    }
    toJSON(meta) {
      const isRoot = meta === void 0 || typeof meta === "string";
      if (isRoot) {
        meta = {
          textures: {},
          images: {}
        };
      }
      const data = {
        metadata: {
          version: 4.5,
          type: "Material",
          generator: "Material.toJSON"
        }
      };
      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== "")
        data.name = this.name;
      if (this.color && this.color.isColor)
        data.color = this.color.getHex();
      if (this.roughness !== void 0)
        data.roughness = this.roughness;
      if (this.metalness !== void 0)
        data.metalness = this.metalness;
      if (this.sheen !== void 0)
        data.sheen = this.sheen;
      if (this.sheenColor && this.sheenColor.isColor)
        data.sheenColor = this.sheenColor.getHex();
      if (this.sheenRoughness !== void 0)
        data.sheenRoughness = this.sheenRoughness;
      if (this.emissive && this.emissive.isColor)
        data.emissive = this.emissive.getHex();
      if (this.emissiveIntensity && this.emissiveIntensity !== 1)
        data.emissiveIntensity = this.emissiveIntensity;
      if (this.specular && this.specular.isColor)
        data.specular = this.specular.getHex();
      if (this.specularIntensity !== void 0)
        data.specularIntensity = this.specularIntensity;
      if (this.specularColor && this.specularColor.isColor)
        data.specularColor = this.specularColor.getHex();
      if (this.shininess !== void 0)
        data.shininess = this.shininess;
      if (this.clearcoat !== void 0)
        data.clearcoat = this.clearcoat;
      if (this.clearcoatRoughness !== void 0)
        data.clearcoatRoughness = this.clearcoatRoughness;
      if (this.clearcoatMap && this.clearcoatMap.isTexture) {
        data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
      }
      if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
        data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
      }
      if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
        data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
        data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
      }
      if (this.map && this.map.isTexture)
        data.map = this.map.toJSON(meta).uuid;
      if (this.matcap && this.matcap.isTexture)
        data.matcap = this.matcap.toJSON(meta).uuid;
      if (this.alphaMap && this.alphaMap.isTexture)
        data.alphaMap = this.alphaMap.toJSON(meta).uuid;
      if (this.lightMap && this.lightMap.isTexture) {
        data.lightMap = this.lightMap.toJSON(meta).uuid;
        data.lightMapIntensity = this.lightMapIntensity;
      }
      if (this.aoMap && this.aoMap.isTexture) {
        data.aoMap = this.aoMap.toJSON(meta).uuid;
        data.aoMapIntensity = this.aoMapIntensity;
      }
      if (this.bumpMap && this.bumpMap.isTexture) {
        data.bumpMap = this.bumpMap.toJSON(meta).uuid;
        data.bumpScale = this.bumpScale;
      }
      if (this.normalMap && this.normalMap.isTexture) {
        data.normalMap = this.normalMap.toJSON(meta).uuid;
        data.normalMapType = this.normalMapType;
        data.normalScale = this.normalScale.toArray();
      }
      if (this.displacementMap && this.displacementMap.isTexture) {
        data.displacementMap = this.displacementMap.toJSON(meta).uuid;
        data.displacementScale = this.displacementScale;
        data.displacementBias = this.displacementBias;
      }
      if (this.roughnessMap && this.roughnessMap.isTexture)
        data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
      if (this.metalnessMap && this.metalnessMap.isTexture)
        data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
      if (this.emissiveMap && this.emissiveMap.isTexture)
        data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
      if (this.specularMap && this.specularMap.isTexture)
        data.specularMap = this.specularMap.toJSON(meta).uuid;
      if (this.specularIntensityMap && this.specularIntensityMap.isTexture)
        data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;
      if (this.specularColorMap && this.specularColorMap.isTexture)
        data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;
      if (this.envMap && this.envMap.isTexture) {
        data.envMap = this.envMap.toJSON(meta).uuid;
        if (this.combine !== void 0)
          data.combine = this.combine;
      }
      if (this.envMapIntensity !== void 0)
        data.envMapIntensity = this.envMapIntensity;
      if (this.reflectivity !== void 0)
        data.reflectivity = this.reflectivity;
      if (this.refractionRatio !== void 0)
        data.refractionRatio = this.refractionRatio;
      if (this.gradientMap && this.gradientMap.isTexture) {
        data.gradientMap = this.gradientMap.toJSON(meta).uuid;
      }
      if (this.transmission !== void 0)
        data.transmission = this.transmission;
      if (this.transmissionMap && this.transmissionMap.isTexture)
        data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;
      if (this.thickness !== void 0)
        data.thickness = this.thickness;
      if (this.thicknessMap && this.thicknessMap.isTexture)
        data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;
      if (this.attenuationDistance !== void 0)
        data.attenuationDistance = this.attenuationDistance;
      if (this.attenuationColor !== void 0)
        data.attenuationColor = this.attenuationColor.getHex();
      if (this.size !== void 0)
        data.size = this.size;
      if (this.shadowSide !== null)
        data.shadowSide = this.shadowSide;
      if (this.sizeAttenuation !== void 0)
        data.sizeAttenuation = this.sizeAttenuation;
      if (this.blending !== NormalBlending)
        data.blending = this.blending;
      if (this.side !== FrontSide)
        data.side = this.side;
      if (this.vertexColors)
        data.vertexColors = true;
      if (this.opacity < 1)
        data.opacity = this.opacity;
      if (this.transparent === true)
        data.transparent = this.transparent;
      data.depthFunc = this.depthFunc;
      data.depthTest = this.depthTest;
      data.depthWrite = this.depthWrite;
      data.colorWrite = this.colorWrite;
      data.stencilWrite = this.stencilWrite;
      data.stencilWriteMask = this.stencilWriteMask;
      data.stencilFunc = this.stencilFunc;
      data.stencilRef = this.stencilRef;
      data.stencilFuncMask = this.stencilFuncMask;
      data.stencilFail = this.stencilFail;
      data.stencilZFail = this.stencilZFail;
      data.stencilZPass = this.stencilZPass;
      if (this.rotation && this.rotation !== 0)
        data.rotation = this.rotation;
      if (this.polygonOffset === true)
        data.polygonOffset = true;
      if (this.polygonOffsetFactor !== 0)
        data.polygonOffsetFactor = this.polygonOffsetFactor;
      if (this.polygonOffsetUnits !== 0)
        data.polygonOffsetUnits = this.polygonOffsetUnits;
      if (this.linewidth && this.linewidth !== 1)
        data.linewidth = this.linewidth;
      if (this.dashSize !== void 0)
        data.dashSize = this.dashSize;
      if (this.gapSize !== void 0)
        data.gapSize = this.gapSize;
      if (this.scale !== void 0)
        data.scale = this.scale;
      if (this.dithering === true)
        data.dithering = true;
      if (this.alphaTest > 0)
        data.alphaTest = this.alphaTest;
      if (this.alphaToCoverage === true)
        data.alphaToCoverage = this.alphaToCoverage;
      if (this.premultipliedAlpha === true)
        data.premultipliedAlpha = this.premultipliedAlpha;
      if (this.wireframe === true)
        data.wireframe = this.wireframe;
      if (this.wireframeLinewidth > 1)
        data.wireframeLinewidth = this.wireframeLinewidth;
      if (this.wireframeLinecap !== "round")
        data.wireframeLinecap = this.wireframeLinecap;
      if (this.wireframeLinejoin !== "round")
        data.wireframeLinejoin = this.wireframeLinejoin;
      if (this.flatShading === true)
        data.flatShading = this.flatShading;
      if (this.visible === false)
        data.visible = false;
      if (this.toneMapped === false)
        data.toneMapped = false;
      if (JSON.stringify(this.userData) !== "{}")
        data.userData = this.userData;
      function extractFromCache(cache) {
        const values = [];
        for (const key in cache) {
          const data2 = cache[key];
          delete data2.metadata;
          values.push(data2);
        }
        return values;
      }
      if (isRoot) {
        const textures = extractFromCache(meta.textures);
        const images = extractFromCache(meta.images);
        if (textures.length > 0)
          data.textures = textures;
        if (images.length > 0)
          data.images = images;
      }
      return data;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.name = source.name;
      this.fog = source.fog;
      this.blending = source.blending;
      this.side = source.side;
      this.vertexColors = source.vertexColors;
      this.opacity = source.opacity;
      this.transparent = source.transparent;
      this.blendSrc = source.blendSrc;
      this.blendDst = source.blendDst;
      this.blendEquation = source.blendEquation;
      this.blendSrcAlpha = source.blendSrcAlpha;
      this.blendDstAlpha = source.blendDstAlpha;
      this.blendEquationAlpha = source.blendEquationAlpha;
      this.depthFunc = source.depthFunc;
      this.depthTest = source.depthTest;
      this.depthWrite = source.depthWrite;
      this.stencilWriteMask = source.stencilWriteMask;
      this.stencilFunc = source.stencilFunc;
      this.stencilRef = source.stencilRef;
      this.stencilFuncMask = source.stencilFuncMask;
      this.stencilFail = source.stencilFail;
      this.stencilZFail = source.stencilZFail;
      this.stencilZPass = source.stencilZPass;
      this.stencilWrite = source.stencilWrite;
      const srcPlanes = source.clippingPlanes;
      let dstPlanes = null;
      if (srcPlanes !== null) {
        const n2 = srcPlanes.length;
        dstPlanes = new Array(n2);
        for (let i2 = 0; i2 !== n2; ++i2) {
          dstPlanes[i2] = srcPlanes[i2].clone();
        }
      }
      this.clippingPlanes = dstPlanes;
      this.clipIntersection = source.clipIntersection;
      this.clipShadows = source.clipShadows;
      this.shadowSide = source.shadowSide;
      this.colorWrite = source.colorWrite;
      this.precision = source.precision;
      this.polygonOffset = source.polygonOffset;
      this.polygonOffsetFactor = source.polygonOffsetFactor;
      this.polygonOffsetUnits = source.polygonOffsetUnits;
      this.dithering = source.dithering;
      this.alphaTest = source.alphaTest;
      this.alphaToCoverage = source.alphaToCoverage;
      this.premultipliedAlpha = source.premultipliedAlpha;
      this.visible = source.visible;
      this.toneMapped = source.toneMapped;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      return this;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
    set needsUpdate(value) {
      if (value === true)
        this.version++;
    }
  };
  Material.prototype.isMaterial = true;
  var MeshBasicMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.type = "MeshBasicMaterial";
      this.color = new Color(16777215);
      this.map = null;
      this.lightMap = null;
      this.lightMapIntensity = 1;
      this.aoMap = null;
      this.aoMapIntensity = 1;
      this.specularMap = null;
      this.alphaMap = null;
      this.envMap = null;
      this.combine = MultiplyOperation;
      this.reflectivity = 1;
      this.refractionRatio = 0.98;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.wireframeLinecap = "round";
      this.wireframeLinejoin = "round";
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.map = source.map;
      this.lightMap = source.lightMap;
      this.lightMapIntensity = source.lightMapIntensity;
      this.aoMap = source.aoMap;
      this.aoMapIntensity = source.aoMapIntensity;
      this.specularMap = source.specularMap;
      this.alphaMap = source.alphaMap;
      this.envMap = source.envMap;
      this.combine = source.combine;
      this.reflectivity = source.reflectivity;
      this.refractionRatio = source.refractionRatio;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.wireframeLinecap = source.wireframeLinecap;
      this.wireframeLinejoin = source.wireframeLinejoin;
      return this;
    }
  };
  MeshBasicMaterial.prototype.isMeshBasicMaterial = true;
  var _vector$9 = /* @__PURE__ */ new Vector3();
  var _vector2$1 = /* @__PURE__ */ new Vector2();
  var BufferAttribute = class {
    constructor(array, itemSize, normalized) {
      if (Array.isArray(array)) {
        throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
      }
      this.name = "";
      this.array = array;
      this.itemSize = itemSize;
      this.count = array !== void 0 ? array.length / itemSize : 0;
      this.normalized = normalized === true;
      this.usage = StaticDrawUsage;
      this.updateRange = { offset: 0, count: -1 };
      this.version = 0;
    }
    onUploadCallback() {
    }
    set needsUpdate(value) {
      if (value === true)
        this.version++;
    }
    setUsage(value) {
      this.usage = value;
      return this;
    }
    copy(source) {
      this.name = source.name;
      this.array = new source.array.constructor(source.array);
      this.itemSize = source.itemSize;
      this.count = source.count;
      this.normalized = source.normalized;
      this.usage = source.usage;
      return this;
    }
    copyAt(index1, attribute, index2) {
      index1 *= this.itemSize;
      index2 *= attribute.itemSize;
      for (let i2 = 0, l2 = this.itemSize; i2 < l2; i2++) {
        this.array[index1 + i2] = attribute.array[index2 + i2];
      }
      return this;
    }
    copyArray(array) {
      this.array.set(array);
      return this;
    }
    copyColorsArray(colors) {
      const array = this.array;
      let offset = 0;
      for (let i2 = 0, l2 = colors.length; i2 < l2; i2++) {
        let color = colors[i2];
        if (color === void 0) {
          console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", i2);
          color = new Color();
        }
        array[offset++] = color.r;
        array[offset++] = color.g;
        array[offset++] = color.b;
      }
      return this;
    }
    copyVector2sArray(vectors) {
      const array = this.array;
      let offset = 0;
      for (let i2 = 0, l2 = vectors.length; i2 < l2; i2++) {
        let vector = vectors[i2];
        if (vector === void 0) {
          console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", i2);
          vector = new Vector2();
        }
        array[offset++] = vector.x;
        array[offset++] = vector.y;
      }
      return this;
    }
    copyVector3sArray(vectors) {
      const array = this.array;
      let offset = 0;
      for (let i2 = 0, l2 = vectors.length; i2 < l2; i2++) {
        let vector = vectors[i2];
        if (vector === void 0) {
          console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", i2);
          vector = new Vector3();
        }
        array[offset++] = vector.x;
        array[offset++] = vector.y;
        array[offset++] = vector.z;
      }
      return this;
    }
    copyVector4sArray(vectors) {
      const array = this.array;
      let offset = 0;
      for (let i2 = 0, l2 = vectors.length; i2 < l2; i2++) {
        let vector = vectors[i2];
        if (vector === void 0) {
          console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", i2);
          vector = new Vector4();
        }
        array[offset++] = vector.x;
        array[offset++] = vector.y;
        array[offset++] = vector.z;
        array[offset++] = vector.w;
      }
      return this;
    }
    applyMatrix3(m2) {
      if (this.itemSize === 2) {
        for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
          _vector2$1.fromBufferAttribute(this, i2);
          _vector2$1.applyMatrix3(m2);
          this.setXY(i2, _vector2$1.x, _vector2$1.y);
        }
      } else if (this.itemSize === 3) {
        for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
          _vector$9.fromBufferAttribute(this, i2);
          _vector$9.applyMatrix3(m2);
          this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
        }
      }
      return this;
    }
    applyMatrix4(m2) {
      for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
        _vector$9.x = this.getX(i2);
        _vector$9.y = this.getY(i2);
        _vector$9.z = this.getZ(i2);
        _vector$9.applyMatrix4(m2);
        this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
      }
      return this;
    }
    applyNormalMatrix(m2) {
      for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
        _vector$9.x = this.getX(i2);
        _vector$9.y = this.getY(i2);
        _vector$9.z = this.getZ(i2);
        _vector$9.applyNormalMatrix(m2);
        this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
      }
      return this;
    }
    transformDirection(m2) {
      for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
        _vector$9.x = this.getX(i2);
        _vector$9.y = this.getY(i2);
        _vector$9.z = this.getZ(i2);
        _vector$9.transformDirection(m2);
        this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
      }
      return this;
    }
    set(value, offset = 0) {
      this.array.set(value, offset);
      return this;
    }
    getX(index) {
      return this.array[index * this.itemSize];
    }
    setX(index, x2) {
      this.array[index * this.itemSize] = x2;
      return this;
    }
    getY(index) {
      return this.array[index * this.itemSize + 1];
    }
    setY(index, y2) {
      this.array[index * this.itemSize + 1] = y2;
      return this;
    }
    getZ(index) {
      return this.array[index * this.itemSize + 2];
    }
    setZ(index, z2) {
      this.array[index * this.itemSize + 2] = z2;
      return this;
    }
    getW(index) {
      return this.array[index * this.itemSize + 3];
    }
    setW(index, w2) {
      this.array[index * this.itemSize + 3] = w2;
      return this;
    }
    setXY(index, x2, y2) {
      index *= this.itemSize;
      this.array[index + 0] = x2;
      this.array[index + 1] = y2;
      return this;
    }
    setXYZ(index, x2, y2, z2) {
      index *= this.itemSize;
      this.array[index + 0] = x2;
      this.array[index + 1] = y2;
      this.array[index + 2] = z2;
      return this;
    }
    setXYZW(index, x2, y2, z2, w2) {
      index *= this.itemSize;
      this.array[index + 0] = x2;
      this.array[index + 1] = y2;
      this.array[index + 2] = z2;
      this.array[index + 3] = w2;
      return this;
    }
    onUpload(callback) {
      this.onUploadCallback = callback;
      return this;
    }
    clone() {
      return new this.constructor(this.array, this.itemSize).copy(this);
    }
    toJSON() {
      const data = {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: Array.prototype.slice.call(this.array),
        normalized: this.normalized
      };
      if (this.name !== "")
        data.name = this.name;
      if (this.usage !== StaticDrawUsage)
        data.usage = this.usage;
      if (this.updateRange.offset !== 0 || this.updateRange.count !== -1)
        data.updateRange = this.updateRange;
      return data;
    }
  };
  BufferAttribute.prototype.isBufferAttribute = true;
  var Uint16BufferAttribute = class extends BufferAttribute {
    constructor(array, itemSize, normalized) {
      super(new Uint16Array(array), itemSize, normalized);
    }
  };
  var Uint32BufferAttribute = class extends BufferAttribute {
    constructor(array, itemSize, normalized) {
      super(new Uint32Array(array), itemSize, normalized);
    }
  };
  var Float16BufferAttribute = class extends BufferAttribute {
    constructor(array, itemSize, normalized) {
      super(new Uint16Array(array), itemSize, normalized);
    }
  };
  Float16BufferAttribute.prototype.isFloat16BufferAttribute = true;
  var Float32BufferAttribute = class extends BufferAttribute {
    constructor(array, itemSize, normalized) {
      super(new Float32Array(array), itemSize, normalized);
    }
  };
  var _id$1 = 0;
  var _m1 = /* @__PURE__ */ new Matrix4();
  var _obj = /* @__PURE__ */ new Object3D();
  var _offset = /* @__PURE__ */ new Vector3();
  var _box$1 = /* @__PURE__ */ new Box3();
  var _boxMorphTargets = /* @__PURE__ */ new Box3();
  var _vector$8 = /* @__PURE__ */ new Vector3();
  var BufferGeometry = class extends EventDispatcher {
    constructor() {
      super();
      Object.defineProperty(this, "id", { value: _id$1++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "BufferGeometry";
      this.index = null;
      this.attributes = {};
      this.morphAttributes = {};
      this.morphTargetsRelative = false;
      this.groups = [];
      this.boundingBox = null;
      this.boundingSphere = null;
      this.drawRange = { start: 0, count: Infinity };
      this.userData = {};
    }
    getIndex() {
      return this.index;
    }
    setIndex(index) {
      if (Array.isArray(index)) {
        this.index = new (arrayNeedsUint32(index) ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);
      } else {
        this.index = index;
      }
      return this;
    }
    getAttribute(name) {
      return this.attributes[name];
    }
    setAttribute(name, attribute) {
      this.attributes[name] = attribute;
      return this;
    }
    deleteAttribute(name) {
      delete this.attributes[name];
      return this;
    }
    hasAttribute(name) {
      return this.attributes[name] !== void 0;
    }
    addGroup(start2, count, materialIndex = 0) {
      this.groups.push({
        start: start2,
        count,
        materialIndex
      });
    }
    clearGroups() {
      this.groups = [];
    }
    setDrawRange(start2, count) {
      this.drawRange.start = start2;
      this.drawRange.count = count;
    }
    applyMatrix4(matrix) {
      const position = this.attributes.position;
      if (position !== void 0) {
        position.applyMatrix4(matrix);
        position.needsUpdate = true;
      }
      const normal = this.attributes.normal;
      if (normal !== void 0) {
        const normalMatrix = new Matrix3().getNormalMatrix(matrix);
        normal.applyNormalMatrix(normalMatrix);
        normal.needsUpdate = true;
      }
      const tangent = this.attributes.tangent;
      if (tangent !== void 0) {
        tangent.transformDirection(matrix);
        tangent.needsUpdate = true;
      }
      if (this.boundingBox !== null) {
        this.computeBoundingBox();
      }
      if (this.boundingSphere !== null) {
        this.computeBoundingSphere();
      }
      return this;
    }
    applyQuaternion(q3) {
      _m1.makeRotationFromQuaternion(q3);
      this.applyMatrix4(_m1);
      return this;
    }
    rotateX(angle) {
      _m1.makeRotationX(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    rotateY(angle) {
      _m1.makeRotationY(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    rotateZ(angle) {
      _m1.makeRotationZ(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    translate(x2, y2, z2) {
      _m1.makeTranslation(x2, y2, z2);
      this.applyMatrix4(_m1);
      return this;
    }
    scale(x2, y2, z2) {
      _m1.makeScale(x2, y2, z2);
      this.applyMatrix4(_m1);
      return this;
    }
    lookAt(vector) {
      _obj.lookAt(vector);
      _obj.updateMatrix();
      this.applyMatrix4(_obj.matrix);
      return this;
    }
    center() {
      this.computeBoundingBox();
      this.boundingBox.getCenter(_offset).negate();
      this.translate(_offset.x, _offset.y, _offset.z);
      return this;
    }
    setFromPoints(points2) {
      const position = [];
      for (let i2 = 0, l2 = points2.length; i2 < l2; i2++) {
        const point = points2[i2];
        position.push(point.x, point.y, point.z || 0);
      }
      this.setAttribute("position", new Float32BufferAttribute(position, 3));
      return this;
    }
    computeBoundingBox() {
      if (this.boundingBox === null) {
        this.boundingBox = new Box3();
      }
      const position = this.attributes.position;
      const morphAttributesPosition = this.morphAttributes.position;
      if (position && position.isGLBufferAttribute) {
        console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this);
        this.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(Infinity, Infinity, Infinity));
        return;
      }
      if (position !== void 0) {
        this.boundingBox.setFromBufferAttribute(position);
        if (morphAttributesPosition) {
          for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
            const morphAttribute = morphAttributesPosition[i2];
            _box$1.setFromBufferAttribute(morphAttribute);
            if (this.morphTargetsRelative) {
              _vector$8.addVectors(this.boundingBox.min, _box$1.min);
              this.boundingBox.expandByPoint(_vector$8);
              _vector$8.addVectors(this.boundingBox.max, _box$1.max);
              this.boundingBox.expandByPoint(_vector$8);
            } else {
              this.boundingBox.expandByPoint(_box$1.min);
              this.boundingBox.expandByPoint(_box$1.max);
            }
          }
        }
      } else {
        this.boundingBox.makeEmpty();
      }
      if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
        console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
      }
    }
    computeBoundingSphere() {
      if (this.boundingSphere === null) {
        this.boundingSphere = new Sphere();
      }
      const position = this.attributes.position;
      const morphAttributesPosition = this.morphAttributes.position;
      if (position && position.isGLBufferAttribute) {
        console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this);
        this.boundingSphere.set(new Vector3(), Infinity);
        return;
      }
      if (position) {
        const center = this.boundingSphere.center;
        _box$1.setFromBufferAttribute(position);
        if (morphAttributesPosition) {
          for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
            const morphAttribute = morphAttributesPosition[i2];
            _boxMorphTargets.setFromBufferAttribute(morphAttribute);
            if (this.morphTargetsRelative) {
              _vector$8.addVectors(_box$1.min, _boxMorphTargets.min);
              _box$1.expandByPoint(_vector$8);
              _vector$8.addVectors(_box$1.max, _boxMorphTargets.max);
              _box$1.expandByPoint(_vector$8);
            } else {
              _box$1.expandByPoint(_boxMorphTargets.min);
              _box$1.expandByPoint(_boxMorphTargets.max);
            }
          }
        }
        _box$1.getCenter(center);
        let maxRadiusSq = 0;
        for (let i2 = 0, il = position.count; i2 < il; i2++) {
          _vector$8.fromBufferAttribute(position, i2);
          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
        }
        if (morphAttributesPosition) {
          for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
            const morphAttribute = morphAttributesPosition[i2];
            const morphTargetsRelative = this.morphTargetsRelative;
            for (let j2 = 0, jl = morphAttribute.count; j2 < jl; j2++) {
              _vector$8.fromBufferAttribute(morphAttribute, j2);
              if (morphTargetsRelative) {
                _offset.fromBufferAttribute(position, j2);
                _vector$8.add(_offset);
              }
              maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
            }
          }
        }
        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
        if (isNaN(this.boundingSphere.radius)) {
          console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
        }
      }
    }
    computeTangents() {
      const index = this.index;
      const attributes = this.attributes;
      if (index === null || attributes.position === void 0 || attributes.normal === void 0 || attributes.uv === void 0) {
        console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
        return;
      }
      const indices = index.array;
      const positions = attributes.position.array;
      const normals = attributes.normal.array;
      const uvs = attributes.uv.array;
      const nVertices = positions.length / 3;
      if (attributes.tangent === void 0) {
        this.setAttribute("tangent", new BufferAttribute(new Float32Array(4 * nVertices), 4));
      }
      const tangents = attributes.tangent.array;
      const tan1 = [], tan2 = [];
      for (let i2 = 0; i2 < nVertices; i2++) {
        tan1[i2] = new Vector3();
        tan2[i2] = new Vector3();
      }
      const vA = new Vector3(), vB = new Vector3(), vC = new Vector3(), uvA = new Vector2(), uvB = new Vector2(), uvC = new Vector2(), sdir = new Vector3(), tdir = new Vector3();
      function handleTriangle(a2, b2, c2) {
        vA.fromArray(positions, a2 * 3);
        vB.fromArray(positions, b2 * 3);
        vC.fromArray(positions, c2 * 3);
        uvA.fromArray(uvs, a2 * 2);
        uvB.fromArray(uvs, b2 * 2);
        uvC.fromArray(uvs, c2 * 2);
        vB.sub(vA);
        vC.sub(vA);
        uvB.sub(uvA);
        uvC.sub(uvA);
        const r2 = 1 / (uvB.x * uvC.y - uvC.x * uvB.y);
        if (!isFinite(r2))
          return;
        sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r2);
        tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r2);
        tan1[a2].add(sdir);
        tan1[b2].add(sdir);
        tan1[c2].add(sdir);
        tan2[a2].add(tdir);
        tan2[b2].add(tdir);
        tan2[c2].add(tdir);
      }
      let groups = this.groups;
      if (groups.length === 0) {
        groups = [{
          start: 0,
          count: indices.length
        }];
      }
      for (let i2 = 0, il = groups.length; i2 < il; ++i2) {
        const group = groups[i2];
        const start2 = group.start;
        const count = group.count;
        for (let j2 = start2, jl = start2 + count; j2 < jl; j2 += 3) {
          handleTriangle(indices[j2 + 0], indices[j2 + 1], indices[j2 + 2]);
        }
      }
      const tmp2 = new Vector3(), tmp22 = new Vector3();
      const n2 = new Vector3(), n22 = new Vector3();
      function handleVertex(v2) {
        n2.fromArray(normals, v2 * 3);
        n22.copy(n2);
        const t = tan1[v2];
        tmp2.copy(t);
        tmp2.sub(n2.multiplyScalar(n2.dot(t))).normalize();
        tmp22.crossVectors(n22, t);
        const test = tmp22.dot(tan2[v2]);
        const w2 = test < 0 ? -1 : 1;
        tangents[v2 * 4] = tmp2.x;
        tangents[v2 * 4 + 1] = tmp2.y;
        tangents[v2 * 4 + 2] = tmp2.z;
        tangents[v2 * 4 + 3] = w2;
      }
      for (let i2 = 0, il = groups.length; i2 < il; ++i2) {
        const group = groups[i2];
        const start2 = group.start;
        const count = group.count;
        for (let j2 = start2, jl = start2 + count; j2 < jl; j2 += 3) {
          handleVertex(indices[j2 + 0]);
          handleVertex(indices[j2 + 1]);
          handleVertex(indices[j2 + 2]);
        }
      }
    }
    computeVertexNormals() {
      const index = this.index;
      const positionAttribute = this.getAttribute("position");
      if (positionAttribute !== void 0) {
        let normalAttribute = this.getAttribute("normal");
        if (normalAttribute === void 0) {
          normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
          this.setAttribute("normal", normalAttribute);
        } else {
          for (let i2 = 0, il = normalAttribute.count; i2 < il; i2++) {
            normalAttribute.setXYZ(i2, 0, 0, 0);
          }
        }
        const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
        const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
        const cb = new Vector3(), ab = new Vector3();
        if (index) {
          for (let i2 = 0, il = index.count; i2 < il; i2 += 3) {
            const vA = index.getX(i2 + 0);
            const vB = index.getX(i2 + 1);
            const vC = index.getX(i2 + 2);
            pA.fromBufferAttribute(positionAttribute, vA);
            pB.fromBufferAttribute(positionAttribute, vB);
            pC.fromBufferAttribute(positionAttribute, vC);
            cb.subVectors(pC, pB);
            ab.subVectors(pA, pB);
            cb.cross(ab);
            nA.fromBufferAttribute(normalAttribute, vA);
            nB.fromBufferAttribute(normalAttribute, vB);
            nC.fromBufferAttribute(normalAttribute, vC);
            nA.add(cb);
            nB.add(cb);
            nC.add(cb);
            normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
            normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
            normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
          }
        } else {
          for (let i2 = 0, il = positionAttribute.count; i2 < il; i2 += 3) {
            pA.fromBufferAttribute(positionAttribute, i2 + 0);
            pB.fromBufferAttribute(positionAttribute, i2 + 1);
            pC.fromBufferAttribute(positionAttribute, i2 + 2);
            cb.subVectors(pC, pB);
            ab.subVectors(pA, pB);
            cb.cross(ab);
            normalAttribute.setXYZ(i2 + 0, cb.x, cb.y, cb.z);
            normalAttribute.setXYZ(i2 + 1, cb.x, cb.y, cb.z);
            normalAttribute.setXYZ(i2 + 2, cb.x, cb.y, cb.z);
          }
        }
        this.normalizeNormals();
        normalAttribute.needsUpdate = true;
      }
    }
    merge(geometry, offset) {
      if (!(geometry && geometry.isBufferGeometry)) {
        console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", geometry);
        return;
      }
      if (offset === void 0) {
        offset = 0;
        console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.");
      }
      const attributes = this.attributes;
      for (const key in attributes) {
        if (geometry.attributes[key] === void 0)
          continue;
        const attribute1 = attributes[key];
        const attributeArray1 = attribute1.array;
        const attribute2 = geometry.attributes[key];
        const attributeArray2 = attribute2.array;
        const attributeOffset = attribute2.itemSize * offset;
        const length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);
        for (let i2 = 0, j2 = attributeOffset; i2 < length; i2++, j2++) {
          attributeArray1[j2] = attributeArray2[i2];
        }
      }
      return this;
    }
    normalizeNormals() {
      const normals = this.attributes.normal;
      for (let i2 = 0, il = normals.count; i2 < il; i2++) {
        _vector$8.fromBufferAttribute(normals, i2);
        _vector$8.normalize();
        normals.setXYZ(i2, _vector$8.x, _vector$8.y, _vector$8.z);
      }
    }
    toNonIndexed() {
      function convertBufferAttribute(attribute, indices2) {
        const array = attribute.array;
        const itemSize = attribute.itemSize;
        const normalized = attribute.normalized;
        const array2 = new array.constructor(indices2.length * itemSize);
        let index = 0, index2 = 0;
        for (let i2 = 0, l2 = indices2.length; i2 < l2; i2++) {
          if (attribute.isInterleavedBufferAttribute) {
            index = indices2[i2] * attribute.data.stride + attribute.offset;
          } else {
            index = indices2[i2] * itemSize;
          }
          for (let j2 = 0; j2 < itemSize; j2++) {
            array2[index2++] = array[index++];
          }
        }
        return new BufferAttribute(array2, itemSize, normalized);
      }
      if (this.index === null) {
        console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");
        return this;
      }
      const geometry2 = new BufferGeometry();
      const indices = this.index.array;
      const attributes = this.attributes;
      for (const name in attributes) {
        const attribute = attributes[name];
        const newAttribute = convertBufferAttribute(attribute, indices);
        geometry2.setAttribute(name, newAttribute);
      }
      const morphAttributes = this.morphAttributes;
      for (const name in morphAttributes) {
        const morphArray = [];
        const morphAttribute = morphAttributes[name];
        for (let i2 = 0, il = morphAttribute.length; i2 < il; i2++) {
          const attribute = morphAttribute[i2];
          const newAttribute = convertBufferAttribute(attribute, indices);
          morphArray.push(newAttribute);
        }
        geometry2.morphAttributes[name] = morphArray;
      }
      geometry2.morphTargetsRelative = this.morphTargetsRelative;
      const groups = this.groups;
      for (let i2 = 0, l2 = groups.length; i2 < l2; i2++) {
        const group = groups[i2];
        geometry2.addGroup(group.start, group.count, group.materialIndex);
      }
      return geometry2;
    }
    toJSON() {
      const data = {
        metadata: {
          version: 4.5,
          type: "BufferGeometry",
          generator: "BufferGeometry.toJSON"
        }
      };
      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== "")
        data.name = this.name;
      if (Object.keys(this.userData).length > 0)
        data.userData = this.userData;
      if (this.parameters !== void 0) {
        const parameters = this.parameters;
        for (const key in parameters) {
          if (parameters[key] !== void 0)
            data[key] = parameters[key];
        }
        return data;
      }
      data.data = { attributes: {} };
      const index = this.index;
      if (index !== null) {
        data.data.index = {
          type: index.array.constructor.name,
          array: Array.prototype.slice.call(index.array)
        };
      }
      const attributes = this.attributes;
      for (const key in attributes) {
        const attribute = attributes[key];
        data.data.attributes[key] = attribute.toJSON(data.data);
      }
      const morphAttributes = {};
      let hasMorphAttributes = false;
      for (const key in this.morphAttributes) {
        const attributeArray = this.morphAttributes[key];
        const array = [];
        for (let i2 = 0, il = attributeArray.length; i2 < il; i2++) {
          const attribute = attributeArray[i2];
          array.push(attribute.toJSON(data.data));
        }
        if (array.length > 0) {
          morphAttributes[key] = array;
          hasMorphAttributes = true;
        }
      }
      if (hasMorphAttributes) {
        data.data.morphAttributes = morphAttributes;
        data.data.morphTargetsRelative = this.morphTargetsRelative;
      }
      const groups = this.groups;
      if (groups.length > 0) {
        data.data.groups = JSON.parse(JSON.stringify(groups));
      }
      const boundingSphere = this.boundingSphere;
      if (boundingSphere !== null) {
        data.data.boundingSphere = {
          center: boundingSphere.center.toArray(),
          radius: boundingSphere.radius
        };
      }
      return data;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.index = null;
      this.attributes = {};
      this.morphAttributes = {};
      this.groups = [];
      this.boundingBox = null;
      this.boundingSphere = null;
      const data = {};
      this.name = source.name;
      const index = source.index;
      if (index !== null) {
        this.setIndex(index.clone(data));
      }
      const attributes = source.attributes;
      for (const name in attributes) {
        const attribute = attributes[name];
        this.setAttribute(name, attribute.clone(data));
      }
      const morphAttributes = source.morphAttributes;
      for (const name in morphAttributes) {
        const array = [];
        const morphAttribute = morphAttributes[name];
        for (let i2 = 0, l2 = morphAttribute.length; i2 < l2; i2++) {
          array.push(morphAttribute[i2].clone(data));
        }
        this.morphAttributes[name] = array;
      }
      this.morphTargetsRelative = source.morphTargetsRelative;
      const groups = source.groups;
      for (let i2 = 0, l2 = groups.length; i2 < l2; i2++) {
        const group = groups[i2];
        this.addGroup(group.start, group.count, group.materialIndex);
      }
      const boundingBox = source.boundingBox;
      if (boundingBox !== null) {
        this.boundingBox = boundingBox.clone();
      }
      const boundingSphere = source.boundingSphere;
      if (boundingSphere !== null) {
        this.boundingSphere = boundingSphere.clone();
      }
      this.drawRange.start = source.drawRange.start;
      this.drawRange.count = source.drawRange.count;
      this.userData = source.userData;
      if (source.parameters !== void 0)
        this.parameters = Object.assign({}, source.parameters);
      return this;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
  };
  BufferGeometry.prototype.isBufferGeometry = true;
  var _inverseMatrix$2 = /* @__PURE__ */ new Matrix4();
  var _ray$2 = /* @__PURE__ */ new Ray();
  var _sphere$3 = /* @__PURE__ */ new Sphere();
  var _vA$1 = /* @__PURE__ */ new Vector3();
  var _vB$1 = /* @__PURE__ */ new Vector3();
  var _vC$1 = /* @__PURE__ */ new Vector3();
  var _tempA = /* @__PURE__ */ new Vector3();
  var _tempB = /* @__PURE__ */ new Vector3();
  var _tempC = /* @__PURE__ */ new Vector3();
  var _morphA = /* @__PURE__ */ new Vector3();
  var _morphB = /* @__PURE__ */ new Vector3();
  var _morphC = /* @__PURE__ */ new Vector3();
  var _uvA$1 = /* @__PURE__ */ new Vector2();
  var _uvB$1 = /* @__PURE__ */ new Vector2();
  var _uvC$1 = /* @__PURE__ */ new Vector2();
  var _intersectionPoint = /* @__PURE__ */ new Vector3();
  var _intersectionPointWorld = /* @__PURE__ */ new Vector3();
  var Mesh = class extends Object3D {
    constructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {
      super();
      this.type = "Mesh";
      this.geometry = geometry;
      this.material = material;
      this.updateMorphTargets();
    }
    copy(source) {
      super.copy(source);
      if (source.morphTargetInfluences !== void 0) {
        this.morphTargetInfluences = source.morphTargetInfluences.slice();
      }
      if (source.morphTargetDictionary !== void 0) {
        this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
      }
      this.material = source.material;
      this.geometry = source.geometry;
      return this;
    }
    updateMorphTargets() {
      const geometry = this.geometry;
      if (geometry.isBufferGeometry) {
        const morphAttributes = geometry.morphAttributes;
        const keys = Object.keys(morphAttributes);
        if (keys.length > 0) {
          const morphAttribute = morphAttributes[keys[0]];
          if (morphAttribute !== void 0) {
            this.morphTargetInfluences = [];
            this.morphTargetDictionary = {};
            for (let m2 = 0, ml = morphAttribute.length; m2 < ml; m2++) {
              const name = morphAttribute[m2].name || String(m2);
              this.morphTargetInfluences.push(0);
              this.morphTargetDictionary[name] = m2;
            }
          }
        }
      } else {
        const morphTargets = geometry.morphTargets;
        if (morphTargets !== void 0 && morphTargets.length > 0) {
          console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
        }
      }
    }
    raycast(raycaster, intersects2) {
      const geometry = this.geometry;
      const material = this.material;
      const matrixWorld = this.matrixWorld;
      if (material === void 0)
        return;
      if (geometry.boundingSphere === null)
        geometry.computeBoundingSphere();
      _sphere$3.copy(geometry.boundingSphere);
      _sphere$3.applyMatrix4(matrixWorld);
      if (raycaster.ray.intersectsSphere(_sphere$3) === false)
        return;
      _inverseMatrix$2.copy(matrixWorld).invert();
      _ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);
      if (geometry.boundingBox !== null) {
        if (_ray$2.intersectsBox(geometry.boundingBox) === false)
          return;
      }
      let intersection;
      if (geometry.isBufferGeometry) {
        const index = geometry.index;
        const position = geometry.attributes.position;
        const morphPosition = geometry.morphAttributes.position;
        const morphTargetsRelative = geometry.morphTargetsRelative;
        const uv = geometry.attributes.uv;
        const uv2 = geometry.attributes.uv2;
        const groups = geometry.groups;
        const drawRange = geometry.drawRange;
        if (index !== null) {
          if (Array.isArray(material)) {
            for (let i2 = 0, il = groups.length; i2 < il; i2++) {
              const group = groups[i2];
              const groupMaterial = material[group.materialIndex];
              const start2 = Math.max(group.start, drawRange.start);
              const end2 = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
              for (let j2 = start2, jl = end2; j2 < jl; j2 += 3) {
                const a2 = index.getX(j2);
                const b2 = index.getX(j2 + 1);
                const c2 = index.getX(j2 + 2);
                intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a2, b2, c2);
                if (intersection) {
                  intersection.faceIndex = Math.floor(j2 / 3);
                  intersection.face.materialIndex = group.materialIndex;
                  intersects2.push(intersection);
                }
              }
            }
          } else {
            const start2 = Math.max(0, drawRange.start);
            const end2 = Math.min(index.count, drawRange.start + drawRange.count);
            for (let i2 = start2, il = end2; i2 < il; i2 += 3) {
              const a2 = index.getX(i2);
              const b2 = index.getX(i2 + 1);
              const c2 = index.getX(i2 + 2);
              intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a2, b2, c2);
              if (intersection) {
                intersection.faceIndex = Math.floor(i2 / 3);
                intersects2.push(intersection);
              }
            }
          }
        } else if (position !== void 0) {
          if (Array.isArray(material)) {
            for (let i2 = 0, il = groups.length; i2 < il; i2++) {
              const group = groups[i2];
              const groupMaterial = material[group.materialIndex];
              const start2 = Math.max(group.start, drawRange.start);
              const end2 = Math.min(position.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
              for (let j2 = start2, jl = end2; j2 < jl; j2 += 3) {
                const a2 = j2;
                const b2 = j2 + 1;
                const c2 = j2 + 2;
                intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a2, b2, c2);
                if (intersection) {
                  intersection.faceIndex = Math.floor(j2 / 3);
                  intersection.face.materialIndex = group.materialIndex;
                  intersects2.push(intersection);
                }
              }
            }
          } else {
            const start2 = Math.max(0, drawRange.start);
            const end2 = Math.min(position.count, drawRange.start + drawRange.count);
            for (let i2 = start2, il = end2; i2 < il; i2 += 3) {
              const a2 = i2;
              const b2 = i2 + 1;
              const c2 = i2 + 2;
              intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a2, b2, c2);
              if (intersection) {
                intersection.faceIndex = Math.floor(i2 / 3);
                intersects2.push(intersection);
              }
            }
          }
        }
      } else if (geometry.isGeometry) {
        console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
      }
    }
  };
  Mesh.prototype.isMesh = true;
  function checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {
    let intersect;
    if (material.side === BackSide) {
      intersect = ray.intersectTriangle(pC, pB, pA, true, point);
    } else {
      intersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);
    }
    if (intersect === null)
      return null;
    _intersectionPointWorld.copy(point);
    _intersectionPointWorld.applyMatrix4(object.matrixWorld);
    const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
    if (distance < raycaster.near || distance > raycaster.far)
      return null;
    return {
      distance,
      point: _intersectionPointWorld.clone(),
      object
    };
  }
  function checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a2, b2, c2) {
    _vA$1.fromBufferAttribute(position, a2);
    _vB$1.fromBufferAttribute(position, b2);
    _vC$1.fromBufferAttribute(position, c2);
    const morphInfluences = object.morphTargetInfluences;
    if (morphPosition && morphInfluences) {
      _morphA.set(0, 0, 0);
      _morphB.set(0, 0, 0);
      _morphC.set(0, 0, 0);
      for (let i2 = 0, il = morphPosition.length; i2 < il; i2++) {
        const influence = morphInfluences[i2];
        const morphAttribute = morphPosition[i2];
        if (influence === 0)
          continue;
        _tempA.fromBufferAttribute(morphAttribute, a2);
        _tempB.fromBufferAttribute(morphAttribute, b2);
        _tempC.fromBufferAttribute(morphAttribute, c2);
        if (morphTargetsRelative) {
          _morphA.addScaledVector(_tempA, influence);
          _morphB.addScaledVector(_tempB, influence);
          _morphC.addScaledVector(_tempC, influence);
        } else {
          _morphA.addScaledVector(_tempA.sub(_vA$1), influence);
          _morphB.addScaledVector(_tempB.sub(_vB$1), influence);
          _morphC.addScaledVector(_tempC.sub(_vC$1), influence);
        }
      }
      _vA$1.add(_morphA);
      _vB$1.add(_morphB);
      _vC$1.add(_morphC);
    }
    if (object.isSkinnedMesh) {
      object.boneTransform(a2, _vA$1);
      object.boneTransform(b2, _vB$1);
      object.boneTransform(c2, _vC$1);
    }
    const intersection = checkIntersection(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);
    if (intersection) {
      if (uv) {
        _uvA$1.fromBufferAttribute(uv, a2);
        _uvB$1.fromBufferAttribute(uv, b2);
        _uvC$1.fromBufferAttribute(uv, c2);
        intersection.uv = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
      }
      if (uv2) {
        _uvA$1.fromBufferAttribute(uv2, a2);
        _uvB$1.fromBufferAttribute(uv2, b2);
        _uvC$1.fromBufferAttribute(uv2, c2);
        intersection.uv2 = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
      }
      const face = {
        a: a2,
        b: b2,
        c: c2,
        normal: new Vector3(),
        materialIndex: 0
      };
      Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);
      intersection.face = face;
    }
    return intersection;
  }
  var BoxGeometry = class extends BufferGeometry {
    constructor(width2 = 1, height2 = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {
      super();
      this.type = "BoxGeometry";
      this.parameters = {
        width: width2,
        height: height2,
        depth,
        widthSegments,
        heightSegments,
        depthSegments
      };
      const scope = this;
      widthSegments = Math.floor(widthSegments);
      heightSegments = Math.floor(heightSegments);
      depthSegments = Math.floor(depthSegments);
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      let numberOfVertices = 0;
      let groupStart = 0;
      buildPlane("z", "y", "x", -1, -1, depth, height2, width2, depthSegments, heightSegments, 0);
      buildPlane("z", "y", "x", 1, -1, depth, height2, -width2, depthSegments, heightSegments, 1);
      buildPlane("x", "z", "y", 1, 1, width2, depth, height2, widthSegments, depthSegments, 2);
      buildPlane("x", "z", "y", 1, -1, width2, depth, -height2, widthSegments, depthSegments, 3);
      buildPlane("x", "y", "z", 1, -1, width2, height2, depth, widthSegments, heightSegments, 4);
      buildPlane("x", "y", "z", -1, -1, width2, height2, -depth, widthSegments, heightSegments, 5);
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
      function buildPlane(u2, v2, w2, udir, vdir, width3, height3, depth2, gridX, gridY, materialIndex) {
        const segmentWidth = width3 / gridX;
        const segmentHeight = height3 / gridY;
        const widthHalf = width3 / 2;
        const heightHalf = height3 / 2;
        const depthHalf = depth2 / 2;
        const gridX1 = gridX + 1;
        const gridY1 = gridY + 1;
        let vertexCounter = 0;
        let groupCount = 0;
        const vector = new Vector3();
        for (let iy = 0; iy < gridY1; iy++) {
          const y2 = iy * segmentHeight - heightHalf;
          for (let ix = 0; ix < gridX1; ix++) {
            const x2 = ix * segmentWidth - widthHalf;
            vector[u2] = x2 * udir;
            vector[v2] = y2 * vdir;
            vector[w2] = depthHalf;
            vertices.push(vector.x, vector.y, vector.z);
            vector[u2] = 0;
            vector[v2] = 0;
            vector[w2] = depth2 > 0 ? 1 : -1;
            normals.push(vector.x, vector.y, vector.z);
            uvs.push(ix / gridX);
            uvs.push(1 - iy / gridY);
            vertexCounter += 1;
          }
        }
        for (let iy = 0; iy < gridY; iy++) {
          for (let ix = 0; ix < gridX; ix++) {
            const a2 = numberOfVertices + ix + gridX1 * iy;
            const b2 = numberOfVertices + ix + gridX1 * (iy + 1);
            const c2 = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
            const d2 = numberOfVertices + (ix + 1) + gridX1 * iy;
            indices.push(a2, b2, d2);
            indices.push(b2, c2, d2);
            groupCount += 6;
          }
        }
        scope.addGroup(groupStart, groupCount, materialIndex);
        groupStart += groupCount;
        numberOfVertices += vertexCounter;
      }
    }
    static fromJSON(data) {
      return new BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
    }
  };
  function cloneUniforms(src) {
    const dst = {};
    for (const u2 in src) {
      dst[u2] = {};
      for (const p3 in src[u2]) {
        const property = src[u2][p3];
        if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {
          dst[u2][p3] = property.clone();
        } else if (Array.isArray(property)) {
          dst[u2][p3] = property.slice();
        } else {
          dst[u2][p3] = property;
        }
      }
    }
    return dst;
  }
  function mergeUniforms(uniforms) {
    const merged = {};
    for (let u2 = 0; u2 < uniforms.length; u2++) {
      const tmp2 = cloneUniforms(uniforms[u2]);
      for (const p3 in tmp2) {
        merged[p3] = tmp2[p3];
      }
    }
    return merged;
  }
  var UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };
  var default_vertex = "void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
  var default_fragment = "void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
  var ShaderMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.type = "ShaderMaterial";
      this.defines = {};
      this.uniforms = {};
      this.vertexShader = default_vertex;
      this.fragmentShader = default_fragment;
      this.linewidth = 1;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.fog = false;
      this.lights = false;
      this.clipping = false;
      this.extensions = {
        derivatives: false,
        fragDepth: false,
        drawBuffers: false,
        shaderTextureLOD: false
      };
      this.defaultAttributeValues = {
        "color": [1, 1, 1],
        "uv": [0, 0],
        "uv2": [0, 0]
      };
      this.index0AttributeName = void 0;
      this.uniformsNeedUpdate = false;
      this.glslVersion = null;
      if (parameters !== void 0) {
        if (parameters.attributes !== void 0) {
          console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.");
        }
        this.setValues(parameters);
      }
    }
    copy(source) {
      super.copy(source);
      this.fragmentShader = source.fragmentShader;
      this.vertexShader = source.vertexShader;
      this.uniforms = cloneUniforms(source.uniforms);
      this.defines = Object.assign({}, source.defines);
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.lights = source.lights;
      this.clipping = source.clipping;
      this.extensions = Object.assign({}, source.extensions);
      this.glslVersion = source.glslVersion;
      return this;
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      data.glslVersion = this.glslVersion;
      data.uniforms = {};
      for (const name in this.uniforms) {
        const uniform = this.uniforms[name];
        const value = uniform.value;
        if (value && value.isTexture) {
          data.uniforms[name] = {
            type: "t",
            value: value.toJSON(meta).uuid
          };
        } else if (value && value.isColor) {
          data.uniforms[name] = {
            type: "c",
            value: value.getHex()
          };
        } else if (value && value.isVector2) {
          data.uniforms[name] = {
            type: "v2",
            value: value.toArray()
          };
        } else if (value && value.isVector3) {
          data.uniforms[name] = {
            type: "v3",
            value: value.toArray()
          };
        } else if (value && value.isVector4) {
          data.uniforms[name] = {
            type: "v4",
            value: value.toArray()
          };
        } else if (value && value.isMatrix3) {
          data.uniforms[name] = {
            type: "m3",
            value: value.toArray()
          };
        } else if (value && value.isMatrix4) {
          data.uniforms[name] = {
            type: "m4",
            value: value.toArray()
          };
        } else {
          data.uniforms[name] = {
            value
          };
        }
      }
      if (Object.keys(this.defines).length > 0)
        data.defines = this.defines;
      data.vertexShader = this.vertexShader;
      data.fragmentShader = this.fragmentShader;
      const extensions = {};
      for (const key in this.extensions) {
        if (this.extensions[key] === true)
          extensions[key] = true;
      }
      if (Object.keys(extensions).length > 0)
        data.extensions = extensions;
      return data;
    }
  };
  ShaderMaterial.prototype.isShaderMaterial = true;
  var Camera = class extends Object3D {
    constructor() {
      super();
      this.type = "Camera";
      this.matrixWorldInverse = new Matrix4();
      this.projectionMatrix = new Matrix4();
      this.projectionMatrixInverse = new Matrix4();
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.matrixWorldInverse.copy(source.matrixWorldInverse);
      this.projectionMatrix.copy(source.projectionMatrix);
      this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
      return this;
    }
    getWorldDirection(target) {
      this.updateWorldMatrix(true, false);
      const e = this.matrixWorld.elements;
      return target.set(-e[8], -e[9], -e[10]).normalize();
    }
    updateMatrixWorld(force) {
      super.updateMatrixWorld(force);
      this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    updateWorldMatrix(updateParents, updateChildren) {
      super.updateWorldMatrix(updateParents, updateChildren);
      this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  Camera.prototype.isCamera = true;
  var PerspectiveCamera = class extends Camera {
    constructor(fov2 = 50, aspect2 = 1, near = 0.1, far = 2e3) {
      super();
      this.type = "PerspectiveCamera";
      this.fov = fov2;
      this.zoom = 1;
      this.near = near;
      this.far = far;
      this.focus = 10;
      this.aspect = aspect2;
      this.view = null;
      this.filmGauge = 35;
      this.filmOffset = 0;
      this.updateProjectionMatrix();
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.fov = source.fov;
      this.zoom = source.zoom;
      this.near = source.near;
      this.far = source.far;
      this.focus = source.focus;
      this.aspect = source.aspect;
      this.view = source.view === null ? null : Object.assign({}, source.view);
      this.filmGauge = source.filmGauge;
      this.filmOffset = source.filmOffset;
      return this;
    }
    setFocalLength(focalLength) {
      const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
      this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);
      this.updateProjectionMatrix();
    }
    getFocalLength() {
      const vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);
      return 0.5 * this.getFilmHeight() / vExtentSlope;
    }
    getEffectiveFOV() {
      return RAD2DEG * 2 * Math.atan(Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom);
    }
    getFilmWidth() {
      return this.filmGauge * Math.min(this.aspect, 1);
    }
    getFilmHeight() {
      return this.filmGauge / Math.max(this.aspect, 1);
    }
    setViewOffset(fullWidth, fullHeight, x2, y2, width2, height2) {
      this.aspect = fullWidth / fullHeight;
      if (this.view === null) {
        this.view = {
          enabled: true,
          fullWidth: 1,
          fullHeight: 1,
          offsetX: 0,
          offsetY: 0,
          width: 1,
          height: 1
        };
      }
      this.view.enabled = true;
      this.view.fullWidth = fullWidth;
      this.view.fullHeight = fullHeight;
      this.view.offsetX = x2;
      this.view.offsetY = y2;
      this.view.width = width2;
      this.view.height = height2;
      this.updateProjectionMatrix();
    }
    clearViewOffset() {
      if (this.view !== null) {
        this.view.enabled = false;
      }
      this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
      const near = this.near;
      let top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;
      let height2 = 2 * top;
      let width2 = this.aspect * height2;
      let left = -0.5 * width2;
      const view = this.view;
      if (this.view !== null && this.view.enabled) {
        const fullWidth = view.fullWidth, fullHeight = view.fullHeight;
        left += view.offsetX * width2 / fullWidth;
        top -= view.offsetY * height2 / fullHeight;
        width2 *= view.width / fullWidth;
        height2 *= view.height / fullHeight;
      }
      const skew = this.filmOffset;
      if (skew !== 0)
        left += near * skew / this.getFilmWidth();
      this.projectionMatrix.makePerspective(left, left + width2, top, top - height2, near, this.far);
      this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      data.object.fov = this.fov;
      data.object.zoom = this.zoom;
      data.object.near = this.near;
      data.object.far = this.far;
      data.object.focus = this.focus;
      data.object.aspect = this.aspect;
      if (this.view !== null)
        data.object.view = Object.assign({}, this.view);
      data.object.filmGauge = this.filmGauge;
      data.object.filmOffset = this.filmOffset;
      return data;
    }
  };
  PerspectiveCamera.prototype.isPerspectiveCamera = true;
  var fov = 90;
  var aspect = 1;
  var CubeCamera = class extends Object3D {
    constructor(near, far, renderTarget) {
      super();
      this.type = "CubeCamera";
      if (renderTarget.isWebGLCubeRenderTarget !== true) {
        console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");
        return;
      }
      this.renderTarget = renderTarget;
      const cameraPX = new PerspectiveCamera(fov, aspect, near, far);
      cameraPX.layers = this.layers;
      cameraPX.up.set(0, -1, 0);
      cameraPX.lookAt(new Vector3(1, 0, 0));
      this.add(cameraPX);
      const cameraNX = new PerspectiveCamera(fov, aspect, near, far);
      cameraNX.layers = this.layers;
      cameraNX.up.set(0, -1, 0);
      cameraNX.lookAt(new Vector3(-1, 0, 0));
      this.add(cameraNX);
      const cameraPY = new PerspectiveCamera(fov, aspect, near, far);
      cameraPY.layers = this.layers;
      cameraPY.up.set(0, 0, 1);
      cameraPY.lookAt(new Vector3(0, 1, 0));
      this.add(cameraPY);
      const cameraNY = new PerspectiveCamera(fov, aspect, near, far);
      cameraNY.layers = this.layers;
      cameraNY.up.set(0, 0, -1);
      cameraNY.lookAt(new Vector3(0, -1, 0));
      this.add(cameraNY);
      const cameraPZ = new PerspectiveCamera(fov, aspect, near, far);
      cameraPZ.layers = this.layers;
      cameraPZ.up.set(0, -1, 0);
      cameraPZ.lookAt(new Vector3(0, 0, 1));
      this.add(cameraPZ);
      const cameraNZ = new PerspectiveCamera(fov, aspect, near, far);
      cameraNZ.layers = this.layers;
      cameraNZ.up.set(0, -1, 0);
      cameraNZ.lookAt(new Vector3(0, 0, -1));
      this.add(cameraNZ);
    }
    update(renderer, scene2) {
      if (this.parent === null)
        this.updateMatrixWorld();
      const renderTarget = this.renderTarget;
      const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;
      const currentXrEnabled = renderer.xr.enabled;
      const currentRenderTarget = renderer.getRenderTarget();
      renderer.xr.enabled = false;
      const generateMipmaps = renderTarget.texture.generateMipmaps;
      renderTarget.texture.generateMipmaps = false;
      renderer.setRenderTarget(renderTarget, 0);
      renderer.render(scene2, cameraPX);
      renderer.setRenderTarget(renderTarget, 1);
      renderer.render(scene2, cameraNX);
      renderer.setRenderTarget(renderTarget, 2);
      renderer.render(scene2, cameraPY);
      renderer.setRenderTarget(renderTarget, 3);
      renderer.render(scene2, cameraNY);
      renderer.setRenderTarget(renderTarget, 4);
      renderer.render(scene2, cameraPZ);
      renderTarget.texture.generateMipmaps = generateMipmaps;
      renderer.setRenderTarget(renderTarget, 5);
      renderer.render(scene2, cameraNZ);
      renderer.setRenderTarget(currentRenderTarget);
      renderer.xr.enabled = currentXrEnabled;
      renderTarget.texture.needsPMREMUpdate = true;
    }
  };
  var CubeTexture = class extends Texture {
    constructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {
      images = images !== void 0 ? images : [];
      mapping = mapping !== void 0 ? mapping : CubeReflectionMapping;
      super(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
      this.flipY = false;
    }
    get images() {
      return this.image;
    }
    set images(value) {
      this.image = value;
    }
  };
  CubeTexture.prototype.isCubeTexture = true;
  var WebGLCubeRenderTarget = class extends WebGLRenderTarget {
    constructor(size2, options, dummy) {
      if (Number.isInteger(options)) {
        console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )");
        options = dummy;
      }
      super(size2, size2, options);
      options = options || {};
      this.texture = new CubeTexture(void 0, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
      this.texture.isRenderTargetTexture = true;
      this.texture.generateMipmaps = options.generateMipmaps !== void 0 ? options.generateMipmaps : false;
      this.texture.minFilter = options.minFilter !== void 0 ? options.minFilter : LinearFilter;
    }
    fromEquirectangularTexture(renderer, texture) {
      this.texture.type = texture.type;
      this.texture.format = RGBAFormat;
      this.texture.encoding = texture.encoding;
      this.texture.generateMipmaps = texture.generateMipmaps;
      this.texture.minFilter = texture.minFilter;
      this.texture.magFilter = texture.magFilter;
      const shader = {
        uniforms: {
          tEquirect: { value: null }
        },
        vertexShader: `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,
        fragmentShader: `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
      };
      const geometry = new BoxGeometry(5, 5, 5);
      const material = new ShaderMaterial({
        name: "CubemapFromEquirect",
        uniforms: cloneUniforms(shader.uniforms),
        vertexShader: shader.vertexShader,
        fragmentShader: shader.fragmentShader,
        side: BackSide,
        blending: NoBlending
      });
      material.uniforms.tEquirect.value = texture;
      const mesh = new Mesh(geometry, material);
      const currentMinFilter = texture.minFilter;
      if (texture.minFilter === LinearMipmapLinearFilter)
        texture.minFilter = LinearFilter;
      const camera3 = new CubeCamera(1, 10, this);
      camera3.update(renderer, mesh);
      texture.minFilter = currentMinFilter;
      mesh.geometry.dispose();
      mesh.material.dispose();
      return this;
    }
    clear(renderer, color, depth, stencil) {
      const currentRenderTarget = renderer.getRenderTarget();
      for (let i2 = 0; i2 < 6; i2++) {
        renderer.setRenderTarget(this, i2);
        renderer.clear(color, depth, stencil);
      }
      renderer.setRenderTarget(currentRenderTarget);
    }
  };
  WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;
  var _vector1 = /* @__PURE__ */ new Vector3();
  var _vector2 = /* @__PURE__ */ new Vector3();
  var _normalMatrix = /* @__PURE__ */ new Matrix3();
  var Plane = class {
    constructor(normal = new Vector3(1, 0, 0), constant = 0) {
      this.normal = normal;
      this.constant = constant;
    }
    set(normal, constant) {
      this.normal.copy(normal);
      this.constant = constant;
      return this;
    }
    setComponents(x2, y2, z2, w2) {
      this.normal.set(x2, y2, z2);
      this.constant = w2;
      return this;
    }
    setFromNormalAndCoplanarPoint(normal, point) {
      this.normal.copy(normal);
      this.constant = -point.dot(this.normal);
      return this;
    }
    setFromCoplanarPoints(a2, b2, c2) {
      const normal = _vector1.subVectors(c2, b2).cross(_vector2.subVectors(a2, b2)).normalize();
      this.setFromNormalAndCoplanarPoint(normal, a2);
      return this;
    }
    copy(plane) {
      this.normal.copy(plane.normal);
      this.constant = plane.constant;
      return this;
    }
    normalize() {
      const inverseNormalLength = 1 / this.normal.length();
      this.normal.multiplyScalar(inverseNormalLength);
      this.constant *= inverseNormalLength;
      return this;
    }
    negate() {
      this.constant *= -1;
      this.normal.negate();
      return this;
    }
    distanceToPoint(point) {
      return this.normal.dot(point) + this.constant;
    }
    distanceToSphere(sphere) {
      return this.distanceToPoint(sphere.center) - sphere.radius;
    }
    projectPoint(point, target) {
      return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);
    }
    intersectLine(line, target) {
      const direction = line.delta(_vector1);
      const denominator = this.normal.dot(direction);
      if (denominator === 0) {
        if (this.distanceToPoint(line.start) === 0) {
          return target.copy(line.start);
        }
        return null;
      }
      const t = -(line.start.dot(this.normal) + this.constant) / denominator;
      if (t < 0 || t > 1) {
        return null;
      }
      return target.copy(direction).multiplyScalar(t).add(line.start);
    }
    intersectsLine(line) {
      const startSign = this.distanceToPoint(line.start);
      const endSign = this.distanceToPoint(line.end);
      return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
    }
    intersectsBox(box) {
      return box.intersectsPlane(this);
    }
    intersectsSphere(sphere) {
      return sphere.intersectsPlane(this);
    }
    coplanarPoint(target) {
      return target.copy(this.normal).multiplyScalar(-this.constant);
    }
    applyMatrix4(matrix, optionalNormalMatrix) {
      const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);
      const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);
      const normal = this.normal.applyMatrix3(normalMatrix).normalize();
      this.constant = -referencePoint.dot(normal);
      return this;
    }
    translate(offset) {
      this.constant -= offset.dot(this.normal);
      return this;
    }
    equals(plane) {
      return plane.normal.equals(this.normal) && plane.constant === this.constant;
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  Plane.prototype.isPlane = true;
  var _sphere$2 = /* @__PURE__ */ new Sphere();
  var _vector$7 = /* @__PURE__ */ new Vector3();
  var Frustum = class {
    constructor(p0 = new Plane(), p1 = new Plane(), p22 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {
      this.planes = [p0, p1, p22, p3, p4, p5];
    }
    set(p0, p1, p22, p3, p4, p5) {
      const planes = this.planes;
      planes[0].copy(p0);
      planes[1].copy(p1);
      planes[2].copy(p22);
      planes[3].copy(p3);
      planes[4].copy(p4);
      planes[5].copy(p5);
      return this;
    }
    copy(frustum) {
      const planes = this.planes;
      for (let i2 = 0; i2 < 6; i2++) {
        planes[i2].copy(frustum.planes[i2]);
      }
      return this;
    }
    setFromProjectionMatrix(m2) {
      const planes = this.planes;
      const me2 = m2.elements;
      const me0 = me2[0], me1 = me2[1], me22 = me2[2], me3 = me2[3];
      const me4 = me2[4], me5 = me2[5], me6 = me2[6], me7 = me2[7];
      const me8 = me2[8], me9 = me2[9], me10 = me2[10], me11 = me2[11];
      const me12 = me2[12], me13 = me2[13], me14 = me2[14], me15 = me2[15];
      planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
      planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
      planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
      planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
      planes[4].setComponents(me3 - me22, me7 - me6, me11 - me10, me15 - me14).normalize();
      planes[5].setComponents(me3 + me22, me7 + me6, me11 + me10, me15 + me14).normalize();
      return this;
    }
    intersectsObject(object) {
      const geometry = object.geometry;
      if (geometry.boundingSphere === null)
        geometry.computeBoundingSphere();
      _sphere$2.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);
      return this.intersectsSphere(_sphere$2);
    }
    intersectsSprite(sprite) {
      _sphere$2.center.set(0, 0, 0);
      _sphere$2.radius = 0.7071067811865476;
      _sphere$2.applyMatrix4(sprite.matrixWorld);
      return this.intersectsSphere(_sphere$2);
    }
    intersectsSphere(sphere) {
      const planes = this.planes;
      const center = sphere.center;
      const negRadius = -sphere.radius;
      for (let i2 = 0; i2 < 6; i2++) {
        const distance = planes[i2].distanceToPoint(center);
        if (distance < negRadius) {
          return false;
        }
      }
      return true;
    }
    intersectsBox(box) {
      const planes = this.planes;
      for (let i2 = 0; i2 < 6; i2++) {
        const plane = planes[i2];
        _vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;
        _vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;
        _vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;
        if (plane.distanceToPoint(_vector$7) < 0) {
          return false;
        }
      }
      return true;
    }
    containsPoint(point) {
      const planes = this.planes;
      for (let i2 = 0; i2 < 6; i2++) {
        if (planes[i2].distanceToPoint(point) < 0) {
          return false;
        }
      }
      return true;
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  function WebGLAnimation() {
    let context = null;
    let isAnimating = false;
    let animationLoop = null;
    let requestId = null;
    function onAnimationFrame(time2, frame) {
      animationLoop(time2, frame);
      requestId = context.requestAnimationFrame(onAnimationFrame);
    }
    return {
      start: function() {
        if (isAnimating === true)
          return;
        if (animationLoop === null)
          return;
        requestId = context.requestAnimationFrame(onAnimationFrame);
        isAnimating = true;
      },
      stop: function() {
        context.cancelAnimationFrame(requestId);
        isAnimating = false;
      },
      setAnimationLoop: function(callback) {
        animationLoop = callback;
      },
      setContext: function(value) {
        context = value;
      }
    };
  }
  function WebGLAttributes(gl, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    const buffers = /* @__PURE__ */ new WeakMap();
    function createBuffer(attribute, bufferType) {
      const array = attribute.array;
      const usage = attribute.usage;
      const buffer = gl.createBuffer();
      gl.bindBuffer(bufferType, buffer);
      gl.bufferData(bufferType, array, usage);
      attribute.onUploadCallback();
      let type = 5126;
      if (array instanceof Float32Array) {
        type = 5126;
      } else if (array instanceof Float64Array) {
        console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.");
      } else if (array instanceof Uint16Array) {
        if (attribute.isFloat16BufferAttribute) {
          if (isWebGL2) {
            type = 5131;
          } else {
            console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");
          }
        } else {
          type = 5123;
        }
      } else if (array instanceof Int16Array) {
        type = 5122;
      } else if (array instanceof Uint32Array) {
        type = 5125;
      } else if (array instanceof Int32Array) {
        type = 5124;
      } else if (array instanceof Int8Array) {
        type = 5120;
      } else if (array instanceof Uint8Array) {
        type = 5121;
      } else if (array instanceof Uint8ClampedArray) {
        type = 5121;
      }
      return {
        buffer,
        type,
        bytesPerElement: array.BYTES_PER_ELEMENT,
        version: attribute.version
      };
    }
    function updateBuffer(buffer, attribute, bufferType) {
      const array = attribute.array;
      const updateRange = attribute.updateRange;
      gl.bindBuffer(bufferType, buffer);
      if (updateRange.count === -1) {
        gl.bufferSubData(bufferType, 0, array);
      } else {
        if (isWebGL2) {
          gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);
        } else {
          gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));
        }
        updateRange.count = -1;
      }
    }
    function get(attribute) {
      if (attribute.isInterleavedBufferAttribute)
        attribute = attribute.data;
      return buffers.get(attribute);
    }
    function remove(attribute) {
      if (attribute.isInterleavedBufferAttribute)
        attribute = attribute.data;
      const data = buffers.get(attribute);
      if (data) {
        gl.deleteBuffer(data.buffer);
        buffers.delete(attribute);
      }
    }
    function update3(attribute, bufferType) {
      if (attribute.isGLBufferAttribute) {
        const cached = buffers.get(attribute);
        if (!cached || cached.version < attribute.version) {
          buffers.set(attribute, {
            buffer: attribute.buffer,
            type: attribute.type,
            bytesPerElement: attribute.elementSize,
            version: attribute.version
          });
        }
        return;
      }
      if (attribute.isInterleavedBufferAttribute)
        attribute = attribute.data;
      const data = buffers.get(attribute);
      if (data === void 0) {
        buffers.set(attribute, createBuffer(attribute, bufferType));
      } else if (data.version < attribute.version) {
        updateBuffer(data.buffer, attribute, bufferType);
        data.version = attribute.version;
      }
    }
    return {
      get,
      remove,
      update: update3
    };
  }
  var PlaneGeometry = class extends BufferGeometry {
    constructor(width2 = 1, height2 = 1, widthSegments = 1, heightSegments = 1) {
      super();
      this.type = "PlaneGeometry";
      this.parameters = {
        width: width2,
        height: height2,
        widthSegments,
        heightSegments
      };
      const width_half = width2 / 2;
      const height_half = height2 / 2;
      const gridX = Math.floor(widthSegments);
      const gridY = Math.floor(heightSegments);
      const gridX1 = gridX + 1;
      const gridY1 = gridY + 1;
      const segment_width = width2 / gridX;
      const segment_height = height2 / gridY;
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      for (let iy = 0; iy < gridY1; iy++) {
        const y2 = iy * segment_height - height_half;
        for (let ix = 0; ix < gridX1; ix++) {
          const x2 = ix * segment_width - width_half;
          vertices.push(x2, -y2, 0);
          normals.push(0, 0, 1);
          uvs.push(ix / gridX);
          uvs.push(1 - iy / gridY);
        }
      }
      for (let iy = 0; iy < gridY; iy++) {
        for (let ix = 0; ix < gridX; ix++) {
          const a2 = ix + gridX1 * iy;
          const b2 = ix + gridX1 * (iy + 1);
          const c2 = ix + 1 + gridX1 * (iy + 1);
          const d2 = ix + 1 + gridX1 * iy;
          indices.push(a2, b2, d2);
          indices.push(b2, c2, d2);
        }
      }
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    }
    static fromJSON(data) {
      return new PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);
    }
  };
  var alphamap_fragment = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";
  var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
  var alphatest_fragment = "#ifdef USE_ALPHATEST\n	if ( diffuseColor.a < alphaTest ) discard;\n#endif";
  var alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n	uniform float alphaTest;\n#endif";
  var aomap_fragment = "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n	#endif\n#endif";
  var aomap_pars_fragment = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";
  var begin_vertex = "vec3 transformed = vec3( position );";
  var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif";
  var bsdfs = "vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( f0, f90, dotVH );\n	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n	float D = D_GGX( alpha, dotNH );\n	return F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( specularColor, 1.0, dotVH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n	float alpha = pow2( roughness );\n	float invAlpha = 1.0 / alpha;\n	float cos2h = dotNH * dotNH;\n	float sin2h = max( 1.0 - cos2h, 0.0078125 );\n	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float D = D_Charlie( sheenRoughness, dotNH );\n	float V = V_Neubelt( dotNV, dotNL );\n	return sheenColor * ( D * V );\n}\n#endif";
  var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vUv );\n		vec2 dSTdy = dFdy( vUv );\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 ) * faceDirection;\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif";
  var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n		plane = clippingPlanes[ i ];\n		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n	}\n	#pragma unroll_loop_end\n	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n		bool clipped = true;\n		#pragma unroll_loop_start\n		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n		}\n		#pragma unroll_loop_end\n		if ( clipped ) discard;\n	#endif\n#endif";
  var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
  var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif";
  var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif";
  var color_fragment = "#if defined( USE_COLOR_ALPHA )\n	diffuseColor *= vColor;\n#elif defined( USE_COLOR )\n	diffuseColor.rgb *= vColor;\n#endif";
  var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR )\n	varying vec3 vColor;\n#endif";
  var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	varying vec3 vColor;\n#endif";
  var color_vertex = "#if defined( USE_COLOR_ALPHA )\n	vColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif";
  var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n	vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n	return dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}";
  var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_maxMipLevel 8.0\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_maxTileSize 256.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		float texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n		vec2 uv = getUV( direction, face ) * ( faceSize - 1.0 ) + 0.5;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		if ( mipInt < cubeUV_maxMipLevel ) {\n			uv.y += 2.0 * cubeUV_maxTileSize;\n		}\n		uv.y += filterInt * 2.0 * cubeUV_minTileSize;\n		uv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n		uv *= texelSize;\n		return texture2D( envMap, uv ).rgb;\n	}\n	#define r0 1.0\n	#define v0 0.339\n	#define m0 - 2.0\n	#define r1 0.8\n	#define v1 0.276\n	#define m1 - 1.0\n	#define r4 0.4\n	#define v4 0.046\n	#define m4 2.0\n	#define r5 0.305\n	#define v5 0.016\n	#define m5 3.0\n	#define r6 0.21\n	#define v6 0.0038\n	#define m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= r1 ) {\n			mip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n		} else if ( roughness >= r4 ) {\n			mip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n		} else if ( roughness >= r5 ) {\n			mip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n		} else if ( roughness >= r6 ) {\n			mip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif";
  var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n	mat3 m = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n	transformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif";
  var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif";
  var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";
  var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vUv );\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
  var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif";
  var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
  var encodings_pars_fragment = "vec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";
  var envmap_fragment = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif";
  var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif";
  var envmap_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif";
  var envmap_pars_vertex = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif";
  var envmap_vertex = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif";
  var fog_vertex = "#ifdef USE_FOG\n	vFogDepth = - mvPosition.z;\n#endif";
  var fog_pars_vertex = "#ifdef USE_FOG\n	varying float vFogDepth;\n#endif";
  var fog_fragment = "#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
  var fog_pars_fragment = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float vFogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";
  var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return vec3( texture2D( gradientMap, coord ).r );\n	#else\n		return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n	#endif\n}";
  var lightmap_fragment = "#ifdef USE_LIGHTMAP\n	vec4 lightMapTexel = texture2D( lightMap, vUv2 );\n	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		lightMapIrradiance *= PI;\n	#endif\n	reflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";
  var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";
  var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n	vLightBack = vec3( 0.0 );\n	vIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n	vIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n	vIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		getPointLightInfo( pointLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		getSpotLightInfo( spotLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		getDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n		vIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n		#ifdef DOUBLE_SIDED\n			vIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif";
  var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	return irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n		if ( cutoffDistance > 0.0 ) {\n			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n		}\n		return distanceFalloff;\n	#else\n		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n		}\n		return 1.0;\n	#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n	return smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n		light.color = directionalLight.color;\n		light.direction = directionalLight.direction;\n		light.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n		vec3 lVector = pointLight.position - geometry.position;\n		light.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		light.color = pointLight.color;\n		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n		light.visible = ( light.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n		vec3 lVector = spotLight.position - geometry.position;\n		light.direction = normalize( lVector );\n		float angleCos = dot( light.direction, spotLight.direction );\n		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n		if ( spotAttenuation > 0.0 ) {\n			float lightDistance = length( lVector );\n			light.color = spotLight.color * spotAttenuation;\n			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n			light.visible = ( light.color != vec3( 0.0 ) );\n		} else {\n			light.color = vec3( 0.0 );\n			light.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n		float dotNL = dot( normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		return irradiance;\n	}\n#endif";
  var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP )\n	#ifdef ENVMAP_MODE_REFRACTION\n		uniform float refractionRatio;\n	#endif\n	vec3 getIBLIrradiance( const in vec3 normal ) {\n		#if defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n			return PI * envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n		#if defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 reflectVec;\n			#ifdef ENVMAP_MODE_REFLECTION\n				reflectVec = reflect( - viewDir, normal );\n				reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n			#else\n				reflectVec = refract( - viewDir, normal, refractionRatio );\n			#endif\n			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n			return envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n#endif";
  var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
  var lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )	(0)";
  var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
  var lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )	(0)";
  var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n	#ifdef SPECULAR\n		float specularIntensityFactor = specularIntensity;\n		vec3 specularColorFactor = specularColor;\n		#ifdef USE_SPECULARINTENSITYMAP\n			specularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n		#endif\n		#ifdef USE_SPECULARCOLORMAP\n			specularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n		#endif\n		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n	#else\n		float specularIntensityFactor = 1.0;\n		vec3 specularColorFactor = vec3( 1.0 );\n		material.specularF90 = 1.0;\n	#endif\n	material.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n	material.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	material.clearcoatF0 = vec3( 0.04 );\n	material.clearcoatF90 = 1.0;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheenColor;\n	#ifdef USE_SHEENCOLORMAP\n		material.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n	#endif\n	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n	#ifdef USE_SHEENROUGHNESSMAP\n		material.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n	#endif\n#endif";
  var lights_physical_pars_fragment = "struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float roughness;\n	vec3 specularColor;\n	float specularF90;\n	#ifdef USE_CLEARCOAT\n		float clearcoat;\n		float clearcoatRoughness;\n		vec3 clearcoatF0;\n		float clearcoatF90;\n	#endif\n	#ifdef USE_SHEEN\n		vec3 sheenColor;\n		float sheenRoughness;\n	#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float r2 = roughness * roughness;\n	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n	return saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n	return fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	return specularColor * fab.x + specularF90 * fab.y;\n}\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	vec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\n	float Ess = fab.x + fab.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometry.normal;\n		vec3 viewDir = geometry.viewDir;\n		vec3 position = geometry.position;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.roughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifdef USE_CLEARCOAT\n		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = dotNLcc * directLight.color;\n		clearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef USE_CLEARCOAT\n		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n	#endif\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n	vec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n	reflectedLight.indirectSpecular += radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
  var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n	geometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointLightInfo( pointLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotLightInfo( spotLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalLightInfo( directionalLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
  var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vUv2 );\n		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			lightMapIrradiance *= PI;\n		#endif\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getIBLIrradiance( geometry.normal );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n	#ifdef USE_CLEARCOAT\n		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n	#endif\n#endif";
  var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";
  var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
  var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
  var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n		varying float vIsPerspective;\n	#else\n		uniform float logDepthBufFC;\n	#endif\n#endif";
  var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n	#else\n		if ( isPerspectiveMatrix( projectionMatrix ) ) {\n			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n			gl_Position.z *= gl_Position.w;\n		}\n	#endif\n#endif";
  var map_fragment = "#ifdef USE_MAP\n	vec4 sampledDiffuseColor = texture2D( map, vUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n	#endif\n	diffuseColor *= sampledDiffuseColor;\n#endif";
  var map_pars_fragment = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";
  var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n	diffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
  var map_particle_pars_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	uniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
  var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vUv );\n	metalnessFactor *= texelMetalness.b;\n#endif";
  var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";
  var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];\n		}\n	#else\n		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n	#endif\n#endif";
  var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n	uniform float morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n		uniform sampler2DArray morphTargetsTexture;\n		uniform vec2 morphTargetsTextureSize;\n		vec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {\n			float texelIndex = float( vertexIndex * stride + offset );\n			float y = floor( texelIndex / morphTargetsTextureSize.x );\n			float x = texelIndex - y * morphTargetsTextureSize.x;\n			vec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\n			return texture( morphTargetsTexture, morphUV ).xyz;\n		}\n	#else\n		#ifndef USE_MORPHNORMALS\n			uniform float morphTargetInfluences[ 8 ];\n		#else\n			uniform float morphTargetInfluences[ 4 ];\n		#endif\n	#endif\n#endif";
  var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			#ifndef USE_MORPHNORMALS\n				if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];\n			#else\n				if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];\n			#endif\n		}\n	#else\n		transformed += morphTarget0 * morphTargetInfluences[ 0 ];\n		transformed += morphTarget1 * morphTargetInfluences[ 1 ];\n		transformed += morphTarget2 * morphTargetInfluences[ 2 ];\n		transformed += morphTarget3 * morphTargetInfluences[ 3 ];\n		#ifndef USE_MORPHNORMALS\n			transformed += morphTarget4 * morphTargetInfluences[ 4 ];\n			transformed += morphTarget5 * morphTargetInfluences[ 5 ];\n			transformed += morphTarget6 * morphTargetInfluences[ 6 ];\n			transformed += morphTarget7 * morphTargetInfluences[ 7 ];\n		#endif\n	#endif\n#endif";
  var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	#ifdef USE_TANGENT\n		vec3 tangent = normalize( vTangent );\n		vec3 bitangent = normalize( vBitangent );\n		#ifdef DOUBLE_SIDED\n			tangent = tangent * faceDirection;\n			bitangent = bitangent * faceDirection;\n		#endif\n		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n			mat3 vTBN = mat3( tangent, bitangent, normal );\n		#endif\n	#endif\n#endif\nvec3 geometryNormal = normal;";
  var normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	#ifdef USE_TANGENT\n		normal = normalize( vTBN * mapN );\n	#else\n		normal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n	#endif\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";
  var normal_pars_fragment = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
  var normal_pars_vertex = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
  var normal_vertex = "#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif";
  var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n		vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n		vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n		vec2 st0 = dFdx( vUv.st );\n		vec2 st1 = dFdy( vUv.st );\n		vec3 N = surf_norm;\n		vec3 q1perp = cross( q1, N );\n		vec3 q0perp = cross( N, q0 );\n		vec3 T = q1perp * st0.x + q0perp * st1.x;\n		vec3 B = q1perp * st0.y + q0perp * st1.y;\n		float det = max( dot( T, T ), dot( B, B ) );\n		float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n		return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n	}\n#endif";
  var clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal = geometryNormal;\n#endif";
  var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	#ifdef USE_TANGENT\n		clearcoatNormal = normalize( vTBN * clearcoatMapN );\n	#else\n		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n	#endif\n#endif";
  var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif";
  var output_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";
  var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n	return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";
  var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif";
  var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
  var dithering_fragment = "#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
  var dithering_pars_fragment = "#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif";
  var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vUv );\n	roughnessFactor *= texelRoughness.g;\n#endif";
  var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";
  var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n		bool inFrustum = all( inFrustumVec );\n		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n		bool frustumTest = all( frustumTestVec );\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;\n		vec3 bd3D = normalize( lightToPosition );\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif";
  var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif";
  var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		vec4 shadowWorldPosition;\n	#endif\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n#endif";
  var shadowmask_pars_fragment = "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}";
  var skinbase_vertex = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
  var skinning_pars_vertex = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	#ifdef BONE_TEXTURE\n		uniform highp sampler2D boneTexture;\n		uniform int boneTextureSize;\n		mat4 getBoneMatrix( const in float i ) {\n			float j = i * 4.0;\n			float x = mod( j, float( boneTextureSize ) );\n			float y = floor( j / float( boneTextureSize ) );\n			float dx = 1.0 / float( boneTextureSize );\n			float dy = 1.0 / float( boneTextureSize );\n			y = dy * ( y + 0.5 );\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n			mat4 bone = mat4( v1, v2, v3, v4 );\n			return bone;\n		}\n	#else\n		uniform mat4 boneMatrices[ MAX_BONES ];\n		mat4 getBoneMatrix( const in float i ) {\n			mat4 bone = boneMatrices[ int(i) ];\n			return bone;\n		}\n	#endif\n#endif";
  var skinning_vertex = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
  var skinnormal_vertex = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif";
  var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";
  var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";
  var tonemapping_fragment = "#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
  var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
  var transmission_fragment = "#ifdef USE_TRANSMISSION\n	float transmissionAlpha = 1.0;\n	float transmissionFactor = transmission;\n	float thicknessFactor = thickness;\n	#ifdef USE_TRANSMISSIONMAP\n		transmissionFactor *= texture2D( transmissionMap, vUv ).r;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		thicknessFactor *= texture2D( thicknessMap, vUv ).g;\n	#endif\n	vec3 pos = vWorldPosition;\n	vec3 v = normalize( cameraPosition - pos );\n	vec3 n = inverseTransformDirection( normal, viewMatrix );\n	vec4 transmission = getIBLVolumeRefraction(\n		n, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n		pos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n		attenuationColor, attenuationDistance );\n	totalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n	transmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif";
  var transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n	uniform float transmission;\n	uniform float thickness;\n	uniform float attenuationDistance;\n	uniform vec3 attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		uniform sampler2D transmissionMap;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		uniform sampler2D thicknessMap;\n	#endif\n	uniform vec2 transmissionSamplerSize;\n	uniform sampler2D transmissionSamplerMap;\n	uniform mat4 modelMatrix;\n	uniform mat4 projectionMatrix;\n	varying vec3 vWorldPosition;\n	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n		vec3 modelScale;\n		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n		return normalize( refractionVector ) * thickness * modelScale;\n	}\n	float applyIorToRoughness( const in float roughness, const in float ior ) {\n		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n	}\n	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n		float framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n		#ifdef TEXTURE_LOD_EXT\n			return texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n		#else\n			return texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n		#endif\n	}\n	vec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n		if ( attenuationDistance == 0.0 ) {\n			return radiance;\n		} else {\n			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;\n		}\n	}\n	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n		const in vec3 attenuationColor, const in float attenuationDistance ) {\n		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n		vec3 refractedRayExit = position + transmissionRay;\n		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n		vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n		refractionCoords += 1.0;\n		refractionCoords /= 2.0;\n		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n	}\n#endif";
  var uv_pars_fragment = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n	varying vec2 vUv;\n#endif";
  var uv_pars_vertex = "#ifdef USE_UV\n	#ifdef UVS_VERTEX_ONLY\n		vec2 vUv;\n	#else\n		varying vec2 vUv;\n	#endif\n	uniform mat3 uvTransform;\n#endif";
  var uv_vertex = "#ifdef USE_UV\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";
  var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	varying vec2 vUv2;\n#endif";
  var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	attribute vec2 uv2;\n	varying vec2 vUv2;\n	uniform mat3 uv2Transform;\n#endif";
  var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";
  var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";
  var vertex$g = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
  var fragment$g = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n	gl_FragColor = texture2D( t2D, vUv );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
  var vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
  var fragment$f = "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	vec3 vReflect = vWorldDirection;\n	#include <envmap_fragment>\n	gl_FragColor = envColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
  var vertex$e = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}";
  var fragment$e = "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#endif\n}";
  var vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}";
  var fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}";
  var vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}";
  var fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
  var vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <color_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
  var fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
  var vertex$a = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinbase_vertex>\n		#include <skinnormal_vertex>\n		#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel= texture2D( lightMap, vUv2 );\n		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$9 = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n	varying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <lights_lambert_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$9 = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n	varying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <emissivemap_fragment>\n	#ifdef DOUBLE_SIDED\n		reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n	#else\n		reflectedLight.indirectDiffuse += vIndirectFront;\n	#endif\n	#include <lightmap_fragment>\n	reflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n	#ifdef DOUBLE_SIDED\n		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n	#else\n		reflectedLight.directDiffuse = vLightFront;\n	#endif\n	reflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}";
  var fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n	#else\n		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	varying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}";
  var fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	varying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n	#ifdef OPAQUE\n		gl_FragColor.a = 1.0;\n	#endif\n}";
  var vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n	varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n	vWorldPosition = worldPosition.xyz;\n#endif\n}";
  var fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n	#define IOR\n	#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n	uniform float ior;\n#endif\n#ifdef SPECULAR\n	uniform float specularIntensity;\n	uniform vec3 specularColor;\n	#ifdef USE_SPECULARINTENSITYMAP\n		uniform sampler2D specularIntensityMap;\n	#endif\n	#ifdef USE_SPECULARCOLORMAP\n		uniform sampler2D specularColorMap;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheenColor;\n	uniform float sheenRoughness;\n	#ifdef USE_SHEENCOLORMAP\n		uniform sampler2D sheenColorMap;\n	#endif\n	#ifdef USE_SHEENROUGHNESSMAP\n		uniform sampler2D sheenRoughnessMap;\n	#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n	#include <transmission_fragment>\n	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n	#ifdef USE_SHEEN\n		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n	#endif\n	#ifdef USE_CLEARCOAT\n		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n	#endif\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}";
  var fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
  var vertex$2 = "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}";
  var vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n	vec2 scale;\n	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
  var fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}";
  var ShaderChunk = {
    alphamap_fragment,
    alphamap_pars_fragment,
    alphatest_fragment,
    alphatest_pars_fragment,
    aomap_fragment,
    aomap_pars_fragment,
    begin_vertex,
    beginnormal_vertex,
    bsdfs,
    bumpmap_pars_fragment,
    clipping_planes_fragment,
    clipping_planes_pars_fragment,
    clipping_planes_pars_vertex,
    clipping_planes_vertex,
    color_fragment,
    color_pars_fragment,
    color_pars_vertex,
    color_vertex,
    common,
    cube_uv_reflection_fragment,
    defaultnormal_vertex,
    displacementmap_pars_vertex,
    displacementmap_vertex,
    emissivemap_fragment,
    emissivemap_pars_fragment,
    encodings_fragment,
    encodings_pars_fragment,
    envmap_fragment,
    envmap_common_pars_fragment,
    envmap_pars_fragment,
    envmap_pars_vertex,
    envmap_physical_pars_fragment,
    envmap_vertex,
    fog_vertex,
    fog_pars_vertex,
    fog_fragment,
    fog_pars_fragment,
    gradientmap_pars_fragment,
    lightmap_fragment,
    lightmap_pars_fragment,
    lights_lambert_vertex,
    lights_pars_begin,
    lights_toon_fragment,
    lights_toon_pars_fragment,
    lights_phong_fragment,
    lights_phong_pars_fragment,
    lights_physical_fragment,
    lights_physical_pars_fragment,
    lights_fragment_begin,
    lights_fragment_maps,
    lights_fragment_end,
    logdepthbuf_fragment,
    logdepthbuf_pars_fragment,
    logdepthbuf_pars_vertex,
    logdepthbuf_vertex,
    map_fragment,
    map_pars_fragment,
    map_particle_fragment,
    map_particle_pars_fragment,
    metalnessmap_fragment,
    metalnessmap_pars_fragment,
    morphnormal_vertex,
    morphtarget_pars_vertex,
    morphtarget_vertex,
    normal_fragment_begin,
    normal_fragment_maps,
    normal_pars_fragment,
    normal_pars_vertex,
    normal_vertex,
    normalmap_pars_fragment,
    clearcoat_normal_fragment_begin,
    clearcoat_normal_fragment_maps,
    clearcoat_pars_fragment,
    output_fragment,
    packing,
    premultiplied_alpha_fragment,
    project_vertex,
    dithering_fragment,
    dithering_pars_fragment,
    roughnessmap_fragment,
    roughnessmap_pars_fragment,
    shadowmap_pars_fragment,
    shadowmap_pars_vertex,
    shadowmap_vertex,
    shadowmask_pars_fragment,
    skinbase_vertex,
    skinning_pars_vertex,
    skinning_vertex,
    skinnormal_vertex,
    specularmap_fragment,
    specularmap_pars_fragment,
    tonemapping_fragment,
    tonemapping_pars_fragment,
    transmission_fragment,
    transmission_pars_fragment,
    uv_pars_fragment,
    uv_pars_vertex,
    uv_vertex,
    uv2_pars_fragment,
    uv2_pars_vertex,
    uv2_vertex,
    worldpos_vertex,
    background_vert: vertex$g,
    background_frag: fragment$g,
    cube_vert: vertex$f,
    cube_frag: fragment$f,
    depth_vert: vertex$e,
    depth_frag: fragment$e,
    distanceRGBA_vert: vertex$d,
    distanceRGBA_frag: fragment$d,
    equirect_vert: vertex$c,
    equirect_frag: fragment$c,
    linedashed_vert: vertex$b,
    linedashed_frag: fragment$b,
    meshbasic_vert: vertex$a,
    meshbasic_frag: fragment$a,
    meshlambert_vert: vertex$9,
    meshlambert_frag: fragment$9,
    meshmatcap_vert: vertex$8,
    meshmatcap_frag: fragment$8,
    meshnormal_vert: vertex$7,
    meshnormal_frag: fragment$7,
    meshphong_vert: vertex$6,
    meshphong_frag: fragment$6,
    meshphysical_vert: vertex$5,
    meshphysical_frag: fragment$5,
    meshtoon_vert: vertex$4,
    meshtoon_frag: fragment$4,
    points_vert: vertex$3,
    points_frag: fragment$3,
    shadow_vert: vertex$2,
    shadow_frag: fragment$2,
    sprite_vert: vertex$1,
    sprite_frag: fragment$1
  };
  var UniformsLib = {
    common: {
      diffuse: { value: new Color(16777215) },
      opacity: { value: 1 },
      map: { value: null },
      uvTransform: { value: new Matrix3() },
      uv2Transform: { value: new Matrix3() },
      alphaMap: { value: null },
      alphaTest: { value: 0 }
    },
    specularmap: {
      specularMap: { value: null }
    },
    envmap: {
      envMap: { value: null },
      flipEnvMap: { value: -1 },
      reflectivity: { value: 1 },
      ior: { value: 1.5 },
      refractionRatio: { value: 0.98 }
    },
    aomap: {
      aoMap: { value: null },
      aoMapIntensity: { value: 1 }
    },
    lightmap: {
      lightMap: { value: null },
      lightMapIntensity: { value: 1 }
    },
    emissivemap: {
      emissiveMap: { value: null }
    },
    bumpmap: {
      bumpMap: { value: null },
      bumpScale: { value: 1 }
    },
    normalmap: {
      normalMap: { value: null },
      normalScale: { value: new Vector2(1, 1) }
    },
    displacementmap: {
      displacementMap: { value: null },
      displacementScale: { value: 1 },
      displacementBias: { value: 0 }
    },
    roughnessmap: {
      roughnessMap: { value: null }
    },
    metalnessmap: {
      metalnessMap: { value: null }
    },
    gradientmap: {
      gradientMap: { value: null }
    },
    fog: {
      fogDensity: { value: 25e-5 },
      fogNear: { value: 1 },
      fogFar: { value: 2e3 },
      fogColor: { value: new Color(16777215) }
    },
    lights: {
      ambientLightColor: { value: [] },
      lightProbe: { value: [] },
      directionalLights: { value: [], properties: {
        direction: {},
        color: {}
      } },
      directionalLightShadows: { value: [], properties: {
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {}
      } },
      directionalShadowMap: { value: [] },
      directionalShadowMatrix: { value: [] },
      spotLights: { value: [], properties: {
        color: {},
        position: {},
        direction: {},
        distance: {},
        coneCos: {},
        penumbraCos: {},
        decay: {}
      } },
      spotLightShadows: { value: [], properties: {
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {}
      } },
      spotShadowMap: { value: [] },
      spotShadowMatrix: { value: [] },
      pointLights: { value: [], properties: {
        color: {},
        position: {},
        decay: {},
        distance: {}
      } },
      pointLightShadows: { value: [], properties: {
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {},
        shadowCameraNear: {},
        shadowCameraFar: {}
      } },
      pointShadowMap: { value: [] },
      pointShadowMatrix: { value: [] },
      hemisphereLights: { value: [], properties: {
        direction: {},
        skyColor: {},
        groundColor: {}
      } },
      rectAreaLights: { value: [], properties: {
        color: {},
        position: {},
        width: {},
        height: {}
      } },
      ltc_1: { value: null },
      ltc_2: { value: null }
    },
    points: {
      diffuse: { value: new Color(16777215) },
      opacity: { value: 1 },
      size: { value: 1 },
      scale: { value: 1 },
      map: { value: null },
      alphaMap: { value: null },
      alphaTest: { value: 0 },
      uvTransform: { value: new Matrix3() }
    },
    sprite: {
      diffuse: { value: new Color(16777215) },
      opacity: { value: 1 },
      center: { value: new Vector2(0.5, 0.5) },
      rotation: { value: 0 },
      map: { value: null },
      alphaMap: { value: null },
      alphaTest: { value: 0 },
      uvTransform: { value: new Matrix3() }
    }
  };
  var ShaderLib = {
    basic: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.specularmap,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.fog
      ]),
      vertexShader: ShaderChunk.meshbasic_vert,
      fragmentShader: ShaderChunk.meshbasic_frag
    },
    lambert: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.specularmap,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: { value: new Color(0) }
        }
      ]),
      vertexShader: ShaderChunk.meshlambert_vert,
      fragmentShader: ShaderChunk.meshlambert_frag
    },
    phong: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.specularmap,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: { value: new Color(0) },
          specular: { value: new Color(1118481) },
          shininess: { value: 30 }
        }
      ]),
      vertexShader: ShaderChunk.meshphong_vert,
      fragmentShader: ShaderChunk.meshphong_frag
    },
    standard: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.roughnessmap,
        UniformsLib.metalnessmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: { value: new Color(0) },
          roughness: { value: 1 },
          metalness: { value: 0 },
          envMapIntensity: { value: 1 }
        }
      ]),
      vertexShader: ShaderChunk.meshphysical_vert,
      fragmentShader: ShaderChunk.meshphysical_frag
    },
    toon: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.gradientmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: { value: new Color(0) }
        }
      ]),
      vertexShader: ShaderChunk.meshtoon_vert,
      fragmentShader: ShaderChunk.meshtoon_frag
    },
    matcap: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.fog,
        {
          matcap: { value: null }
        }
      ]),
      vertexShader: ShaderChunk.meshmatcap_vert,
      fragmentShader: ShaderChunk.meshmatcap_frag
    },
    points: {
      uniforms: mergeUniforms([
        UniformsLib.points,
        UniformsLib.fog
      ]),
      vertexShader: ShaderChunk.points_vert,
      fragmentShader: ShaderChunk.points_frag
    },
    dashed: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.fog,
        {
          scale: { value: 1 },
          dashSize: { value: 1 },
          totalSize: { value: 2 }
        }
      ]),
      vertexShader: ShaderChunk.linedashed_vert,
      fragmentShader: ShaderChunk.linedashed_frag
    },
    depth: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.displacementmap
      ]),
      vertexShader: ShaderChunk.depth_vert,
      fragmentShader: ShaderChunk.depth_frag
    },
    normal: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        {
          opacity: { value: 1 }
        }
      ]),
      vertexShader: ShaderChunk.meshnormal_vert,
      fragmentShader: ShaderChunk.meshnormal_frag
    },
    sprite: {
      uniforms: mergeUniforms([
        UniformsLib.sprite,
        UniformsLib.fog
      ]),
      vertexShader: ShaderChunk.sprite_vert,
      fragmentShader: ShaderChunk.sprite_frag
    },
    background: {
      uniforms: {
        uvTransform: { value: new Matrix3() },
        t2D: { value: null }
      },
      vertexShader: ShaderChunk.background_vert,
      fragmentShader: ShaderChunk.background_frag
    },
    cube: {
      uniforms: mergeUniforms([
        UniformsLib.envmap,
        {
          opacity: { value: 1 }
        }
      ]),
      vertexShader: ShaderChunk.cube_vert,
      fragmentShader: ShaderChunk.cube_frag
    },
    equirect: {
      uniforms: {
        tEquirect: { value: null }
      },
      vertexShader: ShaderChunk.equirect_vert,
      fragmentShader: ShaderChunk.equirect_frag
    },
    distanceRGBA: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.displacementmap,
        {
          referencePosition: { value: new Vector3() },
          nearDistance: { value: 1 },
          farDistance: { value: 1e3 }
        }
      ]),
      vertexShader: ShaderChunk.distanceRGBA_vert,
      fragmentShader: ShaderChunk.distanceRGBA_frag
    },
    shadow: {
      uniforms: mergeUniforms([
        UniformsLib.lights,
        UniformsLib.fog,
        {
          color: { value: new Color(0) },
          opacity: { value: 1 }
        }
      ]),
      vertexShader: ShaderChunk.shadow_vert,
      fragmentShader: ShaderChunk.shadow_frag
    }
  };
  ShaderLib.physical = {
    uniforms: mergeUniforms([
      ShaderLib.standard.uniforms,
      {
        clearcoat: { value: 0 },
        clearcoatMap: { value: null },
        clearcoatRoughness: { value: 0 },
        clearcoatRoughnessMap: { value: null },
        clearcoatNormalScale: { value: new Vector2(1, 1) },
        clearcoatNormalMap: { value: null },
        sheen: { value: 0 },
        sheenColor: { value: new Color(0) },
        sheenColorMap: { value: null },
        sheenRoughness: { value: 1 },
        sheenRoughnessMap: { value: null },
        transmission: { value: 0 },
        transmissionMap: { value: null },
        transmissionSamplerSize: { value: new Vector2() },
        transmissionSamplerMap: { value: null },
        thickness: { value: 0 },
        thicknessMap: { value: null },
        attenuationDistance: { value: 0 },
        attenuationColor: { value: new Color(0) },
        specularIntensity: { value: 1 },
        specularIntensityMap: { value: null },
        specularColor: { value: new Color(1, 1, 1) },
        specularColorMap: { value: null }
      }
    ]),
    vertexShader: ShaderChunk.meshphysical_vert,
    fragmentShader: ShaderChunk.meshphysical_frag
  };
  function WebGLBackground(renderer, cubemaps, state2, objects, alpha, premultipliedAlpha) {
    const clearColor = new Color(0);
    let clearAlpha = alpha === true ? 0 : 1;
    let planeMesh;
    let boxMesh;
    let currentBackground = null;
    let currentBackgroundVersion = 0;
    let currentTonemapping = null;
    function render(renderList, scene2) {
      let forceClear = false;
      let background = scene2.isScene === true ? scene2.background : null;
      if (background && background.isTexture) {
        background = cubemaps.get(background);
      }
      const xr = renderer.xr;
      const session = xr.getSession && xr.getSession();
      if (session && session.environmentBlendMode === "additive") {
        background = null;
      }
      if (background === null) {
        setClear(clearColor, clearAlpha);
      } else if (background && background.isColor) {
        setClear(background, 1);
        forceClear = true;
      }
      if (renderer.autoClear || forceClear) {
        renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
      }
      if (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {
        if (boxMesh === void 0) {
          boxMesh = new Mesh(new BoxGeometry(1, 1, 1), new ShaderMaterial({
            name: "BackgroundCubeMaterial",
            uniforms: cloneUniforms(ShaderLib.cube.uniforms),
            vertexShader: ShaderLib.cube.vertexShader,
            fragmentShader: ShaderLib.cube.fragmentShader,
            side: BackSide,
            depthTest: false,
            depthWrite: false,
            fog: false
          }));
          boxMesh.geometry.deleteAttribute("normal");
          boxMesh.geometry.deleteAttribute("uv");
          boxMesh.onBeforeRender = function(renderer2, scene3, camera3) {
            this.matrixWorld.copyPosition(camera3.matrixWorld);
          };
          Object.defineProperty(boxMesh.material, "envMap", {
            get: function() {
              return this.uniforms.envMap.value;
            }
          });
          objects.update(boxMesh);
        }
        boxMesh.material.uniforms.envMap.value = background;
        boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;
        if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
          boxMesh.material.needsUpdate = true;
          currentBackground = background;
          currentBackgroundVersion = background.version;
          currentTonemapping = renderer.toneMapping;
        }
        renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
      } else if (background && background.isTexture) {
        if (planeMesh === void 0) {
          planeMesh = new Mesh(new PlaneGeometry(2, 2), new ShaderMaterial({
            name: "BackgroundMaterial",
            uniforms: cloneUniforms(ShaderLib.background.uniforms),
            vertexShader: ShaderLib.background.vertexShader,
            fragmentShader: ShaderLib.background.fragmentShader,
            side: FrontSide,
            depthTest: false,
            depthWrite: false,
            fog: false
          }));
          planeMesh.geometry.deleteAttribute("normal");
          Object.defineProperty(planeMesh.material, "map", {
            get: function() {
              return this.uniforms.t2D.value;
            }
          });
          objects.update(planeMesh);
        }
        planeMesh.material.uniforms.t2D.value = background;
        if (background.matrixAutoUpdate === true) {
          background.updateMatrix();
        }
        planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);
        if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
          planeMesh.material.needsUpdate = true;
          currentBackground = background;
          currentBackgroundVersion = background.version;
          currentTonemapping = renderer.toneMapping;
        }
        renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
      }
    }
    function setClear(color, alpha2) {
      state2.buffers.color.setClear(color.r, color.g, color.b, alpha2, premultipliedAlpha);
    }
    return {
      getClearColor: function() {
        return clearColor;
      },
      setClearColor: function(color, alpha2 = 1) {
        clearColor.set(color);
        clearAlpha = alpha2;
        setClear(clearColor, clearAlpha);
      },
      getClearAlpha: function() {
        return clearAlpha;
      },
      setClearAlpha: function(alpha2) {
        clearAlpha = alpha2;
        setClear(clearColor, clearAlpha);
      },
      render
    };
  }
  function WebGLBindingStates(gl, extensions, attributes, capabilities) {
    const maxVertexAttributes = gl.getParameter(34921);
    const extension = capabilities.isWebGL2 ? null : extensions.get("OES_vertex_array_object");
    const vaoAvailable = capabilities.isWebGL2 || extension !== null;
    const bindingStates = {};
    const defaultState = createBindingState(null);
    let currentState = defaultState;
    function setup(object, material, program, geometry, index) {
      let updateBuffers = false;
      if (vaoAvailable) {
        const state2 = getBindingState(geometry, program, material);
        if (currentState !== state2) {
          currentState = state2;
          bindVertexArrayObject(currentState.object);
        }
        updateBuffers = needsUpdate(geometry, index);
        if (updateBuffers)
          saveCache(geometry, index);
      } else {
        const wireframe = material.wireframe === true;
        if (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {
          currentState.geometry = geometry.id;
          currentState.program = program.id;
          currentState.wireframe = wireframe;
          updateBuffers = true;
        }
      }
      if (object.isInstancedMesh === true) {
        updateBuffers = true;
      }
      if (index !== null) {
        attributes.update(index, 34963);
      }
      if (updateBuffers) {
        setupVertexAttributes(object, material, program, geometry);
        if (index !== null) {
          gl.bindBuffer(34963, attributes.get(index).buffer);
        }
      }
    }
    function createVertexArrayObject() {
      if (capabilities.isWebGL2)
        return gl.createVertexArray();
      return extension.createVertexArrayOES();
    }
    function bindVertexArrayObject(vao) {
      if (capabilities.isWebGL2)
        return gl.bindVertexArray(vao);
      return extension.bindVertexArrayOES(vao);
    }
    function deleteVertexArrayObject(vao) {
      if (capabilities.isWebGL2)
        return gl.deleteVertexArray(vao);
      return extension.deleteVertexArrayOES(vao);
    }
    function getBindingState(geometry, program, material) {
      const wireframe = material.wireframe === true;
      let programMap = bindingStates[geometry.id];
      if (programMap === void 0) {
        programMap = {};
        bindingStates[geometry.id] = programMap;
      }
      let stateMap = programMap[program.id];
      if (stateMap === void 0) {
        stateMap = {};
        programMap[program.id] = stateMap;
      }
      let state2 = stateMap[wireframe];
      if (state2 === void 0) {
        state2 = createBindingState(createVertexArrayObject());
        stateMap[wireframe] = state2;
      }
      return state2;
    }
    function createBindingState(vao) {
      const newAttributes = [];
      const enabledAttributes = [];
      const attributeDivisors = [];
      for (let i2 = 0; i2 < maxVertexAttributes; i2++) {
        newAttributes[i2] = 0;
        enabledAttributes[i2] = 0;
        attributeDivisors[i2] = 0;
      }
      return {
        geometry: null,
        program: null,
        wireframe: false,
        newAttributes,
        enabledAttributes,
        attributeDivisors,
        object: vao,
        attributes: {},
        index: null
      };
    }
    function needsUpdate(geometry, index) {
      const cachedAttributes = currentState.attributes;
      const geometryAttributes = geometry.attributes;
      let attributesNum = 0;
      for (const key in geometryAttributes) {
        const cachedAttribute = cachedAttributes[key];
        const geometryAttribute = geometryAttributes[key];
        if (cachedAttribute === void 0)
          return true;
        if (cachedAttribute.attribute !== geometryAttribute)
          return true;
        if (cachedAttribute.data !== geometryAttribute.data)
          return true;
        attributesNum++;
      }
      if (currentState.attributesNum !== attributesNum)
        return true;
      if (currentState.index !== index)
        return true;
      return false;
    }
    function saveCache(geometry, index) {
      const cache = {};
      const attributes2 = geometry.attributes;
      let attributesNum = 0;
      for (const key in attributes2) {
        const attribute = attributes2[key];
        const data = {};
        data.attribute = attribute;
        if (attribute.data) {
          data.data = attribute.data;
        }
        cache[key] = data;
        attributesNum++;
      }
      currentState.attributes = cache;
      currentState.attributesNum = attributesNum;
      currentState.index = index;
    }
    function initAttributes() {
      const newAttributes = currentState.newAttributes;
      for (let i2 = 0, il = newAttributes.length; i2 < il; i2++) {
        newAttributes[i2] = 0;
      }
    }
    function enableAttribute(attribute) {
      enableAttributeAndDivisor(attribute, 0);
    }
    function enableAttributeAndDivisor(attribute, meshPerAttribute) {
      const newAttributes = currentState.newAttributes;
      const enabledAttributes = currentState.enabledAttributes;
      const attributeDivisors = currentState.attributeDivisors;
      newAttributes[attribute] = 1;
      if (enabledAttributes[attribute] === 0) {
        gl.enableVertexAttribArray(attribute);
        enabledAttributes[attribute] = 1;
      }
      if (attributeDivisors[attribute] !== meshPerAttribute) {
        const extension2 = capabilities.isWebGL2 ? gl : extensions.get("ANGLE_instanced_arrays");
        extension2[capabilities.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](attribute, meshPerAttribute);
        attributeDivisors[attribute] = meshPerAttribute;
      }
    }
    function disableUnusedAttributes() {
      const newAttributes = currentState.newAttributes;
      const enabledAttributes = currentState.enabledAttributes;
      for (let i2 = 0, il = enabledAttributes.length; i2 < il; i2++) {
        if (enabledAttributes[i2] !== newAttributes[i2]) {
          gl.disableVertexAttribArray(i2);
          enabledAttributes[i2] = 0;
        }
      }
    }
    function vertexAttribPointer(index, size2, type, normalized, stride, offset) {
      if (capabilities.isWebGL2 === true && (type === 5124 || type === 5125)) {
        gl.vertexAttribIPointer(index, size2, type, stride, offset);
      } else {
        gl.vertexAttribPointer(index, size2, type, normalized, stride, offset);
      }
    }
    function setupVertexAttributes(object, material, program, geometry) {
      if (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {
        if (extensions.get("ANGLE_instanced_arrays") === null)
          return;
      }
      initAttributes();
      const geometryAttributes = geometry.attributes;
      const programAttributes = program.getAttributes();
      const materialDefaultAttributeValues = material.defaultAttributeValues;
      for (const name in programAttributes) {
        const programAttribute = programAttributes[name];
        if (programAttribute.location >= 0) {
          let geometryAttribute = geometryAttributes[name];
          if (geometryAttribute === void 0) {
            if (name === "instanceMatrix" && object.instanceMatrix)
              geometryAttribute = object.instanceMatrix;
            if (name === "instanceColor" && object.instanceColor)
              geometryAttribute = object.instanceColor;
          }
          if (geometryAttribute !== void 0) {
            const normalized = geometryAttribute.normalized;
            const size2 = geometryAttribute.itemSize;
            const attribute = attributes.get(geometryAttribute);
            if (attribute === void 0)
              continue;
            const buffer = attribute.buffer;
            const type = attribute.type;
            const bytesPerElement = attribute.bytesPerElement;
            if (geometryAttribute.isInterleavedBufferAttribute) {
              const data = geometryAttribute.data;
              const stride = data.stride;
              const offset = geometryAttribute.offset;
              if (data && data.isInstancedInterleavedBuffer) {
                for (let i2 = 0; i2 < programAttribute.locationSize; i2++) {
                  enableAttributeAndDivisor(programAttribute.location + i2, data.meshPerAttribute);
                }
                if (object.isInstancedMesh !== true && geometry._maxInstanceCount === void 0) {
                  geometry._maxInstanceCount = data.meshPerAttribute * data.count;
                }
              } else {
                for (let i2 = 0; i2 < programAttribute.locationSize; i2++) {
                  enableAttribute(programAttribute.location + i2);
                }
              }
              gl.bindBuffer(34962, buffer);
              for (let i2 = 0; i2 < programAttribute.locationSize; i2++) {
                vertexAttribPointer(programAttribute.location + i2, size2 / programAttribute.locationSize, type, normalized, stride * bytesPerElement, (offset + size2 / programAttribute.locationSize * i2) * bytesPerElement);
              }
            } else {
              if (geometryAttribute.isInstancedBufferAttribute) {
                for (let i2 = 0; i2 < programAttribute.locationSize; i2++) {
                  enableAttributeAndDivisor(programAttribute.location + i2, geometryAttribute.meshPerAttribute);
                }
                if (object.isInstancedMesh !== true && geometry._maxInstanceCount === void 0) {
                  geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
                }
              } else {
                for (let i2 = 0; i2 < programAttribute.locationSize; i2++) {
                  enableAttribute(programAttribute.location + i2);
                }
              }
              gl.bindBuffer(34962, buffer);
              for (let i2 = 0; i2 < programAttribute.locationSize; i2++) {
                vertexAttribPointer(programAttribute.location + i2, size2 / programAttribute.locationSize, type, normalized, size2 * bytesPerElement, size2 / programAttribute.locationSize * i2 * bytesPerElement);
              }
            }
          } else if (materialDefaultAttributeValues !== void 0) {
            const value = materialDefaultAttributeValues[name];
            if (value !== void 0) {
              switch (value.length) {
                case 2:
                  gl.vertexAttrib2fv(programAttribute.location, value);
                  break;
                case 3:
                  gl.vertexAttrib3fv(programAttribute.location, value);
                  break;
                case 4:
                  gl.vertexAttrib4fv(programAttribute.location, value);
                  break;
                default:
                  gl.vertexAttrib1fv(programAttribute.location, value);
              }
            }
          }
        }
      }
      disableUnusedAttributes();
    }
    function dispose() {
      reset();
      for (const geometryId in bindingStates) {
        const programMap = bindingStates[geometryId];
        for (const programId in programMap) {
          const stateMap = programMap[programId];
          for (const wireframe in stateMap) {
            deleteVertexArrayObject(stateMap[wireframe].object);
            delete stateMap[wireframe];
          }
          delete programMap[programId];
        }
        delete bindingStates[geometryId];
      }
    }
    function releaseStatesOfGeometry(geometry) {
      if (bindingStates[geometry.id] === void 0)
        return;
      const programMap = bindingStates[geometry.id];
      for (const programId in programMap) {
        const stateMap = programMap[programId];
        for (const wireframe in stateMap) {
          deleteVertexArrayObject(stateMap[wireframe].object);
          delete stateMap[wireframe];
        }
        delete programMap[programId];
      }
      delete bindingStates[geometry.id];
    }
    function releaseStatesOfProgram(program) {
      for (const geometryId in bindingStates) {
        const programMap = bindingStates[geometryId];
        if (programMap[program.id] === void 0)
          continue;
        const stateMap = programMap[program.id];
        for (const wireframe in stateMap) {
          deleteVertexArrayObject(stateMap[wireframe].object);
          delete stateMap[wireframe];
        }
        delete programMap[program.id];
      }
    }
    function reset() {
      resetDefaultState();
      if (currentState === defaultState)
        return;
      currentState = defaultState;
      bindVertexArrayObject(currentState.object);
    }
    function resetDefaultState() {
      defaultState.geometry = null;
      defaultState.program = null;
      defaultState.wireframe = false;
    }
    return {
      setup,
      reset,
      resetDefaultState,
      dispose,
      releaseStatesOfGeometry,
      releaseStatesOfProgram,
      initAttributes,
      enableAttribute,
      disableUnusedAttributes
    };
  }
  function WebGLBufferRenderer(gl, extensions, info, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    let mode;
    function setMode(value) {
      mode = value;
    }
    function render(start2, count) {
      gl.drawArrays(mode, start2, count);
      info.update(count, mode, 1);
    }
    function renderInstances(start2, count, primcount) {
      if (primcount === 0)
        return;
      let extension, methodName;
      if (isWebGL2) {
        extension = gl;
        methodName = "drawArraysInstanced";
      } else {
        extension = extensions.get("ANGLE_instanced_arrays");
        methodName = "drawArraysInstancedANGLE";
        if (extension === null) {
          console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
          return;
        }
      }
      extension[methodName](mode, start2, count, primcount);
      info.update(count, mode, primcount);
    }
    this.setMode = setMode;
    this.render = render;
    this.renderInstances = renderInstances;
  }
  function WebGLCapabilities(gl, extensions, parameters) {
    let maxAnisotropy;
    function getMaxAnisotropy() {
      if (maxAnisotropy !== void 0)
        return maxAnisotropy;
      if (extensions.has("EXT_texture_filter_anisotropic") === true) {
        const extension = extensions.get("EXT_texture_filter_anisotropic");
        maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
      } else {
        maxAnisotropy = 0;
      }
      return maxAnisotropy;
    }
    function getMaxPrecision(precision2) {
      if (precision2 === "highp") {
        if (gl.getShaderPrecisionFormat(35633, 36338).precision > 0 && gl.getShaderPrecisionFormat(35632, 36338).precision > 0) {
          return "highp";
        }
        precision2 = "mediump";
      }
      if (precision2 === "mediump") {
        if (gl.getShaderPrecisionFormat(35633, 36337).precision > 0 && gl.getShaderPrecisionFormat(35632, 36337).precision > 0) {
          return "mediump";
        }
      }
      return "lowp";
    }
    const isWebGL2 = typeof WebGL2RenderingContext !== "undefined" && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== "undefined" && gl instanceof WebGL2ComputeRenderingContext;
    let precision = parameters.precision !== void 0 ? parameters.precision : "highp";
    const maxPrecision = getMaxPrecision(precision);
    if (maxPrecision !== precision) {
      console.warn("THREE.WebGLRenderer:", precision, "not supported, using", maxPrecision, "instead.");
      precision = maxPrecision;
    }
    const drawBuffers = isWebGL2 || extensions.has("WEBGL_draw_buffers");
    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
    const maxTextures = gl.getParameter(34930);
    const maxVertexTextures = gl.getParameter(35660);
    const maxTextureSize = gl.getParameter(3379);
    const maxCubemapSize = gl.getParameter(34076);
    const maxAttributes = gl.getParameter(34921);
    const maxVertexUniforms = gl.getParameter(36347);
    const maxVaryings = gl.getParameter(36348);
    const maxFragmentUniforms = gl.getParameter(36349);
    const vertexTextures = maxVertexTextures > 0;
    const floatFragmentTextures = isWebGL2 || extensions.has("OES_texture_float");
    const floatVertexTextures = vertexTextures && floatFragmentTextures;
    const maxSamples = isWebGL2 ? gl.getParameter(36183) : 0;
    return {
      isWebGL2,
      drawBuffers,
      getMaxAnisotropy,
      getMaxPrecision,
      precision,
      logarithmicDepthBuffer,
      maxTextures,
      maxVertexTextures,
      maxTextureSize,
      maxCubemapSize,
      maxAttributes,
      maxVertexUniforms,
      maxVaryings,
      maxFragmentUniforms,
      vertexTextures,
      floatFragmentTextures,
      floatVertexTextures,
      maxSamples
    };
  }
  function WebGLClipping(properties) {
    const scope = this;
    let globalState = null, numGlobalPlanes = 0, localClippingEnabled = false, renderingShadows = false;
    const plane = new Plane(), viewNormalMatrix = new Matrix3(), uniform = { value: null, needsUpdate: false };
    this.uniform = uniform;
    this.numPlanes = 0;
    this.numIntersection = 0;
    this.init = function(planes, enableLocalClipping, camera3) {
      const enabled = planes.length !== 0 || enableLocalClipping || numGlobalPlanes !== 0 || localClippingEnabled;
      localClippingEnabled = enableLocalClipping;
      globalState = projectPlanes(planes, camera3, 0);
      numGlobalPlanes = planes.length;
      return enabled;
    };
    this.beginShadows = function() {
      renderingShadows = true;
      projectPlanes(null);
    };
    this.endShadows = function() {
      renderingShadows = false;
      resetGlobalState();
    };
    this.setState = function(material, camera3, useCache) {
      const planes = material.clippingPlanes, clipIntersection = material.clipIntersection, clipShadows = material.clipShadows;
      const materialProperties = properties.get(material);
      if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
        if (renderingShadows) {
          projectPlanes(null);
        } else {
          resetGlobalState();
        }
      } else {
        const nGlobal = renderingShadows ? 0 : numGlobalPlanes, lGlobal = nGlobal * 4;
        let dstArray = materialProperties.clippingState || null;
        uniform.value = dstArray;
        dstArray = projectPlanes(planes, camera3, lGlobal, useCache);
        for (let i2 = 0; i2 !== lGlobal; ++i2) {
          dstArray[i2] = globalState[i2];
        }
        materialProperties.clippingState = dstArray;
        this.numIntersection = clipIntersection ? this.numPlanes : 0;
        this.numPlanes += nGlobal;
      }
    };
    function resetGlobalState() {
      if (uniform.value !== globalState) {
        uniform.value = globalState;
        uniform.needsUpdate = numGlobalPlanes > 0;
      }
      scope.numPlanes = numGlobalPlanes;
      scope.numIntersection = 0;
    }
    function projectPlanes(planes, camera3, dstOffset, skipTransform) {
      const nPlanes = planes !== null ? planes.length : 0;
      let dstArray = null;
      if (nPlanes !== 0) {
        dstArray = uniform.value;
        if (skipTransform !== true || dstArray === null) {
          const flatSize = dstOffset + nPlanes * 4, viewMatrix = camera3.matrixWorldInverse;
          viewNormalMatrix.getNormalMatrix(viewMatrix);
          if (dstArray === null || dstArray.length < flatSize) {
            dstArray = new Float32Array(flatSize);
          }
          for (let i2 = 0, i4 = dstOffset; i2 !== nPlanes; ++i2, i4 += 4) {
            plane.copy(planes[i2]).applyMatrix4(viewMatrix, viewNormalMatrix);
            plane.normal.toArray(dstArray, i4);
            dstArray[i4 + 3] = plane.constant;
          }
        }
        uniform.value = dstArray;
        uniform.needsUpdate = true;
      }
      scope.numPlanes = nPlanes;
      scope.numIntersection = 0;
      return dstArray;
    }
  }
  function WebGLCubeMaps(renderer) {
    let cubemaps = /* @__PURE__ */ new WeakMap();
    function mapTextureMapping(texture, mapping) {
      if (mapping === EquirectangularReflectionMapping) {
        texture.mapping = CubeReflectionMapping;
      } else if (mapping === EquirectangularRefractionMapping) {
        texture.mapping = CubeRefractionMapping;
      }
      return texture;
    }
    function get(texture) {
      if (texture && texture.isTexture && texture.isRenderTargetTexture === false) {
        const mapping = texture.mapping;
        if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {
          if (cubemaps.has(texture)) {
            const cubemap = cubemaps.get(texture).texture;
            return mapTextureMapping(cubemap, texture.mapping);
          } else {
            const image = texture.image;
            if (image && image.height > 0) {
              const renderTarget = new WebGLCubeRenderTarget(image.height / 2);
              renderTarget.fromEquirectangularTexture(renderer, texture);
              cubemaps.set(texture, renderTarget);
              texture.addEventListener("dispose", onTextureDispose);
              return mapTextureMapping(renderTarget.texture, texture.mapping);
            } else {
              return null;
            }
          }
        }
      }
      return texture;
    }
    function onTextureDispose(event) {
      const texture = event.target;
      texture.removeEventListener("dispose", onTextureDispose);
      const cubemap = cubemaps.get(texture);
      if (cubemap !== void 0) {
        cubemaps.delete(texture);
        cubemap.dispose();
      }
    }
    function dispose() {
      cubemaps = /* @__PURE__ */ new WeakMap();
    }
    return {
      get,
      dispose
    };
  }
  var OrthographicCamera = class extends Camera {
    constructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2e3) {
      super();
      this.type = "OrthographicCamera";
      this.zoom = 1;
      this.view = null;
      this.left = left;
      this.right = right;
      this.top = top;
      this.bottom = bottom;
      this.near = near;
      this.far = far;
      this.updateProjectionMatrix();
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.left = source.left;
      this.right = source.right;
      this.top = source.top;
      this.bottom = source.bottom;
      this.near = source.near;
      this.far = source.far;
      this.zoom = source.zoom;
      this.view = source.view === null ? null : Object.assign({}, source.view);
      return this;
    }
    setViewOffset(fullWidth, fullHeight, x2, y2, width2, height2) {
      if (this.view === null) {
        this.view = {
          enabled: true,
          fullWidth: 1,
          fullHeight: 1,
          offsetX: 0,
          offsetY: 0,
          width: 1,
          height: 1
        };
      }
      this.view.enabled = true;
      this.view.fullWidth = fullWidth;
      this.view.fullHeight = fullHeight;
      this.view.offsetX = x2;
      this.view.offsetY = y2;
      this.view.width = width2;
      this.view.height = height2;
      this.updateProjectionMatrix();
    }
    clearViewOffset() {
      if (this.view !== null) {
        this.view.enabled = false;
      }
      this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
      const dx = (this.right - this.left) / (2 * this.zoom);
      const dy = (this.top - this.bottom) / (2 * this.zoom);
      const cx = (this.right + this.left) / 2;
      const cy = (this.top + this.bottom) / 2;
      let left = cx - dx;
      let right = cx + dx;
      let top = cy + dy;
      let bottom = cy - dy;
      if (this.view !== null && this.view.enabled) {
        const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
        const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
        left += scaleW * this.view.offsetX;
        right = left + scaleW * this.view.width;
        top -= scaleH * this.view.offsetY;
        bottom = top - scaleH * this.view.height;
      }
      this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);
      this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      data.object.zoom = this.zoom;
      data.object.left = this.left;
      data.object.right = this.right;
      data.object.top = this.top;
      data.object.bottom = this.bottom;
      data.object.near = this.near;
      data.object.far = this.far;
      if (this.view !== null)
        data.object.view = Object.assign({}, this.view);
      return data;
    }
  };
  OrthographicCamera.prototype.isOrthographicCamera = true;
  var RawShaderMaterial = class extends ShaderMaterial {
    constructor(parameters) {
      super(parameters);
      this.type = "RawShaderMaterial";
    }
  };
  RawShaderMaterial.prototype.isRawShaderMaterial = true;
  var LOD_MIN = 4;
  var LOD_MAX = 8;
  var SIZE_MAX = Math.pow(2, LOD_MAX);
  var EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];
  var TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
  var MAX_SAMPLES = 20;
  var _flatCamera = /* @__PURE__ */ new OrthographicCamera();
  var { _lodPlanes, _sizeLods, _sigmas } = /* @__PURE__ */ _createPlanes();
  var _clearColor = /* @__PURE__ */ new Color();
  var _oldTarget = null;
  var PHI = (1 + Math.sqrt(5)) / 2;
  var INV_PHI = 1 / PHI;
  var _axisDirections = [
    /* @__PURE__ */ new Vector3(1, 1, 1),
    /* @__PURE__ */ new Vector3(-1, 1, 1),
    /* @__PURE__ */ new Vector3(1, 1, -1),
    /* @__PURE__ */ new Vector3(-1, 1, -1),
    /* @__PURE__ */ new Vector3(0, PHI, INV_PHI),
    /* @__PURE__ */ new Vector3(0, PHI, -INV_PHI),
    /* @__PURE__ */ new Vector3(INV_PHI, 0, PHI),
    /* @__PURE__ */ new Vector3(-INV_PHI, 0, PHI),
    /* @__PURE__ */ new Vector3(PHI, INV_PHI, 0),
    /* @__PURE__ */ new Vector3(-PHI, INV_PHI, 0)
  ];
  var PMREMGenerator = class {
    constructor(renderer) {
      this._renderer = renderer;
      this._pingPongRenderTarget = null;
      this._blurMaterial = _getBlurShader(MAX_SAMPLES);
      this._equirectShader = null;
      this._cubemapShader = null;
      this._compileMaterial(this._blurMaterial);
    }
    fromScene(scene2, sigma = 0, near = 0.1, far = 100) {
      _oldTarget = this._renderer.getRenderTarget();
      const cubeUVRenderTarget = this._allocateTargets();
      this._sceneToCubeUV(scene2, near, far, cubeUVRenderTarget);
      if (sigma > 0) {
        this._blur(cubeUVRenderTarget, 0, 0, sigma);
      }
      this._applyPMREM(cubeUVRenderTarget);
      this._cleanup(cubeUVRenderTarget);
      return cubeUVRenderTarget;
    }
    fromEquirectangular(equirectangular, renderTarget = null) {
      return this._fromTexture(equirectangular, renderTarget);
    }
    fromCubemap(cubemap, renderTarget = null) {
      return this._fromTexture(cubemap, renderTarget);
    }
    compileCubemapShader() {
      if (this._cubemapShader === null) {
        this._cubemapShader = _getCubemapShader();
        this._compileMaterial(this._cubemapShader);
      }
    }
    compileEquirectangularShader() {
      if (this._equirectShader === null) {
        this._equirectShader = _getEquirectShader();
        this._compileMaterial(this._equirectShader);
      }
    }
    dispose() {
      this._blurMaterial.dispose();
      if (this._pingPongRenderTarget !== null)
        this._pingPongRenderTarget.dispose();
      if (this._cubemapShader !== null)
        this._cubemapShader.dispose();
      if (this._equirectShader !== null)
        this._equirectShader.dispose();
      for (let i2 = 0; i2 < _lodPlanes.length; i2++) {
        _lodPlanes[i2].dispose();
      }
    }
    _cleanup(outputTarget) {
      this._renderer.setRenderTarget(_oldTarget);
      outputTarget.scissorTest = false;
      _setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
    }
    _fromTexture(texture, renderTarget) {
      _oldTarget = this._renderer.getRenderTarget();
      const cubeUVRenderTarget = renderTarget || this._allocateTargets(texture);
      this._textureToCubeUV(texture, cubeUVRenderTarget);
      this._applyPMREM(cubeUVRenderTarget);
      this._cleanup(cubeUVRenderTarget);
      return cubeUVRenderTarget;
    }
    _allocateTargets(texture) {
      const params = {
        magFilter: LinearFilter,
        minFilter: LinearFilter,
        generateMipmaps: false,
        type: HalfFloatType,
        format: RGBAFormat,
        encoding: LinearEncoding,
        depthBuffer: false
      };
      const cubeUVRenderTarget = _createRenderTarget(params);
      cubeUVRenderTarget.depthBuffer = texture ? false : true;
      if (this._pingPongRenderTarget === null) {
        this._pingPongRenderTarget = _createRenderTarget(params);
      }
      return cubeUVRenderTarget;
    }
    _compileMaterial(material) {
      const tmpMesh = new Mesh(_lodPlanes[0], material);
      this._renderer.compile(tmpMesh, _flatCamera);
    }
    _sceneToCubeUV(scene2, near, far, cubeUVRenderTarget) {
      const fov2 = 90;
      const aspect2 = 1;
      const cubeCamera = new PerspectiveCamera(fov2, aspect2, near, far);
      const upSign = [1, -1, 1, 1, 1, 1];
      const forwardSign = [1, 1, 1, -1, -1, -1];
      const renderer = this._renderer;
      const originalAutoClear = renderer.autoClear;
      const toneMapping = renderer.toneMapping;
      renderer.getClearColor(_clearColor);
      renderer.toneMapping = NoToneMapping;
      renderer.autoClear = false;
      const backgroundMaterial = new MeshBasicMaterial({
        name: "PMREM.Background",
        side: BackSide,
        depthWrite: false,
        depthTest: false
      });
      const backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);
      let useSolidColor = false;
      const background = scene2.background;
      if (background) {
        if (background.isColor) {
          backgroundMaterial.color.copy(background);
          scene2.background = null;
          useSolidColor = true;
        }
      } else {
        backgroundMaterial.color.copy(_clearColor);
        useSolidColor = true;
      }
      for (let i2 = 0; i2 < 6; i2++) {
        const col = i2 % 3;
        if (col === 0) {
          cubeCamera.up.set(0, upSign[i2], 0);
          cubeCamera.lookAt(forwardSign[i2], 0, 0);
        } else if (col === 1) {
          cubeCamera.up.set(0, 0, upSign[i2]);
          cubeCamera.lookAt(0, forwardSign[i2], 0);
        } else {
          cubeCamera.up.set(0, upSign[i2], 0);
          cubeCamera.lookAt(0, 0, forwardSign[i2]);
        }
        _setViewport(cubeUVRenderTarget, col * SIZE_MAX, i2 > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX);
        renderer.setRenderTarget(cubeUVRenderTarget);
        if (useSolidColor) {
          renderer.render(backgroundBox, cubeCamera);
        }
        renderer.render(scene2, cubeCamera);
      }
      backgroundBox.geometry.dispose();
      backgroundBox.material.dispose();
      renderer.toneMapping = toneMapping;
      renderer.autoClear = originalAutoClear;
      scene2.background = background;
    }
    _textureToCubeUV(texture, cubeUVRenderTarget) {
      const renderer = this._renderer;
      const isCubeTexture = texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping;
      if (isCubeTexture) {
        if (this._cubemapShader === null) {
          this._cubemapShader = _getCubemapShader();
        }
        this._cubemapShader.uniforms.flipEnvMap.value = texture.isRenderTargetTexture === false ? -1 : 1;
      } else {
        if (this._equirectShader === null) {
          this._equirectShader = _getEquirectShader();
        }
      }
      const material = isCubeTexture ? this._cubemapShader : this._equirectShader;
      const mesh = new Mesh(_lodPlanes[0], material);
      const uniforms = material.uniforms;
      uniforms["envMap"].value = texture;
      if (!isCubeTexture) {
        uniforms["texelSize"].value.set(1 / texture.image.width, 1 / texture.image.height);
      }
      _setViewport(cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX);
      renderer.setRenderTarget(cubeUVRenderTarget);
      renderer.render(mesh, _flatCamera);
    }
    _applyPMREM(cubeUVRenderTarget) {
      const renderer = this._renderer;
      const autoClear = renderer.autoClear;
      renderer.autoClear = false;
      for (let i2 = 1; i2 < TOTAL_LODS; i2++) {
        const sigma = Math.sqrt(_sigmas[i2] * _sigmas[i2] - _sigmas[i2 - 1] * _sigmas[i2 - 1]);
        const poleAxis = _axisDirections[(i2 - 1) % _axisDirections.length];
        this._blur(cubeUVRenderTarget, i2 - 1, i2, sigma, poleAxis);
      }
      renderer.autoClear = autoClear;
    }
    _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
      const pingPongRenderTarget = this._pingPongRenderTarget;
      this._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, "latitudinal", poleAxis);
      this._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, "longitudinal", poleAxis);
    }
    _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {
      const renderer = this._renderer;
      const blurMaterial = this._blurMaterial;
      if (direction !== "latitudinal" && direction !== "longitudinal") {
        console.error("blur direction must be either latitudinal or longitudinal!");
      }
      const STANDARD_DEVIATIONS = 3;
      const blurMesh = new Mesh(_lodPlanes[lodOut], blurMaterial);
      const blurUniforms = blurMaterial.uniforms;
      const pixels = _sizeLods[lodIn] - 1;
      const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);
      const sigmaPixels = sigmaRadians / radiansPerPixel;
      const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;
      if (samples > MAX_SAMPLES) {
        console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);
      }
      const weights = [];
      let sum = 0;
      for (let i2 = 0; i2 < MAX_SAMPLES; ++i2) {
        const x3 = i2 / sigmaPixels;
        const weight = Math.exp(-x3 * x3 / 2);
        weights.push(weight);
        if (i2 === 0) {
          sum += weight;
        } else if (i2 < samples) {
          sum += 2 * weight;
        }
      }
      for (let i2 = 0; i2 < weights.length; i2++) {
        weights[i2] = weights[i2] / sum;
      }
      blurUniforms["envMap"].value = targetIn.texture;
      blurUniforms["samples"].value = samples;
      blurUniforms["weights"].value = weights;
      blurUniforms["latitudinal"].value = direction === "latitudinal";
      if (poleAxis) {
        blurUniforms["poleAxis"].value = poleAxis;
      }
      blurUniforms["dTheta"].value = radiansPerPixel;
      blurUniforms["mipInt"].value = LOD_MAX - lodIn;
      const outputSize = _sizeLods[lodOut];
      const x2 = 3 * Math.max(0, SIZE_MAX - 2 * outputSize);
      const y2 = (lodOut === 0 ? 0 : 2 * SIZE_MAX) + 2 * outputSize * (lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0);
      _setViewport(targetOut, x2, y2, 3 * outputSize, 2 * outputSize);
      renderer.setRenderTarget(targetOut);
      renderer.render(blurMesh, _flatCamera);
    }
  };
  function _createPlanes() {
    const _lodPlanes2 = [];
    const _sizeLods2 = [];
    const _sigmas2 = [];
    let lod = LOD_MAX;
    for (let i2 = 0; i2 < TOTAL_LODS; i2++) {
      const sizeLod = Math.pow(2, lod);
      _sizeLods2.push(sizeLod);
      let sigma = 1 / sizeLod;
      if (i2 > LOD_MAX - LOD_MIN) {
        sigma = EXTRA_LOD_SIGMA[i2 - LOD_MAX + LOD_MIN - 1];
      } else if (i2 === 0) {
        sigma = 0;
      }
      _sigmas2.push(sigma);
      const texelSize = 1 / (sizeLod - 1);
      const min = -texelSize / 2;
      const max = 1 + texelSize / 2;
      const uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];
      const cubeFaces = 6;
      const vertices = 6;
      const positionSize = 3;
      const uvSize = 2;
      const faceIndexSize = 1;
      const position = new Float32Array(positionSize * vertices * cubeFaces);
      const uv = new Float32Array(uvSize * vertices * cubeFaces);
      const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);
      for (let face = 0; face < cubeFaces; face++) {
        const x2 = face % 3 * 2 / 3 - 1;
        const y2 = face > 2 ? 0 : -1;
        const coordinates = [
          x2,
          y2,
          0,
          x2 + 2 / 3,
          y2,
          0,
          x2 + 2 / 3,
          y2 + 1,
          0,
          x2,
          y2,
          0,
          x2 + 2 / 3,
          y2 + 1,
          0,
          x2,
          y2 + 1,
          0
        ];
        position.set(coordinates, positionSize * vertices * face);
        uv.set(uv1, uvSize * vertices * face);
        const fill = [face, face, face, face, face, face];
        faceIndex.set(fill, faceIndexSize * vertices * face);
      }
      const planes = new BufferGeometry();
      planes.setAttribute("position", new BufferAttribute(position, positionSize));
      planes.setAttribute("uv", new BufferAttribute(uv, uvSize));
      planes.setAttribute("faceIndex", new BufferAttribute(faceIndex, faceIndexSize));
      _lodPlanes2.push(planes);
      if (lod > LOD_MIN) {
        lod--;
      }
    }
    return { _lodPlanes: _lodPlanes2, _sizeLods: _sizeLods2, _sigmas: _sigmas2 };
  }
  function _createRenderTarget(params) {
    const cubeUVRenderTarget = new WebGLRenderTarget(3 * SIZE_MAX, 3 * SIZE_MAX, params);
    cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
    cubeUVRenderTarget.texture.name = "PMREM.cubeUv";
    cubeUVRenderTarget.scissorTest = true;
    return cubeUVRenderTarget;
  }
  function _setViewport(target, x2, y2, width2, height2) {
    target.viewport.set(x2, y2, width2, height2);
    target.scissor.set(x2, y2, width2, height2);
  }
  function _getBlurShader(maxSamples) {
    const weights = new Float32Array(maxSamples);
    const poleAxis = new Vector3(0, 1, 0);
    const shaderMaterial = new RawShaderMaterial({
      name: "SphericalGaussianBlur",
      defines: { "n": maxSamples },
      uniforms: {
        "envMap": { value: null },
        "samples": { value: 1 },
        "weights": { value: weights },
        "latitudinal": { value: false },
        "dTheta": { value: 0 },
        "mipInt": { value: 0 },
        "poleAxis": { value: poleAxis }
      },
      vertexShader: _getCommonVertexShader(),
      fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,
      blending: NoBlending,
      depthTest: false,
      depthWrite: false
    });
    return shaderMaterial;
  }
  function _getEquirectShader() {
    const texelSize = new Vector2(1, 1);
    const shaderMaterial = new RawShaderMaterial({
      name: "EquirectangularToCubeUV",
      uniforms: {
        "envMap": { value: null },
        "texelSize": { value: texelSize }
      },
      vertexShader: _getCommonVertexShader(),
      fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform vec2 texelSize;

			#include <common>

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				vec2 f = fract( uv / texelSize - 0.5 );
				uv -= f * texelSize;
				vec3 tl = texture2D ( envMap, uv ).rgb;
				uv.x += texelSize.x;
				vec3 tr = texture2D ( envMap, uv ).rgb;
				uv.y += texelSize.y;
				vec3 br = texture2D ( envMap, uv ).rgb;
				uv.x -= texelSize.x;
				vec3 bl = texture2D ( envMap, uv ).rgb;

				vec3 tm = mix( tl, tr, f.x );
				vec3 bm = mix( bl, br, f.x );
				gl_FragColor.rgb = mix( tm, bm, f.y );

			}
		`,
      blending: NoBlending,
      depthTest: false,
      depthWrite: false
    });
    return shaderMaterial;
  }
  function _getCubemapShader() {
    const shaderMaterial = new RawShaderMaterial({
      name: "CubemapToCubeUV",
      uniforms: {
        "envMap": { value: null },
        "flipEnvMap": { value: -1 }
      },
      vertexShader: _getCommonVertexShader(),
      fragmentShader: `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,
      blending: NoBlending,
      depthTest: false,
      depthWrite: false
    });
    return shaderMaterial;
  }
  function _getCommonVertexShader() {
    return `

		precision mediump float;
		precision mediump int;

		attribute vec3 position;
		attribute vec2 uv;
		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`;
  }
  function WebGLCubeUVMaps(renderer) {
    let cubeUVmaps = /* @__PURE__ */ new WeakMap();
    let pmremGenerator = null;
    function get(texture) {
      if (texture && texture.isTexture) {
        const mapping = texture.mapping;
        const isEquirectMap = mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping;
        const isCubeMap = mapping === CubeReflectionMapping || mapping === CubeRefractionMapping;
        if (isEquirectMap || isCubeMap) {
          if (texture.isRenderTargetTexture && texture.needsPMREMUpdate === true) {
            texture.needsPMREMUpdate = false;
            let renderTarget = cubeUVmaps.get(texture);
            if (pmremGenerator === null)
              pmremGenerator = new PMREMGenerator(renderer);
            renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture, renderTarget) : pmremGenerator.fromCubemap(texture, renderTarget);
            cubeUVmaps.set(texture, renderTarget);
            return renderTarget.texture;
          } else {
            if (cubeUVmaps.has(texture)) {
              return cubeUVmaps.get(texture).texture;
            } else {
              const image = texture.image;
              if (isEquirectMap && image && image.height > 0 || isCubeMap && image && isCubeTextureComplete(image)) {
                if (pmremGenerator === null)
                  pmremGenerator = new PMREMGenerator(renderer);
                const renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture) : pmremGenerator.fromCubemap(texture);
                cubeUVmaps.set(texture, renderTarget);
                texture.addEventListener("dispose", onTextureDispose);
                return renderTarget.texture;
              } else {
                return null;
              }
            }
          }
        }
      }
      return texture;
    }
    function isCubeTextureComplete(image) {
      let count = 0;
      const length = 6;
      for (let i2 = 0; i2 < length; i2++) {
        if (image[i2] !== void 0)
          count++;
      }
      return count === length;
    }
    function onTextureDispose(event) {
      const texture = event.target;
      texture.removeEventListener("dispose", onTextureDispose);
      const cubemapUV = cubeUVmaps.get(texture);
      if (cubemapUV !== void 0) {
        cubeUVmaps.delete(texture);
        cubemapUV.dispose();
      }
    }
    function dispose() {
      cubeUVmaps = /* @__PURE__ */ new WeakMap();
      if (pmremGenerator !== null) {
        pmremGenerator.dispose();
        pmremGenerator = null;
      }
    }
    return {
      get,
      dispose
    };
  }
  function WebGLExtensions(gl) {
    const extensions = {};
    function getExtension(name) {
      if (extensions[name] !== void 0) {
        return extensions[name];
      }
      let extension;
      switch (name) {
        case "WEBGL_depth_texture":
          extension = gl.getExtension("WEBGL_depth_texture") || gl.getExtension("MOZ_WEBGL_depth_texture") || gl.getExtension("WEBKIT_WEBGL_depth_texture");
          break;
        case "EXT_texture_filter_anisotropic":
          extension = gl.getExtension("EXT_texture_filter_anisotropic") || gl.getExtension("MOZ_EXT_texture_filter_anisotropic") || gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
          break;
        case "WEBGL_compressed_texture_s3tc":
          extension = gl.getExtension("WEBGL_compressed_texture_s3tc") || gl.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
          break;
        case "WEBGL_compressed_texture_pvrtc":
          extension = gl.getExtension("WEBGL_compressed_texture_pvrtc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
          break;
        default:
          extension = gl.getExtension(name);
      }
      extensions[name] = extension;
      return extension;
    }
    return {
      has: function(name) {
        return getExtension(name) !== null;
      },
      init: function(capabilities) {
        if (capabilities.isWebGL2) {
          getExtension("EXT_color_buffer_float");
        } else {
          getExtension("WEBGL_depth_texture");
          getExtension("OES_texture_float");
          getExtension("OES_texture_half_float");
          getExtension("OES_texture_half_float_linear");
          getExtension("OES_standard_derivatives");
          getExtension("OES_element_index_uint");
          getExtension("OES_vertex_array_object");
          getExtension("ANGLE_instanced_arrays");
        }
        getExtension("OES_texture_float_linear");
        getExtension("EXT_color_buffer_half_float");
        getExtension("WEBGL_multisampled_render_to_texture");
      },
      get: function(name) {
        const extension = getExtension(name);
        if (extension === null) {
          console.warn("THREE.WebGLRenderer: " + name + " extension not supported.");
        }
        return extension;
      }
    };
  }
  function WebGLGeometries(gl, attributes, info, bindingStates) {
    const geometries = {};
    const wireframeAttributes = /* @__PURE__ */ new WeakMap();
    function onGeometryDispose(event) {
      const geometry = event.target;
      if (geometry.index !== null) {
        attributes.remove(geometry.index);
      }
      for (const name in geometry.attributes) {
        attributes.remove(geometry.attributes[name]);
      }
      geometry.removeEventListener("dispose", onGeometryDispose);
      delete geometries[geometry.id];
      const attribute = wireframeAttributes.get(geometry);
      if (attribute) {
        attributes.remove(attribute);
        wireframeAttributes.delete(geometry);
      }
      bindingStates.releaseStatesOfGeometry(geometry);
      if (geometry.isInstancedBufferGeometry === true) {
        delete geometry._maxInstanceCount;
      }
      info.memory.geometries--;
    }
    function get(object, geometry) {
      if (geometries[geometry.id] === true)
        return geometry;
      geometry.addEventListener("dispose", onGeometryDispose);
      geometries[geometry.id] = true;
      info.memory.geometries++;
      return geometry;
    }
    function update3(geometry) {
      const geometryAttributes = geometry.attributes;
      for (const name in geometryAttributes) {
        attributes.update(geometryAttributes[name], 34962);
      }
      const morphAttributes = geometry.morphAttributes;
      for (const name in morphAttributes) {
        const array = morphAttributes[name];
        for (let i2 = 0, l2 = array.length; i2 < l2; i2++) {
          attributes.update(array[i2], 34962);
        }
      }
    }
    function updateWireframeAttribute(geometry) {
      const indices = [];
      const geometryIndex = geometry.index;
      const geometryPosition = geometry.attributes.position;
      let version = 0;
      if (geometryIndex !== null) {
        const array = geometryIndex.array;
        version = geometryIndex.version;
        for (let i2 = 0, l2 = array.length; i2 < l2; i2 += 3) {
          const a2 = array[i2 + 0];
          const b2 = array[i2 + 1];
          const c2 = array[i2 + 2];
          indices.push(a2, b2, b2, c2, c2, a2);
        }
      } else {
        const array = geometryPosition.array;
        version = geometryPosition.version;
        for (let i2 = 0, l2 = array.length / 3 - 1; i2 < l2; i2 += 3) {
          const a2 = i2 + 0;
          const b2 = i2 + 1;
          const c2 = i2 + 2;
          indices.push(a2, b2, b2, c2, c2, a2);
        }
      }
      const attribute = new (arrayNeedsUint32(indices) ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
      attribute.version = version;
      const previousAttribute = wireframeAttributes.get(geometry);
      if (previousAttribute)
        attributes.remove(previousAttribute);
      wireframeAttributes.set(geometry, attribute);
    }
    function getWireframeAttribute(geometry) {
      const currentAttribute = wireframeAttributes.get(geometry);
      if (currentAttribute) {
        const geometryIndex = geometry.index;
        if (geometryIndex !== null) {
          if (currentAttribute.version < geometryIndex.version) {
            updateWireframeAttribute(geometry);
          }
        }
      } else {
        updateWireframeAttribute(geometry);
      }
      return wireframeAttributes.get(geometry);
    }
    return {
      get,
      update: update3,
      getWireframeAttribute
    };
  }
  function WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    let mode;
    function setMode(value) {
      mode = value;
    }
    let type, bytesPerElement;
    function setIndex(value) {
      type = value.type;
      bytesPerElement = value.bytesPerElement;
    }
    function render(start2, count) {
      gl.drawElements(mode, count, type, start2 * bytesPerElement);
      info.update(count, mode, 1);
    }
    function renderInstances(start2, count, primcount) {
      if (primcount === 0)
        return;
      let extension, methodName;
      if (isWebGL2) {
        extension = gl;
        methodName = "drawElementsInstanced";
      } else {
        extension = extensions.get("ANGLE_instanced_arrays");
        methodName = "drawElementsInstancedANGLE";
        if (extension === null) {
          console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
          return;
        }
      }
      extension[methodName](mode, count, type, start2 * bytesPerElement, primcount);
      info.update(count, mode, primcount);
    }
    this.setMode = setMode;
    this.setIndex = setIndex;
    this.render = render;
    this.renderInstances = renderInstances;
  }
  function WebGLInfo(gl) {
    const memory = {
      geometries: 0,
      textures: 0
    };
    const render = {
      frame: 0,
      calls: 0,
      triangles: 0,
      points: 0,
      lines: 0
    };
    function update3(count, mode, instanceCount) {
      render.calls++;
      switch (mode) {
        case 4:
          render.triangles += instanceCount * (count / 3);
          break;
        case 1:
          render.lines += instanceCount * (count / 2);
          break;
        case 3:
          render.lines += instanceCount * (count - 1);
          break;
        case 2:
          render.lines += instanceCount * count;
          break;
        case 0:
          render.points += instanceCount * count;
          break;
        default:
          console.error("THREE.WebGLInfo: Unknown draw mode:", mode);
          break;
      }
    }
    function reset() {
      render.frame++;
      render.calls = 0;
      render.triangles = 0;
      render.points = 0;
      render.lines = 0;
    }
    return {
      memory,
      render,
      programs: null,
      autoReset: true,
      reset,
      update: update3
    };
  }
  var DataTexture2DArray = class extends Texture {
    constructor(data = null, width2 = 1, height2 = 1, depth = 1) {
      super(null);
      this.image = { data, width: width2, height: height2, depth };
      this.magFilter = NearestFilter;
      this.minFilter = NearestFilter;
      this.wrapR = ClampToEdgeWrapping;
      this.generateMipmaps = false;
      this.flipY = false;
      this.unpackAlignment = 1;
    }
  };
  DataTexture2DArray.prototype.isDataTexture2DArray = true;
  function numericalSort(a2, b2) {
    return a2[0] - b2[0];
  }
  function absNumericalSort(a2, b2) {
    return Math.abs(b2[1]) - Math.abs(a2[1]);
  }
  function denormalize(morph, attribute) {
    let denominator = 1;
    const array = attribute.isInterleavedBufferAttribute ? attribute.data.array : attribute.array;
    if (array instanceof Int8Array)
      denominator = 127;
    else if (array instanceof Int16Array)
      denominator = 32767;
    else if (array instanceof Int32Array)
      denominator = 2147483647;
    else
      console.error("THREE.WebGLMorphtargets: Unsupported morph attribute data type: ", array);
    morph.divideScalar(denominator);
  }
  function WebGLMorphtargets(gl, capabilities, textures) {
    const influencesList = {};
    const morphInfluences = new Float32Array(8);
    const morphTextures = /* @__PURE__ */ new WeakMap();
    const morph = new Vector3();
    const workInfluences = [];
    for (let i2 = 0; i2 < 8; i2++) {
      workInfluences[i2] = [i2, 0];
    }
    function update3(object, geometry, material, program) {
      const objectInfluences = object.morphTargetInfluences;
      if (capabilities.isWebGL2 === true) {
        const numberOfMorphTargets = geometry.morphAttributes.position.length;
        let entry = morphTextures.get(geometry);
        if (entry === void 0 || entry.count !== numberOfMorphTargets) {
          let disposeTexture = function() {
            texture.dispose();
            morphTextures.delete(geometry);
            geometry.removeEventListener("dispose", disposeTexture);
          };
          if (entry !== void 0)
            entry.texture.dispose();
          const hasMorphNormals = geometry.morphAttributes.normal !== void 0;
          const morphTargets = geometry.morphAttributes.position;
          const morphNormals = geometry.morphAttributes.normal || [];
          const numberOfVertices = geometry.attributes.position.count;
          const numberOfVertexData = hasMorphNormals === true ? 2 : 1;
          let width2 = numberOfVertices * numberOfVertexData;
          let height2 = 1;
          if (width2 > capabilities.maxTextureSize) {
            height2 = Math.ceil(width2 / capabilities.maxTextureSize);
            width2 = capabilities.maxTextureSize;
          }
          const buffer = new Float32Array(width2 * height2 * 4 * numberOfMorphTargets);
          const texture = new DataTexture2DArray(buffer, width2, height2, numberOfMorphTargets);
          texture.format = RGBAFormat;
          texture.type = FloatType;
          texture.needsUpdate = true;
          const vertexDataStride = numberOfVertexData * 4;
          for (let i2 = 0; i2 < numberOfMorphTargets; i2++) {
            const morphTarget = morphTargets[i2];
            const morphNormal = morphNormals[i2];
            const offset = width2 * height2 * 4 * i2;
            for (let j2 = 0; j2 < morphTarget.count; j2++) {
              morph.fromBufferAttribute(morphTarget, j2);
              if (morphTarget.normalized === true)
                denormalize(morph, morphTarget);
              const stride = j2 * vertexDataStride;
              buffer[offset + stride + 0] = morph.x;
              buffer[offset + stride + 1] = morph.y;
              buffer[offset + stride + 2] = morph.z;
              buffer[offset + stride + 3] = 0;
              if (hasMorphNormals === true) {
                morph.fromBufferAttribute(morphNormal, j2);
                if (morphNormal.normalized === true)
                  denormalize(morph, morphNormal);
                buffer[offset + stride + 4] = morph.x;
                buffer[offset + stride + 5] = morph.y;
                buffer[offset + stride + 6] = morph.z;
                buffer[offset + stride + 7] = 0;
              }
            }
          }
          entry = {
            count: numberOfMorphTargets,
            texture,
            size: new Vector2(width2, height2)
          };
          morphTextures.set(geometry, entry);
          geometry.addEventListener("dispose", disposeTexture);
        }
        let morphInfluencesSum = 0;
        for (let i2 = 0; i2 < objectInfluences.length; i2++) {
          morphInfluencesSum += objectInfluences[i2];
        }
        const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
        program.getUniforms().setValue(gl, "morphTargetBaseInfluence", morphBaseInfluence);
        program.getUniforms().setValue(gl, "morphTargetInfluences", objectInfluences);
        program.getUniforms().setValue(gl, "morphTargetsTexture", entry.texture, textures);
        program.getUniforms().setValue(gl, "morphTargetsTextureSize", entry.size);
      } else {
        const length = objectInfluences === void 0 ? 0 : objectInfluences.length;
        let influences = influencesList[geometry.id];
        if (influences === void 0 || influences.length !== length) {
          influences = [];
          for (let i2 = 0; i2 < length; i2++) {
            influences[i2] = [i2, 0];
          }
          influencesList[geometry.id] = influences;
        }
        for (let i2 = 0; i2 < length; i2++) {
          const influence = influences[i2];
          influence[0] = i2;
          influence[1] = objectInfluences[i2];
        }
        influences.sort(absNumericalSort);
        for (let i2 = 0; i2 < 8; i2++) {
          if (i2 < length && influences[i2][1]) {
            workInfluences[i2][0] = influences[i2][0];
            workInfluences[i2][1] = influences[i2][1];
          } else {
            workInfluences[i2][0] = Number.MAX_SAFE_INTEGER;
            workInfluences[i2][1] = 0;
          }
        }
        workInfluences.sort(numericalSort);
        const morphTargets = geometry.morphAttributes.position;
        const morphNormals = geometry.morphAttributes.normal;
        let morphInfluencesSum = 0;
        for (let i2 = 0; i2 < 8; i2++) {
          const influence = workInfluences[i2];
          const index = influence[0];
          const value = influence[1];
          if (index !== Number.MAX_SAFE_INTEGER && value) {
            if (morphTargets && geometry.getAttribute("morphTarget" + i2) !== morphTargets[index]) {
              geometry.setAttribute("morphTarget" + i2, morphTargets[index]);
            }
            if (morphNormals && geometry.getAttribute("morphNormal" + i2) !== morphNormals[index]) {
              geometry.setAttribute("morphNormal" + i2, morphNormals[index]);
            }
            morphInfluences[i2] = value;
            morphInfluencesSum += value;
          } else {
            if (morphTargets && geometry.hasAttribute("morphTarget" + i2) === true) {
              geometry.deleteAttribute("morphTarget" + i2);
            }
            if (morphNormals && geometry.hasAttribute("morphNormal" + i2) === true) {
              geometry.deleteAttribute("morphNormal" + i2);
            }
            morphInfluences[i2] = 0;
          }
        }
        const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
        program.getUniforms().setValue(gl, "morphTargetBaseInfluence", morphBaseInfluence);
        program.getUniforms().setValue(gl, "morphTargetInfluences", morphInfluences);
      }
    }
    return {
      update: update3
    };
  }
  function WebGLObjects(gl, geometries, attributes, info) {
    let updateMap = /* @__PURE__ */ new WeakMap();
    function update3(object) {
      const frame = info.render.frame;
      const geometry = object.geometry;
      const buffergeometry = geometries.get(object, geometry);
      if (updateMap.get(buffergeometry) !== frame) {
        geometries.update(buffergeometry);
        updateMap.set(buffergeometry, frame);
      }
      if (object.isInstancedMesh) {
        if (object.hasEventListener("dispose", onInstancedMeshDispose) === false) {
          object.addEventListener("dispose", onInstancedMeshDispose);
        }
        attributes.update(object.instanceMatrix, 34962);
        if (object.instanceColor !== null) {
          attributes.update(object.instanceColor, 34962);
        }
      }
      return buffergeometry;
    }
    function dispose() {
      updateMap = /* @__PURE__ */ new WeakMap();
    }
    function onInstancedMeshDispose(event) {
      const instancedMesh = event.target;
      instancedMesh.removeEventListener("dispose", onInstancedMeshDispose);
      attributes.remove(instancedMesh.instanceMatrix);
      if (instancedMesh.instanceColor !== null)
        attributes.remove(instancedMesh.instanceColor);
    }
    return {
      update: update3,
      dispose
    };
  }
  var DataTexture3D = class extends Texture {
    constructor(data = null, width2 = 1, height2 = 1, depth = 1) {
      super(null);
      this.image = { data, width: width2, height: height2, depth };
      this.magFilter = NearestFilter;
      this.minFilter = NearestFilter;
      this.wrapR = ClampToEdgeWrapping;
      this.generateMipmaps = false;
      this.flipY = false;
      this.unpackAlignment = 1;
    }
  };
  DataTexture3D.prototype.isDataTexture3D = true;
  var emptyTexture = new Texture();
  var emptyTexture2dArray = new DataTexture2DArray();
  var emptyTexture3d = new DataTexture3D();
  var emptyCubeTexture = new CubeTexture();
  var arrayCacheF32 = [];
  var arrayCacheI32 = [];
  var mat4array = new Float32Array(16);
  var mat3array = new Float32Array(9);
  var mat2array = new Float32Array(4);
  function flatten(array, nBlocks, blockSize) {
    const firstElem = array[0];
    if (firstElem <= 0 || firstElem > 0)
      return array;
    const n2 = nBlocks * blockSize;
    let r2 = arrayCacheF32[n2];
    if (r2 === void 0) {
      r2 = new Float32Array(n2);
      arrayCacheF32[n2] = r2;
    }
    if (nBlocks !== 0) {
      firstElem.toArray(r2, 0);
      for (let i2 = 1, offset = 0; i2 !== nBlocks; ++i2) {
        offset += blockSize;
        array[i2].toArray(r2, offset);
      }
    }
    return r2;
  }
  function arraysEqual(a2, b2) {
    if (a2.length !== b2.length)
      return false;
    for (let i2 = 0, l2 = a2.length; i2 < l2; i2++) {
      if (a2[i2] !== b2[i2])
        return false;
    }
    return true;
  }
  function copyArray(a2, b2) {
    for (let i2 = 0, l2 = b2.length; i2 < l2; i2++) {
      a2[i2] = b2[i2];
    }
  }
  function allocTexUnits(textures, n2) {
    let r2 = arrayCacheI32[n2];
    if (r2 === void 0) {
      r2 = new Int32Array(n2);
      arrayCacheI32[n2] = r2;
    }
    for (let i2 = 0; i2 !== n2; ++i2) {
      r2[i2] = textures.allocateTextureUnit();
    }
    return r2;
  }
  function setValueV1f(gl, v2) {
    const cache = this.cache;
    if (cache[0] === v2)
      return;
    gl.uniform1f(this.addr, v2);
    cache[0] = v2;
  }
  function setValueV2f(gl, v2) {
    const cache = this.cache;
    if (v2.x !== void 0) {
      if (cache[0] !== v2.x || cache[1] !== v2.y) {
        gl.uniform2f(this.addr, v2.x, v2.y);
        cache[0] = v2.x;
        cache[1] = v2.y;
      }
    } else {
      if (arraysEqual(cache, v2))
        return;
      gl.uniform2fv(this.addr, v2);
      copyArray(cache, v2);
    }
  }
  function setValueV3f(gl, v2) {
    const cache = this.cache;
    if (v2.x !== void 0) {
      if (cache[0] !== v2.x || cache[1] !== v2.y || cache[2] !== v2.z) {
        gl.uniform3f(this.addr, v2.x, v2.y, v2.z);
        cache[0] = v2.x;
        cache[1] = v2.y;
        cache[2] = v2.z;
      }
    } else if (v2.r !== void 0) {
      if (cache[0] !== v2.r || cache[1] !== v2.g || cache[2] !== v2.b) {
        gl.uniform3f(this.addr, v2.r, v2.g, v2.b);
        cache[0] = v2.r;
        cache[1] = v2.g;
        cache[2] = v2.b;
      }
    } else {
      if (arraysEqual(cache, v2))
        return;
      gl.uniform3fv(this.addr, v2);
      copyArray(cache, v2);
    }
  }
  function setValueV4f(gl, v2) {
    const cache = this.cache;
    if (v2.x !== void 0) {
      if (cache[0] !== v2.x || cache[1] !== v2.y || cache[2] !== v2.z || cache[3] !== v2.w) {
        gl.uniform4f(this.addr, v2.x, v2.y, v2.z, v2.w);
        cache[0] = v2.x;
        cache[1] = v2.y;
        cache[2] = v2.z;
        cache[3] = v2.w;
      }
    } else {
      if (arraysEqual(cache, v2))
        return;
      gl.uniform4fv(this.addr, v2);
      copyArray(cache, v2);
    }
  }
  function setValueM2(gl, v2) {
    const cache = this.cache;
    const elements = v2.elements;
    if (elements === void 0) {
      if (arraysEqual(cache, v2))
        return;
      gl.uniformMatrix2fv(this.addr, false, v2);
      copyArray(cache, v2);
    } else {
      if (arraysEqual(cache, elements))
        return;
      mat2array.set(elements);
      gl.uniformMatrix2fv(this.addr, false, mat2array);
      copyArray(cache, elements);
    }
  }
  function setValueM3(gl, v2) {
    const cache = this.cache;
    const elements = v2.elements;
    if (elements === void 0) {
      if (arraysEqual(cache, v2))
        return;
      gl.uniformMatrix3fv(this.addr, false, v2);
      copyArray(cache, v2);
    } else {
      if (arraysEqual(cache, elements))
        return;
      mat3array.set(elements);
      gl.uniformMatrix3fv(this.addr, false, mat3array);
      copyArray(cache, elements);
    }
  }
  function setValueM4(gl, v2) {
    const cache = this.cache;
    const elements = v2.elements;
    if (elements === void 0) {
      if (arraysEqual(cache, v2))
        return;
      gl.uniformMatrix4fv(this.addr, false, v2);
      copyArray(cache, v2);
    } else {
      if (arraysEqual(cache, elements))
        return;
      mat4array.set(elements);
      gl.uniformMatrix4fv(this.addr, false, mat4array);
      copyArray(cache, elements);
    }
  }
  function setValueV1i(gl, v2) {
    const cache = this.cache;
    if (cache[0] === v2)
      return;
    gl.uniform1i(this.addr, v2);
    cache[0] = v2;
  }
  function setValueV2i(gl, v2) {
    const cache = this.cache;
    if (arraysEqual(cache, v2))
      return;
    gl.uniform2iv(this.addr, v2);
    copyArray(cache, v2);
  }
  function setValueV3i(gl, v2) {
    const cache = this.cache;
    if (arraysEqual(cache, v2))
      return;
    gl.uniform3iv(this.addr, v2);
    copyArray(cache, v2);
  }
  function setValueV4i(gl, v2) {
    const cache = this.cache;
    if (arraysEqual(cache, v2))
      return;
    gl.uniform4iv(this.addr, v2);
    copyArray(cache, v2);
  }
  function setValueV1ui(gl, v2) {
    const cache = this.cache;
    if (cache[0] === v2)
      return;
    gl.uniform1ui(this.addr, v2);
    cache[0] = v2;
  }
  function setValueV2ui(gl, v2) {
    const cache = this.cache;
    if (arraysEqual(cache, v2))
      return;
    gl.uniform2uiv(this.addr, v2);
    copyArray(cache, v2);
  }
  function setValueV3ui(gl, v2) {
    const cache = this.cache;
    if (arraysEqual(cache, v2))
      return;
    gl.uniform3uiv(this.addr, v2);
    copyArray(cache, v2);
  }
  function setValueV4ui(gl, v2) {
    const cache = this.cache;
    if (arraysEqual(cache, v2))
      return;
    gl.uniform4uiv(this.addr, v2);
    copyArray(cache, v2);
  }
  function setValueT1(gl, v2, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    textures.safeSetTexture2D(v2 || emptyTexture, unit);
  }
  function setValueT3D1(gl, v2, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    textures.setTexture3D(v2 || emptyTexture3d, unit);
  }
  function setValueT6(gl, v2, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    textures.safeSetTextureCube(v2 || emptyCubeTexture, unit);
  }
  function setValueT2DArray1(gl, v2, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    textures.setTexture2DArray(v2 || emptyTexture2dArray, unit);
  }
  function getSingularSetter(type) {
    switch (type) {
      case 5126:
        return setValueV1f;
      case 35664:
        return setValueV2f;
      case 35665:
        return setValueV3f;
      case 35666:
        return setValueV4f;
      case 35674:
        return setValueM2;
      case 35675:
        return setValueM3;
      case 35676:
        return setValueM4;
      case 5124:
      case 35670:
        return setValueV1i;
      case 35667:
      case 35671:
        return setValueV2i;
      case 35668:
      case 35672:
        return setValueV3i;
      case 35669:
      case 35673:
        return setValueV4i;
      case 5125:
        return setValueV1ui;
      case 36294:
        return setValueV2ui;
      case 36295:
        return setValueV3ui;
      case 36296:
        return setValueV4ui;
      case 35678:
      case 36198:
      case 36298:
      case 36306:
      case 35682:
        return setValueT1;
      case 35679:
      case 36299:
      case 36307:
        return setValueT3D1;
      case 35680:
      case 36300:
      case 36308:
      case 36293:
        return setValueT6;
      case 36289:
      case 36303:
      case 36311:
      case 36292:
        return setValueT2DArray1;
    }
  }
  function setValueV1fArray(gl, v2) {
    gl.uniform1fv(this.addr, v2);
  }
  function setValueV2fArray(gl, v2) {
    const data = flatten(v2, this.size, 2);
    gl.uniform2fv(this.addr, data);
  }
  function setValueV3fArray(gl, v2) {
    const data = flatten(v2, this.size, 3);
    gl.uniform3fv(this.addr, data);
  }
  function setValueV4fArray(gl, v2) {
    const data = flatten(v2, this.size, 4);
    gl.uniform4fv(this.addr, data);
  }
  function setValueM2Array(gl, v2) {
    const data = flatten(v2, this.size, 4);
    gl.uniformMatrix2fv(this.addr, false, data);
  }
  function setValueM3Array(gl, v2) {
    const data = flatten(v2, this.size, 9);
    gl.uniformMatrix3fv(this.addr, false, data);
  }
  function setValueM4Array(gl, v2) {
    const data = flatten(v2, this.size, 16);
    gl.uniformMatrix4fv(this.addr, false, data);
  }
  function setValueV1iArray(gl, v2) {
    gl.uniform1iv(this.addr, v2);
  }
  function setValueV2iArray(gl, v2) {
    gl.uniform2iv(this.addr, v2);
  }
  function setValueV3iArray(gl, v2) {
    gl.uniform3iv(this.addr, v2);
  }
  function setValueV4iArray(gl, v2) {
    gl.uniform4iv(this.addr, v2);
  }
  function setValueV1uiArray(gl, v2) {
    gl.uniform1uiv(this.addr, v2);
  }
  function setValueV2uiArray(gl, v2) {
    gl.uniform2uiv(this.addr, v2);
  }
  function setValueV3uiArray(gl, v2) {
    gl.uniform3uiv(this.addr, v2);
  }
  function setValueV4uiArray(gl, v2) {
    gl.uniform4uiv(this.addr, v2);
  }
  function setValueT1Array(gl, v2, textures) {
    const n2 = v2.length;
    const units = allocTexUnits(textures, n2);
    gl.uniform1iv(this.addr, units);
    for (let i2 = 0; i2 !== n2; ++i2) {
      textures.safeSetTexture2D(v2[i2] || emptyTexture, units[i2]);
    }
  }
  function setValueT3DArray(gl, v2, textures) {
    const n2 = v2.length;
    const units = allocTexUnits(textures, n2);
    gl.uniform1iv(this.addr, units);
    for (let i2 = 0; i2 !== n2; ++i2) {
      textures.setTexture3D(v2[i2] || emptyTexture3d, units[i2]);
    }
  }
  function setValueT6Array(gl, v2, textures) {
    const n2 = v2.length;
    const units = allocTexUnits(textures, n2);
    gl.uniform1iv(this.addr, units);
    for (let i2 = 0; i2 !== n2; ++i2) {
      textures.safeSetTextureCube(v2[i2] || emptyCubeTexture, units[i2]);
    }
  }
  function setValueT2DArrayArray(gl, v2, textures) {
    const n2 = v2.length;
    const units = allocTexUnits(textures, n2);
    gl.uniform1iv(this.addr, units);
    for (let i2 = 0; i2 !== n2; ++i2) {
      textures.setTexture2DArray(v2[i2] || emptyTexture2dArray, units[i2]);
    }
  }
  function getPureArraySetter(type) {
    switch (type) {
      case 5126:
        return setValueV1fArray;
      case 35664:
        return setValueV2fArray;
      case 35665:
        return setValueV3fArray;
      case 35666:
        return setValueV4fArray;
      case 35674:
        return setValueM2Array;
      case 35675:
        return setValueM3Array;
      case 35676:
        return setValueM4Array;
      case 5124:
      case 35670:
        return setValueV1iArray;
      case 35667:
      case 35671:
        return setValueV2iArray;
      case 35668:
      case 35672:
        return setValueV3iArray;
      case 35669:
      case 35673:
        return setValueV4iArray;
      case 5125:
        return setValueV1uiArray;
      case 36294:
        return setValueV2uiArray;
      case 36295:
        return setValueV3uiArray;
      case 36296:
        return setValueV4uiArray;
      case 35678:
      case 36198:
      case 36298:
      case 36306:
      case 35682:
        return setValueT1Array;
      case 35679:
      case 36299:
      case 36307:
        return setValueT3DArray;
      case 35680:
      case 36300:
      case 36308:
      case 36293:
        return setValueT6Array;
      case 36289:
      case 36303:
      case 36311:
      case 36292:
        return setValueT2DArrayArray;
    }
  }
  function SingleUniform(id, activeInfo, addr) {
    this.id = id;
    this.addr = addr;
    this.cache = [];
    this.setValue = getSingularSetter(activeInfo.type);
  }
  function PureArrayUniform(id, activeInfo, addr) {
    this.id = id;
    this.addr = addr;
    this.cache = [];
    this.size = activeInfo.size;
    this.setValue = getPureArraySetter(activeInfo.type);
  }
  PureArrayUniform.prototype.updateCache = function(data) {
    const cache = this.cache;
    if (data instanceof Float32Array && cache.length !== data.length) {
      this.cache = new Float32Array(data.length);
    }
    copyArray(cache, data);
  };
  function StructuredUniform(id) {
    this.id = id;
    this.seq = [];
    this.map = {};
  }
  StructuredUniform.prototype.setValue = function(gl, value, textures) {
    const seq = this.seq;
    for (let i2 = 0, n2 = seq.length; i2 !== n2; ++i2) {
      const u2 = seq[i2];
      u2.setValue(gl, value[u2.id], textures);
    }
  };
  var RePathPart = /(\w+)(\])?(\[|\.)?/g;
  function addUniform(container, uniformObject) {
    container.seq.push(uniformObject);
    container.map[uniformObject.id] = uniformObject;
  }
  function parseUniform(activeInfo, addr, container) {
    const path = activeInfo.name, pathLength = path.length;
    RePathPart.lastIndex = 0;
    while (true) {
      const match = RePathPart.exec(path), matchEnd = RePathPart.lastIndex;
      let id = match[1];
      const idIsIndex = match[2] === "]", subscript = match[3];
      if (idIsIndex)
        id = id | 0;
      if (subscript === void 0 || subscript === "[" && matchEnd + 2 === pathLength) {
        addUniform(container, subscript === void 0 ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));
        break;
      } else {
        const map = container.map;
        let next = map[id];
        if (next === void 0) {
          next = new StructuredUniform(id);
          addUniform(container, next);
        }
        container = next;
      }
    }
  }
  function WebGLUniforms(gl, program) {
    this.seq = [];
    this.map = {};
    const n2 = gl.getProgramParameter(program, 35718);
    for (let i2 = 0; i2 < n2; ++i2) {
      const info = gl.getActiveUniform(program, i2), addr = gl.getUniformLocation(program, info.name);
      parseUniform(info, addr, this);
    }
  }
  WebGLUniforms.prototype.setValue = function(gl, name, value, textures) {
    const u2 = this.map[name];
    if (u2 !== void 0)
      u2.setValue(gl, value, textures);
  };
  WebGLUniforms.prototype.setOptional = function(gl, object, name) {
    const v2 = object[name];
    if (v2 !== void 0)
      this.setValue(gl, name, v2);
  };
  WebGLUniforms.upload = function(gl, seq, values, textures) {
    for (let i2 = 0, n2 = seq.length; i2 !== n2; ++i2) {
      const u2 = seq[i2], v2 = values[u2.id];
      if (v2.needsUpdate !== false) {
        u2.setValue(gl, v2.value, textures);
      }
    }
  };
  WebGLUniforms.seqWithValue = function(seq, values) {
    const r2 = [];
    for (let i2 = 0, n2 = seq.length; i2 !== n2; ++i2) {
      const u2 = seq[i2];
      if (u2.id in values)
        r2.push(u2);
    }
    return r2;
  };
  function WebGLShader(gl, type, string) {
    const shader = gl.createShader(type);
    gl.shaderSource(shader, string);
    gl.compileShader(shader);
    return shader;
  }
  var programIdCount = 0;
  function addLineNumbers(string) {
    const lines = string.split("\n");
    for (let i2 = 0; i2 < lines.length; i2++) {
      lines[i2] = i2 + 1 + ": " + lines[i2];
    }
    return lines.join("\n");
  }
  function getEncodingComponents(encoding) {
    switch (encoding) {
      case LinearEncoding:
        return ["Linear", "( value )"];
      case sRGBEncoding:
        return ["sRGB", "( value )"];
      default:
        console.warn("THREE.WebGLProgram: Unsupported encoding:", encoding);
        return ["Linear", "( value )"];
    }
  }
  function getShaderErrors(gl, shader, type) {
    const status = gl.getShaderParameter(shader, 35713);
    const errors = gl.getShaderInfoLog(shader).trim();
    if (status && errors === "")
      return "";
    return type.toUpperCase() + "\n\n" + errors + "\n\n" + addLineNumbers(gl.getShaderSource(shader));
  }
  function getTexelEncodingFunction(functionName, encoding) {
    const components = getEncodingComponents(encoding);
    return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[0] + components[1] + "; }";
  }
  function getToneMappingFunction(functionName, toneMapping) {
    let toneMappingName;
    switch (toneMapping) {
      case LinearToneMapping:
        toneMappingName = "Linear";
        break;
      case ReinhardToneMapping:
        toneMappingName = "Reinhard";
        break;
      case CineonToneMapping:
        toneMappingName = "OptimizedCineon";
        break;
      case ACESFilmicToneMapping:
        toneMappingName = "ACESFilmic";
        break;
      case CustomToneMapping:
        toneMappingName = "Custom";
        break;
      default:
        console.warn("THREE.WebGLProgram: Unsupported toneMapping:", toneMapping);
        toneMappingName = "Linear";
    }
    return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";
  }
  function generateExtensions(parameters) {
    const chunks = [
      parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "",
      (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "",
      parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "",
      (parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission) && parameters.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""
    ];
    return chunks.filter(filterEmptyLine).join("\n");
  }
  function generateDefines(defines) {
    const chunks = [];
    for (const name in defines) {
      const value = defines[name];
      if (value === false)
        continue;
      chunks.push("#define " + name + " " + value);
    }
    return chunks.join("\n");
  }
  function fetchAttributeLocations(gl, program) {
    const attributes = {};
    const n2 = gl.getProgramParameter(program, 35721);
    for (let i2 = 0; i2 < n2; i2++) {
      const info = gl.getActiveAttrib(program, i2);
      const name = info.name;
      let locationSize = 1;
      if (info.type === 35674)
        locationSize = 2;
      if (info.type === 35675)
        locationSize = 3;
      if (info.type === 35676)
        locationSize = 4;
      attributes[name] = {
        type: info.type,
        location: gl.getAttribLocation(program, name),
        locationSize
      };
    }
    return attributes;
  }
  function filterEmptyLine(string) {
    return string !== "";
  }
  function replaceLightNums(string, parameters) {
    return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
  }
  function replaceClippingPlaneNums(string, parameters) {
    return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
  }
  var includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
  function resolveIncludes(string) {
    return string.replace(includePattern, includeReplacer);
  }
  function includeReplacer(match, include) {
    const string = ShaderChunk[include];
    if (string === void 0) {
      throw new Error("Can not resolve #include <" + include + ">");
    }
    return resolveIncludes(string);
  }
  var deprecatedUnrollLoopPattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
  var unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
  function unrollLoops(string) {
    return string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);
  }
  function deprecatedLoopReplacer(match, start2, end2, snippet) {
    console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.");
    return loopReplacer(match, start2, end2, snippet);
  }
  function loopReplacer(match, start2, end2, snippet) {
    let string = "";
    for (let i2 = parseInt(start2); i2 < parseInt(end2); i2++) {
      string += snippet.replace(/\[\s*i\s*\]/g, "[ " + i2 + " ]").replace(/UNROLLED_LOOP_INDEX/g, i2);
    }
    return string;
  }
  function generatePrecision(parameters) {
    let precisionstring = "precision " + parameters.precision + " float;\nprecision " + parameters.precision + " int;";
    if (parameters.precision === "highp") {
      precisionstring += "\n#define HIGH_PRECISION";
    } else if (parameters.precision === "mediump") {
      precisionstring += "\n#define MEDIUM_PRECISION";
    } else if (parameters.precision === "lowp") {
      precisionstring += "\n#define LOW_PRECISION";
    }
    return precisionstring;
  }
  function generateShadowMapTypeDefine(parameters) {
    let shadowMapTypeDefine = "SHADOWMAP_TYPE_BASIC";
    if (parameters.shadowMapType === PCFShadowMap) {
      shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";
    } else if (parameters.shadowMapType === PCFSoftShadowMap) {
      shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF_SOFT";
    } else if (parameters.shadowMapType === VSMShadowMap) {
      shadowMapTypeDefine = "SHADOWMAP_TYPE_VSM";
    }
    return shadowMapTypeDefine;
  }
  function generateEnvMapTypeDefine(parameters) {
    let envMapTypeDefine = "ENVMAP_TYPE_CUBE";
    if (parameters.envMap) {
      switch (parameters.envMapMode) {
        case CubeReflectionMapping:
        case CubeRefractionMapping:
          envMapTypeDefine = "ENVMAP_TYPE_CUBE";
          break;
        case CubeUVReflectionMapping:
        case CubeUVRefractionMapping:
          envMapTypeDefine = "ENVMAP_TYPE_CUBE_UV";
          break;
      }
    }
    return envMapTypeDefine;
  }
  function generateEnvMapModeDefine(parameters) {
    let envMapModeDefine = "ENVMAP_MODE_REFLECTION";
    if (parameters.envMap) {
      switch (parameters.envMapMode) {
        case CubeRefractionMapping:
        case CubeUVRefractionMapping:
          envMapModeDefine = "ENVMAP_MODE_REFRACTION";
          break;
      }
    }
    return envMapModeDefine;
  }
  function generateEnvMapBlendingDefine(parameters) {
    let envMapBlendingDefine = "ENVMAP_BLENDING_NONE";
    if (parameters.envMap) {
      switch (parameters.combine) {
        case MultiplyOperation:
          envMapBlendingDefine = "ENVMAP_BLENDING_MULTIPLY";
          break;
        case MixOperation:
          envMapBlendingDefine = "ENVMAP_BLENDING_MIX";
          break;
        case AddOperation:
          envMapBlendingDefine = "ENVMAP_BLENDING_ADD";
          break;
      }
    }
    return envMapBlendingDefine;
  }
  function WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
    const gl = renderer.getContext();
    const defines = parameters.defines;
    let vertexShader = parameters.vertexShader;
    let fragmentShader = parameters.fragmentShader;
    const shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);
    const envMapTypeDefine = generateEnvMapTypeDefine(parameters);
    const envMapModeDefine = generateEnvMapModeDefine(parameters);
    const envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);
    const customExtensions = parameters.isWebGL2 ? "" : generateExtensions(parameters);
    const customDefines = generateDefines(defines);
    const program = gl.createProgram();
    let prefixVertex, prefixFragment;
    let versionString = parameters.glslVersion ? "#version " + parameters.glslVersion + "\n" : "";
    if (parameters.isRawShaderMaterial) {
      prefixVertex = [
        customDefines
      ].filter(filterEmptyLine).join("\n");
      if (prefixVertex.length > 0) {
        prefixVertex += "\n";
      }
      prefixFragment = [
        customExtensions,
        customDefines
      ].filter(filterEmptyLine).join("\n");
      if (prefixFragment.length > 0) {
        prefixFragment += "\n";
      }
    } else {
      prefixVertex = [
        generatePrecision(parameters),
        "#define SHADER_NAME " + parameters.shaderName,
        customDefines,
        parameters.instancing ? "#define USE_INSTANCING" : "",
        parameters.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
        parameters.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "",
        "#define MAX_BONES " + parameters.maxBones,
        parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
        parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
        parameters.map ? "#define USE_MAP" : "",
        parameters.envMap ? "#define USE_ENVMAP" : "",
        parameters.envMap ? "#define " + envMapModeDefine : "",
        parameters.lightMap ? "#define USE_LIGHTMAP" : "",
        parameters.aoMap ? "#define USE_AOMAP" : "",
        parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
        parameters.bumpMap ? "#define USE_BUMPMAP" : "",
        parameters.normalMap ? "#define USE_NORMALMAP" : "",
        parameters.normalMap && parameters.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "",
        parameters.normalMap && parameters.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "",
        parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
        parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
        parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
        parameters.displacementMap && parameters.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "",
        parameters.specularMap ? "#define USE_SPECULARMAP" : "",
        parameters.specularIntensityMap ? "#define USE_SPECULARINTENSITYMAP" : "",
        parameters.specularColorMap ? "#define USE_SPECULARCOLORMAP" : "",
        parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
        parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
        parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
        parameters.transmission ? "#define USE_TRANSMISSION" : "",
        parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
        parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
        parameters.sheenColorMap ? "#define USE_SHEENCOLORMAP" : "",
        parameters.sheenRoughnessMap ? "#define USE_SHEENROUGHNESSMAP" : "",
        parameters.vertexTangents ? "#define USE_TANGENT" : "",
        parameters.vertexColors ? "#define USE_COLOR" : "",
        parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
        parameters.vertexUvs ? "#define USE_UV" : "",
        parameters.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "",
        parameters.flatShading ? "#define FLAT_SHADED" : "",
        parameters.skinning ? "#define USE_SKINNING" : "",
        parameters.useVertexTexture ? "#define BONE_TEXTURE" : "",
        parameters.morphTargets ? "#define USE_MORPHTARGETS" : "",
        parameters.morphNormals && parameters.flatShading === false ? "#define USE_MORPHNORMALS" : "",
        parameters.morphTargets && parameters.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "",
        parameters.morphTargets && parameters.isWebGL2 ? "#define MORPHTARGETS_COUNT " + parameters.morphTargetsCount : "",
        parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
        parameters.flipSided ? "#define FLIP_SIDED" : "",
        parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
        parameters.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
        parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
        "uniform mat4 modelMatrix;",
        "uniform mat4 modelViewMatrix;",
        "uniform mat4 projectionMatrix;",
        "uniform mat4 viewMatrix;",
        "uniform mat3 normalMatrix;",
        "uniform vec3 cameraPosition;",
        "uniform bool isOrthographic;",
        "#ifdef USE_INSTANCING",
        "	attribute mat4 instanceMatrix;",
        "#endif",
        "#ifdef USE_INSTANCING_COLOR",
        "	attribute vec3 instanceColor;",
        "#endif",
        "attribute vec3 position;",
        "attribute vec3 normal;",
        "attribute vec2 uv;",
        "#ifdef USE_TANGENT",
        "	attribute vec4 tangent;",
        "#endif",
        "#if defined( USE_COLOR_ALPHA )",
        "	attribute vec4 color;",
        "#elif defined( USE_COLOR )",
        "	attribute vec3 color;",
        "#endif",
        "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )",
        "	attribute vec3 morphTarget0;",
        "	attribute vec3 morphTarget1;",
        "	attribute vec3 morphTarget2;",
        "	attribute vec3 morphTarget3;",
        "	#ifdef USE_MORPHNORMALS",
        "		attribute vec3 morphNormal0;",
        "		attribute vec3 morphNormal1;",
        "		attribute vec3 morphNormal2;",
        "		attribute vec3 morphNormal3;",
        "	#else",
        "		attribute vec3 morphTarget4;",
        "		attribute vec3 morphTarget5;",
        "		attribute vec3 morphTarget6;",
        "		attribute vec3 morphTarget7;",
        "	#endif",
        "#endif",
        "#ifdef USE_SKINNING",
        "	attribute vec4 skinIndex;",
        "	attribute vec4 skinWeight;",
        "#endif",
        "\n"
      ].filter(filterEmptyLine).join("\n");
      prefixFragment = [
        customExtensions,
        generatePrecision(parameters),
        "#define SHADER_NAME " + parameters.shaderName,
        customDefines,
        parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
        parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
        parameters.map ? "#define USE_MAP" : "",
        parameters.matcap ? "#define USE_MATCAP" : "",
        parameters.envMap ? "#define USE_ENVMAP" : "",
        parameters.envMap ? "#define " + envMapTypeDefine : "",
        parameters.envMap ? "#define " + envMapModeDefine : "",
        parameters.envMap ? "#define " + envMapBlendingDefine : "",
        parameters.lightMap ? "#define USE_LIGHTMAP" : "",
        parameters.aoMap ? "#define USE_AOMAP" : "",
        parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
        parameters.bumpMap ? "#define USE_BUMPMAP" : "",
        parameters.normalMap ? "#define USE_NORMALMAP" : "",
        parameters.normalMap && parameters.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "",
        parameters.normalMap && parameters.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "",
        parameters.clearcoat ? "#define USE_CLEARCOAT" : "",
        parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
        parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
        parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
        parameters.specularMap ? "#define USE_SPECULARMAP" : "",
        parameters.specularIntensityMap ? "#define USE_SPECULARINTENSITYMAP" : "",
        parameters.specularColorMap ? "#define USE_SPECULARCOLORMAP" : "",
        parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
        parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
        parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
        parameters.alphaTest ? "#define USE_ALPHATEST" : "",
        parameters.sheen ? "#define USE_SHEEN" : "",
        parameters.sheenColorMap ? "#define USE_SHEENCOLORMAP" : "",
        parameters.sheenRoughnessMap ? "#define USE_SHEENROUGHNESSMAP" : "",
        parameters.transmission ? "#define USE_TRANSMISSION" : "",
        parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
        parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
        parameters.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
        parameters.vertexTangents ? "#define USE_TANGENT" : "",
        parameters.vertexColors || parameters.instancingColor ? "#define USE_COLOR" : "",
        parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
        parameters.vertexUvs ? "#define USE_UV" : "",
        parameters.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "",
        parameters.gradientMap ? "#define USE_GRADIENTMAP" : "",
        parameters.flatShading ? "#define FLAT_SHADED" : "",
        parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
        parameters.flipSided ? "#define FLIP_SIDED" : "",
        parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
        parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
        parameters.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "",
        parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
        (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? "#define TEXTURE_LOD_EXT" : "",
        "uniform mat4 viewMatrix;",
        "uniform vec3 cameraPosition;",
        "uniform bool isOrthographic;",
        parameters.toneMapping !== NoToneMapping ? "#define TONE_MAPPING" : "",
        parameters.toneMapping !== NoToneMapping ? ShaderChunk["tonemapping_pars_fragment"] : "",
        parameters.toneMapping !== NoToneMapping ? getToneMappingFunction("toneMapping", parameters.toneMapping) : "",
        parameters.dithering ? "#define DITHERING" : "",
        parameters.transparent ? "" : "#define OPAQUE",
        ShaderChunk["encodings_pars_fragment"],
        getTexelEncodingFunction("linearToOutputTexel", parameters.outputEncoding),
        parameters.depthPacking ? "#define DEPTH_PACKING " + parameters.depthPacking : "",
        "\n"
      ].filter(filterEmptyLine).join("\n");
    }
    vertexShader = resolveIncludes(vertexShader);
    vertexShader = replaceLightNums(vertexShader, parameters);
    vertexShader = replaceClippingPlaneNums(vertexShader, parameters);
    fragmentShader = resolveIncludes(fragmentShader);
    fragmentShader = replaceLightNums(fragmentShader, parameters);
    fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);
    vertexShader = unrollLoops(vertexShader);
    fragmentShader = unrollLoops(fragmentShader);
    if (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {
      versionString = "#version 300 es\n";
      prefixVertex = [
        "precision mediump sampler2DArray;",
        "#define attribute in",
        "#define varying out",
        "#define texture2D texture"
      ].join("\n") + "\n" + prefixVertex;
      prefixFragment = [
        "#define varying in",
        parameters.glslVersion === GLSL3 ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
        parameters.glslVersion === GLSL3 ? "" : "#define gl_FragColor pc_fragColor",
        "#define gl_FragDepthEXT gl_FragDepth",
        "#define texture2D texture",
        "#define textureCube texture",
        "#define texture2DProj textureProj",
        "#define texture2DLodEXT textureLod",
        "#define texture2DProjLodEXT textureProjLod",
        "#define textureCubeLodEXT textureLod",
        "#define texture2DGradEXT textureGrad",
        "#define texture2DProjGradEXT textureProjGrad",
        "#define textureCubeGradEXT textureGrad"
      ].join("\n") + "\n" + prefixFragment;
    }
    const vertexGlsl = versionString + prefixVertex + vertexShader;
    const fragmentGlsl = versionString + prefixFragment + fragmentShader;
    const glVertexShader = WebGLShader(gl, 35633, vertexGlsl);
    const glFragmentShader = WebGLShader(gl, 35632, fragmentGlsl);
    gl.attachShader(program, glVertexShader);
    gl.attachShader(program, glFragmentShader);
    if (parameters.index0AttributeName !== void 0) {
      gl.bindAttribLocation(program, 0, parameters.index0AttributeName);
    } else if (parameters.morphTargets === true) {
      gl.bindAttribLocation(program, 0, "position");
    }
    gl.linkProgram(program);
    if (renderer.debug.checkShaderErrors) {
      const programLog = gl.getProgramInfoLog(program).trim();
      const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
      const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
      let runnable = true;
      let haveDiagnostics = true;
      if (gl.getProgramParameter(program, 35714) === false) {
        runnable = false;
        const vertexErrors = getShaderErrors(gl, glVertexShader, "vertex");
        const fragmentErrors = getShaderErrors(gl, glFragmentShader, "fragment");
        console.error("THREE.WebGLProgram: Shader Error " + gl.getError() + " - VALIDATE_STATUS " + gl.getProgramParameter(program, 35715) + "\n\nProgram Info Log: " + programLog + "\n" + vertexErrors + "\n" + fragmentErrors);
      } else if (programLog !== "") {
        console.warn("THREE.WebGLProgram: Program Info Log:", programLog);
      } else if (vertexLog === "" || fragmentLog === "") {
        haveDiagnostics = false;
      }
      if (haveDiagnostics) {
        this.diagnostics = {
          runnable,
          programLog,
          vertexShader: {
            log: vertexLog,
            prefix: prefixVertex
          },
          fragmentShader: {
            log: fragmentLog,
            prefix: prefixFragment
          }
        };
      }
    }
    gl.deleteShader(glVertexShader);
    gl.deleteShader(glFragmentShader);
    let cachedUniforms;
    this.getUniforms = function() {
      if (cachedUniforms === void 0) {
        cachedUniforms = new WebGLUniforms(gl, program);
      }
      return cachedUniforms;
    };
    let cachedAttributes;
    this.getAttributes = function() {
      if (cachedAttributes === void 0) {
        cachedAttributes = fetchAttributeLocations(gl, program);
      }
      return cachedAttributes;
    };
    this.destroy = function() {
      bindingStates.releaseStatesOfProgram(this);
      gl.deleteProgram(program);
      this.program = void 0;
    };
    this.name = parameters.shaderName;
    this.id = programIdCount++;
    this.cacheKey = cacheKey;
    this.usedTimes = 1;
    this.program = program;
    this.vertexShader = glVertexShader;
    this.fragmentShader = glFragmentShader;
    return this;
  }
  var _id = 0;
  var WebGLShaderCache = class {
    constructor() {
      this.shaderCache = /* @__PURE__ */ new Map();
      this.materialCache = /* @__PURE__ */ new Map();
    }
    update(material) {
      const vertexShader = material.vertexShader;
      const fragmentShader = material.fragmentShader;
      const vertexShaderStage = this._getShaderStage(vertexShader);
      const fragmentShaderStage = this._getShaderStage(fragmentShader);
      const materialShaders = this._getShaderCacheForMaterial(material);
      if (materialShaders.has(vertexShaderStage) === false) {
        materialShaders.add(vertexShaderStage);
        vertexShaderStage.usedTimes++;
      }
      if (materialShaders.has(fragmentShaderStage) === false) {
        materialShaders.add(fragmentShaderStage);
        fragmentShaderStage.usedTimes++;
      }
      return this;
    }
    remove(material) {
      const materialShaders = this.materialCache.get(material);
      for (const shaderStage of materialShaders) {
        shaderStage.usedTimes--;
        if (shaderStage.usedTimes === 0)
          this.shaderCache.delete(shaderStage);
      }
      this.materialCache.delete(material);
      return this;
    }
    getVertexShaderID(material) {
      return this._getShaderStage(material.vertexShader).id;
    }
    getFragmentShaderID(material) {
      return this._getShaderStage(material.fragmentShader).id;
    }
    dispose() {
      this.shaderCache.clear();
      this.materialCache.clear();
    }
    _getShaderCacheForMaterial(material) {
      const cache = this.materialCache;
      if (cache.has(material) === false) {
        cache.set(material, /* @__PURE__ */ new Set());
      }
      return cache.get(material);
    }
    _getShaderStage(code) {
      const cache = this.shaderCache;
      if (cache.has(code) === false) {
        const stage = new WebGLShaderStage();
        cache.set(code, stage);
      }
      return cache.get(code);
    }
  };
  var WebGLShaderStage = class {
    constructor() {
      this.id = _id++;
      this.usedTimes = 0;
    }
  };
  function WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping) {
    const _programLayers = new Layers();
    const _customShaders = new WebGLShaderCache();
    const programs = [];
    const isWebGL2 = capabilities.isWebGL2;
    const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
    const floatVertexTextures = capabilities.floatVertexTextures;
    const maxVertexUniforms = capabilities.maxVertexUniforms;
    const vertexTextures = capabilities.vertexTextures;
    let precision = capabilities.precision;
    const shaderIDs = {
      MeshDepthMaterial: "depth",
      MeshDistanceMaterial: "distanceRGBA",
      MeshNormalMaterial: "normal",
      MeshBasicMaterial: "basic",
      MeshLambertMaterial: "lambert",
      MeshPhongMaterial: "phong",
      MeshToonMaterial: "toon",
      MeshStandardMaterial: "physical",
      MeshPhysicalMaterial: "physical",
      MeshMatcapMaterial: "matcap",
      LineBasicMaterial: "basic",
      LineDashedMaterial: "dashed",
      PointsMaterial: "points",
      ShadowMaterial: "shadow",
      SpriteMaterial: "sprite"
    };
    function getMaxBones(object) {
      const skeleton = object.skeleton;
      const bones2 = skeleton.bones;
      if (floatVertexTextures) {
        return 1024;
      } else {
        const nVertexUniforms = maxVertexUniforms;
        const nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);
        const maxBones = Math.min(nVertexMatrices, bones2.length);
        if (maxBones < bones2.length) {
          console.warn("THREE.WebGLRenderer: Skeleton has " + bones2.length + " bones. This GPU supports " + maxBones + ".");
          return 0;
        }
        return maxBones;
      }
    }
    function getParameters(material, lights, shadows, scene2, object) {
      const fog = scene2.fog;
      const environment = material.isMeshStandardMaterial ? scene2.environment : null;
      const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
      const shaderID = shaderIDs[material.type];
      const maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;
      if (material.precision !== null) {
        precision = capabilities.getMaxPrecision(material.precision);
        if (precision !== material.precision) {
          console.warn("THREE.WebGLProgram.getParameters:", material.precision, "not supported, using", precision, "instead.");
        }
      }
      let vertexShader, fragmentShader;
      let customVertexShaderID, customFragmentShaderID;
      if (shaderID) {
        const shader = ShaderLib[shaderID];
        vertexShader = shader.vertexShader;
        fragmentShader = shader.fragmentShader;
      } else {
        vertexShader = material.vertexShader;
        fragmentShader = material.fragmentShader;
        _customShaders.update(material);
        customVertexShaderID = _customShaders.getVertexShaderID(material);
        customFragmentShaderID = _customShaders.getFragmentShaderID(material);
      }
      const currentRenderTarget = renderer.getRenderTarget();
      const useAlphaTest = material.alphaTest > 0;
      const useClearcoat = material.clearcoat > 0;
      const parameters = {
        isWebGL2,
        shaderID,
        shaderName: material.type,
        vertexShader,
        fragmentShader,
        defines: material.defines,
        customVertexShaderID,
        customFragmentShaderID,
        isRawShaderMaterial: material.isRawShaderMaterial === true,
        glslVersion: material.glslVersion,
        precision,
        instancing: object.isInstancedMesh === true,
        instancingColor: object.isInstancedMesh === true && object.instanceColor !== null,
        supportsVertexTextures: vertexTextures,
        outputEncoding: currentRenderTarget === null ? renderer.outputEncoding : currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.encoding : LinearEncoding,
        map: !!material.map,
        matcap: !!material.matcap,
        envMap: !!envMap,
        envMapMode: envMap && envMap.mapping,
        envMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),
        lightMap: !!material.lightMap,
        aoMap: !!material.aoMap,
        emissiveMap: !!material.emissiveMap,
        bumpMap: !!material.bumpMap,
        normalMap: !!material.normalMap,
        objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
        tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,
        decodeVideoTexture: !!material.map && material.map.isVideoTexture === true && material.map.encoding === sRGBEncoding,
        clearcoat: useClearcoat,
        clearcoatMap: useClearcoat && !!material.clearcoatMap,
        clearcoatRoughnessMap: useClearcoat && !!material.clearcoatRoughnessMap,
        clearcoatNormalMap: useClearcoat && !!material.clearcoatNormalMap,
        displacementMap: !!material.displacementMap,
        roughnessMap: !!material.roughnessMap,
        metalnessMap: !!material.metalnessMap,
        specularMap: !!material.specularMap,
        specularIntensityMap: !!material.specularIntensityMap,
        specularColorMap: !!material.specularColorMap,
        transparent: material.transparent,
        alphaMap: !!material.alphaMap,
        alphaTest: useAlphaTest,
        gradientMap: !!material.gradientMap,
        sheen: material.sheen > 0,
        sheenColorMap: !!material.sheenColorMap,
        sheenRoughnessMap: !!material.sheenRoughnessMap,
        transmission: material.transmission > 0,
        transmissionMap: !!material.transmissionMap,
        thicknessMap: !!material.thicknessMap,
        combine: material.combine,
        vertexTangents: !!material.normalMap && !!object.geometry && !!object.geometry.attributes.tangent,
        vertexColors: material.vertexColors,
        vertexAlphas: material.vertexColors === true && !!object.geometry && !!object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4,
        vertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap || !!material.thicknessMap || !!material.specularIntensityMap || !!material.specularColorMap || !!material.sheenColorMap || !!material.sheenRoughnessMap,
        uvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || material.transmission > 0 || !!material.transmissionMap || !!material.thicknessMap || !!material.specularIntensityMap || !!material.specularColorMap || material.sheen > 0 || !!material.sheenColorMap || !!material.sheenRoughnessMap) && !!material.displacementMap,
        fog: !!fog,
        useFog: material.fog,
        fogExp2: fog && fog.isFogExp2,
        flatShading: !!material.flatShading,
        sizeAttenuation: material.sizeAttenuation,
        logarithmicDepthBuffer,
        skinning: object.isSkinnedMesh === true && maxBones > 0,
        maxBones,
        useVertexTexture: floatVertexTextures,
        morphTargets: !!object.geometry && !!object.geometry.morphAttributes.position,
        morphNormals: !!object.geometry && !!object.geometry.morphAttributes.normal,
        morphTargetsCount: !!object.geometry && !!object.geometry.morphAttributes.position ? object.geometry.morphAttributes.position.length : 0,
        numDirLights: lights.directional.length,
        numPointLights: lights.point.length,
        numSpotLights: lights.spot.length,
        numRectAreaLights: lights.rectArea.length,
        numHemiLights: lights.hemi.length,
        numDirLightShadows: lights.directionalShadowMap.length,
        numPointLightShadows: lights.pointShadowMap.length,
        numSpotLightShadows: lights.spotShadowMap.length,
        numClippingPlanes: clipping.numPlanes,
        numClipIntersection: clipping.numIntersection,
        dithering: material.dithering,
        shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
        shadowMapType: renderer.shadowMap.type,
        toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,
        physicallyCorrectLights: renderer.physicallyCorrectLights,
        premultipliedAlpha: material.premultipliedAlpha,
        doubleSided: material.side === DoubleSide,
        flipSided: material.side === BackSide,
        depthPacking: material.depthPacking !== void 0 ? material.depthPacking : false,
        index0AttributeName: material.index0AttributeName,
        extensionDerivatives: material.extensions && material.extensions.derivatives,
        extensionFragDepth: material.extensions && material.extensions.fragDepth,
        extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,
        extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,
        rendererExtensionFragDepth: isWebGL2 || extensions.has("EXT_frag_depth"),
        rendererExtensionDrawBuffers: isWebGL2 || extensions.has("WEBGL_draw_buffers"),
        rendererExtensionShaderTextureLod: isWebGL2 || extensions.has("EXT_shader_texture_lod"),
        customProgramCacheKey: material.customProgramCacheKey()
      };
      return parameters;
    }
    function getProgramCacheKey(parameters) {
      const array = [];
      if (parameters.shaderID) {
        array.push(parameters.shaderID);
      } else {
        array.push(parameters.customVertexShaderID);
        array.push(parameters.customFragmentShaderID);
      }
      if (parameters.defines !== void 0) {
        for (const name in parameters.defines) {
          array.push(name);
          array.push(parameters.defines[name]);
        }
      }
      if (parameters.isRawShaderMaterial === false) {
        getProgramCacheKeyParameters(array, parameters);
        getProgramCacheKeyBooleans(array, parameters);
        array.push(renderer.outputEncoding);
      }
      array.push(parameters.customProgramCacheKey);
      return array.join();
    }
    function getProgramCacheKeyParameters(array, parameters) {
      array.push(parameters.precision);
      array.push(parameters.outputEncoding);
      array.push(parameters.envMapMode);
      array.push(parameters.combine);
      array.push(parameters.vertexUvs);
      array.push(parameters.fogExp2);
      array.push(parameters.sizeAttenuation);
      array.push(parameters.maxBones);
      array.push(parameters.morphTargetsCount);
      array.push(parameters.numDirLights);
      array.push(parameters.numPointLights);
      array.push(parameters.numSpotLights);
      array.push(parameters.numHemiLights);
      array.push(parameters.numRectAreaLights);
      array.push(parameters.numDirLightShadows);
      array.push(parameters.numPointLightShadows);
      array.push(parameters.numSpotLightShadows);
      array.push(parameters.shadowMapType);
      array.push(parameters.toneMapping);
      array.push(parameters.numClippingPlanes);
      array.push(parameters.numClipIntersection);
    }
    function getProgramCacheKeyBooleans(array, parameters) {
      _programLayers.disableAll();
      if (parameters.isWebGL2)
        _programLayers.enable(0);
      if (parameters.supportsVertexTextures)
        _programLayers.enable(1);
      if (parameters.instancing)
        _programLayers.enable(2);
      if (parameters.instancingColor)
        _programLayers.enable(3);
      if (parameters.map)
        _programLayers.enable(4);
      if (parameters.matcap)
        _programLayers.enable(5);
      if (parameters.envMap)
        _programLayers.enable(6);
      if (parameters.envMapCubeUV)
        _programLayers.enable(7);
      if (parameters.lightMap)
        _programLayers.enable(8);
      if (parameters.aoMap)
        _programLayers.enable(9);
      if (parameters.emissiveMap)
        _programLayers.enable(10);
      if (parameters.bumpMap)
        _programLayers.enable(11);
      if (parameters.normalMap)
        _programLayers.enable(12);
      if (parameters.objectSpaceNormalMap)
        _programLayers.enable(13);
      if (parameters.tangentSpaceNormalMap)
        _programLayers.enable(14);
      if (parameters.clearcoat)
        _programLayers.enable(15);
      if (parameters.clearcoatMap)
        _programLayers.enable(16);
      if (parameters.clearcoatRoughnessMap)
        _programLayers.enable(17);
      if (parameters.clearcoatNormalMap)
        _programLayers.enable(18);
      if (parameters.displacementMap)
        _programLayers.enable(19);
      if (parameters.specularMap)
        _programLayers.enable(20);
      if (parameters.roughnessMap)
        _programLayers.enable(21);
      if (parameters.metalnessMap)
        _programLayers.enable(22);
      if (parameters.gradientMap)
        _programLayers.enable(23);
      if (parameters.alphaMap)
        _programLayers.enable(24);
      if (parameters.alphaTest)
        _programLayers.enable(25);
      if (parameters.vertexColors)
        _programLayers.enable(26);
      if (parameters.vertexAlphas)
        _programLayers.enable(27);
      if (parameters.vertexUvs)
        _programLayers.enable(28);
      if (parameters.vertexTangents)
        _programLayers.enable(29);
      if (parameters.uvsVertexOnly)
        _programLayers.enable(30);
      if (parameters.fog)
        _programLayers.enable(31);
      array.push(_programLayers.mask);
      _programLayers.disableAll();
      if (parameters.useFog)
        _programLayers.enable(0);
      if (parameters.flatShading)
        _programLayers.enable(1);
      if (parameters.logarithmicDepthBuffer)
        _programLayers.enable(2);
      if (parameters.skinning)
        _programLayers.enable(3);
      if (parameters.useVertexTexture)
        _programLayers.enable(4);
      if (parameters.morphTargets)
        _programLayers.enable(5);
      if (parameters.morphNormals)
        _programLayers.enable(6);
      if (parameters.premultipliedAlpha)
        _programLayers.enable(7);
      if (parameters.shadowMapEnabled)
        _programLayers.enable(8);
      if (parameters.physicallyCorrectLights)
        _programLayers.enable(9);
      if (parameters.doubleSided)
        _programLayers.enable(10);
      if (parameters.flipSided)
        _programLayers.enable(11);
      if (parameters.depthPacking)
        _programLayers.enable(12);
      if (parameters.dithering)
        _programLayers.enable(13);
      if (parameters.specularIntensityMap)
        _programLayers.enable(14);
      if (parameters.specularColorMap)
        _programLayers.enable(15);
      if (parameters.transmission)
        _programLayers.enable(16);
      if (parameters.transmissionMap)
        _programLayers.enable(17);
      if (parameters.thicknessMap)
        _programLayers.enable(18);
      if (parameters.sheen)
        _programLayers.enable(19);
      if (parameters.sheenColorMap)
        _programLayers.enable(20);
      if (parameters.sheenRoughnessMap)
        _programLayers.enable(21);
      if (parameters.decodeVideoTexture)
        _programLayers.enable(22);
      if (parameters.transparent)
        _programLayers.enable(23);
      array.push(_programLayers.mask);
    }
    function getUniforms(material) {
      const shaderID = shaderIDs[material.type];
      let uniforms;
      if (shaderID) {
        const shader = ShaderLib[shaderID];
        uniforms = UniformsUtils.clone(shader.uniforms);
      } else {
        uniforms = material.uniforms;
      }
      return uniforms;
    }
    function acquireProgram(parameters, cacheKey) {
      let program;
      for (let p3 = 0, pl = programs.length; p3 < pl; p3++) {
        const preexistingProgram = programs[p3];
        if (preexistingProgram.cacheKey === cacheKey) {
          program = preexistingProgram;
          ++program.usedTimes;
          break;
        }
      }
      if (program === void 0) {
        program = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);
        programs.push(program);
      }
      return program;
    }
    function releaseProgram(program) {
      if (--program.usedTimes === 0) {
        const i2 = programs.indexOf(program);
        programs[i2] = programs[programs.length - 1];
        programs.pop();
        program.destroy();
      }
    }
    function releaseShaderCache(material) {
      _customShaders.remove(material);
    }
    function dispose() {
      _customShaders.dispose();
    }
    return {
      getParameters,
      getProgramCacheKey,
      getUniforms,
      acquireProgram,
      releaseProgram,
      releaseShaderCache,
      programs,
      dispose
    };
  }
  function WebGLProperties() {
    let properties = /* @__PURE__ */ new WeakMap();
    function get(object) {
      let map = properties.get(object);
      if (map === void 0) {
        map = {};
        properties.set(object, map);
      }
      return map;
    }
    function remove(object) {
      properties.delete(object);
    }
    function update3(object, key, value) {
      properties.get(object)[key] = value;
    }
    function dispose() {
      properties = /* @__PURE__ */ new WeakMap();
    }
    return {
      get,
      remove,
      update: update3,
      dispose
    };
  }
  function painterSortStable(a2, b2) {
    if (a2.groupOrder !== b2.groupOrder) {
      return a2.groupOrder - b2.groupOrder;
    } else if (a2.renderOrder !== b2.renderOrder) {
      return a2.renderOrder - b2.renderOrder;
    } else if (a2.material.id !== b2.material.id) {
      return a2.material.id - b2.material.id;
    } else if (a2.z !== b2.z) {
      return a2.z - b2.z;
    } else {
      return a2.id - b2.id;
    }
  }
  function reversePainterSortStable(a2, b2) {
    if (a2.groupOrder !== b2.groupOrder) {
      return a2.groupOrder - b2.groupOrder;
    } else if (a2.renderOrder !== b2.renderOrder) {
      return a2.renderOrder - b2.renderOrder;
    } else if (a2.z !== b2.z) {
      return b2.z - a2.z;
    } else {
      return a2.id - b2.id;
    }
  }
  function WebGLRenderList() {
    const renderItems = [];
    let renderItemsIndex = 0;
    const opaque = [];
    const transmissive = [];
    const transparent = [];
    function init3() {
      renderItemsIndex = 0;
      opaque.length = 0;
      transmissive.length = 0;
      transparent.length = 0;
    }
    function getNextRenderItem(object, geometry, material, groupOrder, z2, group) {
      let renderItem = renderItems[renderItemsIndex];
      if (renderItem === void 0) {
        renderItem = {
          id: object.id,
          object,
          geometry,
          material,
          groupOrder,
          renderOrder: object.renderOrder,
          z: z2,
          group
        };
        renderItems[renderItemsIndex] = renderItem;
      } else {
        renderItem.id = object.id;
        renderItem.object = object;
        renderItem.geometry = geometry;
        renderItem.material = material;
        renderItem.groupOrder = groupOrder;
        renderItem.renderOrder = object.renderOrder;
        renderItem.z = z2;
        renderItem.group = group;
      }
      renderItemsIndex++;
      return renderItem;
    }
    function push(object, geometry, material, groupOrder, z2, group) {
      const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z2, group);
      if (material.transmission > 0) {
        transmissive.push(renderItem);
      } else if (material.transparent === true) {
        transparent.push(renderItem);
      } else {
        opaque.push(renderItem);
      }
    }
    function unshift(object, geometry, material, groupOrder, z2, group) {
      const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z2, group);
      if (material.transmission > 0) {
        transmissive.unshift(renderItem);
      } else if (material.transparent === true) {
        transparent.unshift(renderItem);
      } else {
        opaque.unshift(renderItem);
      }
    }
    function sort(customOpaqueSort, customTransparentSort) {
      if (opaque.length > 1)
        opaque.sort(customOpaqueSort || painterSortStable);
      if (transmissive.length > 1)
        transmissive.sort(customTransparentSort || reversePainterSortStable);
      if (transparent.length > 1)
        transparent.sort(customTransparentSort || reversePainterSortStable);
    }
    function finish() {
      for (let i2 = renderItemsIndex, il = renderItems.length; i2 < il; i2++) {
        const renderItem = renderItems[i2];
        if (renderItem.id === null)
          break;
        renderItem.id = null;
        renderItem.object = null;
        renderItem.geometry = null;
        renderItem.material = null;
        renderItem.group = null;
      }
    }
    return {
      opaque,
      transmissive,
      transparent,
      init: init3,
      push,
      unshift,
      finish,
      sort
    };
  }
  function WebGLRenderLists() {
    let lists = /* @__PURE__ */ new WeakMap();
    function get(scene2, renderCallDepth) {
      let list;
      if (lists.has(scene2) === false) {
        list = new WebGLRenderList();
        lists.set(scene2, [list]);
      } else {
        if (renderCallDepth >= lists.get(scene2).length) {
          list = new WebGLRenderList();
          lists.get(scene2).push(list);
        } else {
          list = lists.get(scene2)[renderCallDepth];
        }
      }
      return list;
    }
    function dispose() {
      lists = /* @__PURE__ */ new WeakMap();
    }
    return {
      get,
      dispose
    };
  }
  function UniformsCache() {
    const lights = {};
    return {
      get: function(light2) {
        if (lights[light2.id] !== void 0) {
          return lights[light2.id];
        }
        let uniforms;
        switch (light2.type) {
          case "DirectionalLight":
            uniforms = {
              direction: new Vector3(),
              color: new Color()
            };
            break;
          case "SpotLight":
            uniforms = {
              position: new Vector3(),
              direction: new Vector3(),
              color: new Color(),
              distance: 0,
              coneCos: 0,
              penumbraCos: 0,
              decay: 0
            };
            break;
          case "PointLight":
            uniforms = {
              position: new Vector3(),
              color: new Color(),
              distance: 0,
              decay: 0
            };
            break;
          case "HemisphereLight":
            uniforms = {
              direction: new Vector3(),
              skyColor: new Color(),
              groundColor: new Color()
            };
            break;
          case "RectAreaLight":
            uniforms = {
              color: new Color(),
              position: new Vector3(),
              halfWidth: new Vector3(),
              halfHeight: new Vector3()
            };
            break;
        }
        lights[light2.id] = uniforms;
        return uniforms;
      }
    };
  }
  function ShadowUniformsCache() {
    const lights = {};
    return {
      get: function(light2) {
        if (lights[light2.id] !== void 0) {
          return lights[light2.id];
        }
        let uniforms;
        switch (light2.type) {
          case "DirectionalLight":
            uniforms = {
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Vector2()
            };
            break;
          case "SpotLight":
            uniforms = {
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Vector2()
            };
            break;
          case "PointLight":
            uniforms = {
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Vector2(),
              shadowCameraNear: 1,
              shadowCameraFar: 1e3
            };
            break;
        }
        lights[light2.id] = uniforms;
        return uniforms;
      }
    };
  }
  var nextVersion = 0;
  function shadowCastingLightsFirst(lightA, lightB) {
    return (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);
  }
  function WebGLLights(extensions, capabilities) {
    const cache = new UniformsCache();
    const shadowCache = ShadowUniformsCache();
    const state2 = {
      version: 0,
      hash: {
        directionalLength: -1,
        pointLength: -1,
        spotLength: -1,
        rectAreaLength: -1,
        hemiLength: -1,
        numDirectionalShadows: -1,
        numPointShadows: -1,
        numSpotShadows: -1
      },
      ambient: [0, 0, 0],
      probe: [],
      directional: [],
      directionalShadow: [],
      directionalShadowMap: [],
      directionalShadowMatrix: [],
      spot: [],
      spotShadow: [],
      spotShadowMap: [],
      spotShadowMatrix: [],
      rectArea: [],
      rectAreaLTC1: null,
      rectAreaLTC2: null,
      point: [],
      pointShadow: [],
      pointShadowMap: [],
      pointShadowMatrix: [],
      hemi: []
    };
    for (let i2 = 0; i2 < 9; i2++)
      state2.probe.push(new Vector3());
    const vector3 = new Vector3();
    const matrix4 = new Matrix4();
    const matrix42 = new Matrix4();
    function setup(lights, physicallyCorrectLights) {
      let r2 = 0, g2 = 0, b2 = 0;
      for (let i2 = 0; i2 < 9; i2++)
        state2.probe[i2].set(0, 0, 0);
      let directionalLength = 0;
      let pointLength = 0;
      let spotLength = 0;
      let rectAreaLength = 0;
      let hemiLength = 0;
      let numDirectionalShadows = 0;
      let numPointShadows = 0;
      let numSpotShadows = 0;
      lights.sort(shadowCastingLightsFirst);
      const scaleFactor = physicallyCorrectLights !== true ? Math.PI : 1;
      for (let i2 = 0, l2 = lights.length; i2 < l2; i2++) {
        const light2 = lights[i2];
        const color = light2.color;
        const intensity = light2.intensity;
        const distance = light2.distance;
        const shadowMap = light2.shadow && light2.shadow.map ? light2.shadow.map.texture : null;
        if (light2.isAmbientLight) {
          r2 += color.r * intensity * scaleFactor;
          g2 += color.g * intensity * scaleFactor;
          b2 += color.b * intensity * scaleFactor;
        } else if (light2.isLightProbe) {
          for (let j2 = 0; j2 < 9; j2++) {
            state2.probe[j2].addScaledVector(light2.sh.coefficients[j2], intensity);
          }
        } else if (light2.isDirectionalLight) {
          const uniforms = cache.get(light2);
          uniforms.color.copy(light2.color).multiplyScalar(light2.intensity * scaleFactor);
          if (light2.castShadow) {
            const shadow = light2.shadow;
            const shadowUniforms = shadowCache.get(light2);
            shadowUniforms.shadowBias = shadow.bias;
            shadowUniforms.shadowNormalBias = shadow.normalBias;
            shadowUniforms.shadowRadius = shadow.radius;
            shadowUniforms.shadowMapSize = shadow.mapSize;
            state2.directionalShadow[directionalLength] = shadowUniforms;
            state2.directionalShadowMap[directionalLength] = shadowMap;
            state2.directionalShadowMatrix[directionalLength] = light2.shadow.matrix;
            numDirectionalShadows++;
          }
          state2.directional[directionalLength] = uniforms;
          directionalLength++;
        } else if (light2.isSpotLight) {
          const uniforms = cache.get(light2);
          uniforms.position.setFromMatrixPosition(light2.matrixWorld);
          uniforms.color.copy(color).multiplyScalar(intensity * scaleFactor);
          uniforms.distance = distance;
          uniforms.coneCos = Math.cos(light2.angle);
          uniforms.penumbraCos = Math.cos(light2.angle * (1 - light2.penumbra));
          uniforms.decay = light2.decay;
          if (light2.castShadow) {
            const shadow = light2.shadow;
            const shadowUniforms = shadowCache.get(light2);
            shadowUniforms.shadowBias = shadow.bias;
            shadowUniforms.shadowNormalBias = shadow.normalBias;
            shadowUniforms.shadowRadius = shadow.radius;
            shadowUniforms.shadowMapSize = shadow.mapSize;
            state2.spotShadow[spotLength] = shadowUniforms;
            state2.spotShadowMap[spotLength] = shadowMap;
            state2.spotShadowMatrix[spotLength] = light2.shadow.matrix;
            numSpotShadows++;
          }
          state2.spot[spotLength] = uniforms;
          spotLength++;
        } else if (light2.isRectAreaLight) {
          const uniforms = cache.get(light2);
          uniforms.color.copy(color).multiplyScalar(intensity);
          uniforms.halfWidth.set(light2.width * 0.5, 0, 0);
          uniforms.halfHeight.set(0, light2.height * 0.5, 0);
          state2.rectArea[rectAreaLength] = uniforms;
          rectAreaLength++;
        } else if (light2.isPointLight) {
          const uniforms = cache.get(light2);
          uniforms.color.copy(light2.color).multiplyScalar(light2.intensity * scaleFactor);
          uniforms.distance = light2.distance;
          uniforms.decay = light2.decay;
          if (light2.castShadow) {
            const shadow = light2.shadow;
            const shadowUniforms = shadowCache.get(light2);
            shadowUniforms.shadowBias = shadow.bias;
            shadowUniforms.shadowNormalBias = shadow.normalBias;
            shadowUniforms.shadowRadius = shadow.radius;
            shadowUniforms.shadowMapSize = shadow.mapSize;
            shadowUniforms.shadowCameraNear = shadow.camera.near;
            shadowUniforms.shadowCameraFar = shadow.camera.far;
            state2.pointShadow[pointLength] = shadowUniforms;
            state2.pointShadowMap[pointLength] = shadowMap;
            state2.pointShadowMatrix[pointLength] = light2.shadow.matrix;
            numPointShadows++;
          }
          state2.point[pointLength] = uniforms;
          pointLength++;
        } else if (light2.isHemisphereLight) {
          const uniforms = cache.get(light2);
          uniforms.skyColor.copy(light2.color).multiplyScalar(intensity * scaleFactor);
          uniforms.groundColor.copy(light2.groundColor).multiplyScalar(intensity * scaleFactor);
          state2.hemi[hemiLength] = uniforms;
          hemiLength++;
        }
      }
      if (rectAreaLength > 0) {
        if (capabilities.isWebGL2) {
          state2.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
          state2.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
        } else {
          if (extensions.has("OES_texture_float_linear") === true) {
            state2.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
            state2.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
          } else if (extensions.has("OES_texture_half_float_linear") === true) {
            state2.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
            state2.rectAreaLTC2 = UniformsLib.LTC_HALF_2;
          } else {
            console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.");
          }
        }
      }
      state2.ambient[0] = r2;
      state2.ambient[1] = g2;
      state2.ambient[2] = b2;
      const hash = state2.hash;
      if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {
        state2.directional.length = directionalLength;
        state2.spot.length = spotLength;
        state2.rectArea.length = rectAreaLength;
        state2.point.length = pointLength;
        state2.hemi.length = hemiLength;
        state2.directionalShadow.length = numDirectionalShadows;
        state2.directionalShadowMap.length = numDirectionalShadows;
        state2.pointShadow.length = numPointShadows;
        state2.pointShadowMap.length = numPointShadows;
        state2.spotShadow.length = numSpotShadows;
        state2.spotShadowMap.length = numSpotShadows;
        state2.directionalShadowMatrix.length = numDirectionalShadows;
        state2.pointShadowMatrix.length = numPointShadows;
        state2.spotShadowMatrix.length = numSpotShadows;
        hash.directionalLength = directionalLength;
        hash.pointLength = pointLength;
        hash.spotLength = spotLength;
        hash.rectAreaLength = rectAreaLength;
        hash.hemiLength = hemiLength;
        hash.numDirectionalShadows = numDirectionalShadows;
        hash.numPointShadows = numPointShadows;
        hash.numSpotShadows = numSpotShadows;
        state2.version = nextVersion++;
      }
    }
    function setupView(lights, camera3) {
      let directionalLength = 0;
      let pointLength = 0;
      let spotLength = 0;
      let rectAreaLength = 0;
      let hemiLength = 0;
      const viewMatrix = camera3.matrixWorldInverse;
      for (let i2 = 0, l2 = lights.length; i2 < l2; i2++) {
        const light2 = lights[i2];
        if (light2.isDirectionalLight) {
          const uniforms = state2.directional[directionalLength];
          uniforms.direction.setFromMatrixPosition(light2.matrixWorld);
          vector3.setFromMatrixPosition(light2.target.matrixWorld);
          uniforms.direction.sub(vector3);
          uniforms.direction.transformDirection(viewMatrix);
          directionalLength++;
        } else if (light2.isSpotLight) {
          const uniforms = state2.spot[spotLength];
          uniforms.position.setFromMatrixPosition(light2.matrixWorld);
          uniforms.position.applyMatrix4(viewMatrix);
          uniforms.direction.setFromMatrixPosition(light2.matrixWorld);
          vector3.setFromMatrixPosition(light2.target.matrixWorld);
          uniforms.direction.sub(vector3);
          uniforms.direction.transformDirection(viewMatrix);
          spotLength++;
        } else if (light2.isRectAreaLight) {
          const uniforms = state2.rectArea[rectAreaLength];
          uniforms.position.setFromMatrixPosition(light2.matrixWorld);
          uniforms.position.applyMatrix4(viewMatrix);
          matrix42.identity();
          matrix4.copy(light2.matrixWorld);
          matrix4.premultiply(viewMatrix);
          matrix42.extractRotation(matrix4);
          uniforms.halfWidth.set(light2.width * 0.5, 0, 0);
          uniforms.halfHeight.set(0, light2.height * 0.5, 0);
          uniforms.halfWidth.applyMatrix4(matrix42);
          uniforms.halfHeight.applyMatrix4(matrix42);
          rectAreaLength++;
        } else if (light2.isPointLight) {
          const uniforms = state2.point[pointLength];
          uniforms.position.setFromMatrixPosition(light2.matrixWorld);
          uniforms.position.applyMatrix4(viewMatrix);
          pointLength++;
        } else if (light2.isHemisphereLight) {
          const uniforms = state2.hemi[hemiLength];
          uniforms.direction.setFromMatrixPosition(light2.matrixWorld);
          uniforms.direction.transformDirection(viewMatrix);
          uniforms.direction.normalize();
          hemiLength++;
        }
      }
    }
    return {
      setup,
      setupView,
      state: state2
    };
  }
  function WebGLRenderState(extensions, capabilities) {
    const lights = new WebGLLights(extensions, capabilities);
    const lightsArray = [];
    const shadowsArray = [];
    function init3() {
      lightsArray.length = 0;
      shadowsArray.length = 0;
    }
    function pushLight(light2) {
      lightsArray.push(light2);
    }
    function pushShadow(shadowLight) {
      shadowsArray.push(shadowLight);
    }
    function setupLights(physicallyCorrectLights) {
      lights.setup(lightsArray, physicallyCorrectLights);
    }
    function setupLightsView(camera3) {
      lights.setupView(lightsArray, camera3);
    }
    const state2 = {
      lightsArray,
      shadowsArray,
      lights
    };
    return {
      init: init3,
      state: state2,
      setupLights,
      setupLightsView,
      pushLight,
      pushShadow
    };
  }
  function WebGLRenderStates(extensions, capabilities) {
    let renderStates = /* @__PURE__ */ new WeakMap();
    function get(scene2, renderCallDepth = 0) {
      let renderState;
      if (renderStates.has(scene2) === false) {
        renderState = new WebGLRenderState(extensions, capabilities);
        renderStates.set(scene2, [renderState]);
      } else {
        if (renderCallDepth >= renderStates.get(scene2).length) {
          renderState = new WebGLRenderState(extensions, capabilities);
          renderStates.get(scene2).push(renderState);
        } else {
          renderState = renderStates.get(scene2)[renderCallDepth];
        }
      }
      return renderState;
    }
    function dispose() {
      renderStates = /* @__PURE__ */ new WeakMap();
    }
    return {
      get,
      dispose
    };
  }
  var MeshDepthMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.type = "MeshDepthMaterial";
      this.depthPacking = BasicDepthPacking;
      this.map = null;
      this.alphaMap = null;
      this.displacementMap = null;
      this.displacementScale = 1;
      this.displacementBias = 0;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.fog = false;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.depthPacking = source.depthPacking;
      this.map = source.map;
      this.alphaMap = source.alphaMap;
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      return this;
    }
  };
  MeshDepthMaterial.prototype.isMeshDepthMaterial = true;
  var MeshDistanceMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.type = "MeshDistanceMaterial";
      this.referencePosition = new Vector3();
      this.nearDistance = 1;
      this.farDistance = 1e3;
      this.map = null;
      this.alphaMap = null;
      this.displacementMap = null;
      this.displacementScale = 1;
      this.displacementBias = 0;
      this.fog = false;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.referencePosition.copy(source.referencePosition);
      this.nearDistance = source.nearDistance;
      this.farDistance = source.farDistance;
      this.map = source.map;
      this.alphaMap = source.alphaMap;
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      return this;
    }
  };
  MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;
  var vertex = "void main() {\n	gl_Position = vec4( position, 1.0 );\n}";
  var fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	const float samples = float( VSM_SAMPLES );\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n	for ( float i = 0.0; i < samples; i ++ ) {\n		float uvOffset = uvStart + i * uvStride;\n		#ifdef HORIZONTAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean / samples;\n	squared_mean = squared_mean / samples;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
  function WebGLShadowMap(_renderer, _objects, _capabilities) {
    let _frustum = new Frustum();
    const _shadowMapSize = new Vector2(), _viewportSize = new Vector2(), _viewport = new Vector4(), _depthMaterial = new MeshDepthMaterial({ depthPacking: RGBADepthPacking }), _distanceMaterial = new MeshDistanceMaterial(), _materialCache = {}, _maxTextureSize = _capabilities.maxTextureSize;
    const shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };
    const shadowMaterialVertical = new ShaderMaterial({
      defines: {
        VSM_SAMPLES: 8
      },
      uniforms: {
        shadow_pass: { value: null },
        resolution: { value: new Vector2() },
        radius: { value: 4 }
      },
      vertexShader: vertex,
      fragmentShader: fragment
    });
    const shadowMaterialHorizontal = shadowMaterialVertical.clone();
    shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;
    const fullScreenTri = new BufferGeometry();
    fullScreenTri.setAttribute("position", new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));
    const fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);
    const scope = this;
    this.enabled = false;
    this.autoUpdate = true;
    this.needsUpdate = false;
    this.type = PCFShadowMap;
    this.render = function(lights, scene2, camera3) {
      if (scope.enabled === false)
        return;
      if (scope.autoUpdate === false && scope.needsUpdate === false)
        return;
      if (lights.length === 0)
        return;
      const currentRenderTarget = _renderer.getRenderTarget();
      const activeCubeFace = _renderer.getActiveCubeFace();
      const activeMipmapLevel = _renderer.getActiveMipmapLevel();
      const _state = _renderer.state;
      _state.setBlending(NoBlending);
      _state.buffers.color.setClear(1, 1, 1, 1);
      _state.buffers.depth.setTest(true);
      _state.setScissorTest(false);
      for (let i2 = 0, il = lights.length; i2 < il; i2++) {
        const light2 = lights[i2];
        const shadow = light2.shadow;
        if (shadow === void 0) {
          console.warn("THREE.WebGLShadowMap:", light2, "has no shadow.");
          continue;
        }
        if (shadow.autoUpdate === false && shadow.needsUpdate === false)
          continue;
        _shadowMapSize.copy(shadow.mapSize);
        const shadowFrameExtents = shadow.getFrameExtents();
        _shadowMapSize.multiply(shadowFrameExtents);
        _viewportSize.copy(shadow.mapSize);
        if (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {
          if (_shadowMapSize.x > _maxTextureSize) {
            _viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);
            _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
            shadow.mapSize.x = _viewportSize.x;
          }
          if (_shadowMapSize.y > _maxTextureSize) {
            _viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);
            _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
            shadow.mapSize.y = _viewportSize.y;
          }
        }
        if (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {
          const pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };
          shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
          shadow.map.texture.name = light2.name + ".shadowMap";
          shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
          shadow.camera.updateProjectionMatrix();
        }
        if (shadow.map === null) {
          const pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };
          shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
          shadow.map.texture.name = light2.name + ".shadowMap";
          shadow.camera.updateProjectionMatrix();
        }
        _renderer.setRenderTarget(shadow.map);
        _renderer.clear();
        const viewportCount = shadow.getViewportCount();
        for (let vp = 0; vp < viewportCount; vp++) {
          const viewport = shadow.getViewport(vp);
          _viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);
          _state.viewport(_viewport);
          shadow.updateMatrices(light2, vp);
          _frustum = shadow.getFrustum();
          renderObject(scene2, camera3, shadow.camera, light2, this.type);
        }
        if (!shadow.isPointLightShadow && this.type === VSMShadowMap) {
          VSMPass(shadow, camera3);
        }
        shadow.needsUpdate = false;
      }
      scope.needsUpdate = false;
      _renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
    };
    function VSMPass(shadow, camera3) {
      const geometry = _objects.update(fullScreenMesh);
      if (shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples) {
        shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
        shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;
        shadowMaterialVertical.needsUpdate = true;
        shadowMaterialHorizontal.needsUpdate = true;
      }
      shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
      shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
      shadowMaterialVertical.uniforms.radius.value = shadow.radius;
      _renderer.setRenderTarget(shadow.mapPass);
      _renderer.clear();
      _renderer.renderBufferDirect(camera3, null, geometry, shadowMaterialVertical, fullScreenMesh, null);
      shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
      shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
      shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
      _renderer.setRenderTarget(shadow.map);
      _renderer.clear();
      _renderer.renderBufferDirect(camera3, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);
    }
    function getDepthMaterial(object, geometry, material, light2, shadowCameraNear, shadowCameraFar, type) {
      let result = null;
      const customMaterial = light2.isPointLight === true ? object.customDistanceMaterial : object.customDepthMaterial;
      if (customMaterial !== void 0) {
        result = customMaterial;
      } else {
        result = light2.isPointLight === true ? _distanceMaterial : _depthMaterial;
      }
      if (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0 || material.displacementMap && material.displacementScale !== 0 || material.alphaMap && material.alphaTest > 0) {
        const keyA = result.uuid, keyB = material.uuid;
        let materialsForVariant = _materialCache[keyA];
        if (materialsForVariant === void 0) {
          materialsForVariant = {};
          _materialCache[keyA] = materialsForVariant;
        }
        let cachedMaterial = materialsForVariant[keyB];
        if (cachedMaterial === void 0) {
          cachedMaterial = result.clone();
          materialsForVariant[keyB] = cachedMaterial;
        }
        result = cachedMaterial;
      }
      result.visible = material.visible;
      result.wireframe = material.wireframe;
      if (type === VSMShadowMap) {
        result.side = material.shadowSide !== null ? material.shadowSide : material.side;
      } else {
        result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];
      }
      result.alphaMap = material.alphaMap;
      result.alphaTest = material.alphaTest;
      result.clipShadows = material.clipShadows;
      result.clippingPlanes = material.clippingPlanes;
      result.clipIntersection = material.clipIntersection;
      result.displacementMap = material.displacementMap;
      result.displacementScale = material.displacementScale;
      result.displacementBias = material.displacementBias;
      result.wireframeLinewidth = material.wireframeLinewidth;
      result.linewidth = material.linewidth;
      if (light2.isPointLight === true && result.isMeshDistanceMaterial === true) {
        result.referencePosition.setFromMatrixPosition(light2.matrixWorld);
        result.nearDistance = shadowCameraNear;
        result.farDistance = shadowCameraFar;
      }
      return result;
    }
    function renderObject(object, camera3, shadowCamera, light2, type) {
      if (object.visible === false)
        return;
      const visible = object.layers.test(camera3.layers);
      if (visible && (object.isMesh || object.isLine || object.isPoints)) {
        if ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {
          object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
          const geometry = _objects.update(object);
          const material = object.material;
          if (Array.isArray(material)) {
            const groups = geometry.groups;
            for (let k2 = 0, kl = groups.length; k2 < kl; k2++) {
              const group = groups[k2];
              const groupMaterial = material[group.materialIndex];
              if (groupMaterial && groupMaterial.visible) {
                const depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light2, shadowCamera.near, shadowCamera.far, type);
                _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);
              }
            }
          } else if (material.visible) {
            const depthMaterial = getDepthMaterial(object, geometry, material, light2, shadowCamera.near, shadowCamera.far, type);
            _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);
          }
        }
      }
      const children2 = object.children;
      for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
        renderObject(children2[i2], camera3, shadowCamera, light2, type);
      }
    }
  }
  function WebGLState(gl, extensions, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    function ColorBuffer() {
      let locked = false;
      const color = new Vector4();
      let currentColorMask = null;
      const currentColorClear = new Vector4(0, 0, 0, 0);
      return {
        setMask: function(colorMask) {
          if (currentColorMask !== colorMask && !locked) {
            gl.colorMask(colorMask, colorMask, colorMask, colorMask);
            currentColorMask = colorMask;
          }
        },
        setLocked: function(lock) {
          locked = lock;
        },
        setClear: function(r2, g2, b2, a2, premultipliedAlpha) {
          if (premultipliedAlpha === true) {
            r2 *= a2;
            g2 *= a2;
            b2 *= a2;
          }
          color.set(r2, g2, b2, a2);
          if (currentColorClear.equals(color) === false) {
            gl.clearColor(r2, g2, b2, a2);
            currentColorClear.copy(color);
          }
        },
        reset: function() {
          locked = false;
          currentColorMask = null;
          currentColorClear.set(-1, 0, 0, 0);
        }
      };
    }
    function DepthBuffer() {
      let locked = false;
      let currentDepthMask = null;
      let currentDepthFunc = null;
      let currentDepthClear = null;
      return {
        setTest: function(depthTest) {
          if (depthTest) {
            enable(2929);
          } else {
            disable(2929);
          }
        },
        setMask: function(depthMask) {
          if (currentDepthMask !== depthMask && !locked) {
            gl.depthMask(depthMask);
            currentDepthMask = depthMask;
          }
        },
        setFunc: function(depthFunc) {
          if (currentDepthFunc !== depthFunc) {
            if (depthFunc) {
              switch (depthFunc) {
                case NeverDepth:
                  gl.depthFunc(512);
                  break;
                case AlwaysDepth:
                  gl.depthFunc(519);
                  break;
                case LessDepth:
                  gl.depthFunc(513);
                  break;
                case LessEqualDepth:
                  gl.depthFunc(515);
                  break;
                case EqualDepth:
                  gl.depthFunc(514);
                  break;
                case GreaterEqualDepth:
                  gl.depthFunc(518);
                  break;
                case GreaterDepth:
                  gl.depthFunc(516);
                  break;
                case NotEqualDepth:
                  gl.depthFunc(517);
                  break;
                default:
                  gl.depthFunc(515);
              }
            } else {
              gl.depthFunc(515);
            }
            currentDepthFunc = depthFunc;
          }
        },
        setLocked: function(lock) {
          locked = lock;
        },
        setClear: function(depth) {
          if (currentDepthClear !== depth) {
            gl.clearDepth(depth);
            currentDepthClear = depth;
          }
        },
        reset: function() {
          locked = false;
          currentDepthMask = null;
          currentDepthFunc = null;
          currentDepthClear = null;
        }
      };
    }
    function StencilBuffer() {
      let locked = false;
      let currentStencilMask = null;
      let currentStencilFunc = null;
      let currentStencilRef = null;
      let currentStencilFuncMask = null;
      let currentStencilFail = null;
      let currentStencilZFail = null;
      let currentStencilZPass = null;
      let currentStencilClear = null;
      return {
        setTest: function(stencilTest) {
          if (!locked) {
            if (stencilTest) {
              enable(2960);
            } else {
              disable(2960);
            }
          }
        },
        setMask: function(stencilMask) {
          if (currentStencilMask !== stencilMask && !locked) {
            gl.stencilMask(stencilMask);
            currentStencilMask = stencilMask;
          }
        },
        setFunc: function(stencilFunc, stencilRef, stencilMask) {
          if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {
            gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
            currentStencilFunc = stencilFunc;
            currentStencilRef = stencilRef;
            currentStencilFuncMask = stencilMask;
          }
        },
        setOp: function(stencilFail, stencilZFail, stencilZPass) {
          if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {
            gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
            currentStencilFail = stencilFail;
            currentStencilZFail = stencilZFail;
            currentStencilZPass = stencilZPass;
          }
        },
        setLocked: function(lock) {
          locked = lock;
        },
        setClear: function(stencil) {
          if (currentStencilClear !== stencil) {
            gl.clearStencil(stencil);
            currentStencilClear = stencil;
          }
        },
        reset: function() {
          locked = false;
          currentStencilMask = null;
          currentStencilFunc = null;
          currentStencilRef = null;
          currentStencilFuncMask = null;
          currentStencilFail = null;
          currentStencilZFail = null;
          currentStencilZPass = null;
          currentStencilClear = null;
        }
      };
    }
    const colorBuffer = new ColorBuffer();
    const depthBuffer = new DepthBuffer();
    const stencilBuffer = new StencilBuffer();
    let enabledCapabilities = {};
    let currentBoundFramebuffers = {};
    let currentDrawbuffers = /* @__PURE__ */ new WeakMap();
    let defaultDrawbuffers = [];
    let currentProgram = null;
    let currentBlendingEnabled = false;
    let currentBlending = null;
    let currentBlendEquation = null;
    let currentBlendSrc = null;
    let currentBlendDst = null;
    let currentBlendEquationAlpha = null;
    let currentBlendSrcAlpha = null;
    let currentBlendDstAlpha = null;
    let currentPremultipledAlpha = false;
    let currentFlipSided = null;
    let currentCullFace = null;
    let currentLineWidth = null;
    let currentPolygonOffsetFactor = null;
    let currentPolygonOffsetUnits = null;
    const maxTextures = gl.getParameter(35661);
    let lineWidthAvailable = false;
    let version = 0;
    const glVersion = gl.getParameter(7938);
    if (glVersion.indexOf("WebGL") !== -1) {
      version = parseFloat(/^WebGL (\d)/.exec(glVersion)[1]);
      lineWidthAvailable = version >= 1;
    } else if (glVersion.indexOf("OpenGL ES") !== -1) {
      version = parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]);
      lineWidthAvailable = version >= 2;
    }
    let currentTextureSlot = null;
    let currentBoundTextures = {};
    const scissorParam = gl.getParameter(3088);
    const viewportParam = gl.getParameter(2978);
    const currentScissor = new Vector4().fromArray(scissorParam);
    const currentViewport = new Vector4().fromArray(viewportParam);
    function createTexture(type, target, count) {
      const data = new Uint8Array(4);
      const texture = gl.createTexture();
      gl.bindTexture(type, texture);
      gl.texParameteri(type, 10241, 9728);
      gl.texParameteri(type, 10240, 9728);
      for (let i2 = 0; i2 < count; i2++) {
        gl.texImage2D(target + i2, 0, 6408, 1, 1, 0, 6408, 5121, data);
      }
      return texture;
    }
    const emptyTextures = {};
    emptyTextures[3553] = createTexture(3553, 3553, 1);
    emptyTextures[34067] = createTexture(34067, 34069, 6);
    colorBuffer.setClear(0, 0, 0, 1);
    depthBuffer.setClear(1);
    stencilBuffer.setClear(0);
    enable(2929);
    depthBuffer.setFunc(LessEqualDepth);
    setFlipSided(false);
    setCullFace(CullFaceBack);
    enable(2884);
    setBlending(NoBlending);
    function enable(id) {
      if (enabledCapabilities[id] !== true) {
        gl.enable(id);
        enabledCapabilities[id] = true;
      }
    }
    function disable(id) {
      if (enabledCapabilities[id] !== false) {
        gl.disable(id);
        enabledCapabilities[id] = false;
      }
    }
    function bindFramebuffer(target, framebuffer) {
      if (currentBoundFramebuffers[target] !== framebuffer) {
        gl.bindFramebuffer(target, framebuffer);
        currentBoundFramebuffers[target] = framebuffer;
        if (isWebGL2) {
          if (target === 36009) {
            currentBoundFramebuffers[36160] = framebuffer;
          }
          if (target === 36160) {
            currentBoundFramebuffers[36009] = framebuffer;
          }
        }
        return true;
      }
      return false;
    }
    function drawBuffers(renderTarget, framebuffer) {
      let drawBuffers2 = defaultDrawbuffers;
      let needsUpdate = false;
      if (renderTarget) {
        drawBuffers2 = currentDrawbuffers.get(framebuffer);
        if (drawBuffers2 === void 0) {
          drawBuffers2 = [];
          currentDrawbuffers.set(framebuffer, drawBuffers2);
        }
        if (renderTarget.isWebGLMultipleRenderTargets) {
          const textures = renderTarget.texture;
          if (drawBuffers2.length !== textures.length || drawBuffers2[0] !== 36064) {
            for (let i2 = 0, il = textures.length; i2 < il; i2++) {
              drawBuffers2[i2] = 36064 + i2;
            }
            drawBuffers2.length = textures.length;
            needsUpdate = true;
          }
        } else {
          if (drawBuffers2[0] !== 36064) {
            drawBuffers2[0] = 36064;
            needsUpdate = true;
          }
        }
      } else {
        if (drawBuffers2[0] !== 1029) {
          drawBuffers2[0] = 1029;
          needsUpdate = true;
        }
      }
      if (needsUpdate) {
        if (capabilities.isWebGL2) {
          gl.drawBuffers(drawBuffers2);
        } else {
          extensions.get("WEBGL_draw_buffers").drawBuffersWEBGL(drawBuffers2);
        }
      }
    }
    function useProgram(program) {
      if (currentProgram !== program) {
        gl.useProgram(program);
        currentProgram = program;
        return true;
      }
      return false;
    }
    const equationToGL = {
      [AddEquation]: 32774,
      [SubtractEquation]: 32778,
      [ReverseSubtractEquation]: 32779
    };
    if (isWebGL2) {
      equationToGL[MinEquation] = 32775;
      equationToGL[MaxEquation] = 32776;
    } else {
      const extension = extensions.get("EXT_blend_minmax");
      if (extension !== null) {
        equationToGL[MinEquation] = extension.MIN_EXT;
        equationToGL[MaxEquation] = extension.MAX_EXT;
      }
    }
    const factorToGL = {
      [ZeroFactor]: 0,
      [OneFactor]: 1,
      [SrcColorFactor]: 768,
      [SrcAlphaFactor]: 770,
      [SrcAlphaSaturateFactor]: 776,
      [DstColorFactor]: 774,
      [DstAlphaFactor]: 772,
      [OneMinusSrcColorFactor]: 769,
      [OneMinusSrcAlphaFactor]: 771,
      [OneMinusDstColorFactor]: 775,
      [OneMinusDstAlphaFactor]: 773
    };
    function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
      if (blending === NoBlending) {
        if (currentBlendingEnabled === true) {
          disable(3042);
          currentBlendingEnabled = false;
        }
        return;
      }
      if (currentBlendingEnabled === false) {
        enable(3042);
        currentBlendingEnabled = true;
      }
      if (blending !== CustomBlending) {
        if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
          if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {
            gl.blendEquation(32774);
            currentBlendEquation = AddEquation;
            currentBlendEquationAlpha = AddEquation;
          }
          if (premultipliedAlpha) {
            switch (blending) {
              case NormalBlending:
                gl.blendFuncSeparate(1, 771, 1, 771);
                break;
              case AdditiveBlending:
                gl.blendFunc(1, 1);
                break;
              case SubtractiveBlending:
                gl.blendFuncSeparate(0, 769, 0, 1);
                break;
              case MultiplyBlending:
                gl.blendFuncSeparate(0, 768, 0, 770);
                break;
              default:
                console.error("THREE.WebGLState: Invalid blending: ", blending);
                break;
            }
          } else {
            switch (blending) {
              case NormalBlending:
                gl.blendFuncSeparate(770, 771, 1, 771);
                break;
              case AdditiveBlending:
                gl.blendFunc(770, 1);
                break;
              case SubtractiveBlending:
                gl.blendFuncSeparate(0, 769, 0, 1);
                break;
              case MultiplyBlending:
                gl.blendFunc(0, 768);
                break;
              default:
                console.error("THREE.WebGLState: Invalid blending: ", blending);
                break;
            }
          }
          currentBlendSrc = null;
          currentBlendDst = null;
          currentBlendSrcAlpha = null;
          currentBlendDstAlpha = null;
          currentBlending = blending;
          currentPremultipledAlpha = premultipliedAlpha;
        }
        return;
      }
      blendEquationAlpha = blendEquationAlpha || blendEquation;
      blendSrcAlpha = blendSrcAlpha || blendSrc;
      blendDstAlpha = blendDstAlpha || blendDst;
      if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
        gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
        currentBlendEquation = blendEquation;
        currentBlendEquationAlpha = blendEquationAlpha;
      }
      if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
        gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
        currentBlendSrc = blendSrc;
        currentBlendDst = blendDst;
        currentBlendSrcAlpha = blendSrcAlpha;
        currentBlendDstAlpha = blendDstAlpha;
      }
      currentBlending = blending;
      currentPremultipledAlpha = null;
    }
    function setMaterial(material, frontFaceCW) {
      material.side === DoubleSide ? disable(2884) : enable(2884);
      let flipSided = material.side === BackSide;
      if (frontFaceCW)
        flipSided = !flipSided;
      setFlipSided(flipSided);
      material.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);
      depthBuffer.setFunc(material.depthFunc);
      depthBuffer.setTest(material.depthTest);
      depthBuffer.setMask(material.depthWrite);
      colorBuffer.setMask(material.colorWrite);
      const stencilWrite = material.stencilWrite;
      stencilBuffer.setTest(stencilWrite);
      if (stencilWrite) {
        stencilBuffer.setMask(material.stencilWriteMask);
        stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
        stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
      }
      setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
      material.alphaToCoverage === true ? enable(32926) : disable(32926);
    }
    function setFlipSided(flipSided) {
      if (currentFlipSided !== flipSided) {
        if (flipSided) {
          gl.frontFace(2304);
        } else {
          gl.frontFace(2305);
        }
        currentFlipSided = flipSided;
      }
    }
    function setCullFace(cullFace) {
      if (cullFace !== CullFaceNone) {
        enable(2884);
        if (cullFace !== currentCullFace) {
          if (cullFace === CullFaceBack) {
            gl.cullFace(1029);
          } else if (cullFace === CullFaceFront) {
            gl.cullFace(1028);
          } else {
            gl.cullFace(1032);
          }
        }
      } else {
        disable(2884);
      }
      currentCullFace = cullFace;
    }
    function setLineWidth(width2) {
      if (width2 !== currentLineWidth) {
        if (lineWidthAvailable)
          gl.lineWidth(width2);
        currentLineWidth = width2;
      }
    }
    function setPolygonOffset(polygonOffset, factor, units) {
      if (polygonOffset) {
        enable(32823);
        if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
          gl.polygonOffset(factor, units);
          currentPolygonOffsetFactor = factor;
          currentPolygonOffsetUnits = units;
        }
      } else {
        disable(32823);
      }
    }
    function setScissorTest(scissorTest) {
      if (scissorTest) {
        enable(3089);
      } else {
        disable(3089);
      }
    }
    function activeTexture(webglSlot) {
      if (webglSlot === void 0)
        webglSlot = 33984 + maxTextures - 1;
      if (currentTextureSlot !== webglSlot) {
        gl.activeTexture(webglSlot);
        currentTextureSlot = webglSlot;
      }
    }
    function bindTexture(webglType, webglTexture) {
      if (currentTextureSlot === null) {
        activeTexture();
      }
      let boundTexture = currentBoundTextures[currentTextureSlot];
      if (boundTexture === void 0) {
        boundTexture = { type: void 0, texture: void 0 };
        currentBoundTextures[currentTextureSlot] = boundTexture;
      }
      if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
        gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
        boundTexture.type = webglType;
        boundTexture.texture = webglTexture;
      }
    }
    function unbindTexture() {
      const boundTexture = currentBoundTextures[currentTextureSlot];
      if (boundTexture !== void 0 && boundTexture.type !== void 0) {
        gl.bindTexture(boundTexture.type, null);
        boundTexture.type = void 0;
        boundTexture.texture = void 0;
      }
    }
    function compressedTexImage2D() {
      try {
        gl.compressedTexImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texSubImage2D() {
      try {
        gl.texSubImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texSubImage3D() {
      try {
        gl.texSubImage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function compressedTexSubImage2D() {
      try {
        gl.compressedTexSubImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texStorage2D() {
      try {
        gl.texStorage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texStorage3D() {
      try {
        gl.texStorage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texImage2D() {
      try {
        gl.texImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texImage3D() {
      try {
        gl.texImage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function scissor(scissor2) {
      if (currentScissor.equals(scissor2) === false) {
        gl.scissor(scissor2.x, scissor2.y, scissor2.z, scissor2.w);
        currentScissor.copy(scissor2);
      }
    }
    function viewport(viewport2) {
      if (currentViewport.equals(viewport2) === false) {
        gl.viewport(viewport2.x, viewport2.y, viewport2.z, viewport2.w);
        currentViewport.copy(viewport2);
      }
    }
    function reset() {
      gl.disable(3042);
      gl.disable(2884);
      gl.disable(2929);
      gl.disable(32823);
      gl.disable(3089);
      gl.disable(2960);
      gl.disable(32926);
      gl.blendEquation(32774);
      gl.blendFunc(1, 0);
      gl.blendFuncSeparate(1, 0, 1, 0);
      gl.colorMask(true, true, true, true);
      gl.clearColor(0, 0, 0, 0);
      gl.depthMask(true);
      gl.depthFunc(513);
      gl.clearDepth(1);
      gl.stencilMask(4294967295);
      gl.stencilFunc(519, 0, 4294967295);
      gl.stencilOp(7680, 7680, 7680);
      gl.clearStencil(0);
      gl.cullFace(1029);
      gl.frontFace(2305);
      gl.polygonOffset(0, 0);
      gl.activeTexture(33984);
      gl.bindFramebuffer(36160, null);
      if (isWebGL2 === true) {
        gl.bindFramebuffer(36009, null);
        gl.bindFramebuffer(36008, null);
      }
      gl.useProgram(null);
      gl.lineWidth(1);
      gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);
      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
      enabledCapabilities = {};
      currentTextureSlot = null;
      currentBoundTextures = {};
      currentBoundFramebuffers = {};
      currentDrawbuffers = /* @__PURE__ */ new WeakMap();
      defaultDrawbuffers = [];
      currentProgram = null;
      currentBlendingEnabled = false;
      currentBlending = null;
      currentBlendEquation = null;
      currentBlendSrc = null;
      currentBlendDst = null;
      currentBlendEquationAlpha = null;
      currentBlendSrcAlpha = null;
      currentBlendDstAlpha = null;
      currentPremultipledAlpha = false;
      currentFlipSided = null;
      currentCullFace = null;
      currentLineWidth = null;
      currentPolygonOffsetFactor = null;
      currentPolygonOffsetUnits = null;
      currentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);
      currentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);
      colorBuffer.reset();
      depthBuffer.reset();
      stencilBuffer.reset();
    }
    return {
      buffers: {
        color: colorBuffer,
        depth: depthBuffer,
        stencil: stencilBuffer
      },
      enable,
      disable,
      bindFramebuffer,
      drawBuffers,
      useProgram,
      setBlending,
      setMaterial,
      setFlipSided,
      setCullFace,
      setLineWidth,
      setPolygonOffset,
      setScissorTest,
      activeTexture,
      bindTexture,
      unbindTexture,
      compressedTexImage2D,
      texImage2D,
      texImage3D,
      texStorage2D,
      texStorage3D,
      texSubImage2D,
      texSubImage3D,
      compressedTexSubImage2D,
      scissor,
      viewport,
      reset
    };
  }
  function WebGLTextures(_gl, extensions, state2, properties, capabilities, utils2, info) {
    const isWebGL2 = capabilities.isWebGL2;
    const maxTextures = capabilities.maxTextures;
    const maxCubemapSize = capabilities.maxCubemapSize;
    const maxTextureSize = capabilities.maxTextureSize;
    const maxSamples = capabilities.maxSamples;
    const hasMultisampledRenderToTexture = extensions.has("WEBGL_multisampled_render_to_texture");
    const MultisampledRenderToTextureExtension = hasMultisampledRenderToTexture ? extensions.get("WEBGL_multisampled_render_to_texture") : void 0;
    const _videoTextures = /* @__PURE__ */ new WeakMap();
    let _canvas2;
    let useOffscreenCanvas = false;
    try {
      useOffscreenCanvas = typeof OffscreenCanvas !== "undefined" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
    } catch (err) {
    }
    function createCanvas(width2, height2) {
      return useOffscreenCanvas ? new OffscreenCanvas(width2, height2) : createElementNS("canvas");
    }
    function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {
      let scale3 = 1;
      if (image.width > maxSize || image.height > maxSize) {
        scale3 = maxSize / Math.max(image.width, image.height);
      }
      if (scale3 < 1 || needsPowerOfTwo === true) {
        if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
          const floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;
          const width2 = floor(scale3 * image.width);
          const height2 = floor(scale3 * image.height);
          if (_canvas2 === void 0)
            _canvas2 = createCanvas(width2, height2);
          const canvas = needsNewCanvas ? createCanvas(width2, height2) : _canvas2;
          canvas.width = width2;
          canvas.height = height2;
          const context = canvas.getContext("2d");
          context.drawImage(image, 0, 0, width2, height2);
          console.warn("THREE.WebGLRenderer: Texture has been resized from (" + image.width + "x" + image.height + ") to (" + width2 + "x" + height2 + ").");
          return canvas;
        } else {
          if ("data" in image) {
            console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + image.width + "x" + image.height + ").");
          }
          return image;
        }
      }
      return image;
    }
    function isPowerOfTwo$1(image) {
      return isPowerOfTwo(image.width) && isPowerOfTwo(image.height);
    }
    function textureNeedsPowerOfTwo(texture) {
      if (isWebGL2)
        return false;
      return texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
    }
    function textureNeedsGenerateMipmaps(texture, supportsMips) {
      return texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
    }
    function generateMipmap(target) {
      _gl.generateMipmap(target);
    }
    function getInternalFormat(internalFormatName, glFormat, glType, encoding, isVideoTexture = false) {
      if (isWebGL2 === false)
        return glFormat;
      if (internalFormatName !== null) {
        if (_gl[internalFormatName] !== void 0)
          return _gl[internalFormatName];
        console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + internalFormatName + "'");
      }
      let internalFormat = glFormat;
      if (glFormat === 6403) {
        if (glType === 5126)
          internalFormat = 33326;
        if (glType === 5131)
          internalFormat = 33325;
        if (glType === 5121)
          internalFormat = 33321;
      }
      if (glFormat === 33319) {
        if (glType === 5126)
          internalFormat = 33328;
        if (glType === 5131)
          internalFormat = 33327;
        if (glType === 5121)
          internalFormat = 33323;
      }
      if (glFormat === 6408) {
        if (glType === 5126)
          internalFormat = 34836;
        if (glType === 5131)
          internalFormat = 34842;
        if (glType === 5121)
          internalFormat = encoding === sRGBEncoding && isVideoTexture === false ? 35907 : 32856;
        if (glType === 32819)
          internalFormat = 32854;
        if (glType === 32820)
          internalFormat = 32855;
      }
      if (internalFormat === 33325 || internalFormat === 33326 || internalFormat === 33327 || internalFormat === 33328 || internalFormat === 34842 || internalFormat === 34836) {
        extensions.get("EXT_color_buffer_float");
      }
      return internalFormat;
    }
    function getMipLevels(texture, image, supportsMips) {
      if (textureNeedsGenerateMipmaps(texture, supportsMips) === true || texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
        return Math.log2(Math.max(image.width, image.height)) + 1;
      } else if (texture.mipmaps !== void 0 && texture.mipmaps.length > 0) {
        return texture.mipmaps.length;
      } else if (texture.isCompressedTexture && Array.isArray(texture.image)) {
        return image.mipmaps.length;
      } else {
        return 1;
      }
    }
    function filterFallback(f2) {
      if (f2 === NearestFilter || f2 === NearestMipmapNearestFilter || f2 === NearestMipmapLinearFilter) {
        return 9728;
      }
      return 9729;
    }
    function onTextureDispose(event) {
      const texture = event.target;
      texture.removeEventListener("dispose", onTextureDispose);
      deallocateTexture(texture);
      if (texture.isVideoTexture) {
        _videoTextures.delete(texture);
      }
      info.memory.textures--;
    }
    function onRenderTargetDispose(event) {
      const renderTarget = event.target;
      renderTarget.removeEventListener("dispose", onRenderTargetDispose);
      deallocateRenderTarget(renderTarget);
    }
    function deallocateTexture(texture) {
      const textureProperties = properties.get(texture);
      if (textureProperties.__webglInit === void 0)
        return;
      _gl.deleteTexture(textureProperties.__webglTexture);
      properties.remove(texture);
    }
    function deallocateRenderTarget(renderTarget) {
      const texture = renderTarget.texture;
      const renderTargetProperties = properties.get(renderTarget);
      const textureProperties = properties.get(texture);
      if (!renderTarget)
        return;
      if (textureProperties.__webglTexture !== void 0) {
        _gl.deleteTexture(textureProperties.__webglTexture);
        info.memory.textures--;
      }
      if (renderTarget.depthTexture) {
        renderTarget.depthTexture.dispose();
      }
      if (renderTarget.isWebGLCubeRenderTarget) {
        for (let i2 = 0; i2 < 6; i2++) {
          _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i2]);
          if (renderTargetProperties.__webglDepthbuffer)
            _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i2]);
        }
      } else {
        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);
        if (renderTargetProperties.__webglDepthbuffer)
          _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
        if (renderTargetProperties.__webglMultisampledFramebuffer)
          _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);
        if (renderTargetProperties.__webglColorRenderbuffer)
          _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);
        if (renderTargetProperties.__webglDepthRenderbuffer)
          _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
      }
      if (renderTarget.isWebGLMultipleRenderTargets) {
        for (let i2 = 0, il = texture.length; i2 < il; i2++) {
          const attachmentProperties = properties.get(texture[i2]);
          if (attachmentProperties.__webglTexture) {
            _gl.deleteTexture(attachmentProperties.__webglTexture);
            info.memory.textures--;
          }
          properties.remove(texture[i2]);
        }
      }
      properties.remove(texture);
      properties.remove(renderTarget);
    }
    let textureUnits = 0;
    function resetTextureUnits() {
      textureUnits = 0;
    }
    function allocateTextureUnit() {
      const textureUnit = textureUnits;
      if (textureUnit >= maxTextures) {
        console.warn("THREE.WebGLTextures: Trying to use " + textureUnit + " texture units while this GPU supports only " + maxTextures);
      }
      textureUnits += 1;
      return textureUnit;
    }
    function setTexture2D(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.isVideoTexture)
        updateVideoTexture(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        const image = texture.image;
        if (image === void 0) {
          console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");
        } else if (image.complete === false) {
          console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
        } else {
          uploadTexture(textureProperties, texture, slot);
          return;
        }
      }
      state2.activeTexture(33984 + slot);
      state2.bindTexture(3553, textureProperties.__webglTexture);
    }
    function setTexture2DArray(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        uploadTexture(textureProperties, texture, slot);
        return;
      }
      state2.activeTexture(33984 + slot);
      state2.bindTexture(35866, textureProperties.__webglTexture);
    }
    function setTexture3D(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        uploadTexture(textureProperties, texture, slot);
        return;
      }
      state2.activeTexture(33984 + slot);
      state2.bindTexture(32879, textureProperties.__webglTexture);
    }
    function setTextureCube(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        uploadCubeTexture(textureProperties, texture, slot);
        return;
      }
      state2.activeTexture(33984 + slot);
      state2.bindTexture(34067, textureProperties.__webglTexture);
    }
    const wrappingToGL = {
      [RepeatWrapping]: 10497,
      [ClampToEdgeWrapping]: 33071,
      [MirroredRepeatWrapping]: 33648
    };
    const filterToGL = {
      [NearestFilter]: 9728,
      [NearestMipmapNearestFilter]: 9984,
      [NearestMipmapLinearFilter]: 9986,
      [LinearFilter]: 9729,
      [LinearMipmapNearestFilter]: 9985,
      [LinearMipmapLinearFilter]: 9987
    };
    function setTextureParameters(textureType, texture, supportsMips) {
      if (supportsMips) {
        _gl.texParameteri(textureType, 10242, wrappingToGL[texture.wrapS]);
        _gl.texParameteri(textureType, 10243, wrappingToGL[texture.wrapT]);
        if (textureType === 32879 || textureType === 35866) {
          _gl.texParameteri(textureType, 32882, wrappingToGL[texture.wrapR]);
        }
        _gl.texParameteri(textureType, 10240, filterToGL[texture.magFilter]);
        _gl.texParameteri(textureType, 10241, filterToGL[texture.minFilter]);
      } else {
        _gl.texParameteri(textureType, 10242, 33071);
        _gl.texParameteri(textureType, 10243, 33071);
        if (textureType === 32879 || textureType === 35866) {
          _gl.texParameteri(textureType, 32882, 33071);
        }
        if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {
          console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.");
        }
        _gl.texParameteri(textureType, 10240, filterFallback(texture.magFilter));
        _gl.texParameteri(textureType, 10241, filterFallback(texture.minFilter));
        if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
          console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.");
        }
      }
      if (extensions.has("EXT_texture_filter_anisotropic") === true) {
        const extension = extensions.get("EXT_texture_filter_anisotropic");
        if (texture.type === FloatType && extensions.has("OES_texture_float_linear") === false)
          return;
        if (isWebGL2 === false && (texture.type === HalfFloatType && extensions.has("OES_texture_half_float_linear") === false))
          return;
        if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
          _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));
          properties.get(texture).__currentAnisotropy = texture.anisotropy;
        }
      }
    }
    function initTexture(textureProperties, texture) {
      if (textureProperties.__webglInit === void 0) {
        textureProperties.__webglInit = true;
        texture.addEventListener("dispose", onTextureDispose);
        textureProperties.__webglTexture = _gl.createTexture();
        info.memory.textures++;
      }
    }
    function uploadTexture(textureProperties, texture, slot) {
      let textureType = 3553;
      if (texture.isDataTexture2DArray)
        textureType = 35866;
      if (texture.isDataTexture3D)
        textureType = 32879;
      initTexture(textureProperties, texture);
      state2.activeTexture(33984 + slot);
      state2.bindTexture(textureType, textureProperties.__webglTexture);
      _gl.pixelStorei(37440, texture.flipY);
      _gl.pixelStorei(37441, texture.premultiplyAlpha);
      _gl.pixelStorei(3317, texture.unpackAlignment);
      _gl.pixelStorei(37443, 0);
      const needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo$1(texture.image) === false;
      let image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);
      image = verifyColorSpace(texture, image);
      const supportsMips = isPowerOfTwo$1(image) || isWebGL2, glFormat = utils2.convert(texture.format, texture.encoding);
      let glType = utils2.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding, texture.isVideoTexture);
      setTextureParameters(textureType, texture, supportsMips);
      let mipmap;
      const mipmaps = texture.mipmaps;
      const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
      const allocateMemory = textureProperties.__version === void 0;
      const levels = getMipLevels(texture, image, supportsMips);
      if (texture.isDepthTexture) {
        glInternalFormat = 6402;
        if (isWebGL2) {
          if (texture.type === FloatType) {
            glInternalFormat = 36012;
          } else if (texture.type === UnsignedIntType) {
            glInternalFormat = 33190;
          } else if (texture.type === UnsignedInt248Type) {
            glInternalFormat = 35056;
          } else {
            glInternalFormat = 33189;
          }
        } else {
          if (texture.type === FloatType) {
            console.error("WebGLRenderer: Floating point depth texture requires WebGL2.");
          }
        }
        if (texture.format === DepthFormat && glInternalFormat === 6402) {
          if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {
            console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.");
            texture.type = UnsignedShortType;
            glType = utils2.convert(texture.type);
          }
        }
        if (texture.format === DepthStencilFormat && glInternalFormat === 6402) {
          glInternalFormat = 34041;
          if (texture.type !== UnsignedInt248Type) {
            console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.");
            texture.type = UnsignedInt248Type;
            glType = utils2.convert(texture.type);
          }
        }
        if (useTexStorage && allocateMemory) {
          state2.texStorage2D(3553, 1, glInternalFormat, image.width, image.height);
        } else {
          state2.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
        }
      } else if (texture.isDataTexture) {
        if (mipmaps.length > 0 && supportsMips) {
          if (useTexStorage && allocateMemory) {
            state2.texStorage2D(3553, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
          }
          for (let i2 = 0, il = mipmaps.length; i2 < il; i2++) {
            mipmap = mipmaps[i2];
            if (useTexStorage) {
              state2.texSubImage2D(3553, 0, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
            } else {
              state2.texImage2D(3553, i2, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
            }
          }
          texture.generateMipmaps = false;
        } else {
          if (useTexStorage) {
            if (allocateMemory) {
              state2.texStorage2D(3553, levels, glInternalFormat, image.width, image.height);
            }
            state2.texSubImage2D(3553, 0, 0, 0, image.width, image.height, glFormat, glType, image.data);
          } else {
            state2.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
          }
        }
      } else if (texture.isCompressedTexture) {
        if (useTexStorage && allocateMemory) {
          state2.texStorage2D(3553, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
        }
        for (let i2 = 0, il = mipmaps.length; i2 < il; i2++) {
          mipmap = mipmaps[i2];
          if (texture.format !== RGBAFormat) {
            if (glFormat !== null) {
              if (useTexStorage) {
                state2.compressedTexSubImage2D(3553, i2, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
              } else {
                state2.compressedTexImage2D(3553, i2, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
              }
            } else {
              console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
            }
          } else {
            if (useTexStorage) {
              state2.texSubImage2D(3553, i2, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
            } else {
              state2.texImage2D(3553, i2, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
            }
          }
        }
      } else if (texture.isDataTexture2DArray) {
        if (useTexStorage) {
          if (allocateMemory) {
            state2.texStorage3D(35866, levels, glInternalFormat, image.width, image.height, image.depth);
          }
          state2.texSubImage3D(35866, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
        } else {
          state2.texImage3D(35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
        }
      } else if (texture.isDataTexture3D) {
        if (useTexStorage) {
          if (allocateMemory) {
            state2.texStorage3D(32879, levels, glInternalFormat, image.width, image.height, image.depth);
          }
          state2.texSubImage3D(32879, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
        } else {
          state2.texImage3D(32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
        }
      } else if (texture.isFramebufferTexture) {
        if (useTexStorage && allocateMemory) {
          state2.texStorage2D(3553, levels, glInternalFormat, image.width, image.height);
        } else {
          state2.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
        }
      } else {
        if (mipmaps.length > 0 && supportsMips) {
          if (useTexStorage && allocateMemory) {
            state2.texStorage2D(3553, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
          }
          for (let i2 = 0, il = mipmaps.length; i2 < il; i2++) {
            mipmap = mipmaps[i2];
            if (useTexStorage) {
              state2.texSubImage2D(3553, i2, 0, 0, glFormat, glType, mipmap);
            } else {
              state2.texImage2D(3553, i2, glInternalFormat, glFormat, glType, mipmap);
            }
          }
          texture.generateMipmaps = false;
        } else {
          if (useTexStorage) {
            if (allocateMemory) {
              state2.texStorage2D(3553, levels, glInternalFormat, image.width, image.height);
            }
            state2.texSubImage2D(3553, 0, 0, 0, glFormat, glType, image);
          } else {
            state2.texImage2D(3553, 0, glInternalFormat, glFormat, glType, image);
          }
        }
      }
      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
        generateMipmap(textureType);
      }
      textureProperties.__version = texture.version;
      if (texture.onUpdate)
        texture.onUpdate(texture);
    }
    function uploadCubeTexture(textureProperties, texture, slot) {
      if (texture.image.length !== 6)
        return;
      initTexture(textureProperties, texture);
      state2.activeTexture(33984 + slot);
      state2.bindTexture(34067, textureProperties.__webglTexture);
      _gl.pixelStorei(37440, texture.flipY);
      _gl.pixelStorei(37441, texture.premultiplyAlpha);
      _gl.pixelStorei(3317, texture.unpackAlignment);
      _gl.pixelStorei(37443, 0);
      const isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);
      const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
      const cubeImage = [];
      for (let i2 = 0; i2 < 6; i2++) {
        if (!isCompressed && !isDataTexture) {
          cubeImage[i2] = resizeImage(texture.image[i2], false, true, maxCubemapSize);
        } else {
          cubeImage[i2] = isDataTexture ? texture.image[i2].image : texture.image[i2];
        }
        cubeImage[i2] = verifyColorSpace(texture, cubeImage[i2]);
      }
      const image = cubeImage[0], supportsMips = isPowerOfTwo$1(image) || isWebGL2, glFormat = utils2.convert(texture.format, texture.encoding), glType = utils2.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
      const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
      const allocateMemory = textureProperties.__version === void 0;
      let levels = getMipLevels(texture, image, supportsMips);
      setTextureParameters(34067, texture, supportsMips);
      let mipmaps;
      if (isCompressed) {
        if (useTexStorage && allocateMemory) {
          state2.texStorage2D(34067, levels, glInternalFormat, image.width, image.height);
        }
        for (let i2 = 0; i2 < 6; i2++) {
          mipmaps = cubeImage[i2].mipmaps;
          for (let j2 = 0; j2 < mipmaps.length; j2++) {
            const mipmap = mipmaps[j2];
            if (texture.format !== RGBAFormat) {
              if (glFormat !== null) {
                if (useTexStorage) {
                  state2.compressedTexSubImage2D(34069 + i2, j2, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                } else {
                  state2.compressedTexImage2D(34069 + i2, j2, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                }
              } else {
                console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()");
              }
            } else {
              if (useTexStorage) {
                state2.texSubImage2D(34069 + i2, j2, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
              } else {
                state2.texImage2D(34069 + i2, j2, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
              }
            }
          }
        }
      } else {
        mipmaps = texture.mipmaps;
        if (useTexStorage && allocateMemory) {
          if (mipmaps.length > 0)
            levels++;
          state2.texStorage2D(34067, levels, glInternalFormat, cubeImage[0].width, cubeImage[0].height);
        }
        for (let i2 = 0; i2 < 6; i2++) {
          if (isDataTexture) {
            if (useTexStorage) {
              state2.texSubImage2D(34069 + i2, 0, 0, 0, cubeImage[i2].width, cubeImage[i2].height, glFormat, glType, cubeImage[i2].data);
            } else {
              state2.texImage2D(34069 + i2, 0, glInternalFormat, cubeImage[i2].width, cubeImage[i2].height, 0, glFormat, glType, cubeImage[i2].data);
            }
            for (let j2 = 0; j2 < mipmaps.length; j2++) {
              const mipmap = mipmaps[j2];
              const mipmapImage = mipmap.image[i2].image;
              if (useTexStorage) {
                state2.texSubImage2D(34069 + i2, j2 + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data);
              } else {
                state2.texImage2D(34069 + i2, j2 + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);
              }
            }
          } else {
            if (useTexStorage) {
              state2.texSubImage2D(34069 + i2, 0, 0, 0, glFormat, glType, cubeImage[i2]);
            } else {
              state2.texImage2D(34069 + i2, 0, glInternalFormat, glFormat, glType, cubeImage[i2]);
            }
            for (let j2 = 0; j2 < mipmaps.length; j2++) {
              const mipmap = mipmaps[j2];
              if (useTexStorage) {
                state2.texSubImage2D(34069 + i2, j2 + 1, 0, 0, glFormat, glType, mipmap.image[i2]);
              } else {
                state2.texImage2D(34069 + i2, j2 + 1, glInternalFormat, glFormat, glType, mipmap.image[i2]);
              }
            }
          }
        }
      }
      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
        generateMipmap(34067);
      }
      textureProperties.__version = texture.version;
      if (texture.onUpdate)
        texture.onUpdate(texture);
    }
    function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget) {
      const glFormat = utils2.convert(texture.format, texture.encoding);
      const glType = utils2.convert(texture.type);
      const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
      const renderTargetProperties = properties.get(renderTarget);
      if (!renderTargetProperties.__hasExternalTextures) {
        if (textureTarget === 32879 || textureTarget === 35866) {
          state2.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);
        } else {
          state2.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
        }
      }
      state2.bindFramebuffer(36160, framebuffer);
      if (renderTarget.useRenderToTexture) {
        MultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT(36160, attachment, textureTarget, properties.get(texture).__webglTexture, 0, getRenderTargetSamples(renderTarget));
      } else {
        _gl.framebufferTexture2D(36160, attachment, textureTarget, properties.get(texture).__webglTexture, 0);
      }
      state2.bindFramebuffer(36160, null);
    }
    function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
      _gl.bindRenderbuffer(36161, renderbuffer);
      if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {
        let glInternalFormat = 33189;
        if (isMultisample || renderTarget.useRenderToTexture) {
          const depthTexture = renderTarget.depthTexture;
          if (depthTexture && depthTexture.isDepthTexture) {
            if (depthTexture.type === FloatType) {
              glInternalFormat = 36012;
            } else if (depthTexture.type === UnsignedIntType) {
              glInternalFormat = 33190;
            }
          }
          const samples = getRenderTargetSamples(renderTarget);
          if (renderTarget.useRenderToTexture) {
            MultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
          } else {
            _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
          }
        } else {
          _gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);
        }
        _gl.framebufferRenderbuffer(36160, 36096, 36161, renderbuffer);
      } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {
        const samples = getRenderTargetSamples(renderTarget);
        if (isMultisample && renderTarget.useRenderbuffer) {
          _gl.renderbufferStorageMultisample(36161, samples, 35056, renderTarget.width, renderTarget.height);
        } else if (renderTarget.useRenderToTexture) {
          MultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT(36161, samples, 35056, renderTarget.width, renderTarget.height);
        } else {
          _gl.renderbufferStorage(36161, 34041, renderTarget.width, renderTarget.height);
        }
        _gl.framebufferRenderbuffer(36160, 33306, 36161, renderbuffer);
      } else {
        const texture = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture[0] : renderTarget.texture;
        const glFormat = utils2.convert(texture.format, texture.encoding);
        const glType = utils2.convert(texture.type);
        const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
        const samples = getRenderTargetSamples(renderTarget);
        if (isMultisample && renderTarget.useRenderbuffer) {
          _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
        } else if (renderTarget.useRenderToTexture) {
          MultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
        } else {
          _gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);
        }
      }
      _gl.bindRenderbuffer(36161, null);
    }
    function setupDepthTexture(framebuffer, renderTarget) {
      const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;
      if (isCube)
        throw new Error("Depth Texture with cube render targets is not supported");
      state2.bindFramebuffer(36160, framebuffer);
      if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {
        throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
      }
      if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
        renderTarget.depthTexture.image.width = renderTarget.width;
        renderTarget.depthTexture.image.height = renderTarget.height;
        renderTarget.depthTexture.needsUpdate = true;
      }
      setTexture2D(renderTarget.depthTexture, 0);
      const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;
      const samples = getRenderTargetSamples(renderTarget);
      if (renderTarget.depthTexture.format === DepthFormat) {
        if (renderTarget.useRenderToTexture) {
          MultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT(36160, 36096, 3553, webglDepthTexture, 0, samples);
        } else {
          _gl.framebufferTexture2D(36160, 36096, 3553, webglDepthTexture, 0);
        }
      } else if (renderTarget.depthTexture.format === DepthStencilFormat) {
        if (renderTarget.useRenderToTexture) {
          MultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT(36160, 33306, 3553, webglDepthTexture, 0, samples);
        } else {
          _gl.framebufferTexture2D(36160, 33306, 3553, webglDepthTexture, 0);
        }
      } else {
        throw new Error("Unknown depthTexture format");
      }
    }
    function setupDepthRenderbuffer(renderTarget) {
      const renderTargetProperties = properties.get(renderTarget);
      const isCube = renderTarget.isWebGLCubeRenderTarget === true;
      if (renderTarget.depthTexture && !renderTargetProperties.__autoAllocateDepthBuffer) {
        if (isCube)
          throw new Error("target.depthTexture not supported in Cube render targets");
        setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
      } else {
        if (isCube) {
          renderTargetProperties.__webglDepthbuffer = [];
          for (let i2 = 0; i2 < 6; i2++) {
            state2.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer[i2]);
            renderTargetProperties.__webglDepthbuffer[i2] = _gl.createRenderbuffer();
            setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i2], renderTarget, false);
          }
        } else {
          state2.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer);
          renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
          setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);
        }
      }
      state2.bindFramebuffer(36160, null);
    }
    function rebindTextures(renderTarget, colorTexture, depthTexture) {
      const renderTargetProperties = properties.get(renderTarget);
      if (colorTexture !== void 0) {
        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, 36064, 3553);
      }
      if (depthTexture !== void 0) {
        setupDepthRenderbuffer(renderTarget);
      }
    }
    function setupRenderTarget(renderTarget) {
      const texture = renderTarget.texture;
      const renderTargetProperties = properties.get(renderTarget);
      const textureProperties = properties.get(texture);
      renderTarget.addEventListener("dispose", onRenderTargetDispose);
      if (renderTarget.isWebGLMultipleRenderTargets !== true) {
        if (textureProperties.__webglTexture === void 0) {
          textureProperties.__webglTexture = _gl.createTexture();
        }
        textureProperties.__version = texture.version;
        info.memory.textures++;
      }
      const isCube = renderTarget.isWebGLCubeRenderTarget === true;
      const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;
      const isRenderTarget3D = texture.isDataTexture3D || texture.isDataTexture2DArray;
      const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
      if (isCube) {
        renderTargetProperties.__webglFramebuffer = [];
        for (let i2 = 0; i2 < 6; i2++) {
          renderTargetProperties.__webglFramebuffer[i2] = _gl.createFramebuffer();
        }
      } else {
        renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
        if (isMultipleRenderTargets) {
          if (capabilities.drawBuffers) {
            const textures = renderTarget.texture;
            for (let i2 = 0, il = textures.length; i2 < il; i2++) {
              const attachmentProperties = properties.get(textures[i2]);
              if (attachmentProperties.__webglTexture === void 0) {
                attachmentProperties.__webglTexture = _gl.createTexture();
                info.memory.textures++;
              }
            }
          } else {
            console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");
          }
        } else if (renderTarget.useRenderbuffer) {
          if (isWebGL2) {
            renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
            renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();
            _gl.bindRenderbuffer(36161, renderTargetProperties.__webglColorRenderbuffer);
            const glFormat = utils2.convert(texture.format, texture.encoding);
            const glType = utils2.convert(texture.type);
            const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
            const samples = getRenderTargetSamples(renderTarget);
            _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
            state2.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);
            _gl.framebufferRenderbuffer(36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer);
            _gl.bindRenderbuffer(36161, null);
            if (renderTarget.depthBuffer) {
              renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
              setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
            }
            state2.bindFramebuffer(36160, null);
          } else {
            console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
          }
        }
      }
      if (isCube) {
        state2.bindTexture(34067, textureProperties.__webglTexture);
        setTextureParameters(34067, texture, supportsMips);
        for (let i2 = 0; i2 < 6; i2++) {
          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i2], renderTarget, texture, 36064, 34069 + i2);
        }
        if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
          generateMipmap(34067);
        }
        state2.unbindTexture();
      } else if (isMultipleRenderTargets) {
        const textures = renderTarget.texture;
        for (let i2 = 0, il = textures.length; i2 < il; i2++) {
          const attachment = textures[i2];
          const attachmentProperties = properties.get(attachment);
          state2.bindTexture(3553, attachmentProperties.__webglTexture);
          setTextureParameters(3553, attachment, supportsMips);
          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, 36064 + i2, 3553);
          if (textureNeedsGenerateMipmaps(attachment, supportsMips)) {
            generateMipmap(3553);
          }
        }
        state2.unbindTexture();
      } else {
        let glTextureType = 3553;
        if (isRenderTarget3D) {
          if (isWebGL2) {
            const isTexture3D = texture.isDataTexture3D;
            glTextureType = isTexture3D ? 32879 : 35866;
          } else {
            console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.");
          }
        }
        state2.bindTexture(glTextureType, textureProperties.__webglTexture);
        setTextureParameters(glTextureType, texture, supportsMips);
        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, 36064, glTextureType);
        if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
          generateMipmap(glTextureType);
        }
        state2.unbindTexture();
      }
      if (renderTarget.depthBuffer) {
        setupDepthRenderbuffer(renderTarget);
      }
    }
    function updateRenderTargetMipmap(renderTarget) {
      const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
      const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];
      for (let i2 = 0, il = textures.length; i2 < il; i2++) {
        const texture = textures[i2];
        if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
          const target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;
          const webglTexture = properties.get(texture).__webglTexture;
          state2.bindTexture(target, webglTexture);
          generateMipmap(target);
          state2.unbindTexture();
        }
      }
    }
    function updateMultisampleRenderTarget(renderTarget) {
      if (renderTarget.useRenderbuffer) {
        if (isWebGL2) {
          const width2 = renderTarget.width;
          const height2 = renderTarget.height;
          let mask = 16384;
          const invalidationArray = [36064];
          const depthStyle = renderTarget.stencilBuffer ? 33306 : 36096;
          if (renderTarget.depthBuffer) {
            invalidationArray.push(depthStyle);
          }
          if (!renderTarget.ignoreDepthForMultisampleCopy) {
            if (renderTarget.depthBuffer)
              mask |= 256;
            if (renderTarget.stencilBuffer)
              mask |= 1024;
          }
          const renderTargetProperties = properties.get(renderTarget);
          state2.bindFramebuffer(36008, renderTargetProperties.__webglMultisampledFramebuffer);
          state2.bindFramebuffer(36009, renderTargetProperties.__webglFramebuffer);
          if (renderTarget.ignoreDepthForMultisampleCopy) {
            _gl.invalidateFramebuffer(36008, [depthStyle]);
            _gl.invalidateFramebuffer(36009, [depthStyle]);
          }
          _gl.blitFramebuffer(0, 0, width2, height2, 0, 0, width2, height2, mask, 9728);
          _gl.invalidateFramebuffer(36008, invalidationArray);
          state2.bindFramebuffer(36008, null);
          state2.bindFramebuffer(36009, renderTargetProperties.__webglMultisampledFramebuffer);
        } else {
          console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
        }
      }
    }
    function getRenderTargetSamples(renderTarget) {
      return isWebGL2 && (renderTarget.useRenderbuffer || renderTarget.useRenderToTexture) ? Math.min(maxSamples, renderTarget.samples) : 0;
    }
    function updateVideoTexture(texture) {
      const frame = info.render.frame;
      if (_videoTextures.get(texture) !== frame) {
        _videoTextures.set(texture, frame);
        texture.update();
      }
    }
    function verifyColorSpace(texture, image) {
      const encoding = texture.encoding;
      const format = texture.format;
      const type = texture.type;
      if (texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _SRGBAFormat)
        return image;
      if (encoding !== LinearEncoding) {
        if (encoding === sRGBEncoding) {
          if (isWebGL2 === false) {
            if (extensions.has("EXT_sRGB") === true && format === RGBAFormat) {
              texture.format = _SRGBAFormat;
              texture.minFilter = LinearFilter;
              texture.generateMipmaps = false;
            } else {
              image = ImageUtils.sRGBToLinear(image);
            }
          } else {
            if (format !== RGBAFormat || type !== UnsignedByteType) {
              console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.");
            }
          }
        } else {
          console.error("THREE.WebGLTextures: Unsupported texture encoding:", encoding);
        }
      }
      return image;
    }
    let warnedTexture2D = false;
    let warnedTextureCube = false;
    function safeSetTexture2D(texture, slot) {
      if (texture && texture.isWebGLRenderTarget) {
        if (warnedTexture2D === false) {
          console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.");
          warnedTexture2D = true;
        }
        texture = texture.texture;
      }
      setTexture2D(texture, slot);
    }
    function safeSetTextureCube(texture, slot) {
      if (texture && texture.isWebGLCubeRenderTarget) {
        if (warnedTextureCube === false) {
          console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.");
          warnedTextureCube = true;
        }
        texture = texture.texture;
      }
      setTextureCube(texture, slot);
    }
    this.allocateTextureUnit = allocateTextureUnit;
    this.resetTextureUnits = resetTextureUnits;
    this.setTexture2D = setTexture2D;
    this.setTexture2DArray = setTexture2DArray;
    this.setTexture3D = setTexture3D;
    this.setTextureCube = setTextureCube;
    this.rebindTextures = rebindTextures;
    this.setupRenderTarget = setupRenderTarget;
    this.updateRenderTargetMipmap = updateRenderTargetMipmap;
    this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
    this.setupDepthRenderbuffer = setupDepthRenderbuffer;
    this.setupFrameBufferTexture = setupFrameBufferTexture;
    this.safeSetTexture2D = safeSetTexture2D;
    this.safeSetTextureCube = safeSetTextureCube;
  }
  function WebGLUtils(gl, extensions, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    function convert(p3, encoding = null) {
      let extension;
      if (p3 === UnsignedByteType)
        return 5121;
      if (p3 === UnsignedShort4444Type)
        return 32819;
      if (p3 === UnsignedShort5551Type)
        return 32820;
      if (p3 === ByteType)
        return 5120;
      if (p3 === ShortType)
        return 5122;
      if (p3 === UnsignedShortType)
        return 5123;
      if (p3 === IntType)
        return 5124;
      if (p3 === UnsignedIntType)
        return 5125;
      if (p3 === FloatType)
        return 5126;
      if (p3 === HalfFloatType) {
        if (isWebGL2)
          return 5131;
        extension = extensions.get("OES_texture_half_float");
        if (extension !== null) {
          return extension.HALF_FLOAT_OES;
        } else {
          return null;
        }
      }
      if (p3 === AlphaFormat)
        return 6406;
      if (p3 === RGBAFormat)
        return 6408;
      if (p3 === LuminanceFormat)
        return 6409;
      if (p3 === LuminanceAlphaFormat)
        return 6410;
      if (p3 === DepthFormat)
        return 6402;
      if (p3 === DepthStencilFormat)
        return 34041;
      if (p3 === RedFormat)
        return 6403;
      if (p3 === RGBFormat) {
        console.warn("THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228");
        return 6408;
      }
      if (p3 === _SRGBAFormat) {
        extension = extensions.get("EXT_sRGB");
        if (extension !== null) {
          return extension.SRGB_ALPHA_EXT;
        } else {
          return null;
        }
      }
      if (p3 === RedIntegerFormat)
        return 36244;
      if (p3 === RGFormat)
        return 33319;
      if (p3 === RGIntegerFormat)
        return 33320;
      if (p3 === RGBAIntegerFormat)
        return 36249;
      if (p3 === RGB_S3TC_DXT1_Format || p3 === RGBA_S3TC_DXT1_Format || p3 === RGBA_S3TC_DXT3_Format || p3 === RGBA_S3TC_DXT5_Format) {
        if (encoding === sRGBEncoding) {
          extension = extensions.get("WEBGL_compressed_texture_s3tc_srgb");
          if (extension !== null) {
            if (p3 === RGB_S3TC_DXT1_Format)
              return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
            if (p3 === RGBA_S3TC_DXT1_Format)
              return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
            if (p3 === RGBA_S3TC_DXT3_Format)
              return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
            if (p3 === RGBA_S3TC_DXT5_Format)
              return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
          } else {
            return null;
          }
        } else {
          extension = extensions.get("WEBGL_compressed_texture_s3tc");
          if (extension !== null) {
            if (p3 === RGB_S3TC_DXT1_Format)
              return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
            if (p3 === RGBA_S3TC_DXT1_Format)
              return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
            if (p3 === RGBA_S3TC_DXT3_Format)
              return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
            if (p3 === RGBA_S3TC_DXT5_Format)
              return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
          } else {
            return null;
          }
        }
      }
      if (p3 === RGB_PVRTC_4BPPV1_Format || p3 === RGB_PVRTC_2BPPV1_Format || p3 === RGBA_PVRTC_4BPPV1_Format || p3 === RGBA_PVRTC_2BPPV1_Format) {
        extension = extensions.get("WEBGL_compressed_texture_pvrtc");
        if (extension !== null) {
          if (p3 === RGB_PVRTC_4BPPV1_Format)
            return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
          if (p3 === RGB_PVRTC_2BPPV1_Format)
            return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
          if (p3 === RGBA_PVRTC_4BPPV1_Format)
            return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
          if (p3 === RGBA_PVRTC_2BPPV1_Format)
            return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
        } else {
          return null;
        }
      }
      if (p3 === RGB_ETC1_Format) {
        extension = extensions.get("WEBGL_compressed_texture_etc1");
        if (extension !== null) {
          return extension.COMPRESSED_RGB_ETC1_WEBGL;
        } else {
          return null;
        }
      }
      if (p3 === RGB_ETC2_Format || p3 === RGBA_ETC2_EAC_Format) {
        extension = extensions.get("WEBGL_compressed_texture_etc");
        if (extension !== null) {
          if (p3 === RGB_ETC2_Format)
            return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
          if (p3 === RGBA_ETC2_EAC_Format)
            return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;
        } else {
          return null;
        }
      }
      if (p3 === RGBA_ASTC_4x4_Format || p3 === RGBA_ASTC_5x4_Format || p3 === RGBA_ASTC_5x5_Format || p3 === RGBA_ASTC_6x5_Format || p3 === RGBA_ASTC_6x6_Format || p3 === RGBA_ASTC_8x5_Format || p3 === RGBA_ASTC_8x6_Format || p3 === RGBA_ASTC_8x8_Format || p3 === RGBA_ASTC_10x5_Format || p3 === RGBA_ASTC_10x6_Format || p3 === RGBA_ASTC_10x8_Format || p3 === RGBA_ASTC_10x10_Format || p3 === RGBA_ASTC_12x10_Format || p3 === RGBA_ASTC_12x12_Format) {
        extension = extensions.get("WEBGL_compressed_texture_astc");
        if (extension !== null) {
          if (p3 === RGBA_ASTC_4x4_Format)
            return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
          if (p3 === RGBA_ASTC_5x4_Format)
            return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
          if (p3 === RGBA_ASTC_5x5_Format)
            return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
          if (p3 === RGBA_ASTC_6x5_Format)
            return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
          if (p3 === RGBA_ASTC_6x6_Format)
            return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
          if (p3 === RGBA_ASTC_8x5_Format)
            return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
          if (p3 === RGBA_ASTC_8x6_Format)
            return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
          if (p3 === RGBA_ASTC_8x8_Format)
            return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
          if (p3 === RGBA_ASTC_10x5_Format)
            return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
          if (p3 === RGBA_ASTC_10x6_Format)
            return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
          if (p3 === RGBA_ASTC_10x8_Format)
            return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
          if (p3 === RGBA_ASTC_10x10_Format)
            return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
          if (p3 === RGBA_ASTC_12x10_Format)
            return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
          if (p3 === RGBA_ASTC_12x12_Format)
            return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;
        } else {
          return null;
        }
      }
      if (p3 === RGBA_BPTC_Format) {
        extension = extensions.get("EXT_texture_compression_bptc");
        if (extension !== null) {
          if (p3 === RGBA_BPTC_Format)
            return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
        } else {
          return null;
        }
      }
      if (p3 === UnsignedInt248Type) {
        if (isWebGL2)
          return 34042;
        extension = extensions.get("WEBGL_depth_texture");
        if (extension !== null) {
          return extension.UNSIGNED_INT_24_8_WEBGL;
        } else {
          return null;
        }
      }
    }
    return { convert };
  }
  var ArrayCamera = class extends PerspectiveCamera {
    constructor(array = []) {
      super();
      this.cameras = array;
    }
  };
  ArrayCamera.prototype.isArrayCamera = true;
  var Group = class extends Object3D {
    constructor() {
      super();
      this.type = "Group";
    }
  };
  Group.prototype.isGroup = true;
  var _moveEvent = { type: "move" };
  var WebXRController = class {
    constructor() {
      this._targetRay = null;
      this._grip = null;
      this._hand = null;
    }
    getHandSpace() {
      if (this._hand === null) {
        this._hand = new Group();
        this._hand.matrixAutoUpdate = false;
        this._hand.visible = false;
        this._hand.joints = {};
        this._hand.inputState = { pinching: false };
      }
      return this._hand;
    }
    getTargetRaySpace() {
      if (this._targetRay === null) {
        this._targetRay = new Group();
        this._targetRay.matrixAutoUpdate = false;
        this._targetRay.visible = false;
        this._targetRay.hasLinearVelocity = false;
        this._targetRay.linearVelocity = new Vector3();
        this._targetRay.hasAngularVelocity = false;
        this._targetRay.angularVelocity = new Vector3();
      }
      return this._targetRay;
    }
    getGripSpace() {
      if (this._grip === null) {
        this._grip = new Group();
        this._grip.matrixAutoUpdate = false;
        this._grip.visible = false;
        this._grip.hasLinearVelocity = false;
        this._grip.linearVelocity = new Vector3();
        this._grip.hasAngularVelocity = false;
        this._grip.angularVelocity = new Vector3();
      }
      return this._grip;
    }
    dispatchEvent(event) {
      if (this._targetRay !== null) {
        this._targetRay.dispatchEvent(event);
      }
      if (this._grip !== null) {
        this._grip.dispatchEvent(event);
      }
      if (this._hand !== null) {
        this._hand.dispatchEvent(event);
      }
      return this;
    }
    disconnect(inputSource) {
      this.dispatchEvent({ type: "disconnected", data: inputSource });
      if (this._targetRay !== null) {
        this._targetRay.visible = false;
      }
      if (this._grip !== null) {
        this._grip.visible = false;
      }
      if (this._hand !== null) {
        this._hand.visible = false;
      }
      return this;
    }
    update(inputSource, frame, referenceSpace) {
      let inputPose = null;
      let gripPose = null;
      let handPose = null;
      const targetRay = this._targetRay;
      const grip = this._grip;
      const hand = this._hand;
      if (inputSource && frame.session.visibilityState !== "visible-blurred") {
        if (targetRay !== null) {
          inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);
          if (inputPose !== null) {
            targetRay.matrix.fromArray(inputPose.transform.matrix);
            targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);
            if (inputPose.linearVelocity) {
              targetRay.hasLinearVelocity = true;
              targetRay.linearVelocity.copy(inputPose.linearVelocity);
            } else {
              targetRay.hasLinearVelocity = false;
            }
            if (inputPose.angularVelocity) {
              targetRay.hasAngularVelocity = true;
              targetRay.angularVelocity.copy(inputPose.angularVelocity);
            } else {
              targetRay.hasAngularVelocity = false;
            }
            this.dispatchEvent(_moveEvent);
          }
        }
        if (hand && inputSource.hand) {
          handPose = true;
          for (const inputjoint of inputSource.hand.values()) {
            const jointPose = frame.getJointPose(inputjoint, referenceSpace);
            if (hand.joints[inputjoint.jointName] === void 0) {
              const joint2 = new Group();
              joint2.matrixAutoUpdate = false;
              joint2.visible = false;
              hand.joints[inputjoint.jointName] = joint2;
              hand.add(joint2);
            }
            const joint = hand.joints[inputjoint.jointName];
            if (jointPose !== null) {
              joint.matrix.fromArray(jointPose.transform.matrix);
              joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
              joint.jointRadius = jointPose.radius;
            }
            joint.visible = jointPose !== null;
          }
          const indexTip = hand.joints["index-finger-tip"];
          const thumbTip = hand.joints["thumb-tip"];
          const distance = indexTip.position.distanceTo(thumbTip.position);
          const distanceToPinch = 0.02;
          const threshold = 5e-3;
          if (hand.inputState.pinching && distance > distanceToPinch + threshold) {
            hand.inputState.pinching = false;
            this.dispatchEvent({
              type: "pinchend",
              handedness: inputSource.handedness,
              target: this
            });
          } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {
            hand.inputState.pinching = true;
            this.dispatchEvent({
              type: "pinchstart",
              handedness: inputSource.handedness,
              target: this
            });
          }
        } else {
          if (grip !== null && inputSource.gripSpace) {
            gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);
            if (gripPose !== null) {
              grip.matrix.fromArray(gripPose.transform.matrix);
              grip.matrix.decompose(grip.position, grip.rotation, grip.scale);
              if (gripPose.linearVelocity) {
                grip.hasLinearVelocity = true;
                grip.linearVelocity.copy(gripPose.linearVelocity);
              } else {
                grip.hasLinearVelocity = false;
              }
              if (gripPose.angularVelocity) {
                grip.hasAngularVelocity = true;
                grip.angularVelocity.copy(gripPose.angularVelocity);
              } else {
                grip.hasAngularVelocity = false;
              }
            }
          }
        }
      }
      if (targetRay !== null) {
        targetRay.visible = inputPose !== null;
      }
      if (grip !== null) {
        grip.visible = gripPose !== null;
      }
      if (hand !== null) {
        hand.visible = handPose !== null;
      }
      return this;
    }
  };
  var DepthTexture = class extends Texture {
    constructor(width2, height2, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {
      format = format !== void 0 ? format : DepthFormat;
      if (format !== DepthFormat && format !== DepthStencilFormat) {
        throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
      }
      if (type === void 0 && format === DepthFormat)
        type = UnsignedShortType;
      if (type === void 0 && format === DepthStencilFormat)
        type = UnsignedInt248Type;
      super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
      this.image = { width: width2, height: height2 };
      this.magFilter = magFilter !== void 0 ? magFilter : NearestFilter;
      this.minFilter = minFilter !== void 0 ? minFilter : NearestFilter;
      this.flipY = false;
      this.generateMipmaps = false;
    }
  };
  DepthTexture.prototype.isDepthTexture = true;
  var WebXRManager = class extends EventDispatcher {
    constructor(renderer, gl) {
      super();
      const scope = this;
      let session = null;
      let framebufferScaleFactor = 1;
      let referenceSpace = null;
      let referenceSpaceType = "local-floor";
      const hasMultisampledRenderToTexture = renderer.extensions.has("WEBGL_multisampled_render_to_texture");
      let pose = null;
      let glBinding = null;
      let glProjLayer = null;
      let glBaseLayer = null;
      let isMultisample = false;
      let xrFrame = null;
      const attributes = gl.getContextAttributes();
      let initialRenderTarget = null;
      let newRenderTarget = null;
      const controllers = [];
      const inputSourcesMap = /* @__PURE__ */ new Map();
      const cameraL = new PerspectiveCamera();
      cameraL.layers.enable(1);
      cameraL.viewport = new Vector4();
      const cameraR = new PerspectiveCamera();
      cameraR.layers.enable(2);
      cameraR.viewport = new Vector4();
      const cameras = [cameraL, cameraR];
      const cameraVR = new ArrayCamera();
      cameraVR.layers.enable(1);
      cameraVR.layers.enable(2);
      let _currentDepthNear = null;
      let _currentDepthFar = null;
      this.cameraAutoUpdate = true;
      this.enabled = false;
      this.isPresenting = false;
      this.getController = function(index) {
        let controller = controllers[index];
        if (controller === void 0) {
          controller = new WebXRController();
          controllers[index] = controller;
        }
        return controller.getTargetRaySpace();
      };
      this.getControllerGrip = function(index) {
        let controller = controllers[index];
        if (controller === void 0) {
          controller = new WebXRController();
          controllers[index] = controller;
        }
        return controller.getGripSpace();
      };
      this.getHand = function(index) {
        let controller = controllers[index];
        if (controller === void 0) {
          controller = new WebXRController();
          controllers[index] = controller;
        }
        return controller.getHandSpace();
      };
      function onSessionEvent(event) {
        const controller = inputSourcesMap.get(event.inputSource);
        if (controller) {
          controller.dispatchEvent({ type: event.type, data: event.inputSource });
        }
      }
      function onSessionEnd() {
        inputSourcesMap.forEach(function(controller, inputSource) {
          controller.disconnect(inputSource);
        });
        inputSourcesMap.clear();
        _currentDepthNear = null;
        _currentDepthFar = null;
        renderer.setRenderTarget(initialRenderTarget);
        glBaseLayer = null;
        glProjLayer = null;
        glBinding = null;
        session = null;
        newRenderTarget = null;
        animation.stop();
        scope.isPresenting = false;
        scope.dispatchEvent({ type: "sessionend" });
      }
      this.setFramebufferScaleFactor = function(value) {
        framebufferScaleFactor = value;
        if (scope.isPresenting === true) {
          console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
        }
      };
      this.setReferenceSpaceType = function(value) {
        referenceSpaceType = value;
        if (scope.isPresenting === true) {
          console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
        }
      };
      this.getReferenceSpace = function() {
        return referenceSpace;
      };
      this.getBaseLayer = function() {
        return glProjLayer !== null ? glProjLayer : glBaseLayer;
      };
      this.getBinding = function() {
        return glBinding;
      };
      this.getFrame = function() {
        return xrFrame;
      };
      this.getSession = function() {
        return session;
      };
      this.setSession = async function(value) {
        session = value;
        if (session !== null) {
          initialRenderTarget = renderer.getRenderTarget();
          session.addEventListener("select", onSessionEvent);
          session.addEventListener("selectstart", onSessionEvent);
          session.addEventListener("selectend", onSessionEvent);
          session.addEventListener("squeeze", onSessionEvent);
          session.addEventListener("squeezestart", onSessionEvent);
          session.addEventListener("squeezeend", onSessionEvent);
          session.addEventListener("end", onSessionEnd);
          session.addEventListener("inputsourceschange", onInputSourcesChange);
          if (attributes.xrCompatible !== true) {
            await gl.makeXRCompatible();
          }
          if (session.renderState.layers === void 0 || renderer.capabilities.isWebGL2 === false) {
            const layerInit = {
              antialias: session.renderState.layers === void 0 ? attributes.antialias : true,
              alpha: attributes.alpha,
              depth: attributes.depth,
              stencil: attributes.stencil,
              framebufferScaleFactor
            };
            glBaseLayer = new XRWebGLLayer(session, gl, layerInit);
            session.updateRenderState({ baseLayer: glBaseLayer });
            newRenderTarget = new WebGLRenderTarget(glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight, {
              format: RGBAFormat,
              type: UnsignedByteType,
              encoding: renderer.outputEncoding
            });
          } else {
            isMultisample = attributes.antialias;
            let depthFormat = null;
            let depthType = null;
            let glDepthFormat = null;
            if (attributes.depth) {
              glDepthFormat = attributes.stencil ? 35056 : 33190;
              depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;
              depthType = attributes.stencil ? UnsignedInt248Type : UnsignedShortType;
            }
            const projectionlayerInit = {
              colorFormat: renderer.outputEncoding === sRGBEncoding ? 35907 : 32856,
              depthFormat: glDepthFormat,
              scaleFactor: framebufferScaleFactor
            };
            glBinding = new XRWebGLBinding(session, gl);
            glProjLayer = glBinding.createProjectionLayer(projectionlayerInit);
            session.updateRenderState({ layers: [glProjLayer] });
            if (isMultisample) {
              newRenderTarget = new WebGLMultisampleRenderTarget(glProjLayer.textureWidth, glProjLayer.textureHeight, {
                format: RGBAFormat,
                type: UnsignedByteType,
                depthTexture: new DepthTexture(glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, void 0, void 0, void 0, void 0, void 0, void 0, depthFormat),
                stencilBuffer: attributes.stencil,
                ignoreDepth: glProjLayer.ignoreDepthValues,
                useRenderToTexture: hasMultisampledRenderToTexture,
                encoding: renderer.outputEncoding
              });
            } else {
              newRenderTarget = new WebGLRenderTarget(glProjLayer.textureWidth, glProjLayer.textureHeight, {
                format: RGBAFormat,
                type: UnsignedByteType,
                depthTexture: new DepthTexture(glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, void 0, void 0, void 0, void 0, void 0, void 0, depthFormat),
                stencilBuffer: attributes.stencil,
                ignoreDepth: glProjLayer.ignoreDepthValues,
                encoding: renderer.outputEncoding
              });
            }
          }
          newRenderTarget.isXRRenderTarget = true;
          this.setFoveation(1);
          referenceSpace = await session.requestReferenceSpace(referenceSpaceType);
          animation.setContext(session);
          animation.start();
          scope.isPresenting = true;
          scope.dispatchEvent({ type: "sessionstart" });
        }
      };
      function onInputSourcesChange(event) {
        const inputSources = session.inputSources;
        for (let i2 = 0; i2 < controllers.length; i2++) {
          inputSourcesMap.set(inputSources[i2], controllers[i2]);
        }
        for (let i2 = 0; i2 < event.removed.length; i2++) {
          const inputSource = event.removed[i2];
          const controller = inputSourcesMap.get(inputSource);
          if (controller) {
            controller.dispatchEvent({ type: "disconnected", data: inputSource });
            inputSourcesMap.delete(inputSource);
          }
        }
        for (let i2 = 0; i2 < event.added.length; i2++) {
          const inputSource = event.added[i2];
          const controller = inputSourcesMap.get(inputSource);
          if (controller) {
            controller.dispatchEvent({ type: "connected", data: inputSource });
          }
        }
      }
      const cameraLPos = new Vector3();
      const cameraRPos = new Vector3();
      function setProjectionFromUnion(camera3, cameraL2, cameraR2) {
        cameraLPos.setFromMatrixPosition(cameraL2.matrixWorld);
        cameraRPos.setFromMatrixPosition(cameraR2.matrixWorld);
        const ipd = cameraLPos.distanceTo(cameraRPos);
        const projL = cameraL2.projectionMatrix.elements;
        const projR = cameraR2.projectionMatrix.elements;
        const near = projL[14] / (projL[10] - 1);
        const far = projL[14] / (projL[10] + 1);
        const topFov = (projL[9] + 1) / projL[5];
        const bottomFov = (projL[9] - 1) / projL[5];
        const leftFov = (projL[8] - 1) / projL[0];
        const rightFov = (projR[8] + 1) / projR[0];
        const left = near * leftFov;
        const right = near * rightFov;
        const zOffset = ipd / (-leftFov + rightFov);
        const xOffset = zOffset * -leftFov;
        cameraL2.matrixWorld.decompose(camera3.position, camera3.quaternion, camera3.scale);
        camera3.translateX(xOffset);
        camera3.translateZ(zOffset);
        camera3.matrixWorld.compose(camera3.position, camera3.quaternion, camera3.scale);
        camera3.matrixWorldInverse.copy(camera3.matrixWorld).invert();
        const near2 = near + zOffset;
        const far2 = far + zOffset;
        const left2 = left - xOffset;
        const right2 = right + (ipd - xOffset);
        const top2 = topFov * far / far2 * near2;
        const bottom2 = bottomFov * far / far2 * near2;
        camera3.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
      }
      function updateCamera(camera3, parent) {
        if (parent === null) {
          camera3.matrixWorld.copy(camera3.matrix);
        } else {
          camera3.matrixWorld.multiplyMatrices(parent.matrixWorld, camera3.matrix);
        }
        camera3.matrixWorldInverse.copy(camera3.matrixWorld).invert();
      }
      this.updateCamera = function(camera3) {
        if (session === null)
          return;
        cameraVR.near = cameraR.near = cameraL.near = camera3.near;
        cameraVR.far = cameraR.far = cameraL.far = camera3.far;
        if (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {
          session.updateRenderState({
            depthNear: cameraVR.near,
            depthFar: cameraVR.far
          });
          _currentDepthNear = cameraVR.near;
          _currentDepthFar = cameraVR.far;
        }
        const parent = camera3.parent;
        const cameras2 = cameraVR.cameras;
        updateCamera(cameraVR, parent);
        for (let i2 = 0; i2 < cameras2.length; i2++) {
          updateCamera(cameras2[i2], parent);
        }
        cameraVR.matrixWorld.decompose(cameraVR.position, cameraVR.quaternion, cameraVR.scale);
        camera3.position.copy(cameraVR.position);
        camera3.quaternion.copy(cameraVR.quaternion);
        camera3.scale.copy(cameraVR.scale);
        camera3.matrix.copy(cameraVR.matrix);
        camera3.matrixWorld.copy(cameraVR.matrixWorld);
        const children2 = camera3.children;
        for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
          children2[i2].updateMatrixWorld(true);
        }
        if (cameras2.length === 2) {
          setProjectionFromUnion(cameraVR, cameraL, cameraR);
        } else {
          cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);
        }
      };
      this.getCamera = function() {
        return cameraVR;
      };
      this.getFoveation = function() {
        if (glProjLayer !== null) {
          return glProjLayer.fixedFoveation;
        }
        if (glBaseLayer !== null) {
          return glBaseLayer.fixedFoveation;
        }
        return void 0;
      };
      this.setFoveation = function(foveation) {
        if (glProjLayer !== null) {
          glProjLayer.fixedFoveation = foveation;
        }
        if (glBaseLayer !== null && glBaseLayer.fixedFoveation !== void 0) {
          glBaseLayer.fixedFoveation = foveation;
        }
      };
      let onAnimationFrameCallback = null;
      function onAnimationFrame(time2, frame) {
        pose = frame.getViewerPose(referenceSpace);
        xrFrame = frame;
        if (pose !== null) {
          const views = pose.views;
          if (glBaseLayer !== null) {
            renderer.setRenderTargetFramebuffer(newRenderTarget, glBaseLayer.framebuffer);
            renderer.setRenderTarget(newRenderTarget);
          }
          let cameraVRNeedsUpdate = false;
          if (views.length !== cameraVR.cameras.length) {
            cameraVR.cameras.length = 0;
            cameraVRNeedsUpdate = true;
          }
          for (let i2 = 0; i2 < views.length; i2++) {
            const view = views[i2];
            let viewport = null;
            if (glBaseLayer !== null) {
              viewport = glBaseLayer.getViewport(view);
            } else {
              const glSubImage = glBinding.getViewSubImage(glProjLayer, view);
              viewport = glSubImage.viewport;
              if (i2 === 0) {
                renderer.setRenderTargetTextures(newRenderTarget, glSubImage.colorTexture, glProjLayer.ignoreDepthValues ? void 0 : glSubImage.depthStencilTexture);
                renderer.setRenderTarget(newRenderTarget);
              }
            }
            const camera3 = cameras[i2];
            camera3.matrix.fromArray(view.transform.matrix);
            camera3.projectionMatrix.fromArray(view.projectionMatrix);
            camera3.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);
            if (i2 === 0) {
              cameraVR.matrix.copy(camera3.matrix);
            }
            if (cameraVRNeedsUpdate === true) {
              cameraVR.cameras.push(camera3);
            }
          }
        }
        const inputSources = session.inputSources;
        for (let i2 = 0; i2 < controllers.length; i2++) {
          const controller = controllers[i2];
          const inputSource = inputSources[i2];
          controller.update(inputSource, frame, referenceSpace);
        }
        if (onAnimationFrameCallback)
          onAnimationFrameCallback(time2, frame);
        xrFrame = null;
      }
      const animation = new WebGLAnimation();
      animation.setAnimationLoop(onAnimationFrame);
      this.setAnimationLoop = function(callback) {
        onAnimationFrameCallback = callback;
      };
      this.dispose = function() {
      };
    }
  };
  function WebGLMaterials(properties) {
    function refreshFogUniforms(uniforms, fog) {
      uniforms.fogColor.value.copy(fog.color);
      if (fog.isFog) {
        uniforms.fogNear.value = fog.near;
        uniforms.fogFar.value = fog.far;
      } else if (fog.isFogExp2) {
        uniforms.fogDensity.value = fog.density;
      }
    }
    function refreshMaterialUniforms(uniforms, material, pixelRatio, height2, transmissionRenderTarget) {
      if (material.isMeshBasicMaterial) {
        refreshUniformsCommon(uniforms, material);
      } else if (material.isMeshLambertMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsLambert(uniforms, material);
      } else if (material.isMeshToonMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsToon(uniforms, material);
      } else if (material.isMeshPhongMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsPhong(uniforms, material);
      } else if (material.isMeshStandardMaterial) {
        refreshUniformsCommon(uniforms, material);
        if (material.isMeshPhysicalMaterial) {
          refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);
        } else {
          refreshUniformsStandard(uniforms, material);
        }
      } else if (material.isMeshMatcapMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsMatcap(uniforms, material);
      } else if (material.isMeshDepthMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsDepth(uniforms, material);
      } else if (material.isMeshDistanceMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsDistance(uniforms, material);
      } else if (material.isMeshNormalMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsNormal(uniforms, material);
      } else if (material.isLineBasicMaterial) {
        refreshUniformsLine(uniforms, material);
        if (material.isLineDashedMaterial) {
          refreshUniformsDash(uniforms, material);
        }
      } else if (material.isPointsMaterial) {
        refreshUniformsPoints(uniforms, material, pixelRatio, height2);
      } else if (material.isSpriteMaterial) {
        refreshUniformsSprites(uniforms, material);
      } else if (material.isShadowMaterial) {
        uniforms.color.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
      } else if (material.isShaderMaterial) {
        material.uniformsNeedUpdate = false;
      }
    }
    function refreshUniformsCommon(uniforms, material) {
      uniforms.opacity.value = material.opacity;
      if (material.color) {
        uniforms.diffuse.value.copy(material.color);
      }
      if (material.emissive) {
        uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
      }
      if (material.map) {
        uniforms.map.value = material.map;
      }
      if (material.alphaMap) {
        uniforms.alphaMap.value = material.alphaMap;
      }
      if (material.specularMap) {
        uniforms.specularMap.value = material.specularMap;
      }
      if (material.alphaTest > 0) {
        uniforms.alphaTest.value = material.alphaTest;
      }
      const envMap = properties.get(material).envMap;
      if (envMap) {
        uniforms.envMap.value = envMap;
        uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
        uniforms.reflectivity.value = material.reflectivity;
        uniforms.ior.value = material.ior;
        uniforms.refractionRatio.value = material.refractionRatio;
      }
      if (material.lightMap) {
        uniforms.lightMap.value = material.lightMap;
        uniforms.lightMapIntensity.value = material.lightMapIntensity;
      }
      if (material.aoMap) {
        uniforms.aoMap.value = material.aoMap;
        uniforms.aoMapIntensity.value = material.aoMapIntensity;
      }
      let uvScaleMap;
      if (material.map) {
        uvScaleMap = material.map;
      } else if (material.specularMap) {
        uvScaleMap = material.specularMap;
      } else if (material.displacementMap) {
        uvScaleMap = material.displacementMap;
      } else if (material.normalMap) {
        uvScaleMap = material.normalMap;
      } else if (material.bumpMap) {
        uvScaleMap = material.bumpMap;
      } else if (material.roughnessMap) {
        uvScaleMap = material.roughnessMap;
      } else if (material.metalnessMap) {
        uvScaleMap = material.metalnessMap;
      } else if (material.alphaMap) {
        uvScaleMap = material.alphaMap;
      } else if (material.emissiveMap) {
        uvScaleMap = material.emissiveMap;
      } else if (material.clearcoatMap) {
        uvScaleMap = material.clearcoatMap;
      } else if (material.clearcoatNormalMap) {
        uvScaleMap = material.clearcoatNormalMap;
      } else if (material.clearcoatRoughnessMap) {
        uvScaleMap = material.clearcoatRoughnessMap;
      } else if (material.specularIntensityMap) {
        uvScaleMap = material.specularIntensityMap;
      } else if (material.specularColorMap) {
        uvScaleMap = material.specularColorMap;
      } else if (material.transmissionMap) {
        uvScaleMap = material.transmissionMap;
      } else if (material.thicknessMap) {
        uvScaleMap = material.thicknessMap;
      } else if (material.sheenColorMap) {
        uvScaleMap = material.sheenColorMap;
      } else if (material.sheenRoughnessMap) {
        uvScaleMap = material.sheenRoughnessMap;
      }
      if (uvScaleMap !== void 0) {
        if (uvScaleMap.isWebGLRenderTarget) {
          uvScaleMap = uvScaleMap.texture;
        }
        if (uvScaleMap.matrixAutoUpdate === true) {
          uvScaleMap.updateMatrix();
        }
        uniforms.uvTransform.value.copy(uvScaleMap.matrix);
      }
      let uv2ScaleMap;
      if (material.aoMap) {
        uv2ScaleMap = material.aoMap;
      } else if (material.lightMap) {
        uv2ScaleMap = material.lightMap;
      }
      if (uv2ScaleMap !== void 0) {
        if (uv2ScaleMap.isWebGLRenderTarget) {
          uv2ScaleMap = uv2ScaleMap.texture;
        }
        if (uv2ScaleMap.matrixAutoUpdate === true) {
          uv2ScaleMap.updateMatrix();
        }
        uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);
      }
    }
    function refreshUniformsLine(uniforms, material) {
      uniforms.diffuse.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
    }
    function refreshUniformsDash(uniforms, material) {
      uniforms.dashSize.value = material.dashSize;
      uniforms.totalSize.value = material.dashSize + material.gapSize;
      uniforms.scale.value = material.scale;
    }
    function refreshUniformsPoints(uniforms, material, pixelRatio, height2) {
      uniforms.diffuse.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
      uniforms.size.value = material.size * pixelRatio;
      uniforms.scale.value = height2 * 0.5;
      if (material.map) {
        uniforms.map.value = material.map;
      }
      if (material.alphaMap) {
        uniforms.alphaMap.value = material.alphaMap;
      }
      if (material.alphaTest > 0) {
        uniforms.alphaTest.value = material.alphaTest;
      }
      let uvScaleMap;
      if (material.map) {
        uvScaleMap = material.map;
      } else if (material.alphaMap) {
        uvScaleMap = material.alphaMap;
      }
      if (uvScaleMap !== void 0) {
        if (uvScaleMap.matrixAutoUpdate === true) {
          uvScaleMap.updateMatrix();
        }
        uniforms.uvTransform.value.copy(uvScaleMap.matrix);
      }
    }
    function refreshUniformsSprites(uniforms, material) {
      uniforms.diffuse.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
      uniforms.rotation.value = material.rotation;
      if (material.map) {
        uniforms.map.value = material.map;
      }
      if (material.alphaMap) {
        uniforms.alphaMap.value = material.alphaMap;
      }
      if (material.alphaTest > 0) {
        uniforms.alphaTest.value = material.alphaTest;
      }
      let uvScaleMap;
      if (material.map) {
        uvScaleMap = material.map;
      } else if (material.alphaMap) {
        uvScaleMap = material.alphaMap;
      }
      if (uvScaleMap !== void 0) {
        if (uvScaleMap.matrixAutoUpdate === true) {
          uvScaleMap.updateMatrix();
        }
        uniforms.uvTransform.value.copy(uvScaleMap.matrix);
      }
    }
    function refreshUniformsLambert(uniforms, material) {
      if (material.emissiveMap) {
        uniforms.emissiveMap.value = material.emissiveMap;
      }
    }
    function refreshUniformsPhong(uniforms, material) {
      uniforms.specular.value.copy(material.specular);
      uniforms.shininess.value = Math.max(material.shininess, 1e-4);
      if (material.emissiveMap) {
        uniforms.emissiveMap.value = material.emissiveMap;
      }
      if (material.bumpMap) {
        uniforms.bumpMap.value = material.bumpMap;
        uniforms.bumpScale.value = material.bumpScale;
        if (material.side === BackSide)
          uniforms.bumpScale.value *= -1;
      }
      if (material.normalMap) {
        uniforms.normalMap.value = material.normalMap;
        uniforms.normalScale.value.copy(material.normalScale);
        if (material.side === BackSide)
          uniforms.normalScale.value.negate();
      }
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
    }
    function refreshUniformsToon(uniforms, material) {
      if (material.gradientMap) {
        uniforms.gradientMap.value = material.gradientMap;
      }
      if (material.emissiveMap) {
        uniforms.emissiveMap.value = material.emissiveMap;
      }
      if (material.bumpMap) {
        uniforms.bumpMap.value = material.bumpMap;
        uniforms.bumpScale.value = material.bumpScale;
        if (material.side === BackSide)
          uniforms.bumpScale.value *= -1;
      }
      if (material.normalMap) {
        uniforms.normalMap.value = material.normalMap;
        uniforms.normalScale.value.copy(material.normalScale);
        if (material.side === BackSide)
          uniforms.normalScale.value.negate();
      }
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
    }
    function refreshUniformsStandard(uniforms, material) {
      uniforms.roughness.value = material.roughness;
      uniforms.metalness.value = material.metalness;
      if (material.roughnessMap) {
        uniforms.roughnessMap.value = material.roughnessMap;
      }
      if (material.metalnessMap) {
        uniforms.metalnessMap.value = material.metalnessMap;
      }
      if (material.emissiveMap) {
        uniforms.emissiveMap.value = material.emissiveMap;
      }
      if (material.bumpMap) {
        uniforms.bumpMap.value = material.bumpMap;
        uniforms.bumpScale.value = material.bumpScale;
        if (material.side === BackSide)
          uniforms.bumpScale.value *= -1;
      }
      if (material.normalMap) {
        uniforms.normalMap.value = material.normalMap;
        uniforms.normalScale.value.copy(material.normalScale);
        if (material.side === BackSide)
          uniforms.normalScale.value.negate();
      }
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
      const envMap = properties.get(material).envMap;
      if (envMap) {
        uniforms.envMapIntensity.value = material.envMapIntensity;
      }
    }
    function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {
      refreshUniformsStandard(uniforms, material);
      uniforms.ior.value = material.ior;
      if (material.sheen > 0) {
        uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);
        uniforms.sheenRoughness.value = material.sheenRoughness;
        if (material.sheenColorMap) {
          uniforms.sheenColorMap.value = material.sheenColorMap;
        }
        if (material.sheenRoughnessMap) {
          uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;
        }
      }
      if (material.clearcoat > 0) {
        uniforms.clearcoat.value = material.clearcoat;
        uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
        if (material.clearcoatMap) {
          uniforms.clearcoatMap.value = material.clearcoatMap;
        }
        if (material.clearcoatRoughnessMap) {
          uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
        }
        if (material.clearcoatNormalMap) {
          uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);
          uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;
          if (material.side === BackSide) {
            uniforms.clearcoatNormalScale.value.negate();
          }
        }
      }
      if (material.transmission > 0) {
        uniforms.transmission.value = material.transmission;
        uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
        uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);
        if (material.transmissionMap) {
          uniforms.transmissionMap.value = material.transmissionMap;
        }
        uniforms.thickness.value = material.thickness;
        if (material.thicknessMap) {
          uniforms.thicknessMap.value = material.thicknessMap;
        }
        uniforms.attenuationDistance.value = material.attenuationDistance;
        uniforms.attenuationColor.value.copy(material.attenuationColor);
      }
      uniforms.specularIntensity.value = material.specularIntensity;
      uniforms.specularColor.value.copy(material.specularColor);
      if (material.specularIntensityMap) {
        uniforms.specularIntensityMap.value = material.specularIntensityMap;
      }
      if (material.specularColorMap) {
        uniforms.specularColorMap.value = material.specularColorMap;
      }
    }
    function refreshUniformsMatcap(uniforms, material) {
      if (material.matcap) {
        uniforms.matcap.value = material.matcap;
      }
      if (material.bumpMap) {
        uniforms.bumpMap.value = material.bumpMap;
        uniforms.bumpScale.value = material.bumpScale;
        if (material.side === BackSide)
          uniforms.bumpScale.value *= -1;
      }
      if (material.normalMap) {
        uniforms.normalMap.value = material.normalMap;
        uniforms.normalScale.value.copy(material.normalScale);
        if (material.side === BackSide)
          uniforms.normalScale.value.negate();
      }
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
    }
    function refreshUniformsDepth(uniforms, material) {
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
    }
    function refreshUniformsDistance(uniforms, material) {
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
      uniforms.referencePosition.value.copy(material.referencePosition);
      uniforms.nearDistance.value = material.nearDistance;
      uniforms.farDistance.value = material.farDistance;
    }
    function refreshUniformsNormal(uniforms, material) {
      if (material.bumpMap) {
        uniforms.bumpMap.value = material.bumpMap;
        uniforms.bumpScale.value = material.bumpScale;
        if (material.side === BackSide)
          uniforms.bumpScale.value *= -1;
      }
      if (material.normalMap) {
        uniforms.normalMap.value = material.normalMap;
        uniforms.normalScale.value.copy(material.normalScale);
        if (material.side === BackSide)
          uniforms.normalScale.value.negate();
      }
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
    }
    return {
      refreshFogUniforms,
      refreshMaterialUniforms
    };
  }
  function createCanvasElement() {
    const canvas = createElementNS("canvas");
    canvas.style.display = "block";
    return canvas;
  }
  function WebGLRenderer(parameters = {}) {
    const _canvas2 = parameters.canvas !== void 0 ? parameters.canvas : createCanvasElement(), _context2 = parameters.context !== void 0 ? parameters.context : null, _alpha = parameters.alpha !== void 0 ? parameters.alpha : false, _depth = parameters.depth !== void 0 ? parameters.depth : true, _stencil = parameters.stencil !== void 0 ? parameters.stencil : true, _antialias = parameters.antialias !== void 0 ? parameters.antialias : false, _premultipliedAlpha = parameters.premultipliedAlpha !== void 0 ? parameters.premultipliedAlpha : true, _preserveDrawingBuffer = parameters.preserveDrawingBuffer !== void 0 ? parameters.preserveDrawingBuffer : false, _powerPreference = parameters.powerPreference !== void 0 ? parameters.powerPreference : "default", _failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== void 0 ? parameters.failIfMajorPerformanceCaveat : false;
    let currentRenderList = null;
    let currentRenderState = null;
    const renderListStack = [];
    const renderStateStack = [];
    this.domElement = _canvas2;
    this.debug = {
      checkShaderErrors: true
    };
    this.autoClear = true;
    this.autoClearColor = true;
    this.autoClearDepth = true;
    this.autoClearStencil = true;
    this.sortObjects = true;
    this.clippingPlanes = [];
    this.localClippingEnabled = false;
    this.outputEncoding = LinearEncoding;
    this.physicallyCorrectLights = false;
    this.toneMapping = NoToneMapping;
    this.toneMappingExposure = 1;
    const _this = this;
    let _isContextLost = false;
    let _currentActiveCubeFace = 0;
    let _currentActiveMipmapLevel = 0;
    let _currentRenderTarget = null;
    let _currentMaterialId = -1;
    let _currentCamera = null;
    const _currentViewport = new Vector4();
    const _currentScissor = new Vector4();
    let _currentScissorTest = null;
    let _width = _canvas2.width;
    let _height = _canvas2.height;
    let _pixelRatio = 1;
    let _opaqueSort = null;
    let _transparentSort = null;
    const _viewport = new Vector4(0, 0, _width, _height);
    const _scissor = new Vector4(0, 0, _width, _height);
    let _scissorTest = false;
    const _frustum = new Frustum();
    let _clippingEnabled = false;
    let _localClippingEnabled = false;
    let _transmissionRenderTarget = null;
    const _projScreenMatrix2 = new Matrix4();
    const _vector3 = new Vector3();
    const _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };
    function getTargetPixelRatio() {
      return _currentRenderTarget === null ? _pixelRatio : 1;
    }
    let _gl = _context2;
    function getContext(contextNames, contextAttributes) {
      for (let i2 = 0; i2 < contextNames.length; i2++) {
        const contextName = contextNames[i2];
        const context = _canvas2.getContext(contextName, contextAttributes);
        if (context !== null)
          return context;
      }
      return null;
    }
    try {
      const contextAttributes = {
        alpha: true,
        depth: _depth,
        stencil: _stencil,
        antialias: _antialias,
        premultipliedAlpha: _premultipliedAlpha,
        preserveDrawingBuffer: _preserveDrawingBuffer,
        powerPreference: _powerPreference,
        failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat
      };
      if ("setAttribute" in _canvas2)
        _canvas2.setAttribute("data-engine", `three.js r${REVISION}`);
      _canvas2.addEventListener("webglcontextlost", onContextLost, false);
      _canvas2.addEventListener("webglcontextrestored", onContextRestore, false);
      if (_gl === null) {
        const contextNames = ["webgl2", "webgl", "experimental-webgl"];
        if (_this.isWebGL1Renderer === true) {
          contextNames.shift();
        }
        _gl = getContext(contextNames, contextAttributes);
        if (_gl === null) {
          if (getContext(contextNames)) {
            throw new Error("Error creating WebGL context with your selected attributes.");
          } else {
            throw new Error("Error creating WebGL context.");
          }
        }
      }
      if (_gl.getShaderPrecisionFormat === void 0) {
        _gl.getShaderPrecisionFormat = function() {
          return { "rangeMin": 1, "rangeMax": 1, "precision": 1 };
        };
      }
    } catch (error) {
      console.error("THREE.WebGLRenderer: " + error.message);
      throw error;
    }
    let extensions, capabilities, state2, info;
    let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
    let programCache, materials, renderLists, renderStates, clipping, shadowMap;
    let background, morphtargets, bufferRenderer, indexedBufferRenderer;
    let utils2, bindingStates;
    function initGLContext() {
      extensions = new WebGLExtensions(_gl);
      capabilities = new WebGLCapabilities(_gl, extensions, parameters);
      extensions.init(capabilities);
      utils2 = new WebGLUtils(_gl, extensions, capabilities);
      state2 = new WebGLState(_gl, extensions, capabilities);
      info = new WebGLInfo(_gl);
      properties = new WebGLProperties();
      textures = new WebGLTextures(_gl, extensions, state2, properties, capabilities, utils2, info);
      cubemaps = new WebGLCubeMaps(_this);
      cubeuvmaps = new WebGLCubeUVMaps(_this);
      attributes = new WebGLAttributes(_gl, capabilities);
      bindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);
      geometries = new WebGLGeometries(_gl, attributes, info, bindingStates);
      objects = new WebGLObjects(_gl, geometries, attributes, info);
      morphtargets = new WebGLMorphtargets(_gl, capabilities, textures);
      clipping = new WebGLClipping(properties);
      programCache = new WebGLPrograms(_this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping);
      materials = new WebGLMaterials(properties);
      renderLists = new WebGLRenderLists();
      renderStates = new WebGLRenderStates(extensions, capabilities);
      background = new WebGLBackground(_this, cubemaps, state2, objects, _alpha, _premultipliedAlpha);
      shadowMap = new WebGLShadowMap(_this, objects, capabilities);
      bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);
      indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);
      info.programs = programCache.programs;
      _this.capabilities = capabilities;
      _this.extensions = extensions;
      _this.properties = properties;
      _this.renderLists = renderLists;
      _this.shadowMap = shadowMap;
      _this.state = state2;
      _this.info = info;
    }
    initGLContext();
    const xr = new WebXRManager(_this, _gl);
    this.xr = xr;
    this.getContext = function() {
      return _gl;
    };
    this.getContextAttributes = function() {
      return _gl.getContextAttributes();
    };
    this.forceContextLoss = function() {
      const extension = extensions.get("WEBGL_lose_context");
      if (extension)
        extension.loseContext();
    };
    this.forceContextRestore = function() {
      const extension = extensions.get("WEBGL_lose_context");
      if (extension)
        extension.restoreContext();
    };
    this.getPixelRatio = function() {
      return _pixelRatio;
    };
    this.setPixelRatio = function(value) {
      if (value === void 0)
        return;
      _pixelRatio = value;
      this.setSize(_width, _height, false);
    };
    this.getSize = function(target) {
      return target.set(_width, _height);
    };
    this.setSize = function(width2, height2, updateStyle) {
      if (xr.isPresenting) {
        console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
        return;
      }
      _width = width2;
      _height = height2;
      _canvas2.width = Math.floor(width2 * _pixelRatio);
      _canvas2.height = Math.floor(height2 * _pixelRatio);
      if (updateStyle !== false) {
        _canvas2.style.width = width2 + "px";
        _canvas2.style.height = height2 + "px";
      }
      this.setViewport(0, 0, width2, height2);
    };
    this.getDrawingBufferSize = function(target) {
      return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();
    };
    this.setDrawingBufferSize = function(width2, height2, pixelRatio) {
      _width = width2;
      _height = height2;
      _pixelRatio = pixelRatio;
      _canvas2.width = Math.floor(width2 * pixelRatio);
      _canvas2.height = Math.floor(height2 * pixelRatio);
      this.setViewport(0, 0, width2, height2);
    };
    this.getCurrentViewport = function(target) {
      return target.copy(_currentViewport);
    };
    this.getViewport = function(target) {
      return target.copy(_viewport);
    };
    this.setViewport = function(x2, y2, width2, height2) {
      if (x2.isVector4) {
        _viewport.set(x2.x, x2.y, x2.z, x2.w);
      } else {
        _viewport.set(x2, y2, width2, height2);
      }
      state2.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());
    };
    this.getScissor = function(target) {
      return target.copy(_scissor);
    };
    this.setScissor = function(x2, y2, width2, height2) {
      if (x2.isVector4) {
        _scissor.set(x2.x, x2.y, x2.z, x2.w);
      } else {
        _scissor.set(x2, y2, width2, height2);
      }
      state2.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());
    };
    this.getScissorTest = function() {
      return _scissorTest;
    };
    this.setScissorTest = function(boolean) {
      state2.setScissorTest(_scissorTest = boolean);
    };
    this.setOpaqueSort = function(method) {
      _opaqueSort = method;
    };
    this.setTransparentSort = function(method) {
      _transparentSort = method;
    };
    this.getClearColor = function(target) {
      return target.copy(background.getClearColor());
    };
    this.setClearColor = function() {
      background.setClearColor.apply(background, arguments);
    };
    this.getClearAlpha = function() {
      return background.getClearAlpha();
    };
    this.setClearAlpha = function() {
      background.setClearAlpha.apply(background, arguments);
    };
    this.clear = function(color, depth, stencil) {
      let bits = 0;
      if (color === void 0 || color)
        bits |= 16384;
      if (depth === void 0 || depth)
        bits |= 256;
      if (stencil === void 0 || stencil)
        bits |= 1024;
      _gl.clear(bits);
    };
    this.clearColor = function() {
      this.clear(true, false, false);
    };
    this.clearDepth = function() {
      this.clear(false, true, false);
    };
    this.clearStencil = function() {
      this.clear(false, false, true);
    };
    this.dispose = function() {
      _canvas2.removeEventListener("webglcontextlost", onContextLost, false);
      _canvas2.removeEventListener("webglcontextrestored", onContextRestore, false);
      renderLists.dispose();
      renderStates.dispose();
      properties.dispose();
      cubemaps.dispose();
      cubeuvmaps.dispose();
      objects.dispose();
      bindingStates.dispose();
      programCache.dispose();
      xr.dispose();
      xr.removeEventListener("sessionstart", onXRSessionStart);
      xr.removeEventListener("sessionend", onXRSessionEnd);
      if (_transmissionRenderTarget) {
        _transmissionRenderTarget.dispose();
        _transmissionRenderTarget = null;
      }
      animation.stop();
    };
    function onContextLost(event) {
      event.preventDefault();
      console.log("THREE.WebGLRenderer: Context Lost.");
      _isContextLost = true;
    }
    function onContextRestore() {
      console.log("THREE.WebGLRenderer: Context Restored.");
      _isContextLost = false;
      const infoAutoReset = info.autoReset;
      const shadowMapEnabled = shadowMap.enabled;
      const shadowMapAutoUpdate = shadowMap.autoUpdate;
      const shadowMapNeedsUpdate = shadowMap.needsUpdate;
      const shadowMapType = shadowMap.type;
      initGLContext();
      info.autoReset = infoAutoReset;
      shadowMap.enabled = shadowMapEnabled;
      shadowMap.autoUpdate = shadowMapAutoUpdate;
      shadowMap.needsUpdate = shadowMapNeedsUpdate;
      shadowMap.type = shadowMapType;
    }
    function onMaterialDispose(event) {
      const material = event.target;
      material.removeEventListener("dispose", onMaterialDispose);
      deallocateMaterial(material);
    }
    function deallocateMaterial(material) {
      releaseMaterialProgramReferences(material);
      properties.remove(material);
    }
    function releaseMaterialProgramReferences(material) {
      const programs = properties.get(material).programs;
      if (programs !== void 0) {
        programs.forEach(function(program) {
          programCache.releaseProgram(program);
        });
        if (material.isShaderMaterial) {
          programCache.releaseShaderCache(material);
        }
      }
    }
    this.renderBufferDirect = function(camera3, scene2, geometry, material, object, group) {
      if (scene2 === null)
        scene2 = _emptyScene;
      const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
      const program = setProgram(camera3, scene2, geometry, material, object);
      state2.setMaterial(material, frontFaceCW);
      let index = geometry.index;
      const position = geometry.attributes.position;
      if (index === null) {
        if (position === void 0 || position.count === 0)
          return;
      } else if (index.count === 0) {
        return;
      }
      let rangeFactor = 1;
      if (material.wireframe === true) {
        index = geometries.getWireframeAttribute(geometry);
        rangeFactor = 2;
      }
      bindingStates.setup(object, material, program, geometry, index);
      let attribute;
      let renderer = bufferRenderer;
      if (index !== null) {
        attribute = attributes.get(index);
        renderer = indexedBufferRenderer;
        renderer.setIndex(attribute);
      }
      const dataCount = index !== null ? index.count : position.count;
      const rangeStart = geometry.drawRange.start * rangeFactor;
      const rangeCount = geometry.drawRange.count * rangeFactor;
      const groupStart = group !== null ? group.start * rangeFactor : 0;
      const groupCount = group !== null ? group.count * rangeFactor : Infinity;
      const drawStart = Math.max(rangeStart, groupStart);
      const drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;
      const drawCount = Math.max(0, drawEnd - drawStart + 1);
      if (drawCount === 0)
        return;
      if (object.isMesh) {
        if (material.wireframe === true) {
          state2.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
          renderer.setMode(1);
        } else {
          renderer.setMode(4);
        }
      } else if (object.isLine) {
        let lineWidth = material.linewidth;
        if (lineWidth === void 0)
          lineWidth = 1;
        state2.setLineWidth(lineWidth * getTargetPixelRatio());
        if (object.isLineSegments) {
          renderer.setMode(1);
        } else if (object.isLineLoop) {
          renderer.setMode(2);
        } else {
          renderer.setMode(3);
        }
      } else if (object.isPoints) {
        renderer.setMode(0);
      } else if (object.isSprite) {
        renderer.setMode(4);
      }
      if (object.isInstancedMesh) {
        renderer.renderInstances(drawStart, drawCount, object.count);
      } else if (geometry.isInstancedBufferGeometry) {
        const instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);
        renderer.renderInstances(drawStart, drawCount, instanceCount);
      } else {
        renderer.render(drawStart, drawCount);
      }
    };
    this.compile = function(scene2, camera3) {
      currentRenderState = renderStates.get(scene2);
      currentRenderState.init();
      renderStateStack.push(currentRenderState);
      scene2.traverseVisible(function(object) {
        if (object.isLight && object.layers.test(camera3.layers)) {
          currentRenderState.pushLight(object);
          if (object.castShadow) {
            currentRenderState.pushShadow(object);
          }
        }
      });
      currentRenderState.setupLights(_this.physicallyCorrectLights);
      scene2.traverse(function(object) {
        const material = object.material;
        if (material) {
          if (Array.isArray(material)) {
            for (let i2 = 0; i2 < material.length; i2++) {
              const material2 = material[i2];
              getProgram(material2, scene2, object);
            }
          } else {
            getProgram(material, scene2, object);
          }
        }
      });
      renderStateStack.pop();
      currentRenderState = null;
    };
    let onAnimationFrameCallback = null;
    function onAnimationFrame(time2) {
      if (onAnimationFrameCallback)
        onAnimationFrameCallback(time2);
    }
    function onXRSessionStart() {
      animation.stop();
    }
    function onXRSessionEnd() {
      animation.start();
    }
    const animation = new WebGLAnimation();
    animation.setAnimationLoop(onAnimationFrame);
    if (typeof window !== "undefined")
      animation.setContext(window);
    this.setAnimationLoop = function(callback) {
      onAnimationFrameCallback = callback;
      xr.setAnimationLoop(callback);
      callback === null ? animation.stop() : animation.start();
    };
    xr.addEventListener("sessionstart", onXRSessionStart);
    xr.addEventListener("sessionend", onXRSessionEnd);
    this.render = function(scene2, camera3) {
      if (camera3 !== void 0 && camera3.isCamera !== true) {
        console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        return;
      }
      if (_isContextLost === true)
        return;
      if (scene2.autoUpdate === true)
        scene2.updateMatrixWorld();
      if (camera3.parent === null)
        camera3.updateMatrixWorld();
      if (xr.enabled === true && xr.isPresenting === true) {
        if (xr.cameraAutoUpdate === true)
          xr.updateCamera(camera3);
        camera3 = xr.getCamera();
      }
      if (scene2.isScene === true)
        scene2.onBeforeRender(_this, scene2, camera3, _currentRenderTarget);
      currentRenderState = renderStates.get(scene2, renderStateStack.length);
      currentRenderState.init();
      renderStateStack.push(currentRenderState);
      _projScreenMatrix2.multiplyMatrices(camera3.projectionMatrix, camera3.matrixWorldInverse);
      _frustum.setFromProjectionMatrix(_projScreenMatrix2);
      _localClippingEnabled = this.localClippingEnabled;
      _clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera3);
      currentRenderList = renderLists.get(scene2, renderListStack.length);
      currentRenderList.init();
      renderListStack.push(currentRenderList);
      projectObject(scene2, camera3, 0, _this.sortObjects);
      currentRenderList.finish();
      if (_this.sortObjects === true) {
        currentRenderList.sort(_opaqueSort, _transparentSort);
      }
      if (_clippingEnabled === true)
        clipping.beginShadows();
      const shadowsArray = currentRenderState.state.shadowsArray;
      shadowMap.render(shadowsArray, scene2, camera3);
      if (_clippingEnabled === true)
        clipping.endShadows();
      if (this.info.autoReset === true)
        this.info.reset();
      background.render(currentRenderList, scene2);
      currentRenderState.setupLights(_this.physicallyCorrectLights);
      if (camera3.isArrayCamera) {
        const cameras = camera3.cameras;
        for (let i2 = 0, l2 = cameras.length; i2 < l2; i2++) {
          const camera22 = cameras[i2];
          renderScene(currentRenderList, scene2, camera22, camera22.viewport);
        }
      } else {
        renderScene(currentRenderList, scene2, camera3);
      }
      if (_currentRenderTarget !== null) {
        textures.updateMultisampleRenderTarget(_currentRenderTarget);
        textures.updateRenderTargetMipmap(_currentRenderTarget);
      }
      if (scene2.isScene === true)
        scene2.onAfterRender(_this, scene2, camera3);
      state2.buffers.depth.setTest(true);
      state2.buffers.depth.setMask(true);
      state2.buffers.color.setMask(true);
      state2.setPolygonOffset(false);
      bindingStates.resetDefaultState();
      _currentMaterialId = -1;
      _currentCamera = null;
      renderStateStack.pop();
      if (renderStateStack.length > 0) {
        currentRenderState = renderStateStack[renderStateStack.length - 1];
      } else {
        currentRenderState = null;
      }
      renderListStack.pop();
      if (renderListStack.length > 0) {
        currentRenderList = renderListStack[renderListStack.length - 1];
      } else {
        currentRenderList = null;
      }
    };
    function projectObject(object, camera3, groupOrder, sortObjects) {
      if (object.visible === false)
        return;
      const visible = object.layers.test(camera3.layers);
      if (visible) {
        if (object.isGroup) {
          groupOrder = object.renderOrder;
        } else if (object.isLOD) {
          if (object.autoUpdate === true)
            object.update(camera3);
        } else if (object.isLight) {
          currentRenderState.pushLight(object);
          if (object.castShadow) {
            currentRenderState.pushShadow(object);
          }
        } else if (object.isSprite) {
          if (!object.frustumCulled || _frustum.intersectsSprite(object)) {
            if (sortObjects) {
              _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix2);
            }
            const geometry = objects.update(object);
            const material = object.material;
            if (material.visible) {
              currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
            }
          }
        } else if (object.isMesh || object.isLine || object.isPoints) {
          if (object.isSkinnedMesh) {
            if (object.skeleton.frame !== info.render.frame) {
              object.skeleton.update();
              object.skeleton.frame = info.render.frame;
            }
          }
          if (!object.frustumCulled || _frustum.intersectsObject(object)) {
            if (sortObjects) {
              _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix2);
            }
            const geometry = objects.update(object);
            const material = object.material;
            if (Array.isArray(material)) {
              const groups = geometry.groups;
              for (let i2 = 0, l2 = groups.length; i2 < l2; i2++) {
                const group = groups[i2];
                const groupMaterial = material[group.materialIndex];
                if (groupMaterial && groupMaterial.visible) {
                  currentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);
                }
              }
            } else if (material.visible) {
              currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
            }
          }
        }
      }
      const children2 = object.children;
      for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
        projectObject(children2[i2], camera3, groupOrder, sortObjects);
      }
    }
    function renderScene(currentRenderList2, scene2, camera3, viewport) {
      const opaqueObjects = currentRenderList2.opaque;
      const transmissiveObjects = currentRenderList2.transmissive;
      const transparentObjects = currentRenderList2.transparent;
      currentRenderState.setupLightsView(camera3);
      if (transmissiveObjects.length > 0)
        renderTransmissionPass(opaqueObjects, scene2, camera3);
      if (viewport)
        state2.viewport(_currentViewport.copy(viewport));
      if (opaqueObjects.length > 0)
        renderObjects(opaqueObjects, scene2, camera3);
      if (transmissiveObjects.length > 0)
        renderObjects(transmissiveObjects, scene2, camera3);
      if (transparentObjects.length > 0)
        renderObjects(transparentObjects, scene2, camera3);
    }
    function renderTransmissionPass(opaqueObjects, scene2, camera3) {
      if (_transmissionRenderTarget === null) {
        const needsAntialias = _antialias === true && capabilities.isWebGL2 === true;
        const renderTargetType = needsAntialias ? WebGLMultisampleRenderTarget : WebGLRenderTarget;
        _transmissionRenderTarget = new renderTargetType(1024, 1024, {
          generateMipmaps: true,
          type: utils2.convert(HalfFloatType) !== null ? HalfFloatType : UnsignedByteType,
          minFilter: LinearMipmapLinearFilter,
          magFilter: NearestFilter,
          wrapS: ClampToEdgeWrapping,
          wrapT: ClampToEdgeWrapping,
          useRenderToTexture: extensions.has("WEBGL_multisampled_render_to_texture")
        });
      }
      const currentRenderTarget = _this.getRenderTarget();
      _this.setRenderTarget(_transmissionRenderTarget);
      _this.clear();
      const currentToneMapping = _this.toneMapping;
      _this.toneMapping = NoToneMapping;
      renderObjects(opaqueObjects, scene2, camera3);
      _this.toneMapping = currentToneMapping;
      textures.updateMultisampleRenderTarget(_transmissionRenderTarget);
      textures.updateRenderTargetMipmap(_transmissionRenderTarget);
      _this.setRenderTarget(currentRenderTarget);
    }
    function renderObjects(renderList, scene2, camera3) {
      const overrideMaterial = scene2.isScene === true ? scene2.overrideMaterial : null;
      for (let i2 = 0, l2 = renderList.length; i2 < l2; i2++) {
        const renderItem = renderList[i2];
        const object = renderItem.object;
        const geometry = renderItem.geometry;
        const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
        const group = renderItem.group;
        if (object.layers.test(camera3.layers)) {
          renderObject(object, scene2, camera3, geometry, material, group);
        }
      }
    }
    function renderObject(object, scene2, camera3, geometry, material, group) {
      object.onBeforeRender(_this, scene2, camera3, geometry, material, group);
      object.modelViewMatrix.multiplyMatrices(camera3.matrixWorldInverse, object.matrixWorld);
      object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
      material.onBeforeRender(_this, scene2, camera3, geometry, object, group);
      if (material.transparent === true && material.side === DoubleSide) {
        material.side = BackSide;
        material.needsUpdate = true;
        _this.renderBufferDirect(camera3, scene2, geometry, material, object, group);
        material.side = FrontSide;
        material.needsUpdate = true;
        _this.renderBufferDirect(camera3, scene2, geometry, material, object, group);
        material.side = DoubleSide;
      } else {
        _this.renderBufferDirect(camera3, scene2, geometry, material, object, group);
      }
      object.onAfterRender(_this, scene2, camera3, geometry, material, group);
    }
    function getProgram(material, scene2, object) {
      if (scene2.isScene !== true)
        scene2 = _emptyScene;
      const materialProperties = properties.get(material);
      const lights = currentRenderState.state.lights;
      const shadowsArray = currentRenderState.state.shadowsArray;
      const lightsStateVersion = lights.state.version;
      const parameters2 = programCache.getParameters(material, lights.state, shadowsArray, scene2, object);
      const programCacheKey = programCache.getProgramCacheKey(parameters2);
      let programs = materialProperties.programs;
      materialProperties.environment = material.isMeshStandardMaterial ? scene2.environment : null;
      materialProperties.fog = scene2.fog;
      materialProperties.envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || materialProperties.environment);
      if (programs === void 0) {
        material.addEventListener("dispose", onMaterialDispose);
        programs = /* @__PURE__ */ new Map();
        materialProperties.programs = programs;
      }
      let program = programs.get(programCacheKey);
      if (program !== void 0) {
        if (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {
          updateCommonMaterialProperties(material, parameters2);
          return program;
        }
      } else {
        parameters2.uniforms = programCache.getUniforms(material);
        material.onBuild(object, parameters2, _this);
        material.onBeforeCompile(parameters2, _this);
        program = programCache.acquireProgram(parameters2, programCacheKey);
        programs.set(programCacheKey, program);
        materialProperties.uniforms = parameters2.uniforms;
      }
      const uniforms = materialProperties.uniforms;
      if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {
        uniforms.clippingPlanes = clipping.uniform;
      }
      updateCommonMaterialProperties(material, parameters2);
      materialProperties.needsLights = materialNeedsLights(material);
      materialProperties.lightsStateVersion = lightsStateVersion;
      if (materialProperties.needsLights) {
        uniforms.ambientLightColor.value = lights.state.ambient;
        uniforms.lightProbe.value = lights.state.probe;
        uniforms.directionalLights.value = lights.state.directional;
        uniforms.directionalLightShadows.value = lights.state.directionalShadow;
        uniforms.spotLights.value = lights.state.spot;
        uniforms.spotLightShadows.value = lights.state.spotShadow;
        uniforms.rectAreaLights.value = lights.state.rectArea;
        uniforms.ltc_1.value = lights.state.rectAreaLTC1;
        uniforms.ltc_2.value = lights.state.rectAreaLTC2;
        uniforms.pointLights.value = lights.state.point;
        uniforms.pointLightShadows.value = lights.state.pointShadow;
        uniforms.hemisphereLights.value = lights.state.hemi;
        uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
        uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
        uniforms.spotShadowMap.value = lights.state.spotShadowMap;
        uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
        uniforms.pointShadowMap.value = lights.state.pointShadowMap;
        uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
      }
      const progUniforms = program.getUniforms();
      const uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);
      materialProperties.currentProgram = program;
      materialProperties.uniformsList = uniformsList;
      return program;
    }
    function updateCommonMaterialProperties(material, parameters2) {
      const materialProperties = properties.get(material);
      materialProperties.outputEncoding = parameters2.outputEncoding;
      materialProperties.instancing = parameters2.instancing;
      materialProperties.skinning = parameters2.skinning;
      materialProperties.morphTargets = parameters2.morphTargets;
      materialProperties.morphNormals = parameters2.morphNormals;
      materialProperties.morphTargetsCount = parameters2.morphTargetsCount;
      materialProperties.numClippingPlanes = parameters2.numClippingPlanes;
      materialProperties.numIntersection = parameters2.numClipIntersection;
      materialProperties.vertexAlphas = parameters2.vertexAlphas;
      materialProperties.vertexTangents = parameters2.vertexTangents;
      materialProperties.toneMapping = parameters2.toneMapping;
    }
    function setProgram(camera3, scene2, geometry, material, object) {
      if (scene2.isScene !== true)
        scene2 = _emptyScene;
      textures.resetTextureUnits();
      const fog = scene2.fog;
      const environment = material.isMeshStandardMaterial ? scene2.environment : null;
      const encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.encoding : LinearEncoding;
      const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
      const vertexAlphas = material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4;
      const vertexTangents = !!material.normalMap && !!geometry.attributes.tangent;
      const morphTargets = !!geometry.morphAttributes.position;
      const morphNormals = !!geometry.morphAttributes.normal;
      const morphTargetsCount = !!geometry.morphAttributes.position ? geometry.morphAttributes.position.length : 0;
      const toneMapping = material.toneMapped ? _this.toneMapping : NoToneMapping;
      const materialProperties = properties.get(material);
      const lights = currentRenderState.state.lights;
      if (_clippingEnabled === true) {
        if (_localClippingEnabled === true || camera3 !== _currentCamera) {
          const useCache = camera3 === _currentCamera && material.id === _currentMaterialId;
          clipping.setState(material, camera3, useCache);
        }
      }
      let needsProgramChange = false;
      if (material.version === materialProperties.__version) {
        if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {
          needsProgramChange = true;
        } else if (materialProperties.outputEncoding !== encoding) {
          needsProgramChange = true;
        } else if (object.isInstancedMesh && materialProperties.instancing === false) {
          needsProgramChange = true;
        } else if (!object.isInstancedMesh && materialProperties.instancing === true) {
          needsProgramChange = true;
        } else if (object.isSkinnedMesh && materialProperties.skinning === false) {
          needsProgramChange = true;
        } else if (!object.isSkinnedMesh && materialProperties.skinning === true) {
          needsProgramChange = true;
        } else if (materialProperties.envMap !== envMap) {
          needsProgramChange = true;
        } else if (material.fog && materialProperties.fog !== fog) {
          needsProgramChange = true;
        } else if (materialProperties.numClippingPlanes !== void 0 && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {
          needsProgramChange = true;
        } else if (materialProperties.vertexAlphas !== vertexAlphas) {
          needsProgramChange = true;
        } else if (materialProperties.vertexTangents !== vertexTangents) {
          needsProgramChange = true;
        } else if (materialProperties.morphTargets !== morphTargets) {
          needsProgramChange = true;
        } else if (materialProperties.morphNormals !== morphNormals) {
          needsProgramChange = true;
        } else if (materialProperties.toneMapping !== toneMapping) {
          needsProgramChange = true;
        } else if (capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount) {
          needsProgramChange = true;
        }
      } else {
        needsProgramChange = true;
        materialProperties.__version = material.version;
      }
      let program = materialProperties.currentProgram;
      if (needsProgramChange === true) {
        program = getProgram(material, scene2, object);
      }
      let refreshProgram = false;
      let refreshMaterial = false;
      let refreshLights = false;
      const p_uniforms = program.getUniforms(), m_uniforms = materialProperties.uniforms;
      if (state2.useProgram(program.program)) {
        refreshProgram = true;
        refreshMaterial = true;
        refreshLights = true;
      }
      if (material.id !== _currentMaterialId) {
        _currentMaterialId = material.id;
        refreshMaterial = true;
      }
      if (refreshProgram || _currentCamera !== camera3) {
        p_uniforms.setValue(_gl, "projectionMatrix", camera3.projectionMatrix);
        if (capabilities.logarithmicDepthBuffer) {
          p_uniforms.setValue(_gl, "logDepthBufFC", 2 / (Math.log(camera3.far + 1) / Math.LN2));
        }
        if (_currentCamera !== camera3) {
          _currentCamera = camera3;
          refreshMaterial = true;
          refreshLights = true;
        }
        if (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {
          const uCamPos = p_uniforms.map.cameraPosition;
          if (uCamPos !== void 0) {
            uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera3.matrixWorld));
          }
        }
        if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {
          p_uniforms.setValue(_gl, "isOrthographic", camera3.isOrthographicCamera === true);
        }
        if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || object.isSkinnedMesh) {
          p_uniforms.setValue(_gl, "viewMatrix", camera3.matrixWorldInverse);
        }
      }
      if (object.isSkinnedMesh) {
        p_uniforms.setOptional(_gl, object, "bindMatrix");
        p_uniforms.setOptional(_gl, object, "bindMatrixInverse");
        const skeleton = object.skeleton;
        if (skeleton) {
          if (capabilities.floatVertexTextures) {
            if (skeleton.boneTexture === null)
              skeleton.computeBoneTexture();
            p_uniforms.setValue(_gl, "boneTexture", skeleton.boneTexture, textures);
            p_uniforms.setValue(_gl, "boneTextureSize", skeleton.boneTextureSize);
          } else {
            p_uniforms.setOptional(_gl, skeleton, "boneMatrices");
          }
        }
      }
      if (!!geometry && (geometry.morphAttributes.position !== void 0 || geometry.morphAttributes.normal !== void 0)) {
        morphtargets.update(object, geometry, material, program);
      }
      if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {
        materialProperties.receiveShadow = object.receiveShadow;
        p_uniforms.setValue(_gl, "receiveShadow", object.receiveShadow);
      }
      if (refreshMaterial) {
        p_uniforms.setValue(_gl, "toneMappingExposure", _this.toneMappingExposure);
        if (materialProperties.needsLights) {
          markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
        }
        if (fog && material.fog) {
          materials.refreshFogUniforms(m_uniforms, fog);
        }
        materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget);
        WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
      }
      if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
        WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
        material.uniformsNeedUpdate = false;
      }
      if (material.isSpriteMaterial) {
        p_uniforms.setValue(_gl, "center", object.center);
      }
      p_uniforms.setValue(_gl, "modelViewMatrix", object.modelViewMatrix);
      p_uniforms.setValue(_gl, "normalMatrix", object.normalMatrix);
      p_uniforms.setValue(_gl, "modelMatrix", object.matrixWorld);
      return program;
    }
    function markUniformsLightsNeedsUpdate(uniforms, value) {
      uniforms.ambientLightColor.needsUpdate = value;
      uniforms.lightProbe.needsUpdate = value;
      uniforms.directionalLights.needsUpdate = value;
      uniforms.directionalLightShadows.needsUpdate = value;
      uniforms.pointLights.needsUpdate = value;
      uniforms.pointLightShadows.needsUpdate = value;
      uniforms.spotLights.needsUpdate = value;
      uniforms.spotLightShadows.needsUpdate = value;
      uniforms.rectAreaLights.needsUpdate = value;
      uniforms.hemisphereLights.needsUpdate = value;
    }
    function materialNeedsLights(material) {
      return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;
    }
    this.getActiveCubeFace = function() {
      return _currentActiveCubeFace;
    };
    this.getActiveMipmapLevel = function() {
      return _currentActiveMipmapLevel;
    };
    this.getRenderTarget = function() {
      return _currentRenderTarget;
    };
    this.setRenderTargetTextures = function(renderTarget, colorTexture, depthTexture) {
      properties.get(renderTarget.texture).__webglTexture = colorTexture;
      properties.get(renderTarget.depthTexture).__webglTexture = depthTexture;
      const renderTargetProperties = properties.get(renderTarget);
      renderTargetProperties.__hasExternalTextures = true;
      if (renderTargetProperties.__hasExternalTextures) {
        renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === void 0;
        if (!renderTargetProperties.__autoAllocateDepthBuffer) {
          if (renderTarget.useRenderToTexture) {
            console.warn("render-to-texture extension was disabled because an external texture was provided");
            renderTarget.useRenderToTexture = false;
            renderTarget.useRenderbuffer = true;
          }
        }
      }
    };
    this.setRenderTargetFramebuffer = function(renderTarget, defaultFramebuffer) {
      const renderTargetProperties = properties.get(renderTarget);
      renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
      renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === void 0;
    };
    this.setRenderTarget = function(renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
      _currentRenderTarget = renderTarget;
      _currentActiveCubeFace = activeCubeFace;
      _currentActiveMipmapLevel = activeMipmapLevel;
      let useDefaultFramebuffer = true;
      if (renderTarget) {
        const renderTargetProperties = properties.get(renderTarget);
        if (renderTargetProperties.__useDefaultFramebuffer !== void 0) {
          state2.bindFramebuffer(36160, null);
          useDefaultFramebuffer = false;
        } else if (renderTargetProperties.__webglFramebuffer === void 0) {
          textures.setupRenderTarget(renderTarget);
        } else if (renderTargetProperties.__hasExternalTextures) {
          textures.rebindTextures(renderTarget, properties.get(renderTarget.texture).__webglTexture, properties.get(renderTarget.depthTexture).__webglTexture);
        }
      }
      let framebuffer = null;
      let isCube = false;
      let isRenderTarget3D = false;
      if (renderTarget) {
        const texture = renderTarget.texture;
        if (texture.isDataTexture3D || texture.isDataTexture2DArray) {
          isRenderTarget3D = true;
        }
        const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;
        if (renderTarget.isWebGLCubeRenderTarget) {
          framebuffer = __webglFramebuffer[activeCubeFace];
          isCube = true;
        } else if (renderTarget.useRenderbuffer) {
          framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;
        } else {
          framebuffer = __webglFramebuffer;
        }
        _currentViewport.copy(renderTarget.viewport);
        _currentScissor.copy(renderTarget.scissor);
        _currentScissorTest = renderTarget.scissorTest;
      } else {
        _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();
        _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();
        _currentScissorTest = _scissorTest;
      }
      const framebufferBound = state2.bindFramebuffer(36160, framebuffer);
      if (framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer) {
        state2.drawBuffers(renderTarget, framebuffer);
      }
      state2.viewport(_currentViewport);
      state2.scissor(_currentScissor);
      state2.setScissorTest(_currentScissorTest);
      if (isCube) {
        const textureProperties = properties.get(renderTarget.texture);
        _gl.framebufferTexture2D(36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
      } else if (isRenderTarget3D) {
        const textureProperties = properties.get(renderTarget.texture);
        const layer = activeCubeFace || 0;
        _gl.framebufferTextureLayer(36160, 36064, textureProperties.__webglTexture, activeMipmapLevel || 0, layer);
      }
      _currentMaterialId = -1;
    };
    this.readRenderTargetPixels = function(renderTarget, x2, y2, width2, height2, buffer, activeCubeFaceIndex) {
      if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        return;
      }
      let framebuffer = properties.get(renderTarget).__webglFramebuffer;
      if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== void 0) {
        framebuffer = framebuffer[activeCubeFaceIndex];
      }
      if (framebuffer) {
        state2.bindFramebuffer(36160, framebuffer);
        try {
          const texture = renderTarget.texture;
          const textureFormat = texture.format;
          const textureType = texture.type;
          if (textureFormat !== RGBAFormat && utils2.convert(textureFormat) !== _gl.getParameter(35739)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
            return;
          }
          const halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has("EXT_color_buffer_half_float") || capabilities.isWebGL2 && extensions.has("EXT_color_buffer_float"));
          if (textureType !== UnsignedByteType && utils2.convert(textureType) !== _gl.getParameter(35738) && !(textureType === FloatType && (capabilities.isWebGL2 || extensions.has("OES_texture_float") || extensions.has("WEBGL_color_buffer_float"))) && !halfFloatSupportedByExt) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
            return;
          }
          if (_gl.checkFramebufferStatus(36160) === 36053) {
            if (x2 >= 0 && x2 <= renderTarget.width - width2 && (y2 >= 0 && y2 <= renderTarget.height - height2)) {
              _gl.readPixels(x2, y2, width2, height2, utils2.convert(textureFormat), utils2.convert(textureType), buffer);
            }
          } else {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.");
          }
        } finally {
          const framebuffer2 = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
          state2.bindFramebuffer(36160, framebuffer2);
        }
      }
    };
    this.copyFramebufferToTexture = function(position, texture, level = 0) {
      if (texture.isFramebufferTexture !== true) {
        console.error("THREE.WebGLRenderer: copyFramebufferToTexture() can only be used with FramebufferTexture.");
        return;
      }
      const levelScale = Math.pow(2, -level);
      const width2 = Math.floor(texture.image.width * levelScale);
      const height2 = Math.floor(texture.image.height * levelScale);
      textures.setTexture2D(texture, 0);
      _gl.copyTexSubImage2D(3553, level, 0, 0, position.x, position.y, width2, height2);
      state2.unbindTexture();
    };
    this.copyTextureToTexture = function(position, srcTexture, dstTexture, level = 0) {
      const width2 = srcTexture.image.width;
      const height2 = srcTexture.image.height;
      const glFormat = utils2.convert(dstTexture.format);
      const glType = utils2.convert(dstTexture.type);
      textures.setTexture2D(dstTexture, 0);
      _gl.pixelStorei(37440, dstTexture.flipY);
      _gl.pixelStorei(37441, dstTexture.premultiplyAlpha);
      _gl.pixelStorei(3317, dstTexture.unpackAlignment);
      if (srcTexture.isDataTexture) {
        _gl.texSubImage2D(3553, level, position.x, position.y, width2, height2, glFormat, glType, srcTexture.image.data);
      } else {
        if (srcTexture.isCompressedTexture) {
          _gl.compressedTexSubImage2D(3553, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);
        } else {
          _gl.texSubImage2D(3553, level, position.x, position.y, glFormat, glType, srcTexture.image);
        }
      }
      if (level === 0 && dstTexture.generateMipmaps)
        _gl.generateMipmap(3553);
      state2.unbindTexture();
    };
    this.copyTextureToTexture3D = function(sourceBox, position, srcTexture, dstTexture, level = 0) {
      if (_this.isWebGL1Renderer) {
        console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");
        return;
      }
      const width2 = sourceBox.max.x - sourceBox.min.x + 1;
      const height2 = sourceBox.max.y - sourceBox.min.y + 1;
      const depth = sourceBox.max.z - sourceBox.min.z + 1;
      const glFormat = utils2.convert(dstTexture.format);
      const glType = utils2.convert(dstTexture.type);
      let glTarget;
      if (dstTexture.isDataTexture3D) {
        textures.setTexture3D(dstTexture, 0);
        glTarget = 32879;
      } else if (dstTexture.isDataTexture2DArray) {
        textures.setTexture2DArray(dstTexture, 0);
        glTarget = 35866;
      } else {
        console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
        return;
      }
      _gl.pixelStorei(37440, dstTexture.flipY);
      _gl.pixelStorei(37441, dstTexture.premultiplyAlpha);
      _gl.pixelStorei(3317, dstTexture.unpackAlignment);
      const unpackRowLen = _gl.getParameter(3314);
      const unpackImageHeight = _gl.getParameter(32878);
      const unpackSkipPixels = _gl.getParameter(3316);
      const unpackSkipRows = _gl.getParameter(3315);
      const unpackSkipImages = _gl.getParameter(32877);
      const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[0] : srcTexture.image;
      _gl.pixelStorei(3314, image.width);
      _gl.pixelStorei(32878, image.height);
      _gl.pixelStorei(3316, sourceBox.min.x);
      _gl.pixelStorei(3315, sourceBox.min.y);
      _gl.pixelStorei(32877, sourceBox.min.z);
      if (srcTexture.isDataTexture || srcTexture.isDataTexture3D) {
        _gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width2, height2, depth, glFormat, glType, image.data);
      } else {
        if (srcTexture.isCompressedTexture) {
          console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.");
          _gl.compressedTexSubImage3D(glTarget, level, position.x, position.y, position.z, width2, height2, depth, glFormat, image.data);
        } else {
          _gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width2, height2, depth, glFormat, glType, image);
        }
      }
      _gl.pixelStorei(3314, unpackRowLen);
      _gl.pixelStorei(32878, unpackImageHeight);
      _gl.pixelStorei(3316, unpackSkipPixels);
      _gl.pixelStorei(3315, unpackSkipRows);
      _gl.pixelStorei(32877, unpackSkipImages);
      if (level === 0 && dstTexture.generateMipmaps)
        _gl.generateMipmap(glTarget);
      state2.unbindTexture();
    };
    this.initTexture = function(texture) {
      textures.setTexture2D(texture, 0);
      state2.unbindTexture();
    };
    this.resetState = function() {
      _currentActiveCubeFace = 0;
      _currentActiveMipmapLevel = 0;
      _currentRenderTarget = null;
      state2.reset();
      bindingStates.reset();
    };
    if (typeof __THREE_DEVTOOLS__ !== "undefined") {
      __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
    }
  }
  WebGLRenderer.prototype.isWebGLRenderer = true;
  var WebGL1Renderer = class extends WebGLRenderer {
  };
  WebGL1Renderer.prototype.isWebGL1Renderer = true;
  var FogExp2 = class {
    constructor(color, density = 25e-5) {
      this.name = "";
      this.color = new Color(color);
      this.density = density;
    }
    clone() {
      return new FogExp2(this.color, this.density);
    }
    toJSON() {
      return {
        type: "FogExp2",
        color: this.color.getHex(),
        density: this.density
      };
    }
  };
  FogExp2.prototype.isFogExp2 = true;
  var Fog = class {
    constructor(color, near = 1, far = 1e3) {
      this.name = "";
      this.color = new Color(color);
      this.near = near;
      this.far = far;
    }
    clone() {
      return new Fog(this.color, this.near, this.far);
    }
    toJSON() {
      return {
        type: "Fog",
        color: this.color.getHex(),
        near: this.near,
        far: this.far
      };
    }
  };
  Fog.prototype.isFog = true;
  var Scene = class extends Object3D {
    constructor() {
      super();
      this.type = "Scene";
      this.background = null;
      this.environment = null;
      this.fog = null;
      this.overrideMaterial = null;
      this.autoUpdate = true;
      if (typeof __THREE_DEVTOOLS__ !== "undefined") {
        __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
      }
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      if (source.background !== null)
        this.background = source.background.clone();
      if (source.environment !== null)
        this.environment = source.environment.clone();
      if (source.fog !== null)
        this.fog = source.fog.clone();
      if (source.overrideMaterial !== null)
        this.overrideMaterial = source.overrideMaterial.clone();
      this.autoUpdate = source.autoUpdate;
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      return this;
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      if (this.fog !== null)
        data.object.fog = this.fog.toJSON();
      return data;
    }
  };
  Scene.prototype.isScene = true;
  var InterleavedBuffer = class {
    constructor(array, stride) {
      this.array = array;
      this.stride = stride;
      this.count = array !== void 0 ? array.length / stride : 0;
      this.usage = StaticDrawUsage;
      this.updateRange = { offset: 0, count: -1 };
      this.version = 0;
      this.uuid = generateUUID();
    }
    onUploadCallback() {
    }
    set needsUpdate(value) {
      if (value === true)
        this.version++;
    }
    setUsage(value) {
      this.usage = value;
      return this;
    }
    copy(source) {
      this.array = new source.array.constructor(source.array);
      this.count = source.count;
      this.stride = source.stride;
      this.usage = source.usage;
      return this;
    }
    copyAt(index1, attribute, index2) {
      index1 *= this.stride;
      index2 *= attribute.stride;
      for (let i2 = 0, l2 = this.stride; i2 < l2; i2++) {
        this.array[index1 + i2] = attribute.array[index2 + i2];
      }
      return this;
    }
    set(value, offset = 0) {
      this.array.set(value, offset);
      return this;
    }
    clone(data) {
      if (data.arrayBuffers === void 0) {
        data.arrayBuffers = {};
      }
      if (this.array.buffer._uuid === void 0) {
        this.array.buffer._uuid = generateUUID();
      }
      if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
        data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
      }
      const array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);
      const ib = new this.constructor(array, this.stride);
      ib.setUsage(this.usage);
      return ib;
    }
    onUpload(callback) {
      this.onUploadCallback = callback;
      return this;
    }
    toJSON(data) {
      if (data.arrayBuffers === void 0) {
        data.arrayBuffers = {};
      }
      if (this.array.buffer._uuid === void 0) {
        this.array.buffer._uuid = generateUUID();
      }
      if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
        data.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));
      }
      return {
        uuid: this.uuid,
        buffer: this.array.buffer._uuid,
        type: this.array.constructor.name,
        stride: this.stride
      };
    }
  };
  InterleavedBuffer.prototype.isInterleavedBuffer = true;
  var _vector$6 = /* @__PURE__ */ new Vector3();
  var InterleavedBufferAttribute = class {
    constructor(interleavedBuffer, itemSize, offset, normalized = false) {
      this.name = "";
      this.data = interleavedBuffer;
      this.itemSize = itemSize;
      this.offset = offset;
      this.normalized = normalized === true;
    }
    get count() {
      return this.data.count;
    }
    get array() {
      return this.data.array;
    }
    set needsUpdate(value) {
      this.data.needsUpdate = value;
    }
    applyMatrix4(m2) {
      for (let i2 = 0, l2 = this.data.count; i2 < l2; i2++) {
        _vector$6.x = this.getX(i2);
        _vector$6.y = this.getY(i2);
        _vector$6.z = this.getZ(i2);
        _vector$6.applyMatrix4(m2);
        this.setXYZ(i2, _vector$6.x, _vector$6.y, _vector$6.z);
      }
      return this;
    }
    applyNormalMatrix(m2) {
      for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
        _vector$6.x = this.getX(i2);
        _vector$6.y = this.getY(i2);
        _vector$6.z = this.getZ(i2);
        _vector$6.applyNormalMatrix(m2);
        this.setXYZ(i2, _vector$6.x, _vector$6.y, _vector$6.z);
      }
      return this;
    }
    transformDirection(m2) {
      for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
        _vector$6.x = this.getX(i2);
        _vector$6.y = this.getY(i2);
        _vector$6.z = this.getZ(i2);
        _vector$6.transformDirection(m2);
        this.setXYZ(i2, _vector$6.x, _vector$6.y, _vector$6.z);
      }
      return this;
    }
    setX(index, x2) {
      this.data.array[index * this.data.stride + this.offset] = x2;
      return this;
    }
    setY(index, y2) {
      this.data.array[index * this.data.stride + this.offset + 1] = y2;
      return this;
    }
    setZ(index, z2) {
      this.data.array[index * this.data.stride + this.offset + 2] = z2;
      return this;
    }
    setW(index, w2) {
      this.data.array[index * this.data.stride + this.offset + 3] = w2;
      return this;
    }
    getX(index) {
      return this.data.array[index * this.data.stride + this.offset];
    }
    getY(index) {
      return this.data.array[index * this.data.stride + this.offset + 1];
    }
    getZ(index) {
      return this.data.array[index * this.data.stride + this.offset + 2];
    }
    getW(index) {
      return this.data.array[index * this.data.stride + this.offset + 3];
    }
    setXY(index, x2, y2) {
      index = index * this.data.stride + this.offset;
      this.data.array[index + 0] = x2;
      this.data.array[index + 1] = y2;
      return this;
    }
    setXYZ(index, x2, y2, z2) {
      index = index * this.data.stride + this.offset;
      this.data.array[index + 0] = x2;
      this.data.array[index + 1] = y2;
      this.data.array[index + 2] = z2;
      return this;
    }
    setXYZW(index, x2, y2, z2, w2) {
      index = index * this.data.stride + this.offset;
      this.data.array[index + 0] = x2;
      this.data.array[index + 1] = y2;
      this.data.array[index + 2] = z2;
      this.data.array[index + 3] = w2;
      return this;
    }
    clone(data) {
      if (data === void 0) {
        console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");
        const array = [];
        for (let i2 = 0; i2 < this.count; i2++) {
          const index = i2 * this.data.stride + this.offset;
          for (let j2 = 0; j2 < this.itemSize; j2++) {
            array.push(this.data.array[index + j2]);
          }
        }
        return new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);
      } else {
        if (data.interleavedBuffers === void 0) {
          data.interleavedBuffers = {};
        }
        if (data.interleavedBuffers[this.data.uuid] === void 0) {
          data.interleavedBuffers[this.data.uuid] = this.data.clone(data);
        }
        return new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
      }
    }
    toJSON(data) {
      if (data === void 0) {
        console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");
        const array = [];
        for (let i2 = 0; i2 < this.count; i2++) {
          const index = i2 * this.data.stride + this.offset;
          for (let j2 = 0; j2 < this.itemSize; j2++) {
            array.push(this.data.array[index + j2]);
          }
        }
        return {
          itemSize: this.itemSize,
          type: this.array.constructor.name,
          array,
          normalized: this.normalized
        };
      } else {
        if (data.interleavedBuffers === void 0) {
          data.interleavedBuffers = {};
        }
        if (data.interleavedBuffers[this.data.uuid] === void 0) {
          data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);
        }
        return {
          isInterleavedBufferAttribute: true,
          itemSize: this.itemSize,
          data: this.data.uuid,
          offset: this.offset,
          normalized: this.normalized
        };
      }
    }
  };
  InterleavedBufferAttribute.prototype.isInterleavedBufferAttribute = true;
  var SpriteMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.type = "SpriteMaterial";
      this.color = new Color(16777215);
      this.map = null;
      this.alphaMap = null;
      this.rotation = 0;
      this.sizeAttenuation = true;
      this.transparent = true;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.map = source.map;
      this.alphaMap = source.alphaMap;
      this.rotation = source.rotation;
      this.sizeAttenuation = source.sizeAttenuation;
      return this;
    }
  };
  SpriteMaterial.prototype.isSpriteMaterial = true;
  var _geometry;
  var _intersectPoint = /* @__PURE__ */ new Vector3();
  var _worldScale = /* @__PURE__ */ new Vector3();
  var _mvPosition = /* @__PURE__ */ new Vector3();
  var _alignedPosition = /* @__PURE__ */ new Vector2();
  var _rotatedPosition = /* @__PURE__ */ new Vector2();
  var _viewWorldMatrix = /* @__PURE__ */ new Matrix4();
  var _vA = /* @__PURE__ */ new Vector3();
  var _vB = /* @__PURE__ */ new Vector3();
  var _vC = /* @__PURE__ */ new Vector3();
  var _uvA = /* @__PURE__ */ new Vector2();
  var _uvB = /* @__PURE__ */ new Vector2();
  var _uvC = /* @__PURE__ */ new Vector2();
  var Sprite = class extends Object3D {
    constructor(material) {
      super();
      this.type = "Sprite";
      if (_geometry === void 0) {
        _geometry = new BufferGeometry();
        const float32Array = new Float32Array([
          -0.5,
          -0.5,
          0,
          0,
          0,
          0.5,
          -0.5,
          0,
          1,
          0,
          0.5,
          0.5,
          0,
          1,
          1,
          -0.5,
          0.5,
          0,
          0,
          1
        ]);
        const interleavedBuffer = new InterleavedBuffer(float32Array, 5);
        _geometry.setIndex([0, 1, 2, 0, 2, 3]);
        _geometry.setAttribute("position", new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));
        _geometry.setAttribute("uv", new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));
      }
      this.geometry = _geometry;
      this.material = material !== void 0 ? material : new SpriteMaterial();
      this.center = new Vector2(0.5, 0.5);
    }
    raycast(raycaster, intersects2) {
      if (raycaster.camera === null) {
        console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');
      }
      _worldScale.setFromMatrixScale(this.matrixWorld);
      _viewWorldMatrix.copy(raycaster.camera.matrixWorld);
      this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);
      _mvPosition.setFromMatrixPosition(this.modelViewMatrix);
      if (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {
        _worldScale.multiplyScalar(-_mvPosition.z);
      }
      const rotation = this.material.rotation;
      let sin, cos;
      if (rotation !== 0) {
        cos = Math.cos(rotation);
        sin = Math.sin(rotation);
      }
      const center = this.center;
      transformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
      transformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
      transformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);
      _uvA.set(0, 0);
      _uvB.set(1, 0);
      _uvC.set(1, 1);
      let intersect = raycaster.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);
      if (intersect === null) {
        transformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);
        _uvB.set(0, 1);
        intersect = raycaster.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);
        if (intersect === null) {
          return;
        }
      }
      const distance = raycaster.ray.origin.distanceTo(_intersectPoint);
      if (distance < raycaster.near || distance > raycaster.far)
        return;
      intersects2.push({
        distance,
        point: _intersectPoint.clone(),
        uv: Triangle.getUV(_intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()),
        face: null,
        object: this
      });
    }
    copy(source) {
      super.copy(source);
      if (source.center !== void 0)
        this.center.copy(source.center);
      this.material = source.material;
      return this;
    }
  };
  Sprite.prototype.isSprite = true;
  function transformVertex(vertexPosition, mvPosition, center, scale3, sin, cos) {
    _alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale3);
    if (sin !== void 0) {
      _rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;
      _rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;
    } else {
      _rotatedPosition.copy(_alignedPosition);
    }
    vertexPosition.copy(mvPosition);
    vertexPosition.x += _rotatedPosition.x;
    vertexPosition.y += _rotatedPosition.y;
    vertexPosition.applyMatrix4(_viewWorldMatrix);
  }
  var _basePosition = /* @__PURE__ */ new Vector3();
  var _skinIndex = /* @__PURE__ */ new Vector4();
  var _skinWeight = /* @__PURE__ */ new Vector4();
  var _vector$5 = /* @__PURE__ */ new Vector3();
  var _matrix = /* @__PURE__ */ new Matrix4();
  var SkinnedMesh = class extends Mesh {
    constructor(geometry, material) {
      super(geometry, material);
      this.type = "SkinnedMesh";
      this.bindMode = "attached";
      this.bindMatrix = new Matrix4();
      this.bindMatrixInverse = new Matrix4();
    }
    copy(source) {
      super.copy(source);
      this.bindMode = source.bindMode;
      this.bindMatrix.copy(source.bindMatrix);
      this.bindMatrixInverse.copy(source.bindMatrixInverse);
      this.skeleton = source.skeleton;
      return this;
    }
    bind(skeleton, bindMatrix) {
      this.skeleton = skeleton;
      if (bindMatrix === void 0) {
        this.updateMatrixWorld(true);
        this.skeleton.calculateInverses();
        bindMatrix = this.matrixWorld;
      }
      this.bindMatrix.copy(bindMatrix);
      this.bindMatrixInverse.copy(bindMatrix).invert();
    }
    pose() {
      this.skeleton.pose();
    }
    normalizeSkinWeights() {
      const vector = new Vector4();
      const skinWeight = this.geometry.attributes.skinWeight;
      for (let i2 = 0, l2 = skinWeight.count; i2 < l2; i2++) {
        vector.x = skinWeight.getX(i2);
        vector.y = skinWeight.getY(i2);
        vector.z = skinWeight.getZ(i2);
        vector.w = skinWeight.getW(i2);
        const scale3 = 1 / vector.manhattanLength();
        if (scale3 !== Infinity) {
          vector.multiplyScalar(scale3);
        } else {
          vector.set(1, 0, 0, 0);
        }
        skinWeight.setXYZW(i2, vector.x, vector.y, vector.z, vector.w);
      }
    }
    updateMatrixWorld(force) {
      super.updateMatrixWorld(force);
      if (this.bindMode === "attached") {
        this.bindMatrixInverse.copy(this.matrixWorld).invert();
      } else if (this.bindMode === "detached") {
        this.bindMatrixInverse.copy(this.bindMatrix).invert();
      } else {
        console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
      }
    }
    boneTransform(index, target) {
      const skeleton = this.skeleton;
      const geometry = this.geometry;
      _skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);
      _skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);
      _basePosition.copy(target).applyMatrix4(this.bindMatrix);
      target.set(0, 0, 0);
      for (let i2 = 0; i2 < 4; i2++) {
        const weight = _skinWeight.getComponent(i2);
        if (weight !== 0) {
          const boneIndex = _skinIndex.getComponent(i2);
          _matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);
          target.addScaledVector(_vector$5.copy(_basePosition).applyMatrix4(_matrix), weight);
        }
      }
      return target.applyMatrix4(this.bindMatrixInverse);
    }
  };
  SkinnedMesh.prototype.isSkinnedMesh = true;
  var Bone = class extends Object3D {
    constructor() {
      super();
      this.type = "Bone";
    }
  };
  Bone.prototype.isBone = true;
  var DataTexture = class extends Texture {
    constructor(data = null, width2 = 1, height2 = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, encoding) {
      super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
      this.image = { data, width: width2, height: height2 };
      this.magFilter = magFilter;
      this.minFilter = minFilter;
      this.generateMipmaps = false;
      this.flipY = false;
      this.unpackAlignment = 1;
    }
  };
  DataTexture.prototype.isDataTexture = true;
  var _offsetMatrix = /* @__PURE__ */ new Matrix4();
  var _identityMatrix = /* @__PURE__ */ new Matrix4();
  var Skeleton = class {
    constructor(bones2 = [], boneInverses = []) {
      this.uuid = generateUUID();
      this.bones = bones2.slice(0);
      this.boneInverses = boneInverses;
      this.boneMatrices = null;
      this.boneTexture = null;
      this.boneTextureSize = 0;
      this.frame = -1;
      this.init();
    }
    init() {
      const bones2 = this.bones;
      const boneInverses = this.boneInverses;
      this.boneMatrices = new Float32Array(bones2.length * 16);
      if (boneInverses.length === 0) {
        this.calculateInverses();
      } else {
        if (bones2.length !== boneInverses.length) {
          console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.");
          this.boneInverses = [];
          for (let i2 = 0, il = this.bones.length; i2 < il; i2++) {
            this.boneInverses.push(new Matrix4());
          }
        }
      }
    }
    calculateInverses() {
      this.boneInverses.length = 0;
      for (let i2 = 0, il = this.bones.length; i2 < il; i2++) {
        const inverse = new Matrix4();
        if (this.bones[i2]) {
          inverse.copy(this.bones[i2].matrixWorld).invert();
        }
        this.boneInverses.push(inverse);
      }
    }
    pose() {
      for (let i2 = 0, il = this.bones.length; i2 < il; i2++) {
        const bone = this.bones[i2];
        if (bone) {
          bone.matrixWorld.copy(this.boneInverses[i2]).invert();
        }
      }
      for (let i2 = 0, il = this.bones.length; i2 < il; i2++) {
        const bone = this.bones[i2];
        if (bone) {
          if (bone.parent && bone.parent.isBone) {
            bone.matrix.copy(bone.parent.matrixWorld).invert();
            bone.matrix.multiply(bone.matrixWorld);
          } else {
            bone.matrix.copy(bone.matrixWorld);
          }
          bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);
        }
      }
    }
    update() {
      const bones2 = this.bones;
      const boneInverses = this.boneInverses;
      const boneMatrices = this.boneMatrices;
      const boneTexture = this.boneTexture;
      for (let i2 = 0, il = bones2.length; i2 < il; i2++) {
        const matrix = bones2[i2] ? bones2[i2].matrixWorld : _identityMatrix;
        _offsetMatrix.multiplyMatrices(matrix, boneInverses[i2]);
        _offsetMatrix.toArray(boneMatrices, i2 * 16);
      }
      if (boneTexture !== null) {
        boneTexture.needsUpdate = true;
      }
    }
    clone() {
      return new Skeleton(this.bones, this.boneInverses);
    }
    computeBoneTexture() {
      let size2 = Math.sqrt(this.bones.length * 4);
      size2 = ceilPowerOfTwo(size2);
      size2 = Math.max(size2, 4);
      const boneMatrices = new Float32Array(size2 * size2 * 4);
      boneMatrices.set(this.boneMatrices);
      const boneTexture = new DataTexture(boneMatrices, size2, size2, RGBAFormat, FloatType);
      boneTexture.needsUpdate = true;
      this.boneMatrices = boneMatrices;
      this.boneTexture = boneTexture;
      this.boneTextureSize = size2;
      return this;
    }
    getBoneByName(name) {
      for (let i2 = 0, il = this.bones.length; i2 < il; i2++) {
        const bone = this.bones[i2];
        if (bone.name === name) {
          return bone;
        }
      }
      return void 0;
    }
    dispose() {
      if (this.boneTexture !== null) {
        this.boneTexture.dispose();
        this.boneTexture = null;
      }
    }
    fromJSON(json, bones2) {
      this.uuid = json.uuid;
      for (let i2 = 0, l2 = json.bones.length; i2 < l2; i2++) {
        const uuid = json.bones[i2];
        let bone = bones2[uuid];
        if (bone === void 0) {
          console.warn("THREE.Skeleton: No bone found with UUID:", uuid);
          bone = new Bone();
        }
        this.bones.push(bone);
        this.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i2]));
      }
      this.init();
      return this;
    }
    toJSON() {
      const data = {
        metadata: {
          version: 4.5,
          type: "Skeleton",
          generator: "Skeleton.toJSON"
        },
        bones: [],
        boneInverses: []
      };
      data.uuid = this.uuid;
      const bones2 = this.bones;
      const boneInverses = this.boneInverses;
      for (let i2 = 0, l2 = bones2.length; i2 < l2; i2++) {
        const bone = bones2[i2];
        data.bones.push(bone.uuid);
        const boneInverse = boneInverses[i2];
        data.boneInverses.push(boneInverse.toArray());
      }
      return data;
    }
  };
  var InstancedBufferAttribute = class extends BufferAttribute {
    constructor(array, itemSize, normalized, meshPerAttribute = 1) {
      if (typeof normalized === "number") {
        meshPerAttribute = normalized;
        normalized = false;
        console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.");
      }
      super(array, itemSize, normalized);
      this.meshPerAttribute = meshPerAttribute;
    }
    copy(source) {
      super.copy(source);
      this.meshPerAttribute = source.meshPerAttribute;
      return this;
    }
    toJSON() {
      const data = super.toJSON();
      data.meshPerAttribute = this.meshPerAttribute;
      data.isInstancedBufferAttribute = true;
      return data;
    }
  };
  InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;
  var _instanceLocalMatrix = /* @__PURE__ */ new Matrix4();
  var _instanceWorldMatrix = /* @__PURE__ */ new Matrix4();
  var _instanceIntersects = [];
  var _mesh = /* @__PURE__ */ new Mesh();
  var InstancedMesh = class extends Mesh {
    constructor(geometry, material, count) {
      super(geometry, material);
      this.instanceMatrix = new InstancedBufferAttribute(new Float32Array(count * 16), 16);
      this.instanceColor = null;
      this.count = count;
      this.frustumCulled = false;
    }
    copy(source) {
      super.copy(source);
      this.instanceMatrix.copy(source.instanceMatrix);
      if (source.instanceColor !== null)
        this.instanceColor = source.instanceColor.clone();
      this.count = source.count;
      return this;
    }
    getColorAt(index, color) {
      color.fromArray(this.instanceColor.array, index * 3);
    }
    getMatrixAt(index, matrix) {
      matrix.fromArray(this.instanceMatrix.array, index * 16);
    }
    raycast(raycaster, intersects2) {
      const matrixWorld = this.matrixWorld;
      const raycastTimes = this.count;
      _mesh.geometry = this.geometry;
      _mesh.material = this.material;
      if (_mesh.material === void 0)
        return;
      for (let instanceId = 0; instanceId < raycastTimes; instanceId++) {
        this.getMatrixAt(instanceId, _instanceLocalMatrix);
        _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix);
        _mesh.matrixWorld = _instanceWorldMatrix;
        _mesh.raycast(raycaster, _instanceIntersects);
        for (let i2 = 0, l2 = _instanceIntersects.length; i2 < l2; i2++) {
          const intersect = _instanceIntersects[i2];
          intersect.instanceId = instanceId;
          intersect.object = this;
          intersects2.push(intersect);
        }
        _instanceIntersects.length = 0;
      }
    }
    setColorAt(index, color) {
      if (this.instanceColor === null) {
        this.instanceColor = new InstancedBufferAttribute(new Float32Array(this.instanceMatrix.count * 3), 3);
      }
      color.toArray(this.instanceColor.array, index * 3);
    }
    setMatrixAt(index, matrix) {
      matrix.toArray(this.instanceMatrix.array, index * 16);
    }
    updateMorphTargets() {
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
  };
  InstancedMesh.prototype.isInstancedMesh = true;
  var LineBasicMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.type = "LineBasicMaterial";
      this.color = new Color(16777215);
      this.linewidth = 1;
      this.linecap = "round";
      this.linejoin = "round";
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.linewidth = source.linewidth;
      this.linecap = source.linecap;
      this.linejoin = source.linejoin;
      return this;
    }
  };
  LineBasicMaterial.prototype.isLineBasicMaterial = true;
  var _start$1 = /* @__PURE__ */ new Vector3();
  var _end$1 = /* @__PURE__ */ new Vector3();
  var _inverseMatrix$1 = /* @__PURE__ */ new Matrix4();
  var _ray$1 = /* @__PURE__ */ new Ray();
  var _sphere$1 = /* @__PURE__ */ new Sphere();
  var Line = class extends Object3D {
    constructor(geometry = new BufferGeometry(), material = new LineBasicMaterial()) {
      super();
      this.type = "Line";
      this.geometry = geometry;
      this.material = material;
      this.updateMorphTargets();
    }
    copy(source) {
      super.copy(source);
      this.material = source.material;
      this.geometry = source.geometry;
      return this;
    }
    computeLineDistances() {
      const geometry = this.geometry;
      if (geometry.isBufferGeometry) {
        if (geometry.index === null) {
          const positionAttribute = geometry.attributes.position;
          const lineDistances = [0];
          for (let i2 = 1, l2 = positionAttribute.count; i2 < l2; i2++) {
            _start$1.fromBufferAttribute(positionAttribute, i2 - 1);
            _end$1.fromBufferAttribute(positionAttribute, i2);
            lineDistances[i2] = lineDistances[i2 - 1];
            lineDistances[i2] += _start$1.distanceTo(_end$1);
          }
          geometry.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1));
        } else {
          console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        }
      } else if (geometry.isGeometry) {
        console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
      }
      return this;
    }
    raycast(raycaster, intersects2) {
      const geometry = this.geometry;
      const matrixWorld = this.matrixWorld;
      const threshold = raycaster.params.Line.threshold;
      const drawRange = geometry.drawRange;
      if (geometry.boundingSphere === null)
        geometry.computeBoundingSphere();
      _sphere$1.copy(geometry.boundingSphere);
      _sphere$1.applyMatrix4(matrixWorld);
      _sphere$1.radius += threshold;
      if (raycaster.ray.intersectsSphere(_sphere$1) === false)
        return;
      _inverseMatrix$1.copy(matrixWorld).invert();
      _ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);
      const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
      const localThresholdSq = localThreshold * localThreshold;
      const vStart = new Vector3();
      const vEnd = new Vector3();
      const interSegment = new Vector3();
      const interRay = new Vector3();
      const step = this.isLineSegments ? 2 : 1;
      if (geometry.isBufferGeometry) {
        const index = geometry.index;
        const attributes = geometry.attributes;
        const positionAttribute = attributes.position;
        if (index !== null) {
          const start2 = Math.max(0, drawRange.start);
          const end2 = Math.min(index.count, drawRange.start + drawRange.count);
          for (let i2 = start2, l2 = end2 - 1; i2 < l2; i2 += step) {
            const a2 = index.getX(i2);
            const b2 = index.getX(i2 + 1);
            vStart.fromBufferAttribute(positionAttribute, a2);
            vEnd.fromBufferAttribute(positionAttribute, b2);
            const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
            if (distSq > localThresholdSq)
              continue;
            interRay.applyMatrix4(this.matrixWorld);
            const distance = raycaster.ray.origin.distanceTo(interRay);
            if (distance < raycaster.near || distance > raycaster.far)
              continue;
            intersects2.push({
              distance,
              point: interSegment.clone().applyMatrix4(this.matrixWorld),
              index: i2,
              face: null,
              faceIndex: null,
              object: this
            });
          }
        } else {
          const start2 = Math.max(0, drawRange.start);
          const end2 = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
          for (let i2 = start2, l2 = end2 - 1; i2 < l2; i2 += step) {
            vStart.fromBufferAttribute(positionAttribute, i2);
            vEnd.fromBufferAttribute(positionAttribute, i2 + 1);
            const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
            if (distSq > localThresholdSq)
              continue;
            interRay.applyMatrix4(this.matrixWorld);
            const distance = raycaster.ray.origin.distanceTo(interRay);
            if (distance < raycaster.near || distance > raycaster.far)
              continue;
            intersects2.push({
              distance,
              point: interSegment.clone().applyMatrix4(this.matrixWorld),
              index: i2,
              face: null,
              faceIndex: null,
              object: this
            });
          }
        }
      } else if (geometry.isGeometry) {
        console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
      }
    }
    updateMorphTargets() {
      const geometry = this.geometry;
      if (geometry.isBufferGeometry) {
        const morphAttributes = geometry.morphAttributes;
        const keys = Object.keys(morphAttributes);
        if (keys.length > 0) {
          const morphAttribute = morphAttributes[keys[0]];
          if (morphAttribute !== void 0) {
            this.morphTargetInfluences = [];
            this.morphTargetDictionary = {};
            for (let m2 = 0, ml = morphAttribute.length; m2 < ml; m2++) {
              const name = morphAttribute[m2].name || String(m2);
              this.morphTargetInfluences.push(0);
              this.morphTargetDictionary[name] = m2;
            }
          }
        }
      } else {
        const morphTargets = geometry.morphTargets;
        if (morphTargets !== void 0 && morphTargets.length > 0) {
          console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
        }
      }
    }
  };
  Line.prototype.isLine = true;
  var _start = /* @__PURE__ */ new Vector3();
  var _end = /* @__PURE__ */ new Vector3();
  var LineSegments = class extends Line {
    constructor(geometry, material) {
      super(geometry, material);
      this.type = "LineSegments";
    }
    computeLineDistances() {
      const geometry = this.geometry;
      if (geometry.isBufferGeometry) {
        if (geometry.index === null) {
          const positionAttribute = geometry.attributes.position;
          const lineDistances = [];
          for (let i2 = 0, l2 = positionAttribute.count; i2 < l2; i2 += 2) {
            _start.fromBufferAttribute(positionAttribute, i2);
            _end.fromBufferAttribute(positionAttribute, i2 + 1);
            lineDistances[i2] = i2 === 0 ? 0 : lineDistances[i2 - 1];
            lineDistances[i2 + 1] = lineDistances[i2] + _start.distanceTo(_end);
          }
          geometry.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1));
        } else {
          console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        }
      } else if (geometry.isGeometry) {
        console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
      }
      return this;
    }
  };
  LineSegments.prototype.isLineSegments = true;
  var LineLoop = class extends Line {
    constructor(geometry, material) {
      super(geometry, material);
      this.type = "LineLoop";
    }
  };
  LineLoop.prototype.isLineLoop = true;
  var PointsMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.type = "PointsMaterial";
      this.color = new Color(16777215);
      this.map = null;
      this.alphaMap = null;
      this.size = 1;
      this.sizeAttenuation = true;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.map = source.map;
      this.alphaMap = source.alphaMap;
      this.size = source.size;
      this.sizeAttenuation = source.sizeAttenuation;
      return this;
    }
  };
  PointsMaterial.prototype.isPointsMaterial = true;
  var _inverseMatrix = /* @__PURE__ */ new Matrix4();
  var _ray = /* @__PURE__ */ new Ray();
  var _sphere = /* @__PURE__ */ new Sphere();
  var _position$2 = /* @__PURE__ */ new Vector3();
  var Points = class extends Object3D {
    constructor(geometry = new BufferGeometry(), material = new PointsMaterial()) {
      super();
      this.type = "Points";
      this.geometry = geometry;
      this.material = material;
      this.updateMorphTargets();
    }
    copy(source) {
      super.copy(source);
      this.material = source.material;
      this.geometry = source.geometry;
      return this;
    }
    raycast(raycaster, intersects2) {
      const geometry = this.geometry;
      const matrixWorld = this.matrixWorld;
      const threshold = raycaster.params.Points.threshold;
      const drawRange = geometry.drawRange;
      if (geometry.boundingSphere === null)
        geometry.computeBoundingSphere();
      _sphere.copy(geometry.boundingSphere);
      _sphere.applyMatrix4(matrixWorld);
      _sphere.radius += threshold;
      if (raycaster.ray.intersectsSphere(_sphere) === false)
        return;
      _inverseMatrix.copy(matrixWorld).invert();
      _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);
      const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
      const localThresholdSq = localThreshold * localThreshold;
      if (geometry.isBufferGeometry) {
        const index = geometry.index;
        const attributes = geometry.attributes;
        const positionAttribute = attributes.position;
        if (index !== null) {
          const start2 = Math.max(0, drawRange.start);
          const end2 = Math.min(index.count, drawRange.start + drawRange.count);
          for (let i2 = start2, il = end2; i2 < il; i2++) {
            const a2 = index.getX(i2);
            _position$2.fromBufferAttribute(positionAttribute, a2);
            testPoint(_position$2, a2, localThresholdSq, matrixWorld, raycaster, intersects2, this);
          }
        } else {
          const start2 = Math.max(0, drawRange.start);
          const end2 = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
          for (let i2 = start2, l2 = end2; i2 < l2; i2++) {
            _position$2.fromBufferAttribute(positionAttribute, i2);
            testPoint(_position$2, i2, localThresholdSq, matrixWorld, raycaster, intersects2, this);
          }
        }
      } else {
        console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
      }
    }
    updateMorphTargets() {
      const geometry = this.geometry;
      if (geometry.isBufferGeometry) {
        const morphAttributes = geometry.morphAttributes;
        const keys = Object.keys(morphAttributes);
        if (keys.length > 0) {
          const morphAttribute = morphAttributes[keys[0]];
          if (morphAttribute !== void 0) {
            this.morphTargetInfluences = [];
            this.morphTargetDictionary = {};
            for (let m2 = 0, ml = morphAttribute.length; m2 < ml; m2++) {
              const name = morphAttribute[m2].name || String(m2);
              this.morphTargetInfluences.push(0);
              this.morphTargetDictionary[name] = m2;
            }
          }
        }
      } else {
        const morphTargets = geometry.morphTargets;
        if (morphTargets !== void 0 && morphTargets.length > 0) {
          console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
        }
      }
    }
  };
  Points.prototype.isPoints = true;
  function testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects2, object) {
    const rayPointDistanceSq = _ray.distanceSqToPoint(point);
    if (rayPointDistanceSq < localThresholdSq) {
      const intersectPoint = new Vector3();
      _ray.closestPointToPoint(point, intersectPoint);
      intersectPoint.applyMatrix4(matrixWorld);
      const distance = raycaster.ray.origin.distanceTo(intersectPoint);
      if (distance < raycaster.near || distance > raycaster.far)
        return;
      intersects2.push({
        distance,
        distanceToRay: Math.sqrt(rayPointDistanceSq),
        point: intersectPoint,
        index,
        face: null,
        object
      });
    }
  }
  var VideoTexture = class extends Texture {
    constructor(video2, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
      super(video2, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
      this.minFilter = minFilter !== void 0 ? minFilter : LinearFilter;
      this.magFilter = magFilter !== void 0 ? magFilter : LinearFilter;
      this.generateMipmaps = false;
      const scope = this;
      function updateVideo() {
        scope.needsUpdate = true;
        video2.requestVideoFrameCallback(updateVideo);
      }
      if ("requestVideoFrameCallback" in video2) {
        video2.requestVideoFrameCallback(updateVideo);
      }
    }
    clone() {
      return new this.constructor(this.image).copy(this);
    }
    update() {
      const video2 = this.image;
      const hasVideoFrameCallback = "requestVideoFrameCallback" in video2;
      if (hasVideoFrameCallback === false && video2.readyState >= video2.HAVE_CURRENT_DATA) {
        this.needsUpdate = true;
      }
    }
  };
  VideoTexture.prototype.isVideoTexture = true;
  var FramebufferTexture = class extends Texture {
    constructor(width2, height2, format) {
      super({ width: width2, height: height2 });
      this.format = format;
      this.magFilter = NearestFilter;
      this.minFilter = NearestFilter;
      this.generateMipmaps = false;
      this.needsUpdate = true;
    }
  };
  FramebufferTexture.prototype.isFramebufferTexture = true;
  var CompressedTexture = class extends Texture {
    constructor(mipmaps, width2, height2, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {
      super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
      this.image = { width: width2, height: height2 };
      this.mipmaps = mipmaps;
      this.flipY = false;
      this.generateMipmaps = false;
    }
  };
  CompressedTexture.prototype.isCompressedTexture = true;
  var CanvasTexture = class extends Texture {
    constructor(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
      super(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
      this.needsUpdate = true;
    }
  };
  CanvasTexture.prototype.isCanvasTexture = true;
  var _v0 = new Vector3();
  var _v1$1 = new Vector3();
  var _normal = new Vector3();
  var _triangle = new Triangle();
  var Curve = class {
    constructor() {
      this.type = "Curve";
      this.arcLengthDivisions = 200;
    }
    getPoint() {
      console.warn("THREE.Curve: .getPoint() not implemented.");
      return null;
    }
    getPointAt(u2, optionalTarget) {
      const t = this.getUtoTmapping(u2);
      return this.getPoint(t, optionalTarget);
    }
    getPoints(divisions = 5) {
      const points2 = [];
      for (let d2 = 0; d2 <= divisions; d2++) {
        points2.push(this.getPoint(d2 / divisions));
      }
      return points2;
    }
    getSpacedPoints(divisions = 5) {
      const points2 = [];
      for (let d2 = 0; d2 <= divisions; d2++) {
        points2.push(this.getPointAt(d2 / divisions));
      }
      return points2;
    }
    getLength() {
      const lengths = this.getLengths();
      return lengths[lengths.length - 1];
    }
    getLengths(divisions = this.arcLengthDivisions) {
      if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {
        return this.cacheArcLengths;
      }
      this.needsUpdate = false;
      const cache = [];
      let current, last = this.getPoint(0);
      let sum = 0;
      cache.push(0);
      for (let p3 = 1; p3 <= divisions; p3++) {
        current = this.getPoint(p3 / divisions);
        sum += current.distanceTo(last);
        cache.push(sum);
        last = current;
      }
      this.cacheArcLengths = cache;
      return cache;
    }
    updateArcLengths() {
      this.needsUpdate = true;
      this.getLengths();
    }
    getUtoTmapping(u2, distance) {
      const arcLengths = this.getLengths();
      let i2 = 0;
      const il = arcLengths.length;
      let targetArcLength;
      if (distance) {
        targetArcLength = distance;
      } else {
        targetArcLength = u2 * arcLengths[il - 1];
      }
      let low = 0, high = il - 1, comparison;
      while (low <= high) {
        i2 = Math.floor(low + (high - low) / 2);
        comparison = arcLengths[i2] - targetArcLength;
        if (comparison < 0) {
          low = i2 + 1;
        } else if (comparison > 0) {
          high = i2 - 1;
        } else {
          high = i2;
          break;
        }
      }
      i2 = high;
      if (arcLengths[i2] === targetArcLength) {
        return i2 / (il - 1);
      }
      const lengthBefore = arcLengths[i2];
      const lengthAfter = arcLengths[i2 + 1];
      const segmentLength = lengthAfter - lengthBefore;
      const segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
      const t = (i2 + segmentFraction) / (il - 1);
      return t;
    }
    getTangent(t, optionalTarget) {
      const delta = 1e-4;
      let t1 = t - delta;
      let t2 = t + delta;
      if (t1 < 0)
        t1 = 0;
      if (t2 > 1)
        t2 = 1;
      const pt1 = this.getPoint(t1);
      const pt2 = this.getPoint(t2);
      const tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());
      tangent.copy(pt2).sub(pt1).normalize();
      return tangent;
    }
    getTangentAt(u2, optionalTarget) {
      const t = this.getUtoTmapping(u2);
      return this.getTangent(t, optionalTarget);
    }
    computeFrenetFrames(segments, closed) {
      const normal = new Vector3();
      const tangents = [];
      const normals = [];
      const binormals = [];
      const vec = new Vector3();
      const mat = new Matrix4();
      for (let i2 = 0; i2 <= segments; i2++) {
        const u2 = i2 / segments;
        tangents[i2] = this.getTangentAt(u2, new Vector3());
      }
      normals[0] = new Vector3();
      binormals[0] = new Vector3();
      let min = Number.MAX_VALUE;
      const tx = Math.abs(tangents[0].x);
      const ty = Math.abs(tangents[0].y);
      const tz = Math.abs(tangents[0].z);
      if (tx <= min) {
        min = tx;
        normal.set(1, 0, 0);
      }
      if (ty <= min) {
        min = ty;
        normal.set(0, 1, 0);
      }
      if (tz <= min) {
        normal.set(0, 0, 1);
      }
      vec.crossVectors(tangents[0], normal).normalize();
      normals[0].crossVectors(tangents[0], vec);
      binormals[0].crossVectors(tangents[0], normals[0]);
      for (let i2 = 1; i2 <= segments; i2++) {
        normals[i2] = normals[i2 - 1].clone();
        binormals[i2] = binormals[i2 - 1].clone();
        vec.crossVectors(tangents[i2 - 1], tangents[i2]);
        if (vec.length() > Number.EPSILON) {
          vec.normalize();
          const theta = Math.acos(clamp(tangents[i2 - 1].dot(tangents[i2]), -1, 1));
          normals[i2].applyMatrix4(mat.makeRotationAxis(vec, theta));
        }
        binormals[i2].crossVectors(tangents[i2], normals[i2]);
      }
      if (closed === true) {
        let theta = Math.acos(clamp(normals[0].dot(normals[segments]), -1, 1));
        theta /= segments;
        if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {
          theta = -theta;
        }
        for (let i2 = 1; i2 <= segments; i2++) {
          normals[i2].applyMatrix4(mat.makeRotationAxis(tangents[i2], theta * i2));
          binormals[i2].crossVectors(tangents[i2], normals[i2]);
        }
      }
      return {
        tangents,
        normals,
        binormals
      };
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.arcLengthDivisions = source.arcLengthDivisions;
      return this;
    }
    toJSON() {
      const data = {
        metadata: {
          version: 4.5,
          type: "Curve",
          generator: "Curve.toJSON"
        }
      };
      data.arcLengthDivisions = this.arcLengthDivisions;
      data.type = this.type;
      return data;
    }
    fromJSON(json) {
      this.arcLengthDivisions = json.arcLengthDivisions;
      return this;
    }
  };
  var EllipseCurve = class extends Curve {
    constructor(aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0) {
      super();
      this.type = "EllipseCurve";
      this.aX = aX;
      this.aY = aY;
      this.xRadius = xRadius;
      this.yRadius = yRadius;
      this.aStartAngle = aStartAngle;
      this.aEndAngle = aEndAngle;
      this.aClockwise = aClockwise;
      this.aRotation = aRotation;
    }
    getPoint(t, optionalTarget) {
      const point = optionalTarget || new Vector2();
      const twoPi = Math.PI * 2;
      let deltaAngle = this.aEndAngle - this.aStartAngle;
      const samePoints = Math.abs(deltaAngle) < Number.EPSILON;
      while (deltaAngle < 0)
        deltaAngle += twoPi;
      while (deltaAngle > twoPi)
        deltaAngle -= twoPi;
      if (deltaAngle < Number.EPSILON) {
        if (samePoints) {
          deltaAngle = 0;
        } else {
          deltaAngle = twoPi;
        }
      }
      if (this.aClockwise === true && !samePoints) {
        if (deltaAngle === twoPi) {
          deltaAngle = -twoPi;
        } else {
          deltaAngle = deltaAngle - twoPi;
        }
      }
      const angle = this.aStartAngle + t * deltaAngle;
      let x2 = this.aX + this.xRadius * Math.cos(angle);
      let y2 = this.aY + this.yRadius * Math.sin(angle);
      if (this.aRotation !== 0) {
        const cos = Math.cos(this.aRotation);
        const sin = Math.sin(this.aRotation);
        const tx = x2 - this.aX;
        const ty = y2 - this.aY;
        x2 = tx * cos - ty * sin + this.aX;
        y2 = tx * sin + ty * cos + this.aY;
      }
      return point.set(x2, y2);
    }
    copy(source) {
      super.copy(source);
      this.aX = source.aX;
      this.aY = source.aY;
      this.xRadius = source.xRadius;
      this.yRadius = source.yRadius;
      this.aStartAngle = source.aStartAngle;
      this.aEndAngle = source.aEndAngle;
      this.aClockwise = source.aClockwise;
      this.aRotation = source.aRotation;
      return this;
    }
    toJSON() {
      const data = super.toJSON();
      data.aX = this.aX;
      data.aY = this.aY;
      data.xRadius = this.xRadius;
      data.yRadius = this.yRadius;
      data.aStartAngle = this.aStartAngle;
      data.aEndAngle = this.aEndAngle;
      data.aClockwise = this.aClockwise;
      data.aRotation = this.aRotation;
      return data;
    }
    fromJSON(json) {
      super.fromJSON(json);
      this.aX = json.aX;
      this.aY = json.aY;
      this.xRadius = json.xRadius;
      this.yRadius = json.yRadius;
      this.aStartAngle = json.aStartAngle;
      this.aEndAngle = json.aEndAngle;
      this.aClockwise = json.aClockwise;
      this.aRotation = json.aRotation;
      return this;
    }
  };
  EllipseCurve.prototype.isEllipseCurve = true;
  var ArcCurve = class extends EllipseCurve {
    constructor(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
      super(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
      this.type = "ArcCurve";
    }
  };
  ArcCurve.prototype.isArcCurve = true;
  function CubicPoly() {
    let c0 = 0, c1 = 0, c2 = 0, c3 = 0;
    function init3(x0, x1, t0, t1) {
      c0 = x0;
      c1 = t0;
      c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;
      c3 = 2 * x0 - 2 * x1 + t0 + t1;
    }
    return {
      initCatmullRom: function(x0, x1, x2, x3, tension) {
        init3(x1, x2, tension * (x2 - x0), tension * (x3 - x1));
      },
      initNonuniformCatmullRom: function(x0, x1, x2, x3, dt0, dt1, dt2) {
        let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;
        let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;
        t1 *= dt1;
        t2 *= dt1;
        init3(x1, x2, t1, t2);
      },
      calc: function(t) {
        const t2 = t * t;
        const t3 = t2 * t;
        return c0 + c1 * t + c2 * t2 + c3 * t3;
      }
    };
  }
  var tmp = new Vector3();
  var px = new CubicPoly();
  var py = new CubicPoly();
  var pz = new CubicPoly();
  var CatmullRomCurve3 = class extends Curve {
    constructor(points2 = [], closed = false, curveType = "centripetal", tension = 0.5) {
      super();
      this.type = "CatmullRomCurve3";
      this.points = points2;
      this.closed = closed;
      this.curveType = curveType;
      this.tension = tension;
    }
    getPoint(t, optionalTarget = new Vector3()) {
      const point = optionalTarget;
      const points2 = this.points;
      const l2 = points2.length;
      const p3 = (l2 - (this.closed ? 0 : 1)) * t;
      let intPoint = Math.floor(p3);
      let weight = p3 - intPoint;
      if (this.closed) {
        intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l2) + 1) * l2;
      } else if (weight === 0 && intPoint === l2 - 1) {
        intPoint = l2 - 2;
        weight = 1;
      }
      let p0, p32;
      if (this.closed || intPoint > 0) {
        p0 = points2[(intPoint - 1) % l2];
      } else {
        tmp.subVectors(points2[0], points2[1]).add(points2[0]);
        p0 = tmp;
      }
      const p1 = points2[intPoint % l2];
      const p22 = points2[(intPoint + 1) % l2];
      if (this.closed || intPoint + 2 < l2) {
        p32 = points2[(intPoint + 2) % l2];
      } else {
        tmp.subVectors(points2[l2 - 1], points2[l2 - 2]).add(points2[l2 - 1]);
        p32 = tmp;
      }
      if (this.curveType === "centripetal" || this.curveType === "chordal") {
        const pow = this.curveType === "chordal" ? 0.5 : 0.25;
        let dt0 = Math.pow(p0.distanceToSquared(p1), pow);
        let dt1 = Math.pow(p1.distanceToSquared(p22), pow);
        let dt2 = Math.pow(p22.distanceToSquared(p32), pow);
        if (dt1 < 1e-4)
          dt1 = 1;
        if (dt0 < 1e-4)
          dt0 = dt1;
        if (dt2 < 1e-4)
          dt2 = dt1;
        px.initNonuniformCatmullRom(p0.x, p1.x, p22.x, p32.x, dt0, dt1, dt2);
        py.initNonuniformCatmullRom(p0.y, p1.y, p22.y, p32.y, dt0, dt1, dt2);
        pz.initNonuniformCatmullRom(p0.z, p1.z, p22.z, p32.z, dt0, dt1, dt2);
      } else if (this.curveType === "catmullrom") {
        px.initCatmullRom(p0.x, p1.x, p22.x, p32.x, this.tension);
        py.initCatmullRom(p0.y, p1.y, p22.y, p32.y, this.tension);
        pz.initCatmullRom(p0.z, p1.z, p22.z, p32.z, this.tension);
      }
      point.set(px.calc(weight), py.calc(weight), pz.calc(weight));
      return point;
    }
    copy(source) {
      super.copy(source);
      this.points = [];
      for (let i2 = 0, l2 = source.points.length; i2 < l2; i2++) {
        const point = source.points[i2];
        this.points.push(point.clone());
      }
      this.closed = source.closed;
      this.curveType = source.curveType;
      this.tension = source.tension;
      return this;
    }
    toJSON() {
      const data = super.toJSON();
      data.points = [];
      for (let i2 = 0, l2 = this.points.length; i2 < l2; i2++) {
        const point = this.points[i2];
        data.points.push(point.toArray());
      }
      data.closed = this.closed;
      data.curveType = this.curveType;
      data.tension = this.tension;
      return data;
    }
    fromJSON(json) {
      super.fromJSON(json);
      this.points = [];
      for (let i2 = 0, l2 = json.points.length; i2 < l2; i2++) {
        const point = json.points[i2];
        this.points.push(new Vector3().fromArray(point));
      }
      this.closed = json.closed;
      this.curveType = json.curveType;
      this.tension = json.tension;
      return this;
    }
  };
  CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;
  function CatmullRom(t, p0, p1, p22, p3) {
    const v0 = (p22 - p0) * 0.5;
    const v1 = (p3 - p1) * 0.5;
    const t2 = t * t;
    const t3 = t * t2;
    return (2 * p1 - 2 * p22 + v0 + v1) * t3 + (-3 * p1 + 3 * p22 - 2 * v0 - v1) * t2 + v0 * t + p1;
  }
  function QuadraticBezierP0(t, p3) {
    const k2 = 1 - t;
    return k2 * k2 * p3;
  }
  function QuadraticBezierP1(t, p3) {
    return 2 * (1 - t) * t * p3;
  }
  function QuadraticBezierP2(t, p3) {
    return t * t * p3;
  }
  function QuadraticBezier(t, p0, p1, p22) {
    return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p22);
  }
  function CubicBezierP0(t, p3) {
    const k2 = 1 - t;
    return k2 * k2 * k2 * p3;
  }
  function CubicBezierP1(t, p3) {
    const k2 = 1 - t;
    return 3 * k2 * k2 * t * p3;
  }
  function CubicBezierP2(t, p3) {
    return 3 * (1 - t) * t * t * p3;
  }
  function CubicBezierP3(t, p3) {
    return t * t * t * p3;
  }
  function CubicBezier(t, p0, p1, p22, p3) {
    return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p22) + CubicBezierP3(t, p3);
  }
  var CubicBezierCurve = class extends Curve {
    constructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v32 = new Vector2()) {
      super();
      this.type = "CubicBezierCurve";
      this.v0 = v0;
      this.v1 = v1;
      this.v2 = v2;
      this.v3 = v32;
    }
    getPoint(t, optionalTarget = new Vector2()) {
      const point = optionalTarget;
      const v0 = this.v0, v1 = this.v1, v2 = this.v2, v32 = this.v3;
      point.set(CubicBezier(t, v0.x, v1.x, v2.x, v32.x), CubicBezier(t, v0.y, v1.y, v2.y, v32.y));
      return point;
    }
    copy(source) {
      super.copy(source);
      this.v0.copy(source.v0);
      this.v1.copy(source.v1);
      this.v2.copy(source.v2);
      this.v3.copy(source.v3);
      return this;
    }
    toJSON() {
      const data = super.toJSON();
      data.v0 = this.v0.toArray();
      data.v1 = this.v1.toArray();
      data.v2 = this.v2.toArray();
      data.v3 = this.v3.toArray();
      return data;
    }
    fromJSON(json) {
      super.fromJSON(json);
      this.v0.fromArray(json.v0);
      this.v1.fromArray(json.v1);
      this.v2.fromArray(json.v2);
      this.v3.fromArray(json.v3);
      return this;
    }
  };
  CubicBezierCurve.prototype.isCubicBezierCurve = true;
  var CubicBezierCurve3 = class extends Curve {
    constructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v32 = new Vector3()) {
      super();
      this.type = "CubicBezierCurve3";
      this.v0 = v0;
      this.v1 = v1;
      this.v2 = v2;
      this.v3 = v32;
    }
    getPoint(t, optionalTarget = new Vector3()) {
      const point = optionalTarget;
      const v0 = this.v0, v1 = this.v1, v2 = this.v2, v32 = this.v3;
      point.set(CubicBezier(t, v0.x, v1.x, v2.x, v32.x), CubicBezier(t, v0.y, v1.y, v2.y, v32.y), CubicBezier(t, v0.z, v1.z, v2.z, v32.z));
      return point;
    }
    copy(source) {
      super.copy(source);
      this.v0.copy(source.v0);
      this.v1.copy(source.v1);
      this.v2.copy(source.v2);
      this.v3.copy(source.v3);
      return this;
    }
    toJSON() {
      const data = super.toJSON();
      data.v0 = this.v0.toArray();
      data.v1 = this.v1.toArray();
      data.v2 = this.v2.toArray();
      data.v3 = this.v3.toArray();
      return data;
    }
    fromJSON(json) {
      super.fromJSON(json);
      this.v0.fromArray(json.v0);
      this.v1.fromArray(json.v1);
      this.v2.fromArray(json.v2);
      this.v3.fromArray(json.v3);
      return this;
    }
  };
  CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;
  var LineCurve = class extends Curve {
    constructor(v1 = new Vector2(), v2 = new Vector2()) {
      super();
      this.type = "LineCurve";
      this.v1 = v1;
      this.v2 = v2;
    }
    getPoint(t, optionalTarget = new Vector2()) {
      const point = optionalTarget;
      if (t === 1) {
        point.copy(this.v2);
      } else {
        point.copy(this.v2).sub(this.v1);
        point.multiplyScalar(t).add(this.v1);
      }
      return point;
    }
    getPointAt(u2, optionalTarget) {
      return this.getPoint(u2, optionalTarget);
    }
    getTangent(t, optionalTarget) {
      const tangent = optionalTarget || new Vector2();
      tangent.copy(this.v2).sub(this.v1).normalize();
      return tangent;
    }
    copy(source) {
      super.copy(source);
      this.v1.copy(source.v1);
      this.v2.copy(source.v2);
      return this;
    }
    toJSON() {
      const data = super.toJSON();
      data.v1 = this.v1.toArray();
      data.v2 = this.v2.toArray();
      return data;
    }
    fromJSON(json) {
      super.fromJSON(json);
      this.v1.fromArray(json.v1);
      this.v2.fromArray(json.v2);
      return this;
    }
  };
  LineCurve.prototype.isLineCurve = true;
  var LineCurve3 = class extends Curve {
    constructor(v1 = new Vector3(), v2 = new Vector3()) {
      super();
      this.type = "LineCurve3";
      this.isLineCurve3 = true;
      this.v1 = v1;
      this.v2 = v2;
    }
    getPoint(t, optionalTarget = new Vector3()) {
      const point = optionalTarget;
      if (t === 1) {
        point.copy(this.v2);
      } else {
        point.copy(this.v2).sub(this.v1);
        point.multiplyScalar(t).add(this.v1);
      }
      return point;
    }
    getPointAt(u2, optionalTarget) {
      return this.getPoint(u2, optionalTarget);
    }
    copy(source) {
      super.copy(source);
      this.v1.copy(source.v1);
      this.v2.copy(source.v2);
      return this;
    }
    toJSON() {
      const data = super.toJSON();
      data.v1 = this.v1.toArray();
      data.v2 = this.v2.toArray();
      return data;
    }
    fromJSON(json) {
      super.fromJSON(json);
      this.v1.fromArray(json.v1);
      this.v2.fromArray(json.v2);
      return this;
    }
  };
  var QuadraticBezierCurve = class extends Curve {
    constructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2()) {
      super();
      this.type = "QuadraticBezierCurve";
      this.v0 = v0;
      this.v1 = v1;
      this.v2 = v2;
    }
    getPoint(t, optionalTarget = new Vector2()) {
      const point = optionalTarget;
      const v0 = this.v0, v1 = this.v1, v2 = this.v2;
      point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));
      return point;
    }
    copy(source) {
      super.copy(source);
      this.v0.copy(source.v0);
      this.v1.copy(source.v1);
      this.v2.copy(source.v2);
      return this;
    }
    toJSON() {
      const data = super.toJSON();
      data.v0 = this.v0.toArray();
      data.v1 = this.v1.toArray();
      data.v2 = this.v2.toArray();
      return data;
    }
    fromJSON(json) {
      super.fromJSON(json);
      this.v0.fromArray(json.v0);
      this.v1.fromArray(json.v1);
      this.v2.fromArray(json.v2);
      return this;
    }
  };
  QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;
  var QuadraticBezierCurve3 = class extends Curve {
    constructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3()) {
      super();
      this.type = "QuadraticBezierCurve3";
      this.v0 = v0;
      this.v1 = v1;
      this.v2 = v2;
    }
    getPoint(t, optionalTarget = new Vector3()) {
      const point = optionalTarget;
      const v0 = this.v0, v1 = this.v1, v2 = this.v2;
      point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));
      return point;
    }
    copy(source) {
      super.copy(source);
      this.v0.copy(source.v0);
      this.v1.copy(source.v1);
      this.v2.copy(source.v2);
      return this;
    }
    toJSON() {
      const data = super.toJSON();
      data.v0 = this.v0.toArray();
      data.v1 = this.v1.toArray();
      data.v2 = this.v2.toArray();
      return data;
    }
    fromJSON(json) {
      super.fromJSON(json);
      this.v0.fromArray(json.v0);
      this.v1.fromArray(json.v1);
      this.v2.fromArray(json.v2);
      return this;
    }
  };
  QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;
  var SplineCurve = class extends Curve {
    constructor(points2 = []) {
      super();
      this.type = "SplineCurve";
      this.points = points2;
    }
    getPoint(t, optionalTarget = new Vector2()) {
      const point = optionalTarget;
      const points2 = this.points;
      const p3 = (points2.length - 1) * t;
      const intPoint = Math.floor(p3);
      const weight = p3 - intPoint;
      const p0 = points2[intPoint === 0 ? intPoint : intPoint - 1];
      const p1 = points2[intPoint];
      const p22 = points2[intPoint > points2.length - 2 ? points2.length - 1 : intPoint + 1];
      const p32 = points2[intPoint > points2.length - 3 ? points2.length - 1 : intPoint + 2];
      point.set(CatmullRom(weight, p0.x, p1.x, p22.x, p32.x), CatmullRom(weight, p0.y, p1.y, p22.y, p32.y));
      return point;
    }
    copy(source) {
      super.copy(source);
      this.points = [];
      for (let i2 = 0, l2 = source.points.length; i2 < l2; i2++) {
        const point = source.points[i2];
        this.points.push(point.clone());
      }
      return this;
    }
    toJSON() {
      const data = super.toJSON();
      data.points = [];
      for (let i2 = 0, l2 = this.points.length; i2 < l2; i2++) {
        const point = this.points[i2];
        data.points.push(point.toArray());
      }
      return data;
    }
    fromJSON(json) {
      super.fromJSON(json);
      this.points = [];
      for (let i2 = 0, l2 = json.points.length; i2 < l2; i2++) {
        const point = json.points[i2];
        this.points.push(new Vector2().fromArray(point));
      }
      return this;
    }
  };
  SplineCurve.prototype.isSplineCurve = true;
  var Curves = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    ArcCurve,
    CatmullRomCurve3,
    CubicBezierCurve,
    CubicBezierCurve3,
    EllipseCurve,
    LineCurve,
    LineCurve3,
    QuadraticBezierCurve,
    QuadraticBezierCurve3,
    SplineCurve
  });
  var CurvePath = class extends Curve {
    constructor() {
      super();
      this.type = "CurvePath";
      this.curves = [];
      this.autoClose = false;
    }
    add(curve) {
      this.curves.push(curve);
    }
    closePath() {
      const startPoint = this.curves[0].getPoint(0);
      const endPoint = this.curves[this.curves.length - 1].getPoint(1);
      if (!startPoint.equals(endPoint)) {
        this.curves.push(new LineCurve(endPoint, startPoint));
      }
    }
    getPoint(t, optionalTarget) {
      const d2 = t * this.getLength();
      const curveLengths = this.getCurveLengths();
      let i2 = 0;
      while (i2 < curveLengths.length) {
        if (curveLengths[i2] >= d2) {
          const diff = curveLengths[i2] - d2;
          const curve = this.curves[i2];
          const segmentLength = curve.getLength();
          const u2 = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
          return curve.getPointAt(u2, optionalTarget);
        }
        i2++;
      }
      return null;
    }
    getLength() {
      const lens = this.getCurveLengths();
      return lens[lens.length - 1];
    }
    updateArcLengths() {
      this.needsUpdate = true;
      this.cacheLengths = null;
      this.getCurveLengths();
    }
    getCurveLengths() {
      if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
        return this.cacheLengths;
      }
      const lengths = [];
      let sums = 0;
      for (let i2 = 0, l2 = this.curves.length; i2 < l2; i2++) {
        sums += this.curves[i2].getLength();
        lengths.push(sums);
      }
      this.cacheLengths = lengths;
      return lengths;
    }
    getSpacedPoints(divisions = 40) {
      const points2 = [];
      for (let i2 = 0; i2 <= divisions; i2++) {
        points2.push(this.getPoint(i2 / divisions));
      }
      if (this.autoClose) {
        points2.push(points2[0]);
      }
      return points2;
    }
    getPoints(divisions = 12) {
      const points2 = [];
      let last;
      for (let i2 = 0, curves = this.curves; i2 < curves.length; i2++) {
        const curve = curves[i2];
        const resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;
        const pts = curve.getPoints(resolution);
        for (let j2 = 0; j2 < pts.length; j2++) {
          const point = pts[j2];
          if (last && last.equals(point))
            continue;
          points2.push(point);
          last = point;
        }
      }
      if (this.autoClose && points2.length > 1 && !points2[points2.length - 1].equals(points2[0])) {
        points2.push(points2[0]);
      }
      return points2;
    }
    copy(source) {
      super.copy(source);
      this.curves = [];
      for (let i2 = 0, l2 = source.curves.length; i2 < l2; i2++) {
        const curve = source.curves[i2];
        this.curves.push(curve.clone());
      }
      this.autoClose = source.autoClose;
      return this;
    }
    toJSON() {
      const data = super.toJSON();
      data.autoClose = this.autoClose;
      data.curves = [];
      for (let i2 = 0, l2 = this.curves.length; i2 < l2; i2++) {
        const curve = this.curves[i2];
        data.curves.push(curve.toJSON());
      }
      return data;
    }
    fromJSON(json) {
      super.fromJSON(json);
      this.autoClose = json.autoClose;
      this.curves = [];
      for (let i2 = 0, l2 = json.curves.length; i2 < l2; i2++) {
        const curve = json.curves[i2];
        this.curves.push(new Curves[curve.type]().fromJSON(curve));
      }
      return this;
    }
  };
  var Path = class extends CurvePath {
    constructor(points2) {
      super();
      this.type = "Path";
      this.currentPoint = new Vector2();
      if (points2) {
        this.setFromPoints(points2);
      }
    }
    setFromPoints(points2) {
      this.moveTo(points2[0].x, points2[0].y);
      for (let i2 = 1, l2 = points2.length; i2 < l2; i2++) {
        this.lineTo(points2[i2].x, points2[i2].y);
      }
      return this;
    }
    moveTo(x2, y2) {
      this.currentPoint.set(x2, y2);
      return this;
    }
    lineTo(x2, y2) {
      const curve = new LineCurve(this.currentPoint.clone(), new Vector2(x2, y2));
      this.curves.push(curve);
      this.currentPoint.set(x2, y2);
      return this;
    }
    quadraticCurveTo(aCPx, aCPy, aX, aY) {
      const curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));
      this.curves.push(curve);
      this.currentPoint.set(aX, aY);
      return this;
    }
    bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
      const curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));
      this.curves.push(curve);
      this.currentPoint.set(aX, aY);
      return this;
    }
    splineThru(pts) {
      const npts = [this.currentPoint.clone()].concat(pts);
      const curve = new SplineCurve(npts);
      this.curves.push(curve);
      this.currentPoint.copy(pts[pts.length - 1]);
      return this;
    }
    arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
      const x0 = this.currentPoint.x;
      const y0 = this.currentPoint.y;
      this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);
      return this;
    }
    absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
      this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
      return this;
    }
    ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
      const x0 = this.currentPoint.x;
      const y0 = this.currentPoint.y;
      this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
      return this;
    }
    absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
      const curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
      if (this.curves.length > 0) {
        const firstPoint = curve.getPoint(0);
        if (!firstPoint.equals(this.currentPoint)) {
          this.lineTo(firstPoint.x, firstPoint.y);
        }
      }
      this.curves.push(curve);
      const lastPoint = curve.getPoint(1);
      this.currentPoint.copy(lastPoint);
      return this;
    }
    copy(source) {
      super.copy(source);
      this.currentPoint.copy(source.currentPoint);
      return this;
    }
    toJSON() {
      const data = super.toJSON();
      data.currentPoint = this.currentPoint.toArray();
      return data;
    }
    fromJSON(json) {
      super.fromJSON(json);
      this.currentPoint.fromArray(json.currentPoint);
      return this;
    }
  };
  var Shape = class extends Path {
    constructor(points2) {
      super(points2);
      this.uuid = generateUUID();
      this.type = "Shape";
      this.holes = [];
    }
    getPointsHoles(divisions) {
      const holesPts = [];
      for (let i2 = 0, l2 = this.holes.length; i2 < l2; i2++) {
        holesPts[i2] = this.holes[i2].getPoints(divisions);
      }
      return holesPts;
    }
    extractPoints(divisions) {
      return {
        shape: this.getPoints(divisions),
        holes: this.getPointsHoles(divisions)
      };
    }
    copy(source) {
      super.copy(source);
      this.holes = [];
      for (let i2 = 0, l2 = source.holes.length; i2 < l2; i2++) {
        const hole = source.holes[i2];
        this.holes.push(hole.clone());
      }
      return this;
    }
    toJSON() {
      const data = super.toJSON();
      data.uuid = this.uuid;
      data.holes = [];
      for (let i2 = 0, l2 = this.holes.length; i2 < l2; i2++) {
        const hole = this.holes[i2];
        data.holes.push(hole.toJSON());
      }
      return data;
    }
    fromJSON(json) {
      super.fromJSON(json);
      this.uuid = json.uuid;
      this.holes = [];
      for (let i2 = 0, l2 = json.holes.length; i2 < l2; i2++) {
        const hole = json.holes[i2];
        this.holes.push(new Path().fromJSON(hole));
      }
      return this;
    }
  };
  var Earcut = {
    triangulate: function(data, holeIndices, dim = 2) {
      const hasHoles = holeIndices && holeIndices.length;
      const outerLen = hasHoles ? holeIndices[0] * dim : data.length;
      let outerNode = linkedList(data, 0, outerLen, dim, true);
      const triangles = [];
      if (!outerNode || outerNode.next === outerNode.prev)
        return triangles;
      let minX, minY, maxX, maxY, x2, y2, invSize;
      if (hasHoles)
        outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
      if (data.length > 80 * dim) {
        minX = maxX = data[0];
        minY = maxY = data[1];
        for (let i2 = dim; i2 < outerLen; i2 += dim) {
          x2 = data[i2];
          y2 = data[i2 + 1];
          if (x2 < minX)
            minX = x2;
          if (y2 < minY)
            minY = y2;
          if (x2 > maxX)
            maxX = x2;
          if (y2 > maxY)
            maxY = y2;
        }
        invSize = Math.max(maxX - minX, maxY - minY);
        invSize = invSize !== 0 ? 1 / invSize : 0;
      }
      earcutLinked(outerNode, triangles, dim, minX, minY, invSize);
      return triangles;
    }
  };
  function linkedList(data, start2, end2, dim, clockwise) {
    let i2, last;
    if (clockwise === signedArea(data, start2, end2, dim) > 0) {
      for (i2 = start2; i2 < end2; i2 += dim)
        last = insertNode(i2, data[i2], data[i2 + 1], last);
    } else {
      for (i2 = end2 - dim; i2 >= start2; i2 -= dim)
        last = insertNode(i2, data[i2], data[i2 + 1], last);
    }
    if (last && equals(last, last.next)) {
      removeNode(last);
      last = last.next;
    }
    return last;
  }
  function filterPoints(start2, end2) {
    if (!start2)
      return start2;
    if (!end2)
      end2 = start2;
    let p3 = start2, again;
    do {
      again = false;
      if (!p3.steiner && (equals(p3, p3.next) || area(p3.prev, p3, p3.next) === 0)) {
        removeNode(p3);
        p3 = end2 = p3.prev;
        if (p3 === p3.next)
          break;
        again = true;
      } else {
        p3 = p3.next;
      }
    } while (again || p3 !== end2);
    return end2;
  }
  function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
    if (!ear)
      return;
    if (!pass && invSize)
      indexCurve(ear, minX, minY, invSize);
    let stop = ear, prev, next;
    while (ear.prev !== ear.next) {
      prev = ear.prev;
      next = ear.next;
      if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
        triangles.push(prev.i / dim);
        triangles.push(ear.i / dim);
        triangles.push(next.i / dim);
        removeNode(ear);
        ear = next.next;
        stop = next.next;
        continue;
      }
      ear = next;
      if (ear === stop) {
        if (!pass) {
          earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
        } else if (pass === 1) {
          ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
          earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
        } else if (pass === 2) {
          splitEarcut(ear, triangles, dim, minX, minY, invSize);
        }
        break;
      }
    }
  }
  function isEar(ear) {
    const a2 = ear.prev, b2 = ear, c2 = ear.next;
    if (area(a2, b2, c2) >= 0)
      return false;
    let p3 = ear.next.next;
    while (p3 !== ear.prev) {
      if (pointInTriangle(a2.x, a2.y, b2.x, b2.y, c2.x, c2.y, p3.x, p3.y) && area(p3.prev, p3, p3.next) >= 0)
        return false;
      p3 = p3.next;
    }
    return true;
  }
  function isEarHashed(ear, minX, minY, invSize) {
    const a2 = ear.prev, b2 = ear, c2 = ear.next;
    if (area(a2, b2, c2) >= 0)
      return false;
    const minTX = a2.x < b2.x ? a2.x < c2.x ? a2.x : c2.x : b2.x < c2.x ? b2.x : c2.x, minTY = a2.y < b2.y ? a2.y < c2.y ? a2.y : c2.y : b2.y < c2.y ? b2.y : c2.y, maxTX = a2.x > b2.x ? a2.x > c2.x ? a2.x : c2.x : b2.x > c2.x ? b2.x : c2.x, maxTY = a2.y > b2.y ? a2.y > c2.y ? a2.y : c2.y : b2.y > c2.y ? b2.y : c2.y;
    const minZ = zOrder(minTX, minTY, minX, minY, invSize), maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);
    let p3 = ear.prevZ, n2 = ear.nextZ;
    while (p3 && p3.z >= minZ && n2 && n2.z <= maxZ) {
      if (p3 !== ear.prev && p3 !== ear.next && pointInTriangle(a2.x, a2.y, b2.x, b2.y, c2.x, c2.y, p3.x, p3.y) && area(p3.prev, p3, p3.next) >= 0)
        return false;
      p3 = p3.prevZ;
      if (n2 !== ear.prev && n2 !== ear.next && pointInTriangle(a2.x, a2.y, b2.x, b2.y, c2.x, c2.y, n2.x, n2.y) && area(n2.prev, n2, n2.next) >= 0)
        return false;
      n2 = n2.nextZ;
    }
    while (p3 && p3.z >= minZ) {
      if (p3 !== ear.prev && p3 !== ear.next && pointInTriangle(a2.x, a2.y, b2.x, b2.y, c2.x, c2.y, p3.x, p3.y) && area(p3.prev, p3, p3.next) >= 0)
        return false;
      p3 = p3.prevZ;
    }
    while (n2 && n2.z <= maxZ) {
      if (n2 !== ear.prev && n2 !== ear.next && pointInTriangle(a2.x, a2.y, b2.x, b2.y, c2.x, c2.y, n2.x, n2.y) && area(n2.prev, n2, n2.next) >= 0)
        return false;
      n2 = n2.nextZ;
    }
    return true;
  }
  function cureLocalIntersections(start2, triangles, dim) {
    let p3 = start2;
    do {
      const a2 = p3.prev, b2 = p3.next.next;
      if (!equals(a2, b2) && intersects(a2, p3, p3.next, b2) && locallyInside(a2, b2) && locallyInside(b2, a2)) {
        triangles.push(a2.i / dim);
        triangles.push(p3.i / dim);
        triangles.push(b2.i / dim);
        removeNode(p3);
        removeNode(p3.next);
        p3 = start2 = b2;
      }
      p3 = p3.next;
    } while (p3 !== start2);
    return filterPoints(p3);
  }
  function splitEarcut(start2, triangles, dim, minX, minY, invSize) {
    let a2 = start2;
    do {
      let b2 = a2.next.next;
      while (b2 !== a2.prev) {
        if (a2.i !== b2.i && isValidDiagonal(a2, b2)) {
          let c2 = splitPolygon(a2, b2);
          a2 = filterPoints(a2, a2.next);
          c2 = filterPoints(c2, c2.next);
          earcutLinked(a2, triangles, dim, minX, minY, invSize);
          earcutLinked(c2, triangles, dim, minX, minY, invSize);
          return;
        }
        b2 = b2.next;
      }
      a2 = a2.next;
    } while (a2 !== start2);
  }
  function eliminateHoles(data, holeIndices, outerNode, dim) {
    const queue = [];
    let i2, len, start2, end2, list;
    for (i2 = 0, len = holeIndices.length; i2 < len; i2++) {
      start2 = holeIndices[i2] * dim;
      end2 = i2 < len - 1 ? holeIndices[i2 + 1] * dim : data.length;
      list = linkedList(data, start2, end2, dim, false);
      if (list === list.next)
        list.steiner = true;
      queue.push(getLeftmost(list));
    }
    queue.sort(compareX);
    for (i2 = 0; i2 < queue.length; i2++) {
      eliminateHole(queue[i2], outerNode);
      outerNode = filterPoints(outerNode, outerNode.next);
    }
    return outerNode;
  }
  function compareX(a2, b2) {
    return a2.x - b2.x;
  }
  function eliminateHole(hole, outerNode) {
    outerNode = findHoleBridge(hole, outerNode);
    if (outerNode) {
      const b2 = splitPolygon(outerNode, hole);
      filterPoints(outerNode, outerNode.next);
      filterPoints(b2, b2.next);
    }
  }
  function findHoleBridge(hole, outerNode) {
    let p3 = outerNode;
    const hx = hole.x;
    const hy = hole.y;
    let qx = -Infinity, m2;
    do {
      if (hy <= p3.y && hy >= p3.next.y && p3.next.y !== p3.y) {
        const x2 = p3.x + (hy - p3.y) * (p3.next.x - p3.x) / (p3.next.y - p3.y);
        if (x2 <= hx && x2 > qx) {
          qx = x2;
          if (x2 === hx) {
            if (hy === p3.y)
              return p3;
            if (hy === p3.next.y)
              return p3.next;
          }
          m2 = p3.x < p3.next.x ? p3 : p3.next;
        }
      }
      p3 = p3.next;
    } while (p3 !== outerNode);
    if (!m2)
      return null;
    if (hx === qx)
      return m2;
    const stop = m2, mx = m2.x, my = m2.y;
    let tanMin = Infinity, tan;
    p3 = m2;
    do {
      if (hx >= p3.x && p3.x >= mx && hx !== p3.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p3.x, p3.y)) {
        tan = Math.abs(hy - p3.y) / (hx - p3.x);
        if (locallyInside(p3, hole) && (tan < tanMin || tan === tanMin && (p3.x > m2.x || p3.x === m2.x && sectorContainsSector(m2, p3)))) {
          m2 = p3;
          tanMin = tan;
        }
      }
      p3 = p3.next;
    } while (p3 !== stop);
    return m2;
  }
  function sectorContainsSector(m2, p3) {
    return area(m2.prev, m2, p3.prev) < 0 && area(p3.next, m2, m2.next) < 0;
  }
  function indexCurve(start2, minX, minY, invSize) {
    let p3 = start2;
    do {
      if (p3.z === null)
        p3.z = zOrder(p3.x, p3.y, minX, minY, invSize);
      p3.prevZ = p3.prev;
      p3.nextZ = p3.next;
      p3 = p3.next;
    } while (p3 !== start2);
    p3.prevZ.nextZ = null;
    p3.prevZ = null;
    sortLinked(p3);
  }
  function sortLinked(list) {
    let i2, p3, q3, e, tail, numMerges, pSize, qSize, inSize = 1;
    do {
      p3 = list;
      list = null;
      tail = null;
      numMerges = 0;
      while (p3) {
        numMerges++;
        q3 = p3;
        pSize = 0;
        for (i2 = 0; i2 < inSize; i2++) {
          pSize++;
          q3 = q3.nextZ;
          if (!q3)
            break;
        }
        qSize = inSize;
        while (pSize > 0 || qSize > 0 && q3) {
          if (pSize !== 0 && (qSize === 0 || !q3 || p3.z <= q3.z)) {
            e = p3;
            p3 = p3.nextZ;
            pSize--;
          } else {
            e = q3;
            q3 = q3.nextZ;
            qSize--;
          }
          if (tail)
            tail.nextZ = e;
          else
            list = e;
          e.prevZ = tail;
          tail = e;
        }
        p3 = q3;
      }
      tail.nextZ = null;
      inSize *= 2;
    } while (numMerges > 1);
    return list;
  }
  function zOrder(x2, y2, minX, minY, invSize) {
    x2 = 32767 * (x2 - minX) * invSize;
    y2 = 32767 * (y2 - minY) * invSize;
    x2 = (x2 | x2 << 8) & 16711935;
    x2 = (x2 | x2 << 4) & 252645135;
    x2 = (x2 | x2 << 2) & 858993459;
    x2 = (x2 | x2 << 1) & 1431655765;
    y2 = (y2 | y2 << 8) & 16711935;
    y2 = (y2 | y2 << 4) & 252645135;
    y2 = (y2 | y2 << 2) & 858993459;
    y2 = (y2 | y2 << 1) & 1431655765;
    return x2 | y2 << 1;
  }
  function getLeftmost(start2) {
    let p3 = start2, leftmost = start2;
    do {
      if (p3.x < leftmost.x || p3.x === leftmost.x && p3.y < leftmost.y)
        leftmost = p3;
      p3 = p3.next;
    } while (p3 !== start2);
    return leftmost;
  }
  function pointInTriangle(ax, ay, bx, by, cx, cy, px2, py2) {
    return (cx - px2) * (ay - py2) - (ax - px2) * (cy - py2) >= 0 && (ax - px2) * (by - py2) - (bx - px2) * (ay - py2) >= 0 && (bx - px2) * (cy - py2) - (cx - px2) * (by - py2) >= 0;
  }
  function isValidDiagonal(a2, b2) {
    return a2.next.i !== b2.i && a2.prev.i !== b2.i && !intersectsPolygon(a2, b2) && (locallyInside(a2, b2) && locallyInside(b2, a2) && middleInside(a2, b2) && (area(a2.prev, a2, b2.prev) || area(a2, b2.prev, b2)) || equals(a2, b2) && area(a2.prev, a2, a2.next) > 0 && area(b2.prev, b2, b2.next) > 0);
  }
  function area(p3, q3, r2) {
    return (q3.y - p3.y) * (r2.x - q3.x) - (q3.x - p3.x) * (r2.y - q3.y);
  }
  function equals(p1, p22) {
    return p1.x === p22.x && p1.y === p22.y;
  }
  function intersects(p1, q1, p22, q22) {
    const o1 = sign(area(p1, q1, p22));
    const o2 = sign(area(p1, q1, q22));
    const o3 = sign(area(p22, q22, p1));
    const o4 = sign(area(p22, q22, q1));
    if (o1 !== o2 && o3 !== o4)
      return true;
    if (o1 === 0 && onSegment(p1, p22, q1))
      return true;
    if (o2 === 0 && onSegment(p1, q22, q1))
      return true;
    if (o3 === 0 && onSegment(p22, p1, q22))
      return true;
    if (o4 === 0 && onSegment(p22, q1, q22))
      return true;
    return false;
  }
  function onSegment(p3, q3, r2) {
    return q3.x <= Math.max(p3.x, r2.x) && q3.x >= Math.min(p3.x, r2.x) && q3.y <= Math.max(p3.y, r2.y) && q3.y >= Math.min(p3.y, r2.y);
  }
  function sign(num) {
    return num > 0 ? 1 : num < 0 ? -1 : 0;
  }
  function intersectsPolygon(a2, b2) {
    let p3 = a2;
    do {
      if (p3.i !== a2.i && p3.next.i !== a2.i && p3.i !== b2.i && p3.next.i !== b2.i && intersects(p3, p3.next, a2, b2))
        return true;
      p3 = p3.next;
    } while (p3 !== a2);
    return false;
  }
  function locallyInside(a2, b2) {
    return area(a2.prev, a2, a2.next) < 0 ? area(a2, b2, a2.next) >= 0 && area(a2, a2.prev, b2) >= 0 : area(a2, b2, a2.prev) < 0 || area(a2, a2.next, b2) < 0;
  }
  function middleInside(a2, b2) {
    let p3 = a2, inside = false;
    const px2 = (a2.x + b2.x) / 2, py2 = (a2.y + b2.y) / 2;
    do {
      if (p3.y > py2 !== p3.next.y > py2 && p3.next.y !== p3.y && px2 < (p3.next.x - p3.x) * (py2 - p3.y) / (p3.next.y - p3.y) + p3.x)
        inside = !inside;
      p3 = p3.next;
    } while (p3 !== a2);
    return inside;
  }
  function splitPolygon(a2, b2) {
    const a22 = new Node(a2.i, a2.x, a2.y), b22 = new Node(b2.i, b2.x, b2.y), an = a2.next, bp = b2.prev;
    a2.next = b2;
    b2.prev = a2;
    a22.next = an;
    an.prev = a22;
    b22.next = a22;
    a22.prev = b22;
    bp.next = b22;
    b22.prev = bp;
    return b22;
  }
  function insertNode(i2, x2, y2, last) {
    const p3 = new Node(i2, x2, y2);
    if (!last) {
      p3.prev = p3;
      p3.next = p3;
    } else {
      p3.next = last.next;
      p3.prev = last;
      last.next.prev = p3;
      last.next = p3;
    }
    return p3;
  }
  function removeNode(p3) {
    p3.next.prev = p3.prev;
    p3.prev.next = p3.next;
    if (p3.prevZ)
      p3.prevZ.nextZ = p3.nextZ;
    if (p3.nextZ)
      p3.nextZ.prevZ = p3.prevZ;
  }
  function Node(i2, x2, y2) {
    this.i = i2;
    this.x = x2;
    this.y = y2;
    this.prev = null;
    this.next = null;
    this.z = null;
    this.prevZ = null;
    this.nextZ = null;
    this.steiner = false;
  }
  function signedArea(data, start2, end2, dim) {
    let sum = 0;
    for (let i2 = start2, j2 = end2 - dim; i2 < end2; i2 += dim) {
      sum += (data[j2] - data[i2]) * (data[i2 + 1] + data[j2 + 1]);
      j2 = i2;
    }
    return sum;
  }
  var ShapeUtils = class {
    static area(contour) {
      const n2 = contour.length;
      let a2 = 0;
      for (let p3 = n2 - 1, q3 = 0; q3 < n2; p3 = q3++) {
        a2 += contour[p3].x * contour[q3].y - contour[q3].x * contour[p3].y;
      }
      return a2 * 0.5;
    }
    static isClockWise(pts) {
      return ShapeUtils.area(pts) < 0;
    }
    static triangulateShape(contour, holes) {
      const vertices = [];
      const holeIndices = [];
      const faces = [];
      removeDupEndPts(contour);
      addContour(vertices, contour);
      let holeIndex = contour.length;
      holes.forEach(removeDupEndPts);
      for (let i2 = 0; i2 < holes.length; i2++) {
        holeIndices.push(holeIndex);
        holeIndex += holes[i2].length;
        addContour(vertices, holes[i2]);
      }
      const triangles = Earcut.triangulate(vertices, holeIndices);
      for (let i2 = 0; i2 < triangles.length; i2 += 3) {
        faces.push(triangles.slice(i2, i2 + 3));
      }
      return faces;
    }
  };
  function removeDupEndPts(points2) {
    const l2 = points2.length;
    if (l2 > 2 && points2[l2 - 1].equals(points2[0])) {
      points2.pop();
    }
  }
  function addContour(vertices, contour) {
    for (let i2 = 0; i2 < contour.length; i2++) {
      vertices.push(contour[i2].x);
      vertices.push(contour[i2].y);
    }
  }
  var ExtrudeGeometry = class extends BufferGeometry {
    constructor(shapes = new Shape([new Vector2(0.5, 0.5), new Vector2(-0.5, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]), options = {}) {
      super();
      this.type = "ExtrudeGeometry";
      this.parameters = {
        shapes,
        options
      };
      shapes = Array.isArray(shapes) ? shapes : [shapes];
      const scope = this;
      const verticesArray = [];
      const uvArray = [];
      for (let i2 = 0, l2 = shapes.length; i2 < l2; i2++) {
        const shape = shapes[i2];
        addShape(shape);
      }
      this.setAttribute("position", new Float32BufferAttribute(verticesArray, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvArray, 2));
      this.computeVertexNormals();
      function addShape(shape) {
        const placeholder = [];
        const curveSegments = options.curveSegments !== void 0 ? options.curveSegments : 12;
        const steps = options.steps !== void 0 ? options.steps : 1;
        let depth = options.depth !== void 0 ? options.depth : 1;
        let bevelEnabled = options.bevelEnabled !== void 0 ? options.bevelEnabled : true;
        let bevelThickness = options.bevelThickness !== void 0 ? options.bevelThickness : 0.2;
        let bevelSize = options.bevelSize !== void 0 ? options.bevelSize : bevelThickness - 0.1;
        let bevelOffset = options.bevelOffset !== void 0 ? options.bevelOffset : 0;
        let bevelSegments = options.bevelSegments !== void 0 ? options.bevelSegments : 3;
        const extrudePath = options.extrudePath;
        const uvgen = options.UVGenerator !== void 0 ? options.UVGenerator : WorldUVGenerator;
        if (options.amount !== void 0) {
          console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth.");
          depth = options.amount;
        }
        let extrudePts, extrudeByPath = false;
        let splineTube, binormal, normal, position2;
        if (extrudePath) {
          extrudePts = extrudePath.getSpacedPoints(steps);
          extrudeByPath = true;
          bevelEnabled = false;
          splineTube = extrudePath.computeFrenetFrames(steps, false);
          binormal = new Vector3();
          normal = new Vector3();
          position2 = new Vector3();
        }
        if (!bevelEnabled) {
          bevelSegments = 0;
          bevelThickness = 0;
          bevelSize = 0;
          bevelOffset = 0;
        }
        const shapePoints = shape.extractPoints(curveSegments);
        let vertices = shapePoints.shape;
        const holes = shapePoints.holes;
        const reverse = !ShapeUtils.isClockWise(vertices);
        if (reverse) {
          vertices = vertices.reverse();
          for (let h2 = 0, hl = holes.length; h2 < hl; h2++) {
            const ahole = holes[h2];
            if (ShapeUtils.isClockWise(ahole)) {
              holes[h2] = ahole.reverse();
            }
          }
        }
        const faces = ShapeUtils.triangulateShape(vertices, holes);
        const contour = vertices;
        for (let h2 = 0, hl = holes.length; h2 < hl; h2++) {
          const ahole = holes[h2];
          vertices = vertices.concat(ahole);
        }
        function scalePt2(pt, vec, size2) {
          if (!vec)
            console.error("THREE.ExtrudeGeometry: vec does not exist");
          return vec.clone().multiplyScalar(size2).add(pt);
        }
        const vlen = vertices.length, flen = faces.length;
        function getBevelVec(inPt, inPrev, inNext) {
          let v_trans_x, v_trans_y, shrink_by;
          const v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
          const v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;
          const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;
          const collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;
          if (Math.abs(collinear0) > Number.EPSILON) {
            const v_prev_len = Math.sqrt(v_prev_lensq);
            const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);
            const ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;
            const ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;
            const ptNextShift_x = inNext.x - v_next_y / v_next_len;
            const ptNextShift_y = inNext.y + v_next_x / v_next_len;
            const sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x);
            v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;
            v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y;
            const v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;
            if (v_trans_lensq <= 2) {
              return new Vector2(v_trans_x, v_trans_y);
            } else {
              shrink_by = Math.sqrt(v_trans_lensq / 2);
            }
          } else {
            let direction_eq = false;
            if (v_prev_x > Number.EPSILON) {
              if (v_next_x > Number.EPSILON) {
                direction_eq = true;
              }
            } else {
              if (v_prev_x < -Number.EPSILON) {
                if (v_next_x < -Number.EPSILON) {
                  direction_eq = true;
                }
              } else {
                if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {
                  direction_eq = true;
                }
              }
            }
            if (direction_eq) {
              v_trans_x = -v_prev_y;
              v_trans_y = v_prev_x;
              shrink_by = Math.sqrt(v_prev_lensq);
            } else {
              v_trans_x = v_prev_x;
              v_trans_y = v_prev_y;
              shrink_by = Math.sqrt(v_prev_lensq / 2);
            }
          }
          return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);
        }
        const contourMovements = [];
        for (let i2 = 0, il = contour.length, j2 = il - 1, k2 = i2 + 1; i2 < il; i2++, j2++, k2++) {
          if (j2 === il)
            j2 = 0;
          if (k2 === il)
            k2 = 0;
          contourMovements[i2] = getBevelVec(contour[i2], contour[j2], contour[k2]);
        }
        const holesMovements = [];
        let oneHoleMovements, verticesMovements = contourMovements.concat();
        for (let h2 = 0, hl = holes.length; h2 < hl; h2++) {
          const ahole = holes[h2];
          oneHoleMovements = [];
          for (let i2 = 0, il = ahole.length, j2 = il - 1, k2 = i2 + 1; i2 < il; i2++, j2++, k2++) {
            if (j2 === il)
              j2 = 0;
            if (k2 === il)
              k2 = 0;
            oneHoleMovements[i2] = getBevelVec(ahole[i2], ahole[j2], ahole[k2]);
          }
          holesMovements.push(oneHoleMovements);
          verticesMovements = verticesMovements.concat(oneHoleMovements);
        }
        for (let b2 = 0; b2 < bevelSegments; b2++) {
          const t = b2 / bevelSegments;
          const z2 = bevelThickness * Math.cos(t * Math.PI / 2);
          const bs2 = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
          for (let i2 = 0, il = contour.length; i2 < il; i2++) {
            const vert = scalePt2(contour[i2], contourMovements[i2], bs2);
            v2(vert.x, vert.y, -z2);
          }
          for (let h2 = 0, hl = holes.length; h2 < hl; h2++) {
            const ahole = holes[h2];
            oneHoleMovements = holesMovements[h2];
            for (let i2 = 0, il = ahole.length; i2 < il; i2++) {
              const vert = scalePt2(ahole[i2], oneHoleMovements[i2], bs2);
              v2(vert.x, vert.y, -z2);
            }
          }
        }
        const bs = bevelSize + bevelOffset;
        for (let i2 = 0; i2 < vlen; i2++) {
          const vert = bevelEnabled ? scalePt2(vertices[i2], verticesMovements[i2], bs) : vertices[i2];
          if (!extrudeByPath) {
            v2(vert.x, vert.y, 0);
          } else {
            normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);
            binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);
            position2.copy(extrudePts[0]).add(normal).add(binormal);
            v2(position2.x, position2.y, position2.z);
          }
        }
        for (let s3 = 1; s3 <= steps; s3++) {
          for (let i2 = 0; i2 < vlen; i2++) {
            const vert = bevelEnabled ? scalePt2(vertices[i2], verticesMovements[i2], bs) : vertices[i2];
            if (!extrudeByPath) {
              v2(vert.x, vert.y, depth / steps * s3);
            } else {
              normal.copy(splineTube.normals[s3]).multiplyScalar(vert.x);
              binormal.copy(splineTube.binormals[s3]).multiplyScalar(vert.y);
              position2.copy(extrudePts[s3]).add(normal).add(binormal);
              v2(position2.x, position2.y, position2.z);
            }
          }
        }
        for (let b2 = bevelSegments - 1; b2 >= 0; b2--) {
          const t = b2 / bevelSegments;
          const z2 = bevelThickness * Math.cos(t * Math.PI / 2);
          const bs2 = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
          for (let i2 = 0, il = contour.length; i2 < il; i2++) {
            const vert = scalePt2(contour[i2], contourMovements[i2], bs2);
            v2(vert.x, vert.y, depth + z2);
          }
          for (let h2 = 0, hl = holes.length; h2 < hl; h2++) {
            const ahole = holes[h2];
            oneHoleMovements = holesMovements[h2];
            for (let i2 = 0, il = ahole.length; i2 < il; i2++) {
              const vert = scalePt2(ahole[i2], oneHoleMovements[i2], bs2);
              if (!extrudeByPath) {
                v2(vert.x, vert.y, depth + z2);
              } else {
                v2(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z2);
              }
            }
          }
        }
        buildLidFaces();
        buildSideFaces();
        function buildLidFaces() {
          const start2 = verticesArray.length / 3;
          if (bevelEnabled) {
            let layer = 0;
            let offset = vlen * layer;
            for (let i2 = 0; i2 < flen; i2++) {
              const face = faces[i2];
              f3(face[2] + offset, face[1] + offset, face[0] + offset);
            }
            layer = steps + bevelSegments * 2;
            offset = vlen * layer;
            for (let i2 = 0; i2 < flen; i2++) {
              const face = faces[i2];
              f3(face[0] + offset, face[1] + offset, face[2] + offset);
            }
          } else {
            for (let i2 = 0; i2 < flen; i2++) {
              const face = faces[i2];
              f3(face[2], face[1], face[0]);
            }
            for (let i2 = 0; i2 < flen; i2++) {
              const face = faces[i2];
              f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);
            }
          }
          scope.addGroup(start2, verticesArray.length / 3 - start2, 0);
        }
        function buildSideFaces() {
          const start2 = verticesArray.length / 3;
          let layeroffset = 0;
          sidewalls(contour, layeroffset);
          layeroffset += contour.length;
          for (let h2 = 0, hl = holes.length; h2 < hl; h2++) {
            const ahole = holes[h2];
            sidewalls(ahole, layeroffset);
            layeroffset += ahole.length;
          }
          scope.addGroup(start2, verticesArray.length / 3 - start2, 1);
        }
        function sidewalls(contour2, layeroffset) {
          let i2 = contour2.length;
          while (--i2 >= 0) {
            const j2 = i2;
            let k2 = i2 - 1;
            if (k2 < 0)
              k2 = contour2.length - 1;
            for (let s3 = 0, sl = steps + bevelSegments * 2; s3 < sl; s3++) {
              const slen1 = vlen * s3;
              const slen2 = vlen * (s3 + 1);
              const a2 = layeroffset + j2 + slen1, b2 = layeroffset + k2 + slen1, c2 = layeroffset + k2 + slen2, d2 = layeroffset + j2 + slen2;
              f4(a2, b2, c2, d2);
            }
          }
        }
        function v2(x2, y2, z2) {
          placeholder.push(x2);
          placeholder.push(y2);
          placeholder.push(z2);
        }
        function f3(a2, b2, c2) {
          addVertex(a2);
          addVertex(b2);
          addVertex(c2);
          const nextIndex = verticesArray.length / 3;
          const uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);
          addUV(uvs[0]);
          addUV(uvs[1]);
          addUV(uvs[2]);
        }
        function f4(a2, b2, c2, d2) {
          addVertex(a2);
          addVertex(b2);
          addVertex(d2);
          addVertex(b2);
          addVertex(c2);
          addVertex(d2);
          const nextIndex = verticesArray.length / 3;
          const uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);
          addUV(uvs[0]);
          addUV(uvs[1]);
          addUV(uvs[3]);
          addUV(uvs[1]);
          addUV(uvs[2]);
          addUV(uvs[3]);
        }
        function addVertex(index) {
          verticesArray.push(placeholder[index * 3 + 0]);
          verticesArray.push(placeholder[index * 3 + 1]);
          verticesArray.push(placeholder[index * 3 + 2]);
        }
        function addUV(vector2) {
          uvArray.push(vector2.x);
          uvArray.push(vector2.y);
        }
      }
    }
    toJSON() {
      const data = super.toJSON();
      const shapes = this.parameters.shapes;
      const options = this.parameters.options;
      return toJSON$1(shapes, options, data);
    }
    static fromJSON(data, shapes) {
      const geometryShapes = [];
      for (let j2 = 0, jl = data.shapes.length; j2 < jl; j2++) {
        const shape = shapes[data.shapes[j2]];
        geometryShapes.push(shape);
      }
      const extrudePath = data.options.extrudePath;
      if (extrudePath !== void 0) {
        data.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);
      }
      return new ExtrudeGeometry(geometryShapes, data.options);
    }
  };
  var WorldUVGenerator = {
    generateTopUV: function(geometry, vertices, indexA, indexB, indexC) {
      const a_x = vertices[indexA * 3];
      const a_y = vertices[indexA * 3 + 1];
      const b_x = vertices[indexB * 3];
      const b_y = vertices[indexB * 3 + 1];
      const c_x = vertices[indexC * 3];
      const c_y = vertices[indexC * 3 + 1];
      return [
        new Vector2(a_x, a_y),
        new Vector2(b_x, b_y),
        new Vector2(c_x, c_y)
      ];
    },
    generateSideWallUV: function(geometry, vertices, indexA, indexB, indexC, indexD) {
      const a_x = vertices[indexA * 3];
      const a_y = vertices[indexA * 3 + 1];
      const a_z = vertices[indexA * 3 + 2];
      const b_x = vertices[indexB * 3];
      const b_y = vertices[indexB * 3 + 1];
      const b_z = vertices[indexB * 3 + 2];
      const c_x = vertices[indexC * 3];
      const c_y = vertices[indexC * 3 + 1];
      const c_z = vertices[indexC * 3 + 2];
      const d_x = vertices[indexD * 3];
      const d_y = vertices[indexD * 3 + 1];
      const d_z = vertices[indexD * 3 + 2];
      if (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) {
        return [
          new Vector2(a_x, 1 - a_z),
          new Vector2(b_x, 1 - b_z),
          new Vector2(c_x, 1 - c_z),
          new Vector2(d_x, 1 - d_z)
        ];
      } else {
        return [
          new Vector2(a_y, 1 - a_z),
          new Vector2(b_y, 1 - b_z),
          new Vector2(c_y, 1 - c_z),
          new Vector2(d_y, 1 - d_z)
        ];
      }
    }
  };
  function toJSON$1(shapes, options, data) {
    data.shapes = [];
    if (Array.isArray(shapes)) {
      for (let i2 = 0, l2 = shapes.length; i2 < l2; i2++) {
        const shape = shapes[i2];
        data.shapes.push(shape.uuid);
      }
    } else {
      data.shapes.push(shapes.uuid);
    }
    if (options.extrudePath !== void 0)
      data.options.extrudePath = options.extrudePath.toJSON();
    return data;
  }
  var ShapeGeometry = class extends BufferGeometry {
    constructor(shapes = new Shape([new Vector2(0, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]), curveSegments = 12) {
      super();
      this.type = "ShapeGeometry";
      this.parameters = {
        shapes,
        curveSegments
      };
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      let groupStart = 0;
      let groupCount = 0;
      if (Array.isArray(shapes) === false) {
        addShape(shapes);
      } else {
        for (let i2 = 0; i2 < shapes.length; i2++) {
          addShape(shapes[i2]);
          this.addGroup(groupStart, groupCount, i2);
          groupStart += groupCount;
          groupCount = 0;
        }
      }
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
      function addShape(shape) {
        const indexOffset = vertices.length / 3;
        const points2 = shape.extractPoints(curveSegments);
        let shapeVertices = points2.shape;
        const shapeHoles = points2.holes;
        if (ShapeUtils.isClockWise(shapeVertices) === false) {
          shapeVertices = shapeVertices.reverse();
        }
        for (let i2 = 0, l2 = shapeHoles.length; i2 < l2; i2++) {
          const shapeHole = shapeHoles[i2];
          if (ShapeUtils.isClockWise(shapeHole) === true) {
            shapeHoles[i2] = shapeHole.reverse();
          }
        }
        const faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles);
        for (let i2 = 0, l2 = shapeHoles.length; i2 < l2; i2++) {
          const shapeHole = shapeHoles[i2];
          shapeVertices = shapeVertices.concat(shapeHole);
        }
        for (let i2 = 0, l2 = shapeVertices.length; i2 < l2; i2++) {
          const vertex2 = shapeVertices[i2];
          vertices.push(vertex2.x, vertex2.y, 0);
          normals.push(0, 0, 1);
          uvs.push(vertex2.x, vertex2.y);
        }
        for (let i2 = 0, l2 = faces.length; i2 < l2; i2++) {
          const face = faces[i2];
          const a2 = face[0] + indexOffset;
          const b2 = face[1] + indexOffset;
          const c2 = face[2] + indexOffset;
          indices.push(a2, b2, c2);
          groupCount += 3;
        }
      }
    }
    toJSON() {
      const data = super.toJSON();
      const shapes = this.parameters.shapes;
      return toJSON(shapes, data);
    }
    static fromJSON(data, shapes) {
      const geometryShapes = [];
      for (let j2 = 0, jl = data.shapes.length; j2 < jl; j2++) {
        const shape = shapes[data.shapes[j2]];
        geometryShapes.push(shape);
      }
      return new ShapeGeometry(geometryShapes, data.curveSegments);
    }
  };
  function toJSON(shapes, data) {
    data.shapes = [];
    if (Array.isArray(shapes)) {
      for (let i2 = 0, l2 = shapes.length; i2 < l2; i2++) {
        const shape = shapes[i2];
        data.shapes.push(shape.uuid);
      }
    } else {
      data.shapes.push(shapes.uuid);
    }
    return data;
  }
  var SphereGeometry = class extends BufferGeometry {
    constructor(radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI) {
      super();
      this.type = "SphereGeometry";
      this.parameters = {
        radius,
        widthSegments,
        heightSegments,
        phiStart,
        phiLength,
        thetaStart,
        thetaLength
      };
      widthSegments = Math.max(3, Math.floor(widthSegments));
      heightSegments = Math.max(2, Math.floor(heightSegments));
      const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);
      let index = 0;
      const grid = [];
      const vertex2 = new Vector3();
      const normal = new Vector3();
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      for (let iy = 0; iy <= heightSegments; iy++) {
        const verticesRow = [];
        const v2 = iy / heightSegments;
        let uOffset = 0;
        if (iy == 0 && thetaStart == 0) {
          uOffset = 0.5 / widthSegments;
        } else if (iy == heightSegments && thetaEnd == Math.PI) {
          uOffset = -0.5 / widthSegments;
        }
        for (let ix = 0; ix <= widthSegments; ix++) {
          const u2 = ix / widthSegments;
          vertex2.x = -radius * Math.cos(phiStart + u2 * phiLength) * Math.sin(thetaStart + v2 * thetaLength);
          vertex2.y = radius * Math.cos(thetaStart + v2 * thetaLength);
          vertex2.z = radius * Math.sin(phiStart + u2 * phiLength) * Math.sin(thetaStart + v2 * thetaLength);
          vertices.push(vertex2.x, vertex2.y, vertex2.z);
          normal.copy(vertex2).normalize();
          normals.push(normal.x, normal.y, normal.z);
          uvs.push(u2 + uOffset, 1 - v2);
          verticesRow.push(index++);
        }
        grid.push(verticesRow);
      }
      for (let iy = 0; iy < heightSegments; iy++) {
        for (let ix = 0; ix < widthSegments; ix++) {
          const a2 = grid[iy][ix + 1];
          const b2 = grid[iy][ix];
          const c2 = grid[iy + 1][ix];
          const d2 = grid[iy + 1][ix + 1];
          if (iy !== 0 || thetaStart > 0)
            indices.push(a2, b2, d2);
          if (iy !== heightSegments - 1 || thetaEnd < Math.PI)
            indices.push(b2, c2, d2);
        }
      }
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    }
    static fromJSON(data) {
      return new SphereGeometry(data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);
    }
  };
  var ShadowMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.type = "ShadowMaterial";
      this.color = new Color(0);
      this.transparent = true;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      return this;
    }
  };
  ShadowMaterial.prototype.isShadowMaterial = true;
  var MeshStandardMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.defines = { "STANDARD": "" };
      this.type = "MeshStandardMaterial";
      this.color = new Color(16777215);
      this.roughness = 1;
      this.metalness = 0;
      this.map = null;
      this.lightMap = null;
      this.lightMapIntensity = 1;
      this.aoMap = null;
      this.aoMapIntensity = 1;
      this.emissive = new Color(0);
      this.emissiveIntensity = 1;
      this.emissiveMap = null;
      this.bumpMap = null;
      this.bumpScale = 1;
      this.normalMap = null;
      this.normalMapType = TangentSpaceNormalMap;
      this.normalScale = new Vector2(1, 1);
      this.displacementMap = null;
      this.displacementScale = 1;
      this.displacementBias = 0;
      this.roughnessMap = null;
      this.metalnessMap = null;
      this.alphaMap = null;
      this.envMap = null;
      this.envMapIntensity = 1;
      this.refractionRatio = 0.98;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.wireframeLinecap = "round";
      this.wireframeLinejoin = "round";
      this.flatShading = false;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.defines = { "STANDARD": "" };
      this.color.copy(source.color);
      this.roughness = source.roughness;
      this.metalness = source.metalness;
      this.map = source.map;
      this.lightMap = source.lightMap;
      this.lightMapIntensity = source.lightMapIntensity;
      this.aoMap = source.aoMap;
      this.aoMapIntensity = source.aoMapIntensity;
      this.emissive.copy(source.emissive);
      this.emissiveMap = source.emissiveMap;
      this.emissiveIntensity = source.emissiveIntensity;
      this.bumpMap = source.bumpMap;
      this.bumpScale = source.bumpScale;
      this.normalMap = source.normalMap;
      this.normalMapType = source.normalMapType;
      this.normalScale.copy(source.normalScale);
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      this.roughnessMap = source.roughnessMap;
      this.metalnessMap = source.metalnessMap;
      this.alphaMap = source.alphaMap;
      this.envMap = source.envMap;
      this.envMapIntensity = source.envMapIntensity;
      this.refractionRatio = source.refractionRatio;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.wireframeLinecap = source.wireframeLinecap;
      this.wireframeLinejoin = source.wireframeLinejoin;
      this.flatShading = source.flatShading;
      return this;
    }
  };
  MeshStandardMaterial.prototype.isMeshStandardMaterial = true;
  var MeshPhysicalMaterial = class extends MeshStandardMaterial {
    constructor(parameters) {
      super();
      this.defines = {
        "STANDARD": "",
        "PHYSICAL": ""
      };
      this.type = "MeshPhysicalMaterial";
      this.clearcoatMap = null;
      this.clearcoatRoughness = 0;
      this.clearcoatRoughnessMap = null;
      this.clearcoatNormalScale = new Vector2(1, 1);
      this.clearcoatNormalMap = null;
      this.ior = 1.5;
      Object.defineProperty(this, "reflectivity", {
        get: function() {
          return clamp(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
        },
        set: function(reflectivity) {
          this.ior = (1 + 0.4 * reflectivity) / (1 - 0.4 * reflectivity);
        }
      });
      this.sheenColor = new Color(0);
      this.sheenColorMap = null;
      this.sheenRoughness = 1;
      this.sheenRoughnessMap = null;
      this.transmissionMap = null;
      this.thickness = 0;
      this.thicknessMap = null;
      this.attenuationDistance = 0;
      this.attenuationColor = new Color(1, 1, 1);
      this.specularIntensity = 1;
      this.specularIntensityMap = null;
      this.specularColor = new Color(1, 1, 1);
      this.specularColorMap = null;
      this._sheen = 0;
      this._clearcoat = 0;
      this._transmission = 0;
      this.setValues(parameters);
    }
    get sheen() {
      return this._sheen;
    }
    set sheen(value) {
      if (this._sheen > 0 !== value > 0) {
        this.version++;
      }
      this._sheen = value;
    }
    get clearcoat() {
      return this._clearcoat;
    }
    set clearcoat(value) {
      if (this._clearcoat > 0 !== value > 0) {
        this.version++;
      }
      this._clearcoat = value;
    }
    get transmission() {
      return this._transmission;
    }
    set transmission(value) {
      if (this._transmission > 0 !== value > 0) {
        this.version++;
      }
      this._transmission = value;
    }
    copy(source) {
      super.copy(source);
      this.defines = {
        "STANDARD": "",
        "PHYSICAL": ""
      };
      this.clearcoat = source.clearcoat;
      this.clearcoatMap = source.clearcoatMap;
      this.clearcoatRoughness = source.clearcoatRoughness;
      this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
      this.clearcoatNormalMap = source.clearcoatNormalMap;
      this.clearcoatNormalScale.copy(source.clearcoatNormalScale);
      this.ior = source.ior;
      this.sheen = source.sheen;
      this.sheenColor.copy(source.sheenColor);
      this.sheenColorMap = source.sheenColorMap;
      this.sheenRoughness = source.sheenRoughness;
      this.sheenRoughnessMap = source.sheenRoughnessMap;
      this.transmission = source.transmission;
      this.transmissionMap = source.transmissionMap;
      this.thickness = source.thickness;
      this.thicknessMap = source.thicknessMap;
      this.attenuationDistance = source.attenuationDistance;
      this.attenuationColor.copy(source.attenuationColor);
      this.specularIntensity = source.specularIntensity;
      this.specularIntensityMap = source.specularIntensityMap;
      this.specularColor.copy(source.specularColor);
      this.specularColorMap = source.specularColorMap;
      return this;
    }
  };
  MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;
  var MeshPhongMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.type = "MeshPhongMaterial";
      this.color = new Color(16777215);
      this.specular = new Color(1118481);
      this.shininess = 30;
      this.map = null;
      this.lightMap = null;
      this.lightMapIntensity = 1;
      this.aoMap = null;
      this.aoMapIntensity = 1;
      this.emissive = new Color(0);
      this.emissiveIntensity = 1;
      this.emissiveMap = null;
      this.bumpMap = null;
      this.bumpScale = 1;
      this.normalMap = null;
      this.normalMapType = TangentSpaceNormalMap;
      this.normalScale = new Vector2(1, 1);
      this.displacementMap = null;
      this.displacementScale = 1;
      this.displacementBias = 0;
      this.specularMap = null;
      this.alphaMap = null;
      this.envMap = null;
      this.combine = MultiplyOperation;
      this.reflectivity = 1;
      this.refractionRatio = 0.98;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.wireframeLinecap = "round";
      this.wireframeLinejoin = "round";
      this.flatShading = false;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.specular.copy(source.specular);
      this.shininess = source.shininess;
      this.map = source.map;
      this.lightMap = source.lightMap;
      this.lightMapIntensity = source.lightMapIntensity;
      this.aoMap = source.aoMap;
      this.aoMapIntensity = source.aoMapIntensity;
      this.emissive.copy(source.emissive);
      this.emissiveMap = source.emissiveMap;
      this.emissiveIntensity = source.emissiveIntensity;
      this.bumpMap = source.bumpMap;
      this.bumpScale = source.bumpScale;
      this.normalMap = source.normalMap;
      this.normalMapType = source.normalMapType;
      this.normalScale.copy(source.normalScale);
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      this.specularMap = source.specularMap;
      this.alphaMap = source.alphaMap;
      this.envMap = source.envMap;
      this.combine = source.combine;
      this.reflectivity = source.reflectivity;
      this.refractionRatio = source.refractionRatio;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.wireframeLinecap = source.wireframeLinecap;
      this.wireframeLinejoin = source.wireframeLinejoin;
      this.flatShading = source.flatShading;
      return this;
    }
  };
  MeshPhongMaterial.prototype.isMeshPhongMaterial = true;
  var MeshToonMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.defines = { "TOON": "" };
      this.type = "MeshToonMaterial";
      this.color = new Color(16777215);
      this.map = null;
      this.gradientMap = null;
      this.lightMap = null;
      this.lightMapIntensity = 1;
      this.aoMap = null;
      this.aoMapIntensity = 1;
      this.emissive = new Color(0);
      this.emissiveIntensity = 1;
      this.emissiveMap = null;
      this.bumpMap = null;
      this.bumpScale = 1;
      this.normalMap = null;
      this.normalMapType = TangentSpaceNormalMap;
      this.normalScale = new Vector2(1, 1);
      this.displacementMap = null;
      this.displacementScale = 1;
      this.displacementBias = 0;
      this.alphaMap = null;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.wireframeLinecap = "round";
      this.wireframeLinejoin = "round";
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.map = source.map;
      this.gradientMap = source.gradientMap;
      this.lightMap = source.lightMap;
      this.lightMapIntensity = source.lightMapIntensity;
      this.aoMap = source.aoMap;
      this.aoMapIntensity = source.aoMapIntensity;
      this.emissive.copy(source.emissive);
      this.emissiveMap = source.emissiveMap;
      this.emissiveIntensity = source.emissiveIntensity;
      this.bumpMap = source.bumpMap;
      this.bumpScale = source.bumpScale;
      this.normalMap = source.normalMap;
      this.normalMapType = source.normalMapType;
      this.normalScale.copy(source.normalScale);
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      this.alphaMap = source.alphaMap;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.wireframeLinecap = source.wireframeLinecap;
      this.wireframeLinejoin = source.wireframeLinejoin;
      return this;
    }
  };
  MeshToonMaterial.prototype.isMeshToonMaterial = true;
  var MeshNormalMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.type = "MeshNormalMaterial";
      this.bumpMap = null;
      this.bumpScale = 1;
      this.normalMap = null;
      this.normalMapType = TangentSpaceNormalMap;
      this.normalScale = new Vector2(1, 1);
      this.displacementMap = null;
      this.displacementScale = 1;
      this.displacementBias = 0;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.fog = false;
      this.flatShading = false;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.bumpMap = source.bumpMap;
      this.bumpScale = source.bumpScale;
      this.normalMap = source.normalMap;
      this.normalMapType = source.normalMapType;
      this.normalScale.copy(source.normalScale);
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.flatShading = source.flatShading;
      return this;
    }
  };
  MeshNormalMaterial.prototype.isMeshNormalMaterial = true;
  var MeshLambertMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.type = "MeshLambertMaterial";
      this.color = new Color(16777215);
      this.map = null;
      this.lightMap = null;
      this.lightMapIntensity = 1;
      this.aoMap = null;
      this.aoMapIntensity = 1;
      this.emissive = new Color(0);
      this.emissiveIntensity = 1;
      this.emissiveMap = null;
      this.specularMap = null;
      this.alphaMap = null;
      this.envMap = null;
      this.combine = MultiplyOperation;
      this.reflectivity = 1;
      this.refractionRatio = 0.98;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.wireframeLinecap = "round";
      this.wireframeLinejoin = "round";
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.map = source.map;
      this.lightMap = source.lightMap;
      this.lightMapIntensity = source.lightMapIntensity;
      this.aoMap = source.aoMap;
      this.aoMapIntensity = source.aoMapIntensity;
      this.emissive.copy(source.emissive);
      this.emissiveMap = source.emissiveMap;
      this.emissiveIntensity = source.emissiveIntensity;
      this.specularMap = source.specularMap;
      this.alphaMap = source.alphaMap;
      this.envMap = source.envMap;
      this.combine = source.combine;
      this.reflectivity = source.reflectivity;
      this.refractionRatio = source.refractionRatio;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.wireframeLinecap = source.wireframeLinecap;
      this.wireframeLinejoin = source.wireframeLinejoin;
      return this;
    }
  };
  MeshLambertMaterial.prototype.isMeshLambertMaterial = true;
  var MeshMatcapMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.defines = { "MATCAP": "" };
      this.type = "MeshMatcapMaterial";
      this.color = new Color(16777215);
      this.matcap = null;
      this.map = null;
      this.bumpMap = null;
      this.bumpScale = 1;
      this.normalMap = null;
      this.normalMapType = TangentSpaceNormalMap;
      this.normalScale = new Vector2(1, 1);
      this.displacementMap = null;
      this.displacementScale = 1;
      this.displacementBias = 0;
      this.alphaMap = null;
      this.flatShading = false;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.defines = { "MATCAP": "" };
      this.color.copy(source.color);
      this.matcap = source.matcap;
      this.map = source.map;
      this.bumpMap = source.bumpMap;
      this.bumpScale = source.bumpScale;
      this.normalMap = source.normalMap;
      this.normalMapType = source.normalMapType;
      this.normalScale.copy(source.normalScale);
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      this.alphaMap = source.alphaMap;
      this.flatShading = source.flatShading;
      return this;
    }
  };
  MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;
  var LineDashedMaterial = class extends LineBasicMaterial {
    constructor(parameters) {
      super();
      this.type = "LineDashedMaterial";
      this.scale = 1;
      this.dashSize = 3;
      this.gapSize = 1;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.scale = source.scale;
      this.dashSize = source.dashSize;
      this.gapSize = source.gapSize;
      return this;
    }
  };
  LineDashedMaterial.prototype.isLineDashedMaterial = true;
  var AnimationUtils = {
    arraySlice: function(array, from, to) {
      if (AnimationUtils.isTypedArray(array)) {
        return new array.constructor(array.subarray(from, to !== void 0 ? to : array.length));
      }
      return array.slice(from, to);
    },
    convertArray: function(array, type, forceClone) {
      if (!array || !forceClone && array.constructor === type)
        return array;
      if (typeof type.BYTES_PER_ELEMENT === "number") {
        return new type(array);
      }
      return Array.prototype.slice.call(array);
    },
    isTypedArray: function(object) {
      return ArrayBuffer.isView(object) && !(object instanceof DataView);
    },
    getKeyframeOrder: function(times) {
      function compareTime(i2, j2) {
        return times[i2] - times[j2];
      }
      const n2 = times.length;
      const result = new Array(n2);
      for (let i2 = 0; i2 !== n2; ++i2)
        result[i2] = i2;
      result.sort(compareTime);
      return result;
    },
    sortedArray: function(values, stride, order) {
      const nValues = values.length;
      const result = new values.constructor(nValues);
      for (let i2 = 0, dstOffset = 0; dstOffset !== nValues; ++i2) {
        const srcOffset = order[i2] * stride;
        for (let j2 = 0; j2 !== stride; ++j2) {
          result[dstOffset++] = values[srcOffset + j2];
        }
      }
      return result;
    },
    flattenJSON: function(jsonKeys, times, values, valuePropertyName) {
      let i2 = 1, key = jsonKeys[0];
      while (key !== void 0 && key[valuePropertyName] === void 0) {
        key = jsonKeys[i2++];
      }
      if (key === void 0)
        return;
      let value = key[valuePropertyName];
      if (value === void 0)
        return;
      if (Array.isArray(value)) {
        do {
          value = key[valuePropertyName];
          if (value !== void 0) {
            times.push(key.time);
            values.push.apply(values, value);
          }
          key = jsonKeys[i2++];
        } while (key !== void 0);
      } else if (value.toArray !== void 0) {
        do {
          value = key[valuePropertyName];
          if (value !== void 0) {
            times.push(key.time);
            value.toArray(values, values.length);
          }
          key = jsonKeys[i2++];
        } while (key !== void 0);
      } else {
        do {
          value = key[valuePropertyName];
          if (value !== void 0) {
            times.push(key.time);
            values.push(value);
          }
          key = jsonKeys[i2++];
        } while (key !== void 0);
      }
    },
    subclip: function(sourceClip, name, startFrame, endFrame, fps = 30) {
      const clip = sourceClip.clone();
      clip.name = name;
      const tracks = [];
      for (let i2 = 0; i2 < clip.tracks.length; ++i2) {
        const track = clip.tracks[i2];
        const valueSize = track.getValueSize();
        const times = [];
        const values = [];
        for (let j2 = 0; j2 < track.times.length; ++j2) {
          const frame = track.times[j2] * fps;
          if (frame < startFrame || frame >= endFrame)
            continue;
          times.push(track.times[j2]);
          for (let k2 = 0; k2 < valueSize; ++k2) {
            values.push(track.values[j2 * valueSize + k2]);
          }
        }
        if (times.length === 0)
          continue;
        track.times = AnimationUtils.convertArray(times, track.times.constructor);
        track.values = AnimationUtils.convertArray(values, track.values.constructor);
        tracks.push(track);
      }
      clip.tracks = tracks;
      let minStartTime = Infinity;
      for (let i2 = 0; i2 < clip.tracks.length; ++i2) {
        if (minStartTime > clip.tracks[i2].times[0]) {
          minStartTime = clip.tracks[i2].times[0];
        }
      }
      for (let i2 = 0; i2 < clip.tracks.length; ++i2) {
        clip.tracks[i2].shift(-1 * minStartTime);
      }
      clip.resetDuration();
      return clip;
    },
    makeClipAdditive: function(targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30) {
      if (fps <= 0)
        fps = 30;
      const numTracks = referenceClip.tracks.length;
      const referenceTime = referenceFrame / fps;
      for (let i2 = 0; i2 < numTracks; ++i2) {
        const referenceTrack = referenceClip.tracks[i2];
        const referenceTrackType = referenceTrack.ValueTypeName;
        if (referenceTrackType === "bool" || referenceTrackType === "string")
          continue;
        const targetTrack = targetClip.tracks.find(function(track) {
          return track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;
        });
        if (targetTrack === void 0)
          continue;
        let referenceOffset = 0;
        const referenceValueSize = referenceTrack.getValueSize();
        if (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
          referenceOffset = referenceValueSize / 3;
        }
        let targetOffset = 0;
        const targetValueSize = targetTrack.getValueSize();
        if (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
          targetOffset = targetValueSize / 3;
        }
        const lastIndex = referenceTrack.times.length - 1;
        let referenceValue;
        if (referenceTime <= referenceTrack.times[0]) {
          const startIndex = referenceOffset;
          const endIndex = referenceValueSize - referenceOffset;
          referenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);
        } else if (referenceTime >= referenceTrack.times[lastIndex]) {
          const startIndex = lastIndex * referenceValueSize + referenceOffset;
          const endIndex = startIndex + referenceValueSize - referenceOffset;
          referenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);
        } else {
          const interpolant = referenceTrack.createInterpolant();
          const startIndex = referenceOffset;
          const endIndex = referenceValueSize - referenceOffset;
          interpolant.evaluate(referenceTime);
          referenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, startIndex, endIndex);
        }
        if (referenceTrackType === "quaternion") {
          const referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();
          referenceQuat.toArray(referenceValue);
        }
        const numTimes = targetTrack.times.length;
        for (let j2 = 0; j2 < numTimes; ++j2) {
          const valueStart = j2 * targetValueSize + targetOffset;
          if (referenceTrackType === "quaternion") {
            Quaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);
          } else {
            const valueEnd = targetValueSize - targetOffset * 2;
            for (let k2 = 0; k2 < valueEnd; ++k2) {
              targetTrack.values[valueStart + k2] -= referenceValue[k2];
            }
          }
        }
      }
      targetClip.blendMode = AdditiveAnimationBlendMode;
      return targetClip;
    }
  };
  var Interpolant = class {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      this.parameterPositions = parameterPositions;
      this._cachedIndex = 0;
      this.resultBuffer = resultBuffer !== void 0 ? resultBuffer : new sampleValues.constructor(sampleSize);
      this.sampleValues = sampleValues;
      this.valueSize = sampleSize;
      this.settings = null;
      this.DefaultSettings_ = {};
    }
    evaluate(t) {
      const pp = this.parameterPositions;
      let i1 = this._cachedIndex, t1 = pp[i1], t0 = pp[i1 - 1];
      validate_interval: {
        seek: {
          let right;
          linear_scan: {
            forward_scan:
              if (!(t < t1)) {
                for (let giveUpAt = i1 + 2; ; ) {
                  if (t1 === void 0) {
                    if (t < t0)
                      break forward_scan;
                    i1 = pp.length;
                    this._cachedIndex = i1;
                    return this.afterEnd_(i1 - 1, t, t0);
                  }
                  if (i1 === giveUpAt)
                    break;
                  t0 = t1;
                  t1 = pp[++i1];
                  if (t < t1) {
                    break seek;
                  }
                }
                right = pp.length;
                break linear_scan;
              }
            if (!(t >= t0)) {
              const t1global = pp[1];
              if (t < t1global) {
                i1 = 2;
                t0 = t1global;
              }
              for (let giveUpAt = i1 - 2; ; ) {
                if (t0 === void 0) {
                  this._cachedIndex = 0;
                  return this.beforeStart_(0, t, t1);
                }
                if (i1 === giveUpAt)
                  break;
                t1 = t0;
                t0 = pp[--i1 - 1];
                if (t >= t0) {
                  break seek;
                }
              }
              right = i1;
              i1 = 0;
              break linear_scan;
            }
            break validate_interval;
          }
          while (i1 < right) {
            const mid = i1 + right >>> 1;
            if (t < pp[mid]) {
              right = mid;
            } else {
              i1 = mid + 1;
            }
          }
          t1 = pp[i1];
          t0 = pp[i1 - 1];
          if (t0 === void 0) {
            this._cachedIndex = 0;
            return this.beforeStart_(0, t, t1);
          }
          if (t1 === void 0) {
            i1 = pp.length;
            this._cachedIndex = i1;
            return this.afterEnd_(i1 - 1, t0, t);
          }
        }
        this._cachedIndex = i1;
        this.intervalChanged_(i1, t0, t1);
      }
      return this.interpolate_(i1, t0, t, t1);
    }
    getSettings_() {
      return this.settings || this.DefaultSettings_;
    }
    copySampleValue_(index) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset = index * stride;
      for (let i2 = 0; i2 !== stride; ++i2) {
        result[i2] = values[offset + i2];
      }
      return result;
    }
    interpolate_() {
      throw new Error("call to abstract method");
    }
    intervalChanged_() {
    }
  };
  Interpolant.prototype.beforeStart_ = Interpolant.prototype.copySampleValue_;
  Interpolant.prototype.afterEnd_ = Interpolant.prototype.copySampleValue_;
  var CubicInterpolant = class extends Interpolant {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      super(parameterPositions, sampleValues, sampleSize, resultBuffer);
      this._weightPrev = -0;
      this._offsetPrev = -0;
      this._weightNext = -0;
      this._offsetNext = -0;
      this.DefaultSettings_ = {
        endingStart: ZeroCurvatureEnding,
        endingEnd: ZeroCurvatureEnding
      };
    }
    intervalChanged_(i1, t0, t1) {
      const pp = this.parameterPositions;
      let iPrev = i1 - 2, iNext = i1 + 1, tPrev = pp[iPrev], tNext = pp[iNext];
      if (tPrev === void 0) {
        switch (this.getSettings_().endingStart) {
          case ZeroSlopeEnding:
            iPrev = i1;
            tPrev = 2 * t0 - t1;
            break;
          case WrapAroundEnding:
            iPrev = pp.length - 2;
            tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
            break;
          default:
            iPrev = i1;
            tPrev = t1;
        }
      }
      if (tNext === void 0) {
        switch (this.getSettings_().endingEnd) {
          case ZeroSlopeEnding:
            iNext = i1;
            tNext = 2 * t1 - t0;
            break;
          case WrapAroundEnding:
            iNext = 1;
            tNext = t1 + pp[1] - pp[0];
            break;
          default:
            iNext = i1 - 1;
            tNext = t0;
        }
      }
      const halfDt = (t1 - t0) * 0.5, stride = this.valueSize;
      this._weightPrev = halfDt / (t0 - tPrev);
      this._weightNext = halfDt / (tNext - t1);
      this._offsetPrev = iPrev * stride;
      this._offsetNext = iNext * stride;
    }
    interpolate_(i1, t0, t, t1) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, o1 = i1 * stride, o0 = o1 - stride, oP = this._offsetPrev, oN = this._offsetNext, wP = this._weightPrev, wN = this._weightNext, p3 = (t - t0) / (t1 - t0), pp = p3 * p3, ppp = pp * p3;
      const sP = -wP * ppp + 2 * wP * pp - wP * p3;
      const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p3 + 1;
      const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p3;
      const sN = wN * ppp - wN * pp;
      for (let i2 = 0; i2 !== stride; ++i2) {
        result[i2] = sP * values[oP + i2] + s0 * values[o0 + i2] + s1 * values[o1 + i2] + sN * values[oN + i2];
      }
      return result;
    }
  };
  var LinearInterpolant = class extends Interpolant {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1, t0, t, t1) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset1 = i1 * stride, offset0 = offset1 - stride, weight1 = (t - t0) / (t1 - t0), weight0 = 1 - weight1;
      for (let i2 = 0; i2 !== stride; ++i2) {
        result[i2] = values[offset0 + i2] * weight0 + values[offset1 + i2] * weight1;
      }
      return result;
    }
  };
  var DiscreteInterpolant = class extends Interpolant {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1) {
      return this.copySampleValue_(i1 - 1);
    }
  };
  var KeyframeTrack = class {
    constructor(name, times, values, interpolation) {
      if (name === void 0)
        throw new Error("THREE.KeyframeTrack: track name is undefined");
      if (times === void 0 || times.length === 0)
        throw new Error("THREE.KeyframeTrack: no keyframes in track named " + name);
      this.name = name;
      this.times = AnimationUtils.convertArray(times, this.TimeBufferType);
      this.values = AnimationUtils.convertArray(values, this.ValueBufferType);
      this.setInterpolation(interpolation || this.DefaultInterpolation);
    }
    static toJSON(track) {
      const trackType = track.constructor;
      let json;
      if (trackType.toJSON !== this.toJSON) {
        json = trackType.toJSON(track);
      } else {
        json = {
          "name": track.name,
          "times": AnimationUtils.convertArray(track.times, Array),
          "values": AnimationUtils.convertArray(track.values, Array)
        };
        const interpolation = track.getInterpolation();
        if (interpolation !== track.DefaultInterpolation) {
          json.interpolation = interpolation;
        }
      }
      json.type = track.ValueTypeName;
      return json;
    }
    InterpolantFactoryMethodDiscrete(result) {
      return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);
    }
    InterpolantFactoryMethodLinear(result) {
      return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);
    }
    InterpolantFactoryMethodSmooth(result) {
      return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);
    }
    setInterpolation(interpolation) {
      let factoryMethod;
      switch (interpolation) {
        case InterpolateDiscrete:
          factoryMethod = this.InterpolantFactoryMethodDiscrete;
          break;
        case InterpolateLinear:
          factoryMethod = this.InterpolantFactoryMethodLinear;
          break;
        case InterpolateSmooth:
          factoryMethod = this.InterpolantFactoryMethodSmooth;
          break;
      }
      if (factoryMethod === void 0) {
        const message = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
        if (this.createInterpolant === void 0) {
          if (interpolation !== this.DefaultInterpolation) {
            this.setInterpolation(this.DefaultInterpolation);
          } else {
            throw new Error(message);
          }
        }
        console.warn("THREE.KeyframeTrack:", message);
        return this;
      }
      this.createInterpolant = factoryMethod;
      return this;
    }
    getInterpolation() {
      switch (this.createInterpolant) {
        case this.InterpolantFactoryMethodDiscrete:
          return InterpolateDiscrete;
        case this.InterpolantFactoryMethodLinear:
          return InterpolateLinear;
        case this.InterpolantFactoryMethodSmooth:
          return InterpolateSmooth;
      }
    }
    getValueSize() {
      return this.values.length / this.times.length;
    }
    shift(timeOffset) {
      if (timeOffset !== 0) {
        const times = this.times;
        for (let i2 = 0, n2 = times.length; i2 !== n2; ++i2) {
          times[i2] += timeOffset;
        }
      }
      return this;
    }
    scale(timeScale) {
      if (timeScale !== 1) {
        const times = this.times;
        for (let i2 = 0, n2 = times.length; i2 !== n2; ++i2) {
          times[i2] *= timeScale;
        }
      }
      return this;
    }
    trim(startTime, endTime) {
      const times = this.times, nKeys = times.length;
      let from = 0, to = nKeys - 1;
      while (from !== nKeys && times[from] < startTime) {
        ++from;
      }
      while (to !== -1 && times[to] > endTime) {
        --to;
      }
      ++to;
      if (from !== 0 || to !== nKeys) {
        if (from >= to) {
          to = Math.max(to, 1);
          from = to - 1;
        }
        const stride = this.getValueSize();
        this.times = AnimationUtils.arraySlice(times, from, to);
        this.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);
      }
      return this;
    }
    validate() {
      let valid = true;
      const valueSize = this.getValueSize();
      if (valueSize - Math.floor(valueSize) !== 0) {
        console.error("THREE.KeyframeTrack: Invalid value size in track.", this);
        valid = false;
      }
      const times = this.times, values = this.values, nKeys = times.length;
      if (nKeys === 0) {
        console.error("THREE.KeyframeTrack: Track is empty.", this);
        valid = false;
      }
      let prevTime = null;
      for (let i2 = 0; i2 !== nKeys; i2++) {
        const currTime = times[i2];
        if (typeof currTime === "number" && isNaN(currTime)) {
          console.error("THREE.KeyframeTrack: Time is not a valid number.", this, i2, currTime);
          valid = false;
          break;
        }
        if (prevTime !== null && prevTime > currTime) {
          console.error("THREE.KeyframeTrack: Out of order keys.", this, i2, currTime, prevTime);
          valid = false;
          break;
        }
        prevTime = currTime;
      }
      if (values !== void 0) {
        if (AnimationUtils.isTypedArray(values)) {
          for (let i2 = 0, n2 = values.length; i2 !== n2; ++i2) {
            const value = values[i2];
            if (isNaN(value)) {
              console.error("THREE.KeyframeTrack: Value is not a valid number.", this, i2, value);
              valid = false;
              break;
            }
          }
        }
      }
      return valid;
    }
    optimize() {
      const times = AnimationUtils.arraySlice(this.times), values = AnimationUtils.arraySlice(this.values), stride = this.getValueSize(), smoothInterpolation = this.getInterpolation() === InterpolateSmooth, lastIndex = times.length - 1;
      let writeIndex = 1;
      for (let i2 = 1; i2 < lastIndex; ++i2) {
        let keep = false;
        const time2 = times[i2];
        const timeNext = times[i2 + 1];
        if (time2 !== timeNext && (i2 !== 1 || time2 !== times[0])) {
          if (!smoothInterpolation) {
            const offset = i2 * stride, offsetP = offset - stride, offsetN = offset + stride;
            for (let j2 = 0; j2 !== stride; ++j2) {
              const value = values[offset + j2];
              if (value !== values[offsetP + j2] || value !== values[offsetN + j2]) {
                keep = true;
                break;
              }
            }
          } else {
            keep = true;
          }
        }
        if (keep) {
          if (i2 !== writeIndex) {
            times[writeIndex] = times[i2];
            const readOffset = i2 * stride, writeOffset = writeIndex * stride;
            for (let j2 = 0; j2 !== stride; ++j2) {
              values[writeOffset + j2] = values[readOffset + j2];
            }
          }
          ++writeIndex;
        }
      }
      if (lastIndex > 0) {
        times[writeIndex] = times[lastIndex];
        for (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j2 = 0; j2 !== stride; ++j2) {
          values[writeOffset + j2] = values[readOffset + j2];
        }
        ++writeIndex;
      }
      if (writeIndex !== times.length) {
        this.times = AnimationUtils.arraySlice(times, 0, writeIndex);
        this.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);
      } else {
        this.times = times;
        this.values = values;
      }
      return this;
    }
    clone() {
      const times = AnimationUtils.arraySlice(this.times, 0);
      const values = AnimationUtils.arraySlice(this.values, 0);
      const TypedKeyframeTrack = this.constructor;
      const track = new TypedKeyframeTrack(this.name, times, values);
      track.createInterpolant = this.createInterpolant;
      return track;
    }
  };
  KeyframeTrack.prototype.TimeBufferType = Float32Array;
  KeyframeTrack.prototype.ValueBufferType = Float32Array;
  KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
  var BooleanKeyframeTrack = class extends KeyframeTrack {
  };
  BooleanKeyframeTrack.prototype.ValueTypeName = "bool";
  BooleanKeyframeTrack.prototype.ValueBufferType = Array;
  BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
  BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = void 0;
  BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
  var ColorKeyframeTrack = class extends KeyframeTrack {
  };
  ColorKeyframeTrack.prototype.ValueTypeName = "color";
  var NumberKeyframeTrack = class extends KeyframeTrack {
  };
  NumberKeyframeTrack.prototype.ValueTypeName = "number";
  var QuaternionLinearInterpolant = class extends Interpolant {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1, t0, t, t1) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, alpha = (t - t0) / (t1 - t0);
      let offset = i1 * stride;
      for (let end2 = offset + stride; offset !== end2; offset += 4) {
        Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
      }
      return result;
    }
  };
  var QuaternionKeyframeTrack = class extends KeyframeTrack {
    InterpolantFactoryMethodLinear(result) {
      return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);
    }
  };
  QuaternionKeyframeTrack.prototype.ValueTypeName = "quaternion";
  QuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
  QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
  var StringKeyframeTrack = class extends KeyframeTrack {
  };
  StringKeyframeTrack.prototype.ValueTypeName = "string";
  StringKeyframeTrack.prototype.ValueBufferType = Array;
  StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
  StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = void 0;
  StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
  var VectorKeyframeTrack = class extends KeyframeTrack {
  };
  VectorKeyframeTrack.prototype.ValueTypeName = "vector";
  var AnimationClip = class {
    constructor(name, duration = -1, tracks, blendMode = NormalAnimationBlendMode) {
      this.name = name;
      this.tracks = tracks;
      this.duration = duration;
      this.blendMode = blendMode;
      this.uuid = generateUUID();
      if (this.duration < 0) {
        this.resetDuration();
      }
    }
    static parse(json) {
      const tracks = [], jsonTracks = json.tracks, frameTime = 1 / (json.fps || 1);
      for (let i2 = 0, n2 = jsonTracks.length; i2 !== n2; ++i2) {
        tracks.push(parseKeyframeTrack(jsonTracks[i2]).scale(frameTime));
      }
      const clip = new this(json.name, json.duration, tracks, json.blendMode);
      clip.uuid = json.uuid;
      return clip;
    }
    static toJSON(clip) {
      const tracks = [], clipTracks = clip.tracks;
      const json = {
        "name": clip.name,
        "duration": clip.duration,
        "tracks": tracks,
        "uuid": clip.uuid,
        "blendMode": clip.blendMode
      };
      for (let i2 = 0, n2 = clipTracks.length; i2 !== n2; ++i2) {
        tracks.push(KeyframeTrack.toJSON(clipTracks[i2]));
      }
      return json;
    }
    static CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {
      const numMorphTargets = morphTargetSequence.length;
      const tracks = [];
      for (let i2 = 0; i2 < numMorphTargets; i2++) {
        let times = [];
        let values = [];
        times.push((i2 + numMorphTargets - 1) % numMorphTargets, i2, (i2 + 1) % numMorphTargets);
        values.push(0, 1, 0);
        const order = AnimationUtils.getKeyframeOrder(times);
        times = AnimationUtils.sortedArray(times, 1, order);
        values = AnimationUtils.sortedArray(values, 1, order);
        if (!noLoop && times[0] === 0) {
          times.push(numMorphTargets);
          values.push(values[0]);
        }
        tracks.push(new NumberKeyframeTrack(".morphTargetInfluences[" + morphTargetSequence[i2].name + "]", times, values).scale(1 / fps));
      }
      return new this(name, -1, tracks);
    }
    static findByName(objectOrClipArray, name) {
      let clipArray = objectOrClipArray;
      if (!Array.isArray(objectOrClipArray)) {
        const o2 = objectOrClipArray;
        clipArray = o2.geometry && o2.geometry.animations || o2.animations;
      }
      for (let i2 = 0; i2 < clipArray.length; i2++) {
        if (clipArray[i2].name === name) {
          return clipArray[i2];
        }
      }
      return null;
    }
    static CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {
      const animationToMorphTargets = {};
      const pattern = /^([\w-]*?)([\d]+)$/;
      for (let i2 = 0, il = morphTargets.length; i2 < il; i2++) {
        const morphTarget = morphTargets[i2];
        const parts = morphTarget.name.match(pattern);
        if (parts && parts.length > 1) {
          const name = parts[1];
          let animationMorphTargets = animationToMorphTargets[name];
          if (!animationMorphTargets) {
            animationToMorphTargets[name] = animationMorphTargets = [];
          }
          animationMorphTargets.push(morphTarget);
        }
      }
      const clips = [];
      for (const name in animationToMorphTargets) {
        clips.push(this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));
      }
      return clips;
    }
    static parseAnimation(animation, bones2) {
      if (!animation) {
        console.error("THREE.AnimationClip: No animation in JSONLoader data.");
        return null;
      }
      const addNonemptyTrack = function(trackType, trackName, animationKeys, propertyName, destTracks) {
        if (animationKeys.length !== 0) {
          const times = [];
          const values = [];
          AnimationUtils.flattenJSON(animationKeys, times, values, propertyName);
          if (times.length !== 0) {
            destTracks.push(new trackType(trackName, times, values));
          }
        }
      };
      const tracks = [];
      const clipName = animation.name || "default";
      const fps = animation.fps || 30;
      const blendMode = animation.blendMode;
      let duration = animation.length || -1;
      const hierarchyTracks = animation.hierarchy || [];
      for (let h2 = 0; h2 < hierarchyTracks.length; h2++) {
        const animationKeys = hierarchyTracks[h2].keys;
        if (!animationKeys || animationKeys.length === 0)
          continue;
        if (animationKeys[0].morphTargets) {
          const morphTargetNames = {};
          let k2;
          for (k2 = 0; k2 < animationKeys.length; k2++) {
            if (animationKeys[k2].morphTargets) {
              for (let m2 = 0; m2 < animationKeys[k2].morphTargets.length; m2++) {
                morphTargetNames[animationKeys[k2].morphTargets[m2]] = -1;
              }
            }
          }
          for (const morphTargetName in morphTargetNames) {
            const times = [];
            const values = [];
            for (let m2 = 0; m2 !== animationKeys[k2].morphTargets.length; ++m2) {
              const animationKey = animationKeys[k2];
              times.push(animationKey.time);
              values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);
            }
            tracks.push(new NumberKeyframeTrack(".morphTargetInfluence[" + morphTargetName + "]", times, values));
          }
          duration = morphTargetNames.length * (fps || 1);
        } else {
          const boneName = ".bones[" + bones2[h2].name + "]";
          addNonemptyTrack(VectorKeyframeTrack, boneName + ".position", animationKeys, "pos", tracks);
          addNonemptyTrack(QuaternionKeyframeTrack, boneName + ".quaternion", animationKeys, "rot", tracks);
          addNonemptyTrack(VectorKeyframeTrack, boneName + ".scale", animationKeys, "scl", tracks);
        }
      }
      if (tracks.length === 0) {
        return null;
      }
      const clip = new this(clipName, duration, tracks, blendMode);
      return clip;
    }
    resetDuration() {
      const tracks = this.tracks;
      let duration = 0;
      for (let i2 = 0, n2 = tracks.length; i2 !== n2; ++i2) {
        const track = this.tracks[i2];
        duration = Math.max(duration, track.times[track.times.length - 1]);
      }
      this.duration = duration;
      return this;
    }
    trim() {
      for (let i2 = 0; i2 < this.tracks.length; i2++) {
        this.tracks[i2].trim(0, this.duration);
      }
      return this;
    }
    validate() {
      let valid = true;
      for (let i2 = 0; i2 < this.tracks.length; i2++) {
        valid = valid && this.tracks[i2].validate();
      }
      return valid;
    }
    optimize() {
      for (let i2 = 0; i2 < this.tracks.length; i2++) {
        this.tracks[i2].optimize();
      }
      return this;
    }
    clone() {
      const tracks = [];
      for (let i2 = 0; i2 < this.tracks.length; i2++) {
        tracks.push(this.tracks[i2].clone());
      }
      return new this.constructor(this.name, this.duration, tracks, this.blendMode);
    }
    toJSON() {
      return this.constructor.toJSON(this);
    }
  };
  function getTrackTypeForValueTypeName(typeName) {
    switch (typeName.toLowerCase()) {
      case "scalar":
      case "double":
      case "float":
      case "number":
      case "integer":
        return NumberKeyframeTrack;
      case "vector":
      case "vector2":
      case "vector3":
      case "vector4":
        return VectorKeyframeTrack;
      case "color":
        return ColorKeyframeTrack;
      case "quaternion":
        return QuaternionKeyframeTrack;
      case "bool":
      case "boolean":
        return BooleanKeyframeTrack;
      case "string":
        return StringKeyframeTrack;
    }
    throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + typeName);
  }
  function parseKeyframeTrack(json) {
    if (json.type === void 0) {
      throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
    }
    const trackType = getTrackTypeForValueTypeName(json.type);
    if (json.times === void 0) {
      const times = [], values = [];
      AnimationUtils.flattenJSON(json.keys, times, values, "value");
      json.times = times;
      json.values = values;
    }
    if (trackType.parse !== void 0) {
      return trackType.parse(json);
    } else {
      return new trackType(json.name, json.times, json.values, json.interpolation);
    }
  }
  var Cache = {
    enabled: false,
    files: {},
    add: function(key, file) {
      if (this.enabled === false)
        return;
      this.files[key] = file;
    },
    get: function(key) {
      if (this.enabled === false)
        return;
      return this.files[key];
    },
    remove: function(key) {
      delete this.files[key];
    },
    clear: function() {
      this.files = {};
    }
  };
  var LoadingManager = class {
    constructor(onLoad, onProgress, onError) {
      const scope = this;
      let isLoading = false;
      let itemsLoaded = 0;
      let itemsTotal = 0;
      let urlModifier = void 0;
      const handlers = [];
      this.onStart = void 0;
      this.onLoad = onLoad;
      this.onProgress = onProgress;
      this.onError = onError;
      this.itemStart = function(url) {
        itemsTotal++;
        if (isLoading === false) {
          if (scope.onStart !== void 0) {
            scope.onStart(url, itemsLoaded, itemsTotal);
          }
        }
        isLoading = true;
      };
      this.itemEnd = function(url) {
        itemsLoaded++;
        if (scope.onProgress !== void 0) {
          scope.onProgress(url, itemsLoaded, itemsTotal);
        }
        if (itemsLoaded === itemsTotal) {
          isLoading = false;
          if (scope.onLoad !== void 0) {
            scope.onLoad();
          }
        }
      };
      this.itemError = function(url) {
        if (scope.onError !== void 0) {
          scope.onError(url);
        }
      };
      this.resolveURL = function(url) {
        if (urlModifier) {
          return urlModifier(url);
        }
        return url;
      };
      this.setURLModifier = function(transform) {
        urlModifier = transform;
        return this;
      };
      this.addHandler = function(regex, loader) {
        handlers.push(regex, loader);
        return this;
      };
      this.removeHandler = function(regex) {
        const index = handlers.indexOf(regex);
        if (index !== -1) {
          handlers.splice(index, 2);
        }
        return this;
      };
      this.getHandler = function(file) {
        for (let i2 = 0, l2 = handlers.length; i2 < l2; i2 += 2) {
          const regex = handlers[i2];
          const loader = handlers[i2 + 1];
          if (regex.global)
            regex.lastIndex = 0;
          if (regex.test(file)) {
            return loader;
          }
        }
        return null;
      };
    }
  };
  var DefaultLoadingManager = new LoadingManager();
  var Loader = class {
    constructor(manager) {
      this.manager = manager !== void 0 ? manager : DefaultLoadingManager;
      this.crossOrigin = "anonymous";
      this.withCredentials = false;
      this.path = "";
      this.resourcePath = "";
      this.requestHeader = {};
    }
    load() {
    }
    loadAsync(url, onProgress) {
      const scope = this;
      return new Promise(function(resolve, reject) {
        scope.load(url, resolve, onProgress, reject);
      });
    }
    parse() {
    }
    setCrossOrigin(crossOrigin) {
      this.crossOrigin = crossOrigin;
      return this;
    }
    setWithCredentials(value) {
      this.withCredentials = value;
      return this;
    }
    setPath(path) {
      this.path = path;
      return this;
    }
    setResourcePath(resourcePath) {
      this.resourcePath = resourcePath;
      return this;
    }
    setRequestHeader(requestHeader) {
      this.requestHeader = requestHeader;
      return this;
    }
  };
  var loading2 = {};
  var FileLoader = class extends Loader {
    constructor(manager) {
      super(manager);
    }
    load(url, onLoad, onProgress, onError) {
      if (url === void 0)
        url = "";
      if (this.path !== void 0)
        url = this.path + url;
      url = this.manager.resolveURL(url);
      const cached = Cache.get(url);
      if (cached !== void 0) {
        this.manager.itemStart(url);
        setTimeout(() => {
          if (onLoad)
            onLoad(cached);
          this.manager.itemEnd(url);
        }, 0);
        return cached;
      }
      if (loading2[url] !== void 0) {
        loading2[url].push({
          onLoad,
          onProgress,
          onError
        });
        return;
      }
      loading2[url] = [];
      loading2[url].push({
        onLoad,
        onProgress,
        onError
      });
      const req = new Request(url, {
        headers: new Headers(this.requestHeader),
        credentials: this.withCredentials ? "include" : "same-origin"
      });
      const mimeType = this.mimeType;
      const responseType = this.responseType;
      fetch(req).then((response) => {
        if (response.status === 200 || response.status === 0) {
          if (response.status === 0) {
            console.warn("THREE.FileLoader: HTTP Status 0 received.");
          }
          if (typeof ReadableStream === "undefined" || response.body.getReader === void 0) {
            return response;
          }
          const callbacks = loading2[url];
          const reader = response.body.getReader();
          const contentLength = response.headers.get("Content-Length");
          const total = contentLength ? parseInt(contentLength) : 0;
          const lengthComputable = total !== 0;
          let loaded = 0;
          const stream = new ReadableStream({
            start(controller) {
              readData();
              function readData() {
                reader.read().then(({ done, value }) => {
                  if (done) {
                    controller.close();
                  } else {
                    loaded += value.byteLength;
                    const event = new ProgressEvent("progress", { lengthComputable, loaded, total });
                    for (let i2 = 0, il = callbacks.length; i2 < il; i2++) {
                      const callback = callbacks[i2];
                      if (callback.onProgress)
                        callback.onProgress(event);
                    }
                    controller.enqueue(value);
                    readData();
                  }
                });
              }
            }
          });
          return new Response(stream);
        } else {
          throw Error(`fetch for "${response.url}" responded with ${response.status}: ${response.statusText}`);
        }
      }).then((response) => {
        switch (responseType) {
          case "arraybuffer":
            return response.arrayBuffer();
          case "blob":
            return response.blob();
          case "document":
            return response.text().then((text2) => {
              const parser = new DOMParser();
              return parser.parseFromString(text2, mimeType);
            });
          case "json":
            return response.json();
          default:
            if (mimeType === void 0) {
              return response.text();
            } else {
              const re2 = /charset="?([^;"\s]*)"?/i;
              const exec = re2.exec(mimeType);
              const label = exec && exec[1] ? exec[1].toLowerCase() : void 0;
              const decoder = new TextDecoder(label);
              return response.arrayBuffer().then((ab) => decoder.decode(ab));
            }
        }
      }).then((data) => {
        Cache.add(url, data);
        const callbacks = loading2[url];
        delete loading2[url];
        for (let i2 = 0, il = callbacks.length; i2 < il; i2++) {
          const callback = callbacks[i2];
          if (callback.onLoad)
            callback.onLoad(data);
        }
      }).catch((err) => {
        const callbacks = loading2[url];
        if (callbacks === void 0) {
          this.manager.itemError(url);
          throw err;
        }
        delete loading2[url];
        for (let i2 = 0, il = callbacks.length; i2 < il; i2++) {
          const callback = callbacks[i2];
          if (callback.onError)
            callback.onError(err);
        }
        this.manager.itemError(url);
      }).finally(() => {
        this.manager.itemEnd(url);
      });
      this.manager.itemStart(url);
    }
    setResponseType(value) {
      this.responseType = value;
      return this;
    }
    setMimeType(value) {
      this.mimeType = value;
      return this;
    }
  };
  var ImageLoader = class extends Loader {
    constructor(manager) {
      super(manager);
    }
    load(url, onLoad, onProgress, onError) {
      if (this.path !== void 0)
        url = this.path + url;
      url = this.manager.resolveURL(url);
      const scope = this;
      const cached = Cache.get(url);
      if (cached !== void 0) {
        scope.manager.itemStart(url);
        setTimeout(function() {
          if (onLoad)
            onLoad(cached);
          scope.manager.itemEnd(url);
        }, 0);
        return cached;
      }
      const image = createElementNS("img");
      function onImageLoad() {
        removeEventListeners();
        Cache.add(url, this);
        if (onLoad)
          onLoad(this);
        scope.manager.itemEnd(url);
      }
      function onImageError(event) {
        removeEventListeners();
        if (onError)
          onError(event);
        scope.manager.itemError(url);
        scope.manager.itemEnd(url);
      }
      function removeEventListeners() {
        image.removeEventListener("load", onImageLoad, false);
        image.removeEventListener("error", onImageError, false);
      }
      image.addEventListener("load", onImageLoad, false);
      image.addEventListener("error", onImageError, false);
      if (url.substr(0, 5) !== "data:") {
        if (this.crossOrigin !== void 0)
          image.crossOrigin = this.crossOrigin;
      }
      scope.manager.itemStart(url);
      image.src = url;
      return image;
    }
  };
  var CubeTextureLoader = class extends Loader {
    constructor(manager) {
      super(manager);
    }
    load(urls, onLoad, onProgress, onError) {
      const texture = new CubeTexture();
      const loader = new ImageLoader(this.manager);
      loader.setCrossOrigin(this.crossOrigin);
      loader.setPath(this.path);
      let loaded = 0;
      function loadTexture(i2) {
        loader.load(urls[i2], function(image) {
          texture.images[i2] = image;
          loaded++;
          if (loaded === 6) {
            texture.needsUpdate = true;
            if (onLoad)
              onLoad(texture);
          }
        }, void 0, onError);
      }
      for (let i2 = 0; i2 < urls.length; ++i2) {
        loadTexture(i2);
      }
      return texture;
    }
  };
  var TextureLoader = class extends Loader {
    constructor(manager) {
      super(manager);
    }
    load(url, onLoad, onProgress, onError) {
      const texture = new Texture();
      const loader = new ImageLoader(this.manager);
      loader.setCrossOrigin(this.crossOrigin);
      loader.setPath(this.path);
      loader.load(url, function(image) {
        texture.image = image;
        texture.needsUpdate = true;
        if (onLoad !== void 0) {
          onLoad(texture);
        }
      }, onProgress, onError);
      return texture;
    }
  };
  var Light = class extends Object3D {
    constructor(color, intensity = 1) {
      super();
      this.type = "Light";
      this.color = new Color(color);
      this.intensity = intensity;
    }
    dispose() {
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.intensity = source.intensity;
      return this;
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      data.object.color = this.color.getHex();
      data.object.intensity = this.intensity;
      if (this.groundColor !== void 0)
        data.object.groundColor = this.groundColor.getHex();
      if (this.distance !== void 0)
        data.object.distance = this.distance;
      if (this.angle !== void 0)
        data.object.angle = this.angle;
      if (this.decay !== void 0)
        data.object.decay = this.decay;
      if (this.penumbra !== void 0)
        data.object.penumbra = this.penumbra;
      if (this.shadow !== void 0)
        data.object.shadow = this.shadow.toJSON();
      return data;
    }
  };
  Light.prototype.isLight = true;
  var HemisphereLight = class extends Light {
    constructor(skyColor, groundColor, intensity) {
      super(skyColor, intensity);
      this.type = "HemisphereLight";
      this.position.copy(Object3D.DefaultUp);
      this.updateMatrix();
      this.groundColor = new Color(groundColor);
    }
    copy(source) {
      Light.prototype.copy.call(this, source);
      this.groundColor.copy(source.groundColor);
      return this;
    }
  };
  HemisphereLight.prototype.isHemisphereLight = true;
  var _projScreenMatrix$1 = /* @__PURE__ */ new Matrix4();
  var _lightPositionWorld$1 = /* @__PURE__ */ new Vector3();
  var _lookTarget$1 = /* @__PURE__ */ new Vector3();
  var LightShadow = class {
    constructor(camera3) {
      this.camera = camera3;
      this.bias = 0;
      this.normalBias = 0;
      this.radius = 1;
      this.blurSamples = 8;
      this.mapSize = new Vector2(512, 512);
      this.map = null;
      this.mapPass = null;
      this.matrix = new Matrix4();
      this.autoUpdate = true;
      this.needsUpdate = false;
      this._frustum = new Frustum();
      this._frameExtents = new Vector2(1, 1);
      this._viewportCount = 1;
      this._viewports = [
        new Vector4(0, 0, 1, 1)
      ];
    }
    getViewportCount() {
      return this._viewportCount;
    }
    getFrustum() {
      return this._frustum;
    }
    updateMatrices(light2) {
      const shadowCamera = this.camera;
      const shadowMatrix = this.matrix;
      _lightPositionWorld$1.setFromMatrixPosition(light2.matrixWorld);
      shadowCamera.position.copy(_lightPositionWorld$1);
      _lookTarget$1.setFromMatrixPosition(light2.target.matrixWorld);
      shadowCamera.lookAt(_lookTarget$1);
      shadowCamera.updateMatrixWorld();
      _projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
      this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);
      shadowMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
      shadowMatrix.multiply(shadowCamera.projectionMatrix);
      shadowMatrix.multiply(shadowCamera.matrixWorldInverse);
    }
    getViewport(viewportIndex) {
      return this._viewports[viewportIndex];
    }
    getFrameExtents() {
      return this._frameExtents;
    }
    dispose() {
      if (this.map) {
        this.map.dispose();
      }
      if (this.mapPass) {
        this.mapPass.dispose();
      }
    }
    copy(source) {
      this.camera = source.camera.clone();
      this.bias = source.bias;
      this.radius = source.radius;
      this.mapSize.copy(source.mapSize);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    toJSON() {
      const object = {};
      if (this.bias !== 0)
        object.bias = this.bias;
      if (this.normalBias !== 0)
        object.normalBias = this.normalBias;
      if (this.radius !== 1)
        object.radius = this.radius;
      if (this.mapSize.x !== 512 || this.mapSize.y !== 512)
        object.mapSize = this.mapSize.toArray();
      object.camera = this.camera.toJSON(false).object;
      delete object.camera.matrix;
      return object;
    }
  };
  var SpotLightShadow = class extends LightShadow {
    constructor() {
      super(new PerspectiveCamera(50, 1, 0.5, 500));
      this.focus = 1;
    }
    updateMatrices(light2) {
      const camera3 = this.camera;
      const fov2 = RAD2DEG * 2 * light2.angle * this.focus;
      const aspect2 = this.mapSize.width / this.mapSize.height;
      const far = light2.distance || camera3.far;
      if (fov2 !== camera3.fov || aspect2 !== camera3.aspect || far !== camera3.far) {
        camera3.fov = fov2;
        camera3.aspect = aspect2;
        camera3.far = far;
        camera3.updateProjectionMatrix();
      }
      super.updateMatrices(light2);
    }
    copy(source) {
      super.copy(source);
      this.focus = source.focus;
      return this;
    }
  };
  SpotLightShadow.prototype.isSpotLightShadow = true;
  var SpotLight = class extends Light {
    constructor(color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 1) {
      super(color, intensity);
      this.type = "SpotLight";
      this.position.copy(Object3D.DefaultUp);
      this.updateMatrix();
      this.target = new Object3D();
      this.distance = distance;
      this.angle = angle;
      this.penumbra = penumbra;
      this.decay = decay;
      this.shadow = new SpotLightShadow();
    }
    get power() {
      return this.intensity * Math.PI;
    }
    set power(power) {
      this.intensity = power / Math.PI;
    }
    dispose() {
      this.shadow.dispose();
    }
    copy(source) {
      super.copy(source);
      this.distance = source.distance;
      this.angle = source.angle;
      this.penumbra = source.penumbra;
      this.decay = source.decay;
      this.target = source.target.clone();
      this.shadow = source.shadow.clone();
      return this;
    }
  };
  SpotLight.prototype.isSpotLight = true;
  var _projScreenMatrix = /* @__PURE__ */ new Matrix4();
  var _lightPositionWorld = /* @__PURE__ */ new Vector3();
  var _lookTarget = /* @__PURE__ */ new Vector3();
  var PointLightShadow = class extends LightShadow {
    constructor() {
      super(new PerspectiveCamera(90, 1, 0.5, 500));
      this._frameExtents = new Vector2(4, 2);
      this._viewportCount = 6;
      this._viewports = [
        new Vector4(2, 1, 1, 1),
        new Vector4(0, 1, 1, 1),
        new Vector4(3, 1, 1, 1),
        new Vector4(1, 1, 1, 1),
        new Vector4(3, 0, 1, 1),
        new Vector4(1, 0, 1, 1)
      ];
      this._cubeDirections = [
        new Vector3(1, 0, 0),
        new Vector3(-1, 0, 0),
        new Vector3(0, 0, 1),
        new Vector3(0, 0, -1),
        new Vector3(0, 1, 0),
        new Vector3(0, -1, 0)
      ];
      this._cubeUps = [
        new Vector3(0, 1, 0),
        new Vector3(0, 1, 0),
        new Vector3(0, 1, 0),
        new Vector3(0, 1, 0),
        new Vector3(0, 0, 1),
        new Vector3(0, 0, -1)
      ];
    }
    updateMatrices(light2, viewportIndex = 0) {
      const camera3 = this.camera;
      const shadowMatrix = this.matrix;
      const far = light2.distance || camera3.far;
      if (far !== camera3.far) {
        camera3.far = far;
        camera3.updateProjectionMatrix();
      }
      _lightPositionWorld.setFromMatrixPosition(light2.matrixWorld);
      camera3.position.copy(_lightPositionWorld);
      _lookTarget.copy(camera3.position);
      _lookTarget.add(this._cubeDirections[viewportIndex]);
      camera3.up.copy(this._cubeUps[viewportIndex]);
      camera3.lookAt(_lookTarget);
      camera3.updateMatrixWorld();
      shadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);
      _projScreenMatrix.multiplyMatrices(camera3.projectionMatrix, camera3.matrixWorldInverse);
      this._frustum.setFromProjectionMatrix(_projScreenMatrix);
    }
  };
  PointLightShadow.prototype.isPointLightShadow = true;
  var PointLight = class extends Light {
    constructor(color, intensity, distance = 0, decay = 1) {
      super(color, intensity);
      this.type = "PointLight";
      this.distance = distance;
      this.decay = decay;
      this.shadow = new PointLightShadow();
    }
    get power() {
      return this.intensity * 4 * Math.PI;
    }
    set power(power) {
      this.intensity = power / (4 * Math.PI);
    }
    dispose() {
      this.shadow.dispose();
    }
    copy(source) {
      super.copy(source);
      this.distance = source.distance;
      this.decay = source.decay;
      this.shadow = source.shadow.clone();
      return this;
    }
  };
  PointLight.prototype.isPointLight = true;
  var DirectionalLightShadow = class extends LightShadow {
    constructor() {
      super(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));
    }
  };
  DirectionalLightShadow.prototype.isDirectionalLightShadow = true;
  var DirectionalLight = class extends Light {
    constructor(color, intensity) {
      super(color, intensity);
      this.type = "DirectionalLight";
      this.position.copy(Object3D.DefaultUp);
      this.updateMatrix();
      this.target = new Object3D();
      this.shadow = new DirectionalLightShadow();
    }
    dispose() {
      this.shadow.dispose();
    }
    copy(source) {
      super.copy(source);
      this.target = source.target.clone();
      this.shadow = source.shadow.clone();
      return this;
    }
  };
  DirectionalLight.prototype.isDirectionalLight = true;
  var AmbientLight = class extends Light {
    constructor(color, intensity) {
      super(color, intensity);
      this.type = "AmbientLight";
    }
  };
  AmbientLight.prototype.isAmbientLight = true;
  var RectAreaLight = class extends Light {
    constructor(color, intensity, width2 = 10, height2 = 10) {
      super(color, intensity);
      this.type = "RectAreaLight";
      this.width = width2;
      this.height = height2;
    }
    get power() {
      return this.intensity * this.width * this.height * Math.PI;
    }
    set power(power) {
      this.intensity = power / (this.width * this.height * Math.PI);
    }
    copy(source) {
      super.copy(source);
      this.width = source.width;
      this.height = source.height;
      return this;
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      data.object.width = this.width;
      data.object.height = this.height;
      return data;
    }
  };
  RectAreaLight.prototype.isRectAreaLight = true;
  var SphericalHarmonics3 = class {
    constructor() {
      this.coefficients = [];
      for (let i2 = 0; i2 < 9; i2++) {
        this.coefficients.push(new Vector3());
      }
    }
    set(coefficients) {
      for (let i2 = 0; i2 < 9; i2++) {
        this.coefficients[i2].copy(coefficients[i2]);
      }
      return this;
    }
    zero() {
      for (let i2 = 0; i2 < 9; i2++) {
        this.coefficients[i2].set(0, 0, 0);
      }
      return this;
    }
    getAt(normal, target) {
      const x2 = normal.x, y2 = normal.y, z2 = normal.z;
      const coeff = this.coefficients;
      target.copy(coeff[0]).multiplyScalar(0.282095);
      target.addScaledVector(coeff[1], 0.488603 * y2);
      target.addScaledVector(coeff[2], 0.488603 * z2);
      target.addScaledVector(coeff[3], 0.488603 * x2);
      target.addScaledVector(coeff[4], 1.092548 * (x2 * y2));
      target.addScaledVector(coeff[5], 1.092548 * (y2 * z2));
      target.addScaledVector(coeff[6], 0.315392 * (3 * z2 * z2 - 1));
      target.addScaledVector(coeff[7], 1.092548 * (x2 * z2));
      target.addScaledVector(coeff[8], 0.546274 * (x2 * x2 - y2 * y2));
      return target;
    }
    getIrradianceAt(normal, target) {
      const x2 = normal.x, y2 = normal.y, z2 = normal.z;
      const coeff = this.coefficients;
      target.copy(coeff[0]).multiplyScalar(0.886227);
      target.addScaledVector(coeff[1], 2 * 0.511664 * y2);
      target.addScaledVector(coeff[2], 2 * 0.511664 * z2);
      target.addScaledVector(coeff[3], 2 * 0.511664 * x2);
      target.addScaledVector(coeff[4], 2 * 0.429043 * x2 * y2);
      target.addScaledVector(coeff[5], 2 * 0.429043 * y2 * z2);
      target.addScaledVector(coeff[6], 0.743125 * z2 * z2 - 0.247708);
      target.addScaledVector(coeff[7], 2 * 0.429043 * x2 * z2);
      target.addScaledVector(coeff[8], 0.429043 * (x2 * x2 - y2 * y2));
      return target;
    }
    add(sh) {
      for (let i2 = 0; i2 < 9; i2++) {
        this.coefficients[i2].add(sh.coefficients[i2]);
      }
      return this;
    }
    addScaledSH(sh, s3) {
      for (let i2 = 0; i2 < 9; i2++) {
        this.coefficients[i2].addScaledVector(sh.coefficients[i2], s3);
      }
      return this;
    }
    scale(s3) {
      for (let i2 = 0; i2 < 9; i2++) {
        this.coefficients[i2].multiplyScalar(s3);
      }
      return this;
    }
    lerp(sh, alpha) {
      for (let i2 = 0; i2 < 9; i2++) {
        this.coefficients[i2].lerp(sh.coefficients[i2], alpha);
      }
      return this;
    }
    equals(sh) {
      for (let i2 = 0; i2 < 9; i2++) {
        if (!this.coefficients[i2].equals(sh.coefficients[i2])) {
          return false;
        }
      }
      return true;
    }
    copy(sh) {
      return this.set(sh.coefficients);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    fromArray(array, offset = 0) {
      const coefficients = this.coefficients;
      for (let i2 = 0; i2 < 9; i2++) {
        coefficients[i2].fromArray(array, offset + i2 * 3);
      }
      return this;
    }
    toArray(array = [], offset = 0) {
      const coefficients = this.coefficients;
      for (let i2 = 0; i2 < 9; i2++) {
        coefficients[i2].toArray(array, offset + i2 * 3);
      }
      return array;
    }
    static getBasisAt(normal, shBasis) {
      const x2 = normal.x, y2 = normal.y, z2 = normal.z;
      shBasis[0] = 0.282095;
      shBasis[1] = 0.488603 * y2;
      shBasis[2] = 0.488603 * z2;
      shBasis[3] = 0.488603 * x2;
      shBasis[4] = 1.092548 * x2 * y2;
      shBasis[5] = 1.092548 * y2 * z2;
      shBasis[6] = 0.315392 * (3 * z2 * z2 - 1);
      shBasis[7] = 1.092548 * x2 * z2;
      shBasis[8] = 0.546274 * (x2 * x2 - y2 * y2);
    }
  };
  SphericalHarmonics3.prototype.isSphericalHarmonics3 = true;
  var LightProbe = class extends Light {
    constructor(sh = new SphericalHarmonics3(), intensity = 1) {
      super(void 0, intensity);
      this.sh = sh;
    }
    copy(source) {
      super.copy(source);
      this.sh.copy(source.sh);
      return this;
    }
    fromJSON(json) {
      this.intensity = json.intensity;
      this.sh.fromArray(json.sh);
      return this;
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      data.object.sh = this.sh.toArray();
      return data;
    }
  };
  LightProbe.prototype.isLightProbe = true;
  var LoaderUtils = class {
    static decodeText(array) {
      if (typeof TextDecoder !== "undefined") {
        return new TextDecoder().decode(array);
      }
      let s3 = "";
      for (let i2 = 0, il = array.length; i2 < il; i2++) {
        s3 += String.fromCharCode(array[i2]);
      }
      try {
        return decodeURIComponent(escape(s3));
      } catch (e) {
        return s3;
      }
    }
    static extractUrlBase(url) {
      const index = url.lastIndexOf("/");
      if (index === -1)
        return "./";
      return url.substr(0, index + 1);
    }
    static resolveURL(url, path) {
      if (typeof url !== "string" || url === "")
        return "";
      if (/^https?:\/\//i.test(path) && /^\//.test(url)) {
        path = path.replace(/(^https?:\/\/[^\/]+).*/i, "$1");
      }
      if (/^(https?:)?\/\//i.test(url))
        return url;
      if (/^data:.*,.*$/i.test(url))
        return url;
      if (/^blob:.*$/i.test(url))
        return url;
      return path + url;
    }
  };
  var InstancedBufferGeometry = class extends BufferGeometry {
    constructor() {
      super();
      this.type = "InstancedBufferGeometry";
      this.instanceCount = Infinity;
    }
    copy(source) {
      super.copy(source);
      this.instanceCount = source.instanceCount;
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    toJSON() {
      const data = super.toJSON(this);
      data.instanceCount = this.instanceCount;
      data.isInstancedBufferGeometry = true;
      return data;
    }
  };
  InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;
  var ImageBitmapLoader = class extends Loader {
    constructor(manager) {
      super(manager);
      if (typeof createImageBitmap === "undefined") {
        console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.");
      }
      if (typeof fetch === "undefined") {
        console.warn("THREE.ImageBitmapLoader: fetch() not supported.");
      }
      this.options = { premultiplyAlpha: "none" };
    }
    setOptions(options) {
      this.options = options;
      return this;
    }
    load(url, onLoad, onProgress, onError) {
      if (url === void 0)
        url = "";
      if (this.path !== void 0)
        url = this.path + url;
      url = this.manager.resolveURL(url);
      const scope = this;
      const cached = Cache.get(url);
      if (cached !== void 0) {
        scope.manager.itemStart(url);
        setTimeout(function() {
          if (onLoad)
            onLoad(cached);
          scope.manager.itemEnd(url);
        }, 0);
        return cached;
      }
      const fetchOptions = {};
      fetchOptions.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include";
      fetchOptions.headers = this.requestHeader;
      fetch(url, fetchOptions).then(function(res) {
        return res.blob();
      }).then(function(blob) {
        return createImageBitmap(blob, Object.assign(scope.options, { colorSpaceConversion: "none" }));
      }).then(function(imageBitmap) {
        Cache.add(url, imageBitmap);
        if (onLoad)
          onLoad(imageBitmap);
        scope.manager.itemEnd(url);
      }).catch(function(e) {
        if (onError)
          onError(e);
        scope.manager.itemError(url);
        scope.manager.itemEnd(url);
      });
      scope.manager.itemStart(url);
    }
  };
  ImageBitmapLoader.prototype.isImageBitmapLoader = true;
  var _context;
  var AudioContext = {
    getContext: function() {
      if (_context === void 0) {
        _context = new (window.AudioContext || window.webkitAudioContext)();
      }
      return _context;
    },
    setContext: function(value) {
      _context = value;
    }
  };
  var AudioLoader = class extends Loader {
    constructor(manager) {
      super(manager);
    }
    load(url, onLoad, onProgress, onError) {
      const scope = this;
      const loader = new FileLoader(this.manager);
      loader.setResponseType("arraybuffer");
      loader.setPath(this.path);
      loader.setRequestHeader(this.requestHeader);
      loader.setWithCredentials(this.withCredentials);
      loader.load(url, function(buffer) {
        try {
          const bufferCopy = buffer.slice(0);
          const context = AudioContext.getContext();
          context.decodeAudioData(bufferCopy, function(audioBuffer) {
            onLoad(audioBuffer);
          });
        } catch (e) {
          if (onError) {
            onError(e);
          } else {
            console.error(e);
          }
          scope.manager.itemError(url);
        }
      }, onProgress, onError);
    }
  };
  var HemisphereLightProbe = class extends LightProbe {
    constructor(skyColor, groundColor, intensity = 1) {
      super(void 0, intensity);
      const color1 = new Color().set(skyColor);
      const color2 = new Color().set(groundColor);
      const sky2 = new Vector3(color1.r, color1.g, color1.b);
      const ground = new Vector3(color2.r, color2.g, color2.b);
      const c0 = Math.sqrt(Math.PI);
      const c1 = c0 * Math.sqrt(0.75);
      this.sh.coefficients[0].copy(sky2).add(ground).multiplyScalar(c0);
      this.sh.coefficients[1].copy(sky2).sub(ground).multiplyScalar(c1);
    }
  };
  HemisphereLightProbe.prototype.isHemisphereLightProbe = true;
  var AmbientLightProbe = class extends LightProbe {
    constructor(color, intensity = 1) {
      super(void 0, intensity);
      const color1 = new Color().set(color);
      this.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));
    }
  };
  AmbientLightProbe.prototype.isAmbientLightProbe = true;
  var Audio = class extends Object3D {
    constructor(listener) {
      super();
      this.type = "Audio";
      this.listener = listener;
      this.context = listener.context;
      this.gain = this.context.createGain();
      this.gain.connect(listener.getInput());
      this.autoplay = false;
      this.buffer = null;
      this.detune = 0;
      this.loop = false;
      this.loopStart = 0;
      this.loopEnd = 0;
      this.offset = 0;
      this.duration = void 0;
      this.playbackRate = 1;
      this.isPlaying = false;
      this.hasPlaybackControl = true;
      this.source = null;
      this.sourceType = "empty";
      this._startedAt = 0;
      this._progress = 0;
      this._connected = false;
      this.filters = [];
    }
    getOutput() {
      return this.gain;
    }
    setNodeSource(audioNode) {
      this.hasPlaybackControl = false;
      this.sourceType = "audioNode";
      this.source = audioNode;
      this.connect();
      return this;
    }
    setMediaElementSource(mediaElement) {
      this.hasPlaybackControl = false;
      this.sourceType = "mediaNode";
      this.source = this.context.createMediaElementSource(mediaElement);
      this.connect();
      return this;
    }
    setMediaStreamSource(mediaStream) {
      this.hasPlaybackControl = false;
      this.sourceType = "mediaStreamNode";
      this.source = this.context.createMediaStreamSource(mediaStream);
      this.connect();
      return this;
    }
    setBuffer(audioBuffer) {
      this.buffer = audioBuffer;
      this.sourceType = "buffer";
      if (this.autoplay)
        this.play();
      return this;
    }
    play(delay = 0) {
      if (this.isPlaying === true) {
        console.warn("THREE.Audio: Audio is already playing.");
        return;
      }
      if (this.hasPlaybackControl === false) {
        console.warn("THREE.Audio: this Audio has no playback control.");
        return;
      }
      this._startedAt = this.context.currentTime + delay;
      const source = this.context.createBufferSource();
      source.buffer = this.buffer;
      source.loop = this.loop;
      source.loopStart = this.loopStart;
      source.loopEnd = this.loopEnd;
      source.onended = this.onEnded.bind(this);
      source.start(this._startedAt, this._progress + this.offset, this.duration);
      this.isPlaying = true;
      this.source = source;
      this.setDetune(this.detune);
      this.setPlaybackRate(this.playbackRate);
      return this.connect();
    }
    pause() {
      if (this.hasPlaybackControl === false) {
        console.warn("THREE.Audio: this Audio has no playback control.");
        return;
      }
      if (this.isPlaying === true) {
        this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;
        if (this.loop === true) {
          this._progress = this._progress % (this.duration || this.buffer.duration);
        }
        this.source.stop();
        this.source.onended = null;
        this.isPlaying = false;
      }
      return this;
    }
    stop() {
      if (this.hasPlaybackControl === false) {
        console.warn("THREE.Audio: this Audio has no playback control.");
        return;
      }
      this._progress = 0;
      this.source.stop();
      this.source.onended = null;
      this.isPlaying = false;
      return this;
    }
    connect() {
      if (this.filters.length > 0) {
        this.source.connect(this.filters[0]);
        for (let i2 = 1, l2 = this.filters.length; i2 < l2; i2++) {
          this.filters[i2 - 1].connect(this.filters[i2]);
        }
        this.filters[this.filters.length - 1].connect(this.getOutput());
      } else {
        this.source.connect(this.getOutput());
      }
      this._connected = true;
      return this;
    }
    disconnect() {
      if (this.filters.length > 0) {
        this.source.disconnect(this.filters[0]);
        for (let i2 = 1, l2 = this.filters.length; i2 < l2; i2++) {
          this.filters[i2 - 1].disconnect(this.filters[i2]);
        }
        this.filters[this.filters.length - 1].disconnect(this.getOutput());
      } else {
        this.source.disconnect(this.getOutput());
      }
      this._connected = false;
      return this;
    }
    getFilters() {
      return this.filters;
    }
    setFilters(value) {
      if (!value)
        value = [];
      if (this._connected === true) {
        this.disconnect();
        this.filters = value.slice();
        this.connect();
      } else {
        this.filters = value.slice();
      }
      return this;
    }
    setDetune(value) {
      this.detune = value;
      if (this.source.detune === void 0)
        return;
      if (this.isPlaying === true) {
        this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);
      }
      return this;
    }
    getDetune() {
      return this.detune;
    }
    getFilter() {
      return this.getFilters()[0];
    }
    setFilter(filter) {
      return this.setFilters(filter ? [filter] : []);
    }
    setPlaybackRate(value) {
      if (this.hasPlaybackControl === false) {
        console.warn("THREE.Audio: this Audio has no playback control.");
        return;
      }
      this.playbackRate = value;
      if (this.isPlaying === true) {
        this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);
      }
      return this;
    }
    getPlaybackRate() {
      return this.playbackRate;
    }
    onEnded() {
      this.isPlaying = false;
    }
    getLoop() {
      if (this.hasPlaybackControl === false) {
        console.warn("THREE.Audio: this Audio has no playback control.");
        return false;
      }
      return this.loop;
    }
    setLoop(value) {
      if (this.hasPlaybackControl === false) {
        console.warn("THREE.Audio: this Audio has no playback control.");
        return;
      }
      this.loop = value;
      if (this.isPlaying === true) {
        this.source.loop = this.loop;
      }
      return this;
    }
    setLoopStart(value) {
      this.loopStart = value;
      return this;
    }
    setLoopEnd(value) {
      this.loopEnd = value;
      return this;
    }
    getVolume() {
      return this.gain.gain.value;
    }
    setVolume(value) {
      this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
      return this;
    }
  };
  var AudioAnalyser = class {
    constructor(audio, fftSize = 2048) {
      this.analyser = audio.context.createAnalyser();
      this.analyser.fftSize = fftSize;
      this.data = new Uint8Array(this.analyser.frequencyBinCount);
      audio.getOutput().connect(this.analyser);
    }
    getFrequencyData() {
      this.analyser.getByteFrequencyData(this.data);
      return this.data;
    }
    getAverageFrequency() {
      let value = 0;
      const data = this.getFrequencyData();
      for (let i2 = 0; i2 < data.length; i2++) {
        value += data[i2];
      }
      return value / data.length;
    }
  };
  var PropertyMixer = class {
    constructor(binding, typeName, valueSize) {
      this.binding = binding;
      this.valueSize = valueSize;
      let mixFunction, mixFunctionAdditive, setIdentity;
      switch (typeName) {
        case "quaternion":
          mixFunction = this._slerp;
          mixFunctionAdditive = this._slerpAdditive;
          setIdentity = this._setAdditiveIdentityQuaternion;
          this.buffer = new Float64Array(valueSize * 6);
          this._workIndex = 5;
          break;
        case "string":
        case "bool":
          mixFunction = this._select;
          mixFunctionAdditive = this._select;
          setIdentity = this._setAdditiveIdentityOther;
          this.buffer = new Array(valueSize * 5);
          break;
        default:
          mixFunction = this._lerp;
          mixFunctionAdditive = this._lerpAdditive;
          setIdentity = this._setAdditiveIdentityNumeric;
          this.buffer = new Float64Array(valueSize * 5);
      }
      this._mixBufferRegion = mixFunction;
      this._mixBufferRegionAdditive = mixFunctionAdditive;
      this._setIdentity = setIdentity;
      this._origIndex = 3;
      this._addIndex = 4;
      this.cumulativeWeight = 0;
      this.cumulativeWeightAdditive = 0;
      this.useCount = 0;
      this.referenceCount = 0;
    }
    accumulate(accuIndex, weight) {
      const buffer = this.buffer, stride = this.valueSize, offset = accuIndex * stride + stride;
      let currentWeight = this.cumulativeWeight;
      if (currentWeight === 0) {
        for (let i2 = 0; i2 !== stride; ++i2) {
          buffer[offset + i2] = buffer[i2];
        }
        currentWeight = weight;
      } else {
        currentWeight += weight;
        const mix = weight / currentWeight;
        this._mixBufferRegion(buffer, offset, 0, mix, stride);
      }
      this.cumulativeWeight = currentWeight;
    }
    accumulateAdditive(weight) {
      const buffer = this.buffer, stride = this.valueSize, offset = stride * this._addIndex;
      if (this.cumulativeWeightAdditive === 0) {
        this._setIdentity();
      }
      this._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);
      this.cumulativeWeightAdditive += weight;
    }
    apply(accuIndex) {
      const stride = this.valueSize, buffer = this.buffer, offset = accuIndex * stride + stride, weight = this.cumulativeWeight, weightAdditive = this.cumulativeWeightAdditive, binding = this.binding;
      this.cumulativeWeight = 0;
      this.cumulativeWeightAdditive = 0;
      if (weight < 1) {
        const originalValueOffset = stride * this._origIndex;
        this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);
      }
      if (weightAdditive > 0) {
        this._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);
      }
      for (let i2 = stride, e = stride + stride; i2 !== e; ++i2) {
        if (buffer[i2] !== buffer[i2 + stride]) {
          binding.setValue(buffer, offset);
          break;
        }
      }
    }
    saveOriginalState() {
      const binding = this.binding;
      const buffer = this.buffer, stride = this.valueSize, originalValueOffset = stride * this._origIndex;
      binding.getValue(buffer, originalValueOffset);
      for (let i2 = stride, e = originalValueOffset; i2 !== e; ++i2) {
        buffer[i2] = buffer[originalValueOffset + i2 % stride];
      }
      this._setIdentity();
      this.cumulativeWeight = 0;
      this.cumulativeWeightAdditive = 0;
    }
    restoreOriginalState() {
      const originalValueOffset = this.valueSize * 3;
      this.binding.setValue(this.buffer, originalValueOffset);
    }
    _setAdditiveIdentityNumeric() {
      const startIndex = this._addIndex * this.valueSize;
      const endIndex = startIndex + this.valueSize;
      for (let i2 = startIndex; i2 < endIndex; i2++) {
        this.buffer[i2] = 0;
      }
    }
    _setAdditiveIdentityQuaternion() {
      this._setAdditiveIdentityNumeric();
      this.buffer[this._addIndex * this.valueSize + 3] = 1;
    }
    _setAdditiveIdentityOther() {
      const startIndex = this._origIndex * this.valueSize;
      const targetIndex = this._addIndex * this.valueSize;
      for (let i2 = 0; i2 < this.valueSize; i2++) {
        this.buffer[targetIndex + i2] = this.buffer[startIndex + i2];
      }
    }
    _select(buffer, dstOffset, srcOffset, t, stride) {
      if (t >= 0.5) {
        for (let i2 = 0; i2 !== stride; ++i2) {
          buffer[dstOffset + i2] = buffer[srcOffset + i2];
        }
      }
    }
    _slerp(buffer, dstOffset, srcOffset, t) {
      Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);
    }
    _slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {
      const workOffset = this._workIndex * stride;
      Quaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset);
      Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);
    }
    _lerp(buffer, dstOffset, srcOffset, t, stride) {
      const s3 = 1 - t;
      for (let i2 = 0; i2 !== stride; ++i2) {
        const j2 = dstOffset + i2;
        buffer[j2] = buffer[j2] * s3 + buffer[srcOffset + i2] * t;
      }
    }
    _lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {
      for (let i2 = 0; i2 !== stride; ++i2) {
        const j2 = dstOffset + i2;
        buffer[j2] = buffer[j2] + buffer[srcOffset + i2] * t;
      }
    }
  };
  var _RESERVED_CHARS_RE = "\\[\\]\\.:\\/";
  var _reservedRe = new RegExp("[" + _RESERVED_CHARS_RE + "]", "g");
  var _wordChar = "[^" + _RESERVED_CHARS_RE + "]";
  var _wordCharOrDot = "[^" + _RESERVED_CHARS_RE.replace("\\.", "") + "]";
  var _directoryRe = /((?:WC+[\/:])*)/.source.replace("WC", _wordChar);
  var _nodeRe = /(WCOD+)?/.source.replace("WCOD", _wordCharOrDot);
  var _objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", _wordChar);
  var _propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", _wordChar);
  var _trackRe = new RegExp("^" + _directoryRe + _nodeRe + _objectRe + _propertyRe + "$");
  var _supportedObjectNames = ["material", "materials", "bones"];
  var Composite = class {
    constructor(targetGroup, path, optionalParsedPath) {
      const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);
      this._targetGroup = targetGroup;
      this._bindings = targetGroup.subscribe_(path, parsedPath);
    }
    getValue(array, offset) {
      this.bind();
      const firstValidIndex = this._targetGroup.nCachedObjects_, binding = this._bindings[firstValidIndex];
      if (binding !== void 0)
        binding.getValue(array, offset);
    }
    setValue(array, offset) {
      const bindings = this._bindings;
      for (let i2 = this._targetGroup.nCachedObjects_, n2 = bindings.length; i2 !== n2; ++i2) {
        bindings[i2].setValue(array, offset);
      }
    }
    bind() {
      const bindings = this._bindings;
      for (let i2 = this._targetGroup.nCachedObjects_, n2 = bindings.length; i2 !== n2; ++i2) {
        bindings[i2].bind();
      }
    }
    unbind() {
      const bindings = this._bindings;
      for (let i2 = this._targetGroup.nCachedObjects_, n2 = bindings.length; i2 !== n2; ++i2) {
        bindings[i2].unbind();
      }
    }
  };
  var PropertyBinding = class {
    constructor(rootNode, path, parsedPath) {
      this.path = path;
      this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);
      this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;
      this.rootNode = rootNode;
      this.getValue = this._getValue_unbound;
      this.setValue = this._setValue_unbound;
    }
    static create(root, path, parsedPath) {
      if (!(root && root.isAnimationObjectGroup)) {
        return new PropertyBinding(root, path, parsedPath);
      } else {
        return new PropertyBinding.Composite(root, path, parsedPath);
      }
    }
    static sanitizeNodeName(name) {
      return name.replace(/\s/g, "_").replace(_reservedRe, "");
    }
    static parseTrackName(trackName) {
      const matches = _trackRe.exec(trackName);
      if (!matches) {
        throw new Error("PropertyBinding: Cannot parse trackName: " + trackName);
      }
      const results = {
        nodeName: matches[2],
        objectName: matches[3],
        objectIndex: matches[4],
        propertyName: matches[5],
        propertyIndex: matches[6]
      };
      const lastDot = results.nodeName && results.nodeName.lastIndexOf(".");
      if (lastDot !== void 0 && lastDot !== -1) {
        const objectName = results.nodeName.substring(lastDot + 1);
        if (_supportedObjectNames.indexOf(objectName) !== -1) {
          results.nodeName = results.nodeName.substring(0, lastDot);
          results.objectName = objectName;
        }
      }
      if (results.propertyName === null || results.propertyName.length === 0) {
        throw new Error("PropertyBinding: can not parse propertyName from trackName: " + trackName);
      }
      return results;
    }
    static findNode(root, nodeName) {
      if (!nodeName || nodeName === "" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {
        return root;
      }
      if (root.skeleton) {
        const bone = root.skeleton.getBoneByName(nodeName);
        if (bone !== void 0) {
          return bone;
        }
      }
      if (root.children) {
        const searchNodeSubtree = function(children2) {
          for (let i2 = 0; i2 < children2.length; i2++) {
            const childNode = children2[i2];
            if (childNode.name === nodeName || childNode.uuid === nodeName) {
              return childNode;
            }
            const result = searchNodeSubtree(childNode.children);
            if (result)
              return result;
          }
          return null;
        };
        const subTreeNode = searchNodeSubtree(root.children);
        if (subTreeNode) {
          return subTreeNode;
        }
      }
      return null;
    }
    _getValue_unavailable() {
    }
    _setValue_unavailable() {
    }
    _getValue_direct(buffer, offset) {
      buffer[offset] = this.targetObject[this.propertyName];
    }
    _getValue_array(buffer, offset) {
      const source = this.resolvedProperty;
      for (let i2 = 0, n2 = source.length; i2 !== n2; ++i2) {
        buffer[offset++] = source[i2];
      }
    }
    _getValue_arrayElement(buffer, offset) {
      buffer[offset] = this.resolvedProperty[this.propertyIndex];
    }
    _getValue_toArray(buffer, offset) {
      this.resolvedProperty.toArray(buffer, offset);
    }
    _setValue_direct(buffer, offset) {
      this.targetObject[this.propertyName] = buffer[offset];
    }
    _setValue_direct_setNeedsUpdate(buffer, offset) {
      this.targetObject[this.propertyName] = buffer[offset];
      this.targetObject.needsUpdate = true;
    }
    _setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {
      this.targetObject[this.propertyName] = buffer[offset];
      this.targetObject.matrixWorldNeedsUpdate = true;
    }
    _setValue_array(buffer, offset) {
      const dest = this.resolvedProperty;
      for (let i2 = 0, n2 = dest.length; i2 !== n2; ++i2) {
        dest[i2] = buffer[offset++];
      }
    }
    _setValue_array_setNeedsUpdate(buffer, offset) {
      const dest = this.resolvedProperty;
      for (let i2 = 0, n2 = dest.length; i2 !== n2; ++i2) {
        dest[i2] = buffer[offset++];
      }
      this.targetObject.needsUpdate = true;
    }
    _setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {
      const dest = this.resolvedProperty;
      for (let i2 = 0, n2 = dest.length; i2 !== n2; ++i2) {
        dest[i2] = buffer[offset++];
      }
      this.targetObject.matrixWorldNeedsUpdate = true;
    }
    _setValue_arrayElement(buffer, offset) {
      this.resolvedProperty[this.propertyIndex] = buffer[offset];
    }
    _setValue_arrayElement_setNeedsUpdate(buffer, offset) {
      this.resolvedProperty[this.propertyIndex] = buffer[offset];
      this.targetObject.needsUpdate = true;
    }
    _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {
      this.resolvedProperty[this.propertyIndex] = buffer[offset];
      this.targetObject.matrixWorldNeedsUpdate = true;
    }
    _setValue_fromArray(buffer, offset) {
      this.resolvedProperty.fromArray(buffer, offset);
    }
    _setValue_fromArray_setNeedsUpdate(buffer, offset) {
      this.resolvedProperty.fromArray(buffer, offset);
      this.targetObject.needsUpdate = true;
    }
    _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {
      this.resolvedProperty.fromArray(buffer, offset);
      this.targetObject.matrixWorldNeedsUpdate = true;
    }
    _getValue_unbound(targetArray, offset) {
      this.bind();
      this.getValue(targetArray, offset);
    }
    _setValue_unbound(sourceArray, offset) {
      this.bind();
      this.setValue(sourceArray, offset);
    }
    bind() {
      let targetObject = this.node;
      const parsedPath = this.parsedPath;
      const objectName = parsedPath.objectName;
      const propertyName = parsedPath.propertyName;
      let propertyIndex = parsedPath.propertyIndex;
      if (!targetObject) {
        targetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;
        this.node = targetObject;
      }
      this.getValue = this._getValue_unavailable;
      this.setValue = this._setValue_unavailable;
      if (!targetObject) {
        console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
        return;
      }
      if (objectName) {
        let objectIndex = parsedPath.objectIndex;
        switch (objectName) {
          case "materials":
            if (!targetObject.material) {
              console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
              return;
            }
            if (!targetObject.material.materials) {
              console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
              return;
            }
            targetObject = targetObject.material.materials;
            break;
          case "bones":
            if (!targetObject.skeleton) {
              console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
              return;
            }
            targetObject = targetObject.skeleton.bones;
            for (let i2 = 0; i2 < targetObject.length; i2++) {
              if (targetObject[i2].name === objectIndex) {
                objectIndex = i2;
                break;
              }
            }
            break;
          default:
            if (targetObject[objectName] === void 0) {
              console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
              return;
            }
            targetObject = targetObject[objectName];
        }
        if (objectIndex !== void 0) {
          if (targetObject[objectIndex] === void 0) {
            console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, targetObject);
            return;
          }
          targetObject = targetObject[objectIndex];
        }
      }
      const nodeProperty = targetObject[propertyName];
      if (nodeProperty === void 0) {
        const nodeName = parsedPath.nodeName;
        console.error("THREE.PropertyBinding: Trying to update property for track: " + nodeName + "." + propertyName + " but it wasn't found.", targetObject);
        return;
      }
      let versioning = this.Versioning.None;
      this.targetObject = targetObject;
      if (targetObject.needsUpdate !== void 0) {
        versioning = this.Versioning.NeedsUpdate;
      } else if (targetObject.matrixWorldNeedsUpdate !== void 0) {
        versioning = this.Versioning.MatrixWorldNeedsUpdate;
      }
      let bindingType = this.BindingType.Direct;
      if (propertyIndex !== void 0) {
        if (propertyName === "morphTargetInfluences") {
          if (!targetObject.geometry) {
            console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
            return;
          }
          if (targetObject.geometry.isBufferGeometry) {
            if (!targetObject.geometry.morphAttributes) {
              console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
              return;
            }
            if (targetObject.morphTargetDictionary[propertyIndex] !== void 0) {
              propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
            }
          } else {
            console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.", this);
            return;
          }
        }
        bindingType = this.BindingType.ArrayElement;
        this.resolvedProperty = nodeProperty;
        this.propertyIndex = propertyIndex;
      } else if (nodeProperty.fromArray !== void 0 && nodeProperty.toArray !== void 0) {
        bindingType = this.BindingType.HasFromToArray;
        this.resolvedProperty = nodeProperty;
      } else if (Array.isArray(nodeProperty)) {
        bindingType = this.BindingType.EntireArray;
        this.resolvedProperty = nodeProperty;
      } else {
        this.propertyName = propertyName;
      }
      this.getValue = this.GetterByBindingType[bindingType];
      this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
    }
    unbind() {
      this.node = null;
      this.getValue = this._getValue_unbound;
      this.setValue = this._setValue_unbound;
    }
  };
  PropertyBinding.Composite = Composite;
  PropertyBinding.prototype.BindingType = {
    Direct: 0,
    EntireArray: 1,
    ArrayElement: 2,
    HasFromToArray: 3
  };
  PropertyBinding.prototype.Versioning = {
    None: 0,
    NeedsUpdate: 1,
    MatrixWorldNeedsUpdate: 2
  };
  PropertyBinding.prototype.GetterByBindingType = [
    PropertyBinding.prototype._getValue_direct,
    PropertyBinding.prototype._getValue_array,
    PropertyBinding.prototype._getValue_arrayElement,
    PropertyBinding.prototype._getValue_toArray
  ];
  PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [
    [
      PropertyBinding.prototype._setValue_direct,
      PropertyBinding.prototype._setValue_direct_setNeedsUpdate,
      PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate
    ],
    [
      PropertyBinding.prototype._setValue_array,
      PropertyBinding.prototype._setValue_array_setNeedsUpdate,
      PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate
    ],
    [
      PropertyBinding.prototype._setValue_arrayElement,
      PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,
      PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
    ],
    [
      PropertyBinding.prototype._setValue_fromArray,
      PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,
      PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
    ]
  ];
  var AnimationObjectGroup = class {
    constructor() {
      this.uuid = generateUUID();
      this._objects = Array.prototype.slice.call(arguments);
      this.nCachedObjects_ = 0;
      const indices = {};
      this._indicesByUUID = indices;
      for (let i2 = 0, n2 = arguments.length; i2 !== n2; ++i2) {
        indices[arguments[i2].uuid] = i2;
      }
      this._paths = [];
      this._parsedPaths = [];
      this._bindings = [];
      this._bindingsIndicesByPath = {};
      const scope = this;
      this.stats = {
        objects: {
          get total() {
            return scope._objects.length;
          },
          get inUse() {
            return this.total - scope.nCachedObjects_;
          }
        },
        get bindingsPerObject() {
          return scope._bindings.length;
        }
      };
    }
    add() {
      const objects = this._objects, indicesByUUID = this._indicesByUUID, paths2 = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, nBindings = bindings.length;
      let knownObject = void 0, nObjects = objects.length, nCachedObjects = this.nCachedObjects_;
      for (let i2 = 0, n2 = arguments.length; i2 !== n2; ++i2) {
        const object = arguments[i2], uuid = object.uuid;
        let index = indicesByUUID[uuid];
        if (index === void 0) {
          index = nObjects++;
          indicesByUUID[uuid] = index;
          objects.push(object);
          for (let j2 = 0, m2 = nBindings; j2 !== m2; ++j2) {
            bindings[j2].push(new PropertyBinding(object, paths2[j2], parsedPaths[j2]));
          }
        } else if (index < nCachedObjects) {
          knownObject = objects[index];
          const firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex];
          indicesByUUID[lastCachedObject.uuid] = index;
          objects[index] = lastCachedObject;
          indicesByUUID[uuid] = firstActiveIndex;
          objects[firstActiveIndex] = object;
          for (let j2 = 0, m2 = nBindings; j2 !== m2; ++j2) {
            const bindingsForPath = bindings[j2], lastCached = bindingsForPath[firstActiveIndex];
            let binding = bindingsForPath[index];
            bindingsForPath[index] = lastCached;
            if (binding === void 0) {
              binding = new PropertyBinding(object, paths2[j2], parsedPaths[j2]);
            }
            bindingsForPath[firstActiveIndex] = binding;
          }
        } else if (objects[index] !== knownObject) {
          console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
        }
      }
      this.nCachedObjects_ = nCachedObjects;
    }
    remove() {
      const objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
      let nCachedObjects = this.nCachedObjects_;
      for (let i2 = 0, n2 = arguments.length; i2 !== n2; ++i2) {
        const object = arguments[i2], uuid = object.uuid, index = indicesByUUID[uuid];
        if (index !== void 0 && index >= nCachedObjects) {
          const lastCachedIndex = nCachedObjects++, firstActiveObject = objects[lastCachedIndex];
          indicesByUUID[firstActiveObject.uuid] = index;
          objects[index] = firstActiveObject;
          indicesByUUID[uuid] = lastCachedIndex;
          objects[lastCachedIndex] = object;
          for (let j2 = 0, m2 = nBindings; j2 !== m2; ++j2) {
            const bindingsForPath = bindings[j2], firstActive = bindingsForPath[lastCachedIndex], binding = bindingsForPath[index];
            bindingsForPath[index] = firstActive;
            bindingsForPath[lastCachedIndex] = binding;
          }
        }
      }
      this.nCachedObjects_ = nCachedObjects;
    }
    uncache() {
      const objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
      let nCachedObjects = this.nCachedObjects_, nObjects = objects.length;
      for (let i2 = 0, n2 = arguments.length; i2 !== n2; ++i2) {
        const object = arguments[i2], uuid = object.uuid, index = indicesByUUID[uuid];
        if (index !== void 0) {
          delete indicesByUUID[uuid];
          if (index < nCachedObjects) {
            const firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex], lastIndex = --nObjects, lastObject = objects[lastIndex];
            indicesByUUID[lastCachedObject.uuid] = index;
            objects[index] = lastCachedObject;
            indicesByUUID[lastObject.uuid] = firstActiveIndex;
            objects[firstActiveIndex] = lastObject;
            objects.pop();
            for (let j2 = 0, m2 = nBindings; j2 !== m2; ++j2) {
              const bindingsForPath = bindings[j2], lastCached = bindingsForPath[firstActiveIndex], last = bindingsForPath[lastIndex];
              bindingsForPath[index] = lastCached;
              bindingsForPath[firstActiveIndex] = last;
              bindingsForPath.pop();
            }
          } else {
            const lastIndex = --nObjects, lastObject = objects[lastIndex];
            if (lastIndex > 0) {
              indicesByUUID[lastObject.uuid] = index;
            }
            objects[index] = lastObject;
            objects.pop();
            for (let j2 = 0, m2 = nBindings; j2 !== m2; ++j2) {
              const bindingsForPath = bindings[j2];
              bindingsForPath[index] = bindingsForPath[lastIndex];
              bindingsForPath.pop();
            }
          }
        }
      }
      this.nCachedObjects_ = nCachedObjects;
    }
    subscribe_(path, parsedPath) {
      const indicesByPath = this._bindingsIndicesByPath;
      let index = indicesByPath[path];
      const bindings = this._bindings;
      if (index !== void 0)
        return bindings[index];
      const paths2 = this._paths, parsedPaths = this._parsedPaths, objects = this._objects, nObjects = objects.length, nCachedObjects = this.nCachedObjects_, bindingsForPath = new Array(nObjects);
      index = bindings.length;
      indicesByPath[path] = index;
      paths2.push(path);
      parsedPaths.push(parsedPath);
      bindings.push(bindingsForPath);
      for (let i2 = nCachedObjects, n2 = objects.length; i2 !== n2; ++i2) {
        const object = objects[i2];
        bindingsForPath[i2] = new PropertyBinding(object, path, parsedPath);
      }
      return bindingsForPath;
    }
    unsubscribe_(path) {
      const indicesByPath = this._bindingsIndicesByPath, index = indicesByPath[path];
      if (index !== void 0) {
        const paths2 = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, lastBindingsIndex = bindings.length - 1, lastBindings = bindings[lastBindingsIndex], lastBindingsPath = path[lastBindingsIndex];
        indicesByPath[lastBindingsPath] = index;
        bindings[index] = lastBindings;
        bindings.pop();
        parsedPaths[index] = parsedPaths[lastBindingsIndex];
        parsedPaths.pop();
        paths2[index] = paths2[lastBindingsIndex];
        paths2.pop();
      }
    }
  };
  AnimationObjectGroup.prototype.isAnimationObjectGroup = true;
  var AnimationAction = class {
    constructor(mixer, clip, localRoot = null, blendMode = clip.blendMode) {
      this._mixer = mixer;
      this._clip = clip;
      this._localRoot = localRoot;
      this.blendMode = blendMode;
      const tracks = clip.tracks, nTracks = tracks.length, interpolants = new Array(nTracks);
      const interpolantSettings = {
        endingStart: ZeroCurvatureEnding,
        endingEnd: ZeroCurvatureEnding
      };
      for (let i2 = 0; i2 !== nTracks; ++i2) {
        const interpolant = tracks[i2].createInterpolant(null);
        interpolants[i2] = interpolant;
        interpolant.settings = interpolantSettings;
      }
      this._interpolantSettings = interpolantSettings;
      this._interpolants = interpolants;
      this._propertyBindings = new Array(nTracks);
      this._cacheIndex = null;
      this._byClipCacheIndex = null;
      this._timeScaleInterpolant = null;
      this._weightInterpolant = null;
      this.loop = LoopRepeat;
      this._loopCount = -1;
      this._startTime = null;
      this.time = 0;
      this.timeScale = 1;
      this._effectiveTimeScale = 1;
      this.weight = 1;
      this._effectiveWeight = 1;
      this.repetitions = Infinity;
      this.paused = false;
      this.enabled = true;
      this.clampWhenFinished = false;
      this.zeroSlopeAtStart = true;
      this.zeroSlopeAtEnd = true;
    }
    play() {
      this._mixer._activateAction(this);
      return this;
    }
    stop() {
      this._mixer._deactivateAction(this);
      return this.reset();
    }
    reset() {
      this.paused = false;
      this.enabled = true;
      this.time = 0;
      this._loopCount = -1;
      this._startTime = null;
      return this.stopFading().stopWarping();
    }
    isRunning() {
      return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
    }
    isScheduled() {
      return this._mixer._isActiveAction(this);
    }
    startAt(time2) {
      this._startTime = time2;
      return this;
    }
    setLoop(mode, repetitions) {
      this.loop = mode;
      this.repetitions = repetitions;
      return this;
    }
    setEffectiveWeight(weight) {
      this.weight = weight;
      this._effectiveWeight = this.enabled ? weight : 0;
      return this.stopFading();
    }
    getEffectiveWeight() {
      return this._effectiveWeight;
    }
    fadeIn(duration) {
      return this._scheduleFading(duration, 0, 1);
    }
    fadeOut(duration) {
      return this._scheduleFading(duration, 1, 0);
    }
    crossFadeFrom(fadeOutAction, duration, warp) {
      fadeOutAction.fadeOut(duration);
      this.fadeIn(duration);
      if (warp) {
        const fadeInDuration = this._clip.duration, fadeOutDuration = fadeOutAction._clip.duration, startEndRatio = fadeOutDuration / fadeInDuration, endStartRatio = fadeInDuration / fadeOutDuration;
        fadeOutAction.warp(1, startEndRatio, duration);
        this.warp(endStartRatio, 1, duration);
      }
      return this;
    }
    crossFadeTo(fadeInAction, duration, warp) {
      return fadeInAction.crossFadeFrom(this, duration, warp);
    }
    stopFading() {
      const weightInterpolant = this._weightInterpolant;
      if (weightInterpolant !== null) {
        this._weightInterpolant = null;
        this._mixer._takeBackControlInterpolant(weightInterpolant);
      }
      return this;
    }
    setEffectiveTimeScale(timeScale) {
      this.timeScale = timeScale;
      this._effectiveTimeScale = this.paused ? 0 : timeScale;
      return this.stopWarping();
    }
    getEffectiveTimeScale() {
      return this._effectiveTimeScale;
    }
    setDuration(duration) {
      this.timeScale = this._clip.duration / duration;
      return this.stopWarping();
    }
    syncWith(action) {
      this.time = action.time;
      this.timeScale = action.timeScale;
      return this.stopWarping();
    }
    halt(duration) {
      return this.warp(this._effectiveTimeScale, 0, duration);
    }
    warp(startTimeScale, endTimeScale, duration) {
      const mixer = this._mixer, now = mixer.time, timeScale = this.timeScale;
      let interpolant = this._timeScaleInterpolant;
      if (interpolant === null) {
        interpolant = mixer._lendControlInterpolant();
        this._timeScaleInterpolant = interpolant;
      }
      const times = interpolant.parameterPositions, values = interpolant.sampleValues;
      times[0] = now;
      times[1] = now + duration;
      values[0] = startTimeScale / timeScale;
      values[1] = endTimeScale / timeScale;
      return this;
    }
    stopWarping() {
      const timeScaleInterpolant = this._timeScaleInterpolant;
      if (timeScaleInterpolant !== null) {
        this._timeScaleInterpolant = null;
        this._mixer._takeBackControlInterpolant(timeScaleInterpolant);
      }
      return this;
    }
    getMixer() {
      return this._mixer;
    }
    getClip() {
      return this._clip;
    }
    getRoot() {
      return this._localRoot || this._mixer._root;
    }
    _update(time2, deltaTime, timeDirection, accuIndex) {
      if (!this.enabled) {
        this._updateWeight(time2);
        return;
      }
      const startTime = this._startTime;
      if (startTime !== null) {
        const timeRunning = (time2 - startTime) * timeDirection;
        if (timeRunning < 0 || timeDirection === 0) {
          return;
        }
        this._startTime = null;
        deltaTime = timeDirection * timeRunning;
      }
      deltaTime *= this._updateTimeScale(time2);
      const clipTime = this._updateTime(deltaTime);
      const weight = this._updateWeight(time2);
      if (weight > 0) {
        const interpolants = this._interpolants;
        const propertyMixers = this._propertyBindings;
        switch (this.blendMode) {
          case AdditiveAnimationBlendMode:
            for (let j2 = 0, m2 = interpolants.length; j2 !== m2; ++j2) {
              interpolants[j2].evaluate(clipTime);
              propertyMixers[j2].accumulateAdditive(weight);
            }
            break;
          case NormalAnimationBlendMode:
          default:
            for (let j2 = 0, m2 = interpolants.length; j2 !== m2; ++j2) {
              interpolants[j2].evaluate(clipTime);
              propertyMixers[j2].accumulate(accuIndex, weight);
            }
        }
      }
    }
    _updateWeight(time2) {
      let weight = 0;
      if (this.enabled) {
        weight = this.weight;
        const interpolant = this._weightInterpolant;
        if (interpolant !== null) {
          const interpolantValue = interpolant.evaluate(time2)[0];
          weight *= interpolantValue;
          if (time2 > interpolant.parameterPositions[1]) {
            this.stopFading();
            if (interpolantValue === 0) {
              this.enabled = false;
            }
          }
        }
      }
      this._effectiveWeight = weight;
      return weight;
    }
    _updateTimeScale(time2) {
      let timeScale = 0;
      if (!this.paused) {
        timeScale = this.timeScale;
        const interpolant = this._timeScaleInterpolant;
        if (interpolant !== null) {
          const interpolantValue = interpolant.evaluate(time2)[0];
          timeScale *= interpolantValue;
          if (time2 > interpolant.parameterPositions[1]) {
            this.stopWarping();
            if (timeScale === 0) {
              this.paused = true;
            } else {
              this.timeScale = timeScale;
            }
          }
        }
      }
      this._effectiveTimeScale = timeScale;
      return timeScale;
    }
    _updateTime(deltaTime) {
      const duration = this._clip.duration;
      const loop = this.loop;
      let time2 = this.time + deltaTime;
      let loopCount = this._loopCount;
      const pingPong = loop === LoopPingPong;
      if (deltaTime === 0) {
        if (loopCount === -1)
          return time2;
        return pingPong && (loopCount & 1) === 1 ? duration - time2 : time2;
      }
      if (loop === LoopOnce) {
        if (loopCount === -1) {
          this._loopCount = 0;
          this._setEndings(true, true, false);
        }
        handle_stop: {
          if (time2 >= duration) {
            time2 = duration;
          } else if (time2 < 0) {
            time2 = 0;
          } else {
            this.time = time2;
            break handle_stop;
          }
          if (this.clampWhenFinished)
            this.paused = true;
          else
            this.enabled = false;
          this.time = time2;
          this._mixer.dispatchEvent({
            type: "finished",
            action: this,
            direction: deltaTime < 0 ? -1 : 1
          });
        }
      } else {
        if (loopCount === -1) {
          if (deltaTime >= 0) {
            loopCount = 0;
            this._setEndings(true, this.repetitions === 0, pingPong);
          } else {
            this._setEndings(this.repetitions === 0, true, pingPong);
          }
        }
        if (time2 >= duration || time2 < 0) {
          const loopDelta = Math.floor(time2 / duration);
          time2 -= duration * loopDelta;
          loopCount += Math.abs(loopDelta);
          const pending = this.repetitions - loopCount;
          if (pending <= 0) {
            if (this.clampWhenFinished)
              this.paused = true;
            else
              this.enabled = false;
            time2 = deltaTime > 0 ? duration : 0;
            this.time = time2;
            this._mixer.dispatchEvent({
              type: "finished",
              action: this,
              direction: deltaTime > 0 ? 1 : -1
            });
          } else {
            if (pending === 1) {
              const atStart = deltaTime < 0;
              this._setEndings(atStart, !atStart, pingPong);
            } else {
              this._setEndings(false, false, pingPong);
            }
            this._loopCount = loopCount;
            this.time = time2;
            this._mixer.dispatchEvent({
              type: "loop",
              action: this,
              loopDelta
            });
          }
        } else {
          this.time = time2;
        }
        if (pingPong && (loopCount & 1) === 1) {
          return duration - time2;
        }
      }
      return time2;
    }
    _setEndings(atStart, atEnd, pingPong) {
      const settings = this._interpolantSettings;
      if (pingPong) {
        settings.endingStart = ZeroSlopeEnding;
        settings.endingEnd = ZeroSlopeEnding;
      } else {
        if (atStart) {
          settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;
        } else {
          settings.endingStart = WrapAroundEnding;
        }
        if (atEnd) {
          settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;
        } else {
          settings.endingEnd = WrapAroundEnding;
        }
      }
    }
    _scheduleFading(duration, weightNow, weightThen) {
      const mixer = this._mixer, now = mixer.time;
      let interpolant = this._weightInterpolant;
      if (interpolant === null) {
        interpolant = mixer._lendControlInterpolant();
        this._weightInterpolant = interpolant;
      }
      const times = interpolant.parameterPositions, values = interpolant.sampleValues;
      times[0] = now;
      values[0] = weightNow;
      times[1] = now + duration;
      values[1] = weightThen;
      return this;
    }
  };
  var AnimationMixer = class extends EventDispatcher {
    constructor(root) {
      super();
      this._root = root;
      this._initMemoryManager();
      this._accuIndex = 0;
      this.time = 0;
      this.timeScale = 1;
    }
    _bindAction(action, prototypeAction) {
      const root = action._localRoot || this._root, tracks = action._clip.tracks, nTracks = tracks.length, bindings = action._propertyBindings, interpolants = action._interpolants, rootUuid = root.uuid, bindingsByRoot = this._bindingsByRootAndName;
      let bindingsByName = bindingsByRoot[rootUuid];
      if (bindingsByName === void 0) {
        bindingsByName = {};
        bindingsByRoot[rootUuid] = bindingsByName;
      }
      for (let i2 = 0; i2 !== nTracks; ++i2) {
        const track = tracks[i2], trackName = track.name;
        let binding = bindingsByName[trackName];
        if (binding !== void 0) {
          ++binding.referenceCount;
          bindings[i2] = binding;
        } else {
          binding = bindings[i2];
          if (binding !== void 0) {
            if (binding._cacheIndex === null) {
              ++binding.referenceCount;
              this._addInactiveBinding(binding, rootUuid, trackName);
            }
            continue;
          }
          const path = prototypeAction && prototypeAction._propertyBindings[i2].binding.parsedPath;
          binding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());
          ++binding.referenceCount;
          this._addInactiveBinding(binding, rootUuid, trackName);
          bindings[i2] = binding;
        }
        interpolants[i2].resultBuffer = binding.buffer;
      }
    }
    _activateAction(action) {
      if (!this._isActiveAction(action)) {
        if (action._cacheIndex === null) {
          const rootUuid = (action._localRoot || this._root).uuid, clipUuid = action._clip.uuid, actionsForClip = this._actionsByClip[clipUuid];
          this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);
          this._addInactiveAction(action, clipUuid, rootUuid);
        }
        const bindings = action._propertyBindings;
        for (let i2 = 0, n2 = bindings.length; i2 !== n2; ++i2) {
          const binding = bindings[i2];
          if (binding.useCount++ === 0) {
            this._lendBinding(binding);
            binding.saveOriginalState();
          }
        }
        this._lendAction(action);
      }
    }
    _deactivateAction(action) {
      if (this._isActiveAction(action)) {
        const bindings = action._propertyBindings;
        for (let i2 = 0, n2 = bindings.length; i2 !== n2; ++i2) {
          const binding = bindings[i2];
          if (--binding.useCount === 0) {
            binding.restoreOriginalState();
            this._takeBackBinding(binding);
          }
        }
        this._takeBackAction(action);
      }
    }
    _initMemoryManager() {
      this._actions = [];
      this._nActiveActions = 0;
      this._actionsByClip = {};
      this._bindings = [];
      this._nActiveBindings = 0;
      this._bindingsByRootAndName = {};
      this._controlInterpolants = [];
      this._nActiveControlInterpolants = 0;
      const scope = this;
      this.stats = {
        actions: {
          get total() {
            return scope._actions.length;
          },
          get inUse() {
            return scope._nActiveActions;
          }
        },
        bindings: {
          get total() {
            return scope._bindings.length;
          },
          get inUse() {
            return scope._nActiveBindings;
          }
        },
        controlInterpolants: {
          get total() {
            return scope._controlInterpolants.length;
          },
          get inUse() {
            return scope._nActiveControlInterpolants;
          }
        }
      };
    }
    _isActiveAction(action) {
      const index = action._cacheIndex;
      return index !== null && index < this._nActiveActions;
    }
    _addInactiveAction(action, clipUuid, rootUuid) {
      const actions = this._actions, actionsByClip = this._actionsByClip;
      let actionsForClip = actionsByClip[clipUuid];
      if (actionsForClip === void 0) {
        actionsForClip = {
          knownActions: [action],
          actionByRoot: {}
        };
        action._byClipCacheIndex = 0;
        actionsByClip[clipUuid] = actionsForClip;
      } else {
        const knownActions = actionsForClip.knownActions;
        action._byClipCacheIndex = knownActions.length;
        knownActions.push(action);
      }
      action._cacheIndex = actions.length;
      actions.push(action);
      actionsForClip.actionByRoot[rootUuid] = action;
    }
    _removeInactiveAction(action) {
      const actions = this._actions, lastInactiveAction = actions[actions.length - 1], cacheIndex = action._cacheIndex;
      lastInactiveAction._cacheIndex = cacheIndex;
      actions[cacheIndex] = lastInactiveAction;
      actions.pop();
      action._cacheIndex = null;
      const clipUuid = action._clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid], knownActionsForClip = actionsForClip.knownActions, lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1], byClipCacheIndex = action._byClipCacheIndex;
      lastKnownAction._byClipCacheIndex = byClipCacheIndex;
      knownActionsForClip[byClipCacheIndex] = lastKnownAction;
      knownActionsForClip.pop();
      action._byClipCacheIndex = null;
      const actionByRoot = actionsForClip.actionByRoot, rootUuid = (action._localRoot || this._root).uuid;
      delete actionByRoot[rootUuid];
      if (knownActionsForClip.length === 0) {
        delete actionsByClip[clipUuid];
      }
      this._removeInactiveBindingsForAction(action);
    }
    _removeInactiveBindingsForAction(action) {
      const bindings = action._propertyBindings;
      for (let i2 = 0, n2 = bindings.length; i2 !== n2; ++i2) {
        const binding = bindings[i2];
        if (--binding.referenceCount === 0) {
          this._removeInactiveBinding(binding);
        }
      }
    }
    _lendAction(action) {
      const actions = this._actions, prevIndex = action._cacheIndex, lastActiveIndex = this._nActiveActions++, firstInactiveAction = actions[lastActiveIndex];
      action._cacheIndex = lastActiveIndex;
      actions[lastActiveIndex] = action;
      firstInactiveAction._cacheIndex = prevIndex;
      actions[prevIndex] = firstInactiveAction;
    }
    _takeBackAction(action) {
      const actions = this._actions, prevIndex = action._cacheIndex, firstInactiveIndex = --this._nActiveActions, lastActiveAction = actions[firstInactiveIndex];
      action._cacheIndex = firstInactiveIndex;
      actions[firstInactiveIndex] = action;
      lastActiveAction._cacheIndex = prevIndex;
      actions[prevIndex] = lastActiveAction;
    }
    _addInactiveBinding(binding, rootUuid, trackName) {
      const bindingsByRoot = this._bindingsByRootAndName, bindings = this._bindings;
      let bindingByName = bindingsByRoot[rootUuid];
      if (bindingByName === void 0) {
        bindingByName = {};
        bindingsByRoot[rootUuid] = bindingByName;
      }
      bindingByName[trackName] = binding;
      binding._cacheIndex = bindings.length;
      bindings.push(binding);
    }
    _removeInactiveBinding(binding) {
      const bindings = this._bindings, propBinding = binding.binding, rootUuid = propBinding.rootNode.uuid, trackName = propBinding.path, bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid], lastInactiveBinding = bindings[bindings.length - 1], cacheIndex = binding._cacheIndex;
      lastInactiveBinding._cacheIndex = cacheIndex;
      bindings[cacheIndex] = lastInactiveBinding;
      bindings.pop();
      delete bindingByName[trackName];
      if (Object.keys(bindingByName).length === 0) {
        delete bindingsByRoot[rootUuid];
      }
    }
    _lendBinding(binding) {
      const bindings = this._bindings, prevIndex = binding._cacheIndex, lastActiveIndex = this._nActiveBindings++, firstInactiveBinding = bindings[lastActiveIndex];
      binding._cacheIndex = lastActiveIndex;
      bindings[lastActiveIndex] = binding;
      firstInactiveBinding._cacheIndex = prevIndex;
      bindings[prevIndex] = firstInactiveBinding;
    }
    _takeBackBinding(binding) {
      const bindings = this._bindings, prevIndex = binding._cacheIndex, firstInactiveIndex = --this._nActiveBindings, lastActiveBinding = bindings[firstInactiveIndex];
      binding._cacheIndex = firstInactiveIndex;
      bindings[firstInactiveIndex] = binding;
      lastActiveBinding._cacheIndex = prevIndex;
      bindings[prevIndex] = lastActiveBinding;
    }
    _lendControlInterpolant() {
      const interpolants = this._controlInterpolants, lastActiveIndex = this._nActiveControlInterpolants++;
      let interpolant = interpolants[lastActiveIndex];
      if (interpolant === void 0) {
        interpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);
        interpolant.__cacheIndex = lastActiveIndex;
        interpolants[lastActiveIndex] = interpolant;
      }
      return interpolant;
    }
    _takeBackControlInterpolant(interpolant) {
      const interpolants = this._controlInterpolants, prevIndex = interpolant.__cacheIndex, firstInactiveIndex = --this._nActiveControlInterpolants, lastActiveInterpolant = interpolants[firstInactiveIndex];
      interpolant.__cacheIndex = firstInactiveIndex;
      interpolants[firstInactiveIndex] = interpolant;
      lastActiveInterpolant.__cacheIndex = prevIndex;
      interpolants[prevIndex] = lastActiveInterpolant;
    }
    clipAction(clip, optionalRoot, blendMode) {
      const root = optionalRoot || this._root, rootUuid = root.uuid;
      let clipObject = typeof clip === "string" ? AnimationClip.findByName(root, clip) : clip;
      const clipUuid = clipObject !== null ? clipObject.uuid : clip;
      const actionsForClip = this._actionsByClip[clipUuid];
      let prototypeAction = null;
      if (blendMode === void 0) {
        if (clipObject !== null) {
          blendMode = clipObject.blendMode;
        } else {
          blendMode = NormalAnimationBlendMode;
        }
      }
      if (actionsForClip !== void 0) {
        const existingAction = actionsForClip.actionByRoot[rootUuid];
        if (existingAction !== void 0 && existingAction.blendMode === blendMode) {
          return existingAction;
        }
        prototypeAction = actionsForClip.knownActions[0];
        if (clipObject === null)
          clipObject = prototypeAction._clip;
      }
      if (clipObject === null)
        return null;
      const newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);
      this._bindAction(newAction, prototypeAction);
      this._addInactiveAction(newAction, clipUuid, rootUuid);
      return newAction;
    }
    existingAction(clip, optionalRoot) {
      const root = optionalRoot || this._root, rootUuid = root.uuid, clipObject = typeof clip === "string" ? AnimationClip.findByName(root, clip) : clip, clipUuid = clipObject ? clipObject.uuid : clip, actionsForClip = this._actionsByClip[clipUuid];
      if (actionsForClip !== void 0) {
        return actionsForClip.actionByRoot[rootUuid] || null;
      }
      return null;
    }
    stopAllAction() {
      const actions = this._actions, nActions = this._nActiveActions;
      for (let i2 = nActions - 1; i2 >= 0; --i2) {
        actions[i2].stop();
      }
      return this;
    }
    update(deltaTime) {
      deltaTime *= this.timeScale;
      const actions = this._actions, nActions = this._nActiveActions, time2 = this.time += deltaTime, timeDirection = Math.sign(deltaTime), accuIndex = this._accuIndex ^= 1;
      for (let i2 = 0; i2 !== nActions; ++i2) {
        const action = actions[i2];
        action._update(time2, deltaTime, timeDirection, accuIndex);
      }
      const bindings = this._bindings, nBindings = this._nActiveBindings;
      for (let i2 = 0; i2 !== nBindings; ++i2) {
        bindings[i2].apply(accuIndex);
      }
      return this;
    }
    setTime(timeInSeconds) {
      this.time = 0;
      for (let i2 = 0; i2 < this._actions.length; i2++) {
        this._actions[i2].time = 0;
      }
      return this.update(timeInSeconds);
    }
    getRoot() {
      return this._root;
    }
    uncacheClip(clip) {
      const actions = this._actions, clipUuid = clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid];
      if (actionsForClip !== void 0) {
        const actionsToRemove = actionsForClip.knownActions;
        for (let i2 = 0, n2 = actionsToRemove.length; i2 !== n2; ++i2) {
          const action = actionsToRemove[i2];
          this._deactivateAction(action);
          const cacheIndex = action._cacheIndex, lastInactiveAction = actions[actions.length - 1];
          action._cacheIndex = null;
          action._byClipCacheIndex = null;
          lastInactiveAction._cacheIndex = cacheIndex;
          actions[cacheIndex] = lastInactiveAction;
          actions.pop();
          this._removeInactiveBindingsForAction(action);
        }
        delete actionsByClip[clipUuid];
      }
    }
    uncacheRoot(root) {
      const rootUuid = root.uuid, actionsByClip = this._actionsByClip;
      for (const clipUuid in actionsByClip) {
        const actionByRoot = actionsByClip[clipUuid].actionByRoot, action = actionByRoot[rootUuid];
        if (action !== void 0) {
          this._deactivateAction(action);
          this._removeInactiveAction(action);
        }
      }
      const bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid];
      if (bindingByName !== void 0) {
        for (const trackName in bindingByName) {
          const binding = bindingByName[trackName];
          binding.restoreOriginalState();
          this._removeInactiveBinding(binding);
        }
      }
    }
    uncacheAction(clip, optionalRoot) {
      const action = this.existingAction(clip, optionalRoot);
      if (action !== null) {
        this._deactivateAction(action);
        this._removeInactiveAction(action);
      }
    }
  };
  AnimationMixer.prototype._controlInterpolantsResultBuffer = new Float32Array(1);
  var Uniform = class {
    constructor(value) {
      if (typeof value === "string") {
        console.warn("THREE.Uniform: Type parameter is no longer needed.");
        value = arguments[1];
      }
      this.value = value;
    }
    clone() {
      return new Uniform(this.value.clone === void 0 ? this.value : this.value.clone());
    }
  };
  var InstancedInterleavedBuffer = class extends InterleavedBuffer {
    constructor(array, stride, meshPerAttribute = 1) {
      super(array, stride);
      this.meshPerAttribute = meshPerAttribute;
    }
    copy(source) {
      super.copy(source);
      this.meshPerAttribute = source.meshPerAttribute;
      return this;
    }
    clone(data) {
      const ib = super.clone(data);
      ib.meshPerAttribute = this.meshPerAttribute;
      return ib;
    }
    toJSON(data) {
      const json = super.toJSON(data);
      json.isInstancedInterleavedBuffer = true;
      json.meshPerAttribute = this.meshPerAttribute;
      return json;
    }
  };
  InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;
  var GLBufferAttribute = class {
    constructor(buffer, type, itemSize, elementSize, count) {
      this.buffer = buffer;
      this.type = type;
      this.itemSize = itemSize;
      this.elementSize = elementSize;
      this.count = count;
      this.version = 0;
    }
    set needsUpdate(value) {
      if (value === true)
        this.version++;
    }
    setBuffer(buffer) {
      this.buffer = buffer;
      return this;
    }
    setType(type, elementSize) {
      this.type = type;
      this.elementSize = elementSize;
      return this;
    }
    setItemSize(itemSize) {
      this.itemSize = itemSize;
      return this;
    }
    setCount(count) {
      this.count = count;
      return this;
    }
  };
  GLBufferAttribute.prototype.isGLBufferAttribute = true;
  var _vector$4 = /* @__PURE__ */ new Vector2();
  var Box2 = class {
    constructor(min = new Vector2(Infinity, Infinity), max = new Vector2(-Infinity, -Infinity)) {
      this.min = min;
      this.max = max;
    }
    set(min, max) {
      this.min.copy(min);
      this.max.copy(max);
      return this;
    }
    setFromPoints(points2) {
      this.makeEmpty();
      for (let i2 = 0, il = points2.length; i2 < il; i2++) {
        this.expandByPoint(points2[i2]);
      }
      return this;
    }
    setFromCenterAndSize(center, size2) {
      const halfSize = _vector$4.copy(size2).multiplyScalar(0.5);
      this.min.copy(center).sub(halfSize);
      this.max.copy(center).add(halfSize);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(box) {
      this.min.copy(box.min);
      this.max.copy(box.max);
      return this;
    }
    makeEmpty() {
      this.min.x = this.min.y = Infinity;
      this.max.x = this.max.y = -Infinity;
      return this;
    }
    isEmpty() {
      return this.max.x < this.min.x || this.max.y < this.min.y;
    }
    getCenter(target) {
      return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
    getSize(target) {
      return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);
    }
    expandByPoint(point) {
      this.min.min(point);
      this.max.max(point);
      return this;
    }
    expandByVector(vector) {
      this.min.sub(vector);
      this.max.add(vector);
      return this;
    }
    expandByScalar(scalar) {
      this.min.addScalar(-scalar);
      this.max.addScalar(scalar);
      return this;
    }
    containsPoint(point) {
      return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;
    }
    containsBox(box) {
      return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;
    }
    getParameter(point, target) {
      return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));
    }
    intersectsBox(box) {
      return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
    }
    clampPoint(point, target) {
      return target.copy(point).clamp(this.min, this.max);
    }
    distanceToPoint(point) {
      const clampedPoint = _vector$4.copy(point).clamp(this.min, this.max);
      return clampedPoint.sub(point).length();
    }
    intersect(box) {
      this.min.max(box.min);
      this.max.min(box.max);
      return this;
    }
    union(box) {
      this.min.min(box.min);
      this.max.max(box.max);
      return this;
    }
    translate(offset) {
      this.min.add(offset);
      this.max.add(offset);
      return this;
    }
    equals(box) {
      return box.min.equals(this.min) && box.max.equals(this.max);
    }
  };
  Box2.prototype.isBox2 = true;
  var _startP = /* @__PURE__ */ new Vector3();
  var _startEnd = /* @__PURE__ */ new Vector3();
  var Line3 = class {
    constructor(start2 = new Vector3(), end2 = new Vector3()) {
      this.start = start2;
      this.end = end2;
    }
    set(start2, end2) {
      this.start.copy(start2);
      this.end.copy(end2);
      return this;
    }
    copy(line) {
      this.start.copy(line.start);
      this.end.copy(line.end);
      return this;
    }
    getCenter(target) {
      return target.addVectors(this.start, this.end).multiplyScalar(0.5);
    }
    delta(target) {
      return target.subVectors(this.end, this.start);
    }
    distanceSq() {
      return this.start.distanceToSquared(this.end);
    }
    distance() {
      return this.start.distanceTo(this.end);
    }
    at(t, target) {
      return this.delta(target).multiplyScalar(t).add(this.start);
    }
    closestPointToPointParameter(point, clampToLine) {
      _startP.subVectors(point, this.start);
      _startEnd.subVectors(this.end, this.start);
      const startEnd2 = _startEnd.dot(_startEnd);
      const startEnd_startP = _startEnd.dot(_startP);
      let t = startEnd_startP / startEnd2;
      if (clampToLine) {
        t = clamp(t, 0, 1);
      }
      return t;
    }
    closestPointToPoint(point, clampToLine, target) {
      const t = this.closestPointToPointParameter(point, clampToLine);
      return this.delta(target).multiplyScalar(t).add(this.start);
    }
    applyMatrix4(matrix) {
      this.start.applyMatrix4(matrix);
      this.end.applyMatrix4(matrix);
      return this;
    }
    equals(line) {
      return line.start.equals(this.start) && line.end.equals(this.end);
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  var _vector$2 = /* @__PURE__ */ new Vector3();
  var _boneMatrix = /* @__PURE__ */ new Matrix4();
  var _matrixWorldInv = /* @__PURE__ */ new Matrix4();
  var SkeletonHelper = class extends LineSegments {
    constructor(object) {
      const bones2 = getBoneList(object);
      const geometry = new BufferGeometry();
      const vertices = [];
      const colors = [];
      const color1 = new Color(0, 0, 1);
      const color2 = new Color(0, 1, 0);
      for (let i2 = 0; i2 < bones2.length; i2++) {
        const bone = bones2[i2];
        if (bone.parent && bone.parent.isBone) {
          vertices.push(0, 0, 0);
          vertices.push(0, 0, 0);
          colors.push(color1.r, color1.g, color1.b);
          colors.push(color2.r, color2.g, color2.b);
        }
      }
      geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
      const material = new LineBasicMaterial({ vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true });
      super(geometry, material);
      this.type = "SkeletonHelper";
      this.isSkeletonHelper = true;
      this.root = object;
      this.bones = bones2;
      this.matrix = object.matrixWorld;
      this.matrixAutoUpdate = false;
    }
    updateMatrixWorld(force) {
      const bones2 = this.bones;
      const geometry = this.geometry;
      const position = geometry.getAttribute("position");
      _matrixWorldInv.copy(this.root.matrixWorld).invert();
      for (let i2 = 0, j2 = 0; i2 < bones2.length; i2++) {
        const bone = bones2[i2];
        if (bone.parent && bone.parent.isBone) {
          _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);
          _vector$2.setFromMatrixPosition(_boneMatrix);
          position.setXYZ(j2, _vector$2.x, _vector$2.y, _vector$2.z);
          _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);
          _vector$2.setFromMatrixPosition(_boneMatrix);
          position.setXYZ(j2 + 1, _vector$2.x, _vector$2.y, _vector$2.z);
          j2 += 2;
        }
      }
      geometry.getAttribute("position").needsUpdate = true;
      super.updateMatrixWorld(force);
    }
  };
  function getBoneList(object) {
    const boneList = [];
    if (object && object.isBone) {
      boneList.push(object);
    }
    for (let i2 = 0; i2 < object.children.length; i2++) {
      boneList.push.apply(boneList, getBoneList(object.children[i2]));
    }
    return boneList;
  }
  var GridHelper = class extends LineSegments {
    constructor(size2 = 10, divisions = 10, color1 = 4473924, color2 = 8947848) {
      color1 = new Color(color1);
      color2 = new Color(color2);
      const center = divisions / 2;
      const step = size2 / divisions;
      const halfSize = size2 / 2;
      const vertices = [], colors = [];
      for (let i2 = 0, j2 = 0, k2 = -halfSize; i2 <= divisions; i2++, k2 += step) {
        vertices.push(-halfSize, 0, k2, halfSize, 0, k2);
        vertices.push(k2, 0, -halfSize, k2, 0, halfSize);
        const color = i2 === center ? color1 : color2;
        color.toArray(colors, j2);
        j2 += 3;
        color.toArray(colors, j2);
        j2 += 3;
        color.toArray(colors, j2);
        j2 += 3;
        color.toArray(colors, j2);
        j2 += 3;
      }
      const geometry = new BufferGeometry();
      geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
      const material = new LineBasicMaterial({ vertexColors: true, toneMapped: false });
      super(geometry, material);
      this.type = "GridHelper";
    }
  };
  var _floatView = new Float32Array(1);
  var _int32View = new Int32Array(_floatView.buffer);
  Curve.create = function(construct, getPoint) {
    console.log("THREE.Curve.create() has been deprecated");
    construct.prototype = Object.create(Curve.prototype);
    construct.prototype.constructor = construct;
    construct.prototype.getPoint = getPoint;
    return construct;
  };
  Path.prototype.fromPoints = function(points2) {
    console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints().");
    return this.setFromPoints(points2);
  };
  GridHelper.prototype.setColors = function() {
    console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.");
  };
  SkeletonHelper.prototype.update = function() {
    console.error("THREE.SkeletonHelper: update() no longer needs to be called.");
  };
  Loader.prototype.extractUrlBase = function(url) {
    console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.");
    return LoaderUtils.extractUrlBase(url);
  };
  Loader.Handlers = {
    add: function() {
      console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.");
    },
    get: function() {
      console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.");
    }
  };
  Box2.prototype.center = function(optionalTarget) {
    console.warn("THREE.Box2: .center() has been renamed to .getCenter().");
    return this.getCenter(optionalTarget);
  };
  Box2.prototype.empty = function() {
    console.warn("THREE.Box2: .empty() has been renamed to .isEmpty().");
    return this.isEmpty();
  };
  Box2.prototype.isIntersectionBox = function(box) {
    console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(box);
  };
  Box2.prototype.size = function(optionalTarget) {
    console.warn("THREE.Box2: .size() has been renamed to .getSize().");
    return this.getSize(optionalTarget);
  };
  Box3.prototype.center = function(optionalTarget) {
    console.warn("THREE.Box3: .center() has been renamed to .getCenter().");
    return this.getCenter(optionalTarget);
  };
  Box3.prototype.empty = function() {
    console.warn("THREE.Box3: .empty() has been renamed to .isEmpty().");
    return this.isEmpty();
  };
  Box3.prototype.isIntersectionBox = function(box) {
    console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(box);
  };
  Box3.prototype.isIntersectionSphere = function(sphere) {
    console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().");
    return this.intersectsSphere(sphere);
  };
  Box3.prototype.size = function(optionalTarget) {
    console.warn("THREE.Box3: .size() has been renamed to .getSize().");
    return this.getSize(optionalTarget);
  };
  Sphere.prototype.empty = function() {
    console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty().");
    return this.isEmpty();
  };
  Frustum.prototype.setFromMatrix = function(m2) {
    console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().");
    return this.setFromProjectionMatrix(m2);
  };
  Line3.prototype.center = function(optionalTarget) {
    console.warn("THREE.Line3: .center() has been renamed to .getCenter().");
    return this.getCenter(optionalTarget);
  };
  Matrix3.prototype.flattenToArrayOffset = function(array, offset) {
    console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
    return this.toArray(array, offset);
  };
  Matrix3.prototype.multiplyVector3 = function(vector) {
    console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");
    return vector.applyMatrix3(this);
  };
  Matrix3.prototype.multiplyVector3Array = function() {
    console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.");
  };
  Matrix3.prototype.applyToBufferAttribute = function(attribute) {
    console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.");
    return attribute.applyMatrix3(this);
  };
  Matrix3.prototype.applyToVector3Array = function() {
    console.error("THREE.Matrix3: .applyToVector3Array() has been removed.");
  };
  Matrix3.prototype.getInverse = function(matrix) {
    console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.");
    return this.copy(matrix).invert();
  };
  Matrix4.prototype.extractPosition = function(m2) {
    console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");
    return this.copyPosition(m2);
  };
  Matrix4.prototype.flattenToArrayOffset = function(array, offset) {
    console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
    return this.toArray(array, offset);
  };
  Matrix4.prototype.getPosition = function() {
    console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");
    return new Vector3().setFromMatrixColumn(this, 3);
  };
  Matrix4.prototype.setRotationFromQuaternion = function(q3) {
    console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");
    return this.makeRotationFromQuaternion(q3);
  };
  Matrix4.prototype.multiplyToArray = function() {
    console.warn("THREE.Matrix4: .multiplyToArray() has been removed.");
  };
  Matrix4.prototype.multiplyVector3 = function(vector) {
    console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return vector.applyMatrix4(this);
  };
  Matrix4.prototype.multiplyVector4 = function(vector) {
    console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return vector.applyMatrix4(this);
  };
  Matrix4.prototype.multiplyVector3Array = function() {
    console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.");
  };
  Matrix4.prototype.rotateAxis = function(v2) {
    console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");
    v2.transformDirection(this);
  };
  Matrix4.prototype.crossVector = function(vector) {
    console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return vector.applyMatrix4(this);
  };
  Matrix4.prototype.translate = function() {
    console.error("THREE.Matrix4: .translate() has been removed.");
  };
  Matrix4.prototype.rotateX = function() {
    console.error("THREE.Matrix4: .rotateX() has been removed.");
  };
  Matrix4.prototype.rotateY = function() {
    console.error("THREE.Matrix4: .rotateY() has been removed.");
  };
  Matrix4.prototype.rotateZ = function() {
    console.error("THREE.Matrix4: .rotateZ() has been removed.");
  };
  Matrix4.prototype.rotateByAxis = function() {
    console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
  };
  Matrix4.prototype.applyToBufferAttribute = function(attribute) {
    console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.");
    return attribute.applyMatrix4(this);
  };
  Matrix4.prototype.applyToVector3Array = function() {
    console.error("THREE.Matrix4: .applyToVector3Array() has been removed.");
  };
  Matrix4.prototype.makeFrustum = function(left, right, bottom, top, near, far) {
    console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.");
    return this.makePerspective(left, right, top, bottom, near, far);
  };
  Matrix4.prototype.getInverse = function(matrix) {
    console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.");
    return this.copy(matrix).invert();
  };
  Plane.prototype.isIntersectionLine = function(line) {
    console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().");
    return this.intersectsLine(line);
  };
  Quaternion.prototype.multiplyVector3 = function(vector) {
    console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");
    return vector.applyQuaternion(this);
  };
  Quaternion.prototype.inverse = function() {
    console.warn("THREE.Quaternion: .inverse() has been renamed to invert().");
    return this.invert();
  };
  Ray.prototype.isIntersectionBox = function(box) {
    console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(box);
  };
  Ray.prototype.isIntersectionPlane = function(plane) {
    console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().");
    return this.intersectsPlane(plane);
  };
  Ray.prototype.isIntersectionSphere = function(sphere) {
    console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().");
    return this.intersectsSphere(sphere);
  };
  Triangle.prototype.area = function() {
    console.warn("THREE.Triangle: .area() has been renamed to .getArea().");
    return this.getArea();
  };
  Triangle.prototype.barycoordFromPoint = function(point, target) {
    console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
    return this.getBarycoord(point, target);
  };
  Triangle.prototype.midpoint = function(target) {
    console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint().");
    return this.getMidpoint(target);
  };
  Triangle.prototypenormal = function(target) {
    console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
    return this.getNormal(target);
  };
  Triangle.prototype.plane = function(target) {
    console.warn("THREE.Triangle: .plane() has been renamed to .getPlane().");
    return this.getPlane(target);
  };
  Triangle.barycoordFromPoint = function(point, a2, b2, c2, target) {
    console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
    return Triangle.getBarycoord(point, a2, b2, c2, target);
  };
  Triangle.normal = function(a2, b2, c2, target) {
    console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
    return Triangle.getNormal(a2, b2, c2, target);
  };
  Shape.prototype.extractAllPoints = function(divisions) {
    console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.");
    return this.extractPoints(divisions);
  };
  Shape.prototype.extrude = function(options) {
    console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.");
    return new ExtrudeGeometry(this, options);
  };
  Shape.prototype.makeGeometry = function(options) {
    console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.");
    return new ShapeGeometry(this, options);
  };
  Vector2.prototype.fromAttribute = function(attribute, index, offset) {
    console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(attribute, index, offset);
  };
  Vector2.prototype.distanceToManhattan = function(v2) {
    console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
    return this.manhattanDistanceTo(v2);
  };
  Vector2.prototype.lengthManhattan = function() {
    console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().");
    return this.manhattanLength();
  };
  Vector3.prototype.setEulerFromRotationMatrix = function() {
    console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
  };
  Vector3.prototype.setEulerFromQuaternion = function() {
    console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
  };
  Vector3.prototype.getPositionFromMatrix = function(m2) {
    console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");
    return this.setFromMatrixPosition(m2);
  };
  Vector3.prototype.getScaleFromMatrix = function(m2) {
    console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");
    return this.setFromMatrixScale(m2);
  };
  Vector3.prototype.getColumnFromMatrix = function(index, matrix) {
    console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");
    return this.setFromMatrixColumn(matrix, index);
  };
  Vector3.prototype.applyProjection = function(m2) {
    console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.");
    return this.applyMatrix4(m2);
  };
  Vector3.prototype.fromAttribute = function(attribute, index, offset) {
    console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(attribute, index, offset);
  };
  Vector3.prototype.distanceToManhattan = function(v2) {
    console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
    return this.manhattanDistanceTo(v2);
  };
  Vector3.prototype.lengthManhattan = function() {
    console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().");
    return this.manhattanLength();
  };
  Vector4.prototype.fromAttribute = function(attribute, index, offset) {
    console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(attribute, index, offset);
  };
  Vector4.prototype.lengthManhattan = function() {
    console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().");
    return this.manhattanLength();
  };
  Object3D.prototype.getChildByName = function(name) {
    console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");
    return this.getObjectByName(name);
  };
  Object3D.prototype.renderDepth = function() {
    console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
  };
  Object3D.prototype.translate = function(distance, axis) {
    console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");
    return this.translateOnAxis(axis, distance);
  };
  Object3D.prototype.getWorldRotation = function() {
    console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.");
  };
  Object3D.prototype.applyMatrix = function(matrix) {
    console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().");
    return this.applyMatrix4(matrix);
  };
  Object.defineProperties(Object3D.prototype, {
    eulerOrder: {
      get: function() {
        console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
        return this.rotation.order;
      },
      set: function(value) {
        console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
        this.rotation.order = value;
      }
    },
    useQuaternion: {
      get: function() {
        console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
      },
      set: function() {
        console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
      }
    }
  });
  Mesh.prototype.setDrawMode = function() {
    console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
  };
  Object.defineProperties(Mesh.prototype, {
    drawMode: {
      get: function() {
        console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.");
        return TrianglesDrawMode;
      },
      set: function() {
        console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
      }
    }
  });
  SkinnedMesh.prototype.initBones = function() {
    console.error("THREE.SkinnedMesh: initBones() has been removed.");
  };
  PerspectiveCamera.prototype.setLens = function(focalLength, filmGauge) {
    console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.");
    if (filmGauge !== void 0)
      this.filmGauge = filmGauge;
    this.setFocalLength(focalLength);
  };
  Object.defineProperties(Light.prototype, {
    onlyShadow: {
      set: function() {
        console.warn("THREE.Light: .onlyShadow has been removed.");
      }
    },
    shadowCameraFov: {
      set: function(value) {
        console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov.");
        this.shadow.camera.fov = value;
      }
    },
    shadowCameraLeft: {
      set: function(value) {
        console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left.");
        this.shadow.camera.left = value;
      }
    },
    shadowCameraRight: {
      set: function(value) {
        console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right.");
        this.shadow.camera.right = value;
      }
    },
    shadowCameraTop: {
      set: function(value) {
        console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top.");
        this.shadow.camera.top = value;
      }
    },
    shadowCameraBottom: {
      set: function(value) {
        console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.");
        this.shadow.camera.bottom = value;
      }
    },
    shadowCameraNear: {
      set: function(value) {
        console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near.");
        this.shadow.camera.near = value;
      }
    },
    shadowCameraFar: {
      set: function(value) {
        console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far.");
        this.shadow.camera.far = value;
      }
    },
    shadowCameraVisible: {
      set: function() {
        console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.");
      }
    },
    shadowBias: {
      set: function(value) {
        console.warn("THREE.Light: .shadowBias is now .shadow.bias.");
        this.shadow.bias = value;
      }
    },
    shadowDarkness: {
      set: function() {
        console.warn("THREE.Light: .shadowDarkness has been removed.");
      }
    },
    shadowMapWidth: {
      set: function(value) {
        console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.");
        this.shadow.mapSize.width = value;
      }
    },
    shadowMapHeight: {
      set: function(value) {
        console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.");
        this.shadow.mapSize.height = value;
      }
    }
  });
  Object.defineProperties(BufferAttribute.prototype, {
    length: {
      get: function() {
        console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead.");
        return this.array.length;
      }
    },
    dynamic: {
      get: function() {
        console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");
        return this.usage === DynamicDrawUsage;
      },
      set: function() {
        console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");
        this.setUsage(DynamicDrawUsage);
      }
    }
  });
  BufferAttribute.prototype.setDynamic = function(value) {
    console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.");
    this.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);
    return this;
  };
  BufferAttribute.prototype.copyIndicesArray = function() {
    console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.");
  }, BufferAttribute.prototype.setArray = function() {
    console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
  };
  BufferGeometry.prototype.addIndex = function(index) {
    console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");
    this.setIndex(index);
  };
  BufferGeometry.prototype.addAttribute = function(name, attribute) {
    console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().");
    if (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {
      console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).");
      return this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));
    }
    if (name === "index") {
      console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.");
      this.setIndex(attribute);
      return this;
    }
    return this.setAttribute(name, attribute);
  };
  BufferGeometry.prototype.addDrawCall = function(start2, count, indexOffset) {
    if (indexOffset !== void 0) {
      console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.");
    }
    console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");
    this.addGroup(start2, count);
  };
  BufferGeometry.prototype.clearDrawCalls = function() {
    console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");
    this.clearGroups();
  };
  BufferGeometry.prototype.computeOffsets = function() {
    console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
  };
  BufferGeometry.prototype.removeAttribute = function(name) {
    console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().");
    return this.deleteAttribute(name);
  };
  BufferGeometry.prototype.applyMatrix = function(matrix) {
    console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().");
    return this.applyMatrix4(matrix);
  };
  Object.defineProperties(BufferGeometry.prototype, {
    drawcalls: {
      get: function() {
        console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");
        return this.groups;
      }
    },
    offsets: {
      get: function() {
        console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");
        return this.groups;
      }
    }
  });
  InterleavedBuffer.prototype.setDynamic = function(value) {
    console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.");
    this.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);
    return this;
  };
  InterleavedBuffer.prototype.setArray = function() {
    console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
  };
  ExtrudeGeometry.prototype.getArrays = function() {
    console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.");
  };
  ExtrudeGeometry.prototype.addShapeList = function() {
    console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.");
  };
  ExtrudeGeometry.prototype.addShape = function() {
    console.error("THREE.ExtrudeGeometry: .addShape() has been removed.");
  };
  Scene.prototype.dispose = function() {
    console.error("THREE.Scene: .dispose() has been removed.");
  };
  Uniform.prototype.onUpdate = function() {
    console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.");
    return this;
  };
  Object.defineProperties(Material.prototype, {
    wrapAround: {
      get: function() {
        console.warn("THREE.Material: .wrapAround has been removed.");
      },
      set: function() {
        console.warn("THREE.Material: .wrapAround has been removed.");
      }
    },
    overdraw: {
      get: function() {
        console.warn("THREE.Material: .overdraw has been removed.");
      },
      set: function() {
        console.warn("THREE.Material: .overdraw has been removed.");
      }
    },
    wrapRGB: {
      get: function() {
        console.warn("THREE.Material: .wrapRGB has been removed.");
        return new Color();
      }
    },
    shading: {
      get: function() {
        console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
      },
      set: function(value) {
        console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
        this.flatShading = value === FlatShading;
      }
    },
    stencilMask: {
      get: function() {
        console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead.");
        return this.stencilFuncMask;
      },
      set: function(value) {
        console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead.");
        this.stencilFuncMask = value;
      }
    },
    vertexTangents: {
      get: function() {
        console.warn("THREE." + this.type + ": .vertexTangents has been removed.");
      },
      set: function() {
        console.warn("THREE." + this.type + ": .vertexTangents has been removed.");
      }
    }
  });
  Object.defineProperties(ShaderMaterial.prototype, {
    derivatives: {
      get: function() {
        console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
        return this.extensions.derivatives;
      },
      set: function(value) {
        console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
        this.extensions.derivatives = value;
      }
    }
  });
  WebGLRenderer.prototype.clearTarget = function(renderTarget, color, depth, stencil) {
    console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.");
    this.setRenderTarget(renderTarget);
    this.clear(color, depth, stencil);
  };
  WebGLRenderer.prototype.animate = function(callback) {
    console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop().");
    this.setAnimationLoop(callback);
  };
  WebGLRenderer.prototype.getCurrentRenderTarget = function() {
    console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().");
    return this.getRenderTarget();
  };
  WebGLRenderer.prototype.getMaxAnisotropy = function() {
    console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().");
    return this.capabilities.getMaxAnisotropy();
  };
  WebGLRenderer.prototype.getPrecision = function() {
    console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.");
    return this.capabilities.precision;
  };
  WebGLRenderer.prototype.resetGLState = function() {
    console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset().");
    return this.state.reset();
  };
  WebGLRenderer.prototype.supportsFloatTextures = function() {
    console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");
    return this.extensions.get("OES_texture_float");
  };
  WebGLRenderer.prototype.supportsHalfFloatTextures = function() {
    console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");
    return this.extensions.get("OES_texture_half_float");
  };
  WebGLRenderer.prototype.supportsStandardDerivatives = function() {
    console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");
    return this.extensions.get("OES_standard_derivatives");
  };
  WebGLRenderer.prototype.supportsCompressedTextureS3TC = function() {
    console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");
    return this.extensions.get("WEBGL_compressed_texture_s3tc");
  };
  WebGLRenderer.prototype.supportsCompressedTexturePVRTC = function() {
    console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");
    return this.extensions.get("WEBGL_compressed_texture_pvrtc");
  };
  WebGLRenderer.prototype.supportsBlendMinMax = function() {
    console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");
    return this.extensions.get("EXT_blend_minmax");
  };
  WebGLRenderer.prototype.supportsVertexTextures = function() {
    console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.");
    return this.capabilities.vertexTextures;
  };
  WebGLRenderer.prototype.supportsInstancedArrays = function() {
    console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");
    return this.extensions.get("ANGLE_instanced_arrays");
  };
  WebGLRenderer.prototype.enableScissorTest = function(boolean) {
    console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().");
    this.setScissorTest(boolean);
  };
  WebGLRenderer.prototype.initMaterial = function() {
    console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
  };
  WebGLRenderer.prototype.addPrePlugin = function() {
    console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
  };
  WebGLRenderer.prototype.addPostPlugin = function() {
    console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
  };
  WebGLRenderer.prototype.updateShadowMap = function() {
    console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
  };
  WebGLRenderer.prototype.setFaceCulling = function() {
    console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.");
  };
  WebGLRenderer.prototype.allocTextureUnit = function() {
    console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.");
  };
  WebGLRenderer.prototype.setTexture = function() {
    console.warn("THREE.WebGLRenderer: .setTexture() has been removed.");
  };
  WebGLRenderer.prototype.setTexture2D = function() {
    console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.");
  };
  WebGLRenderer.prototype.setTextureCube = function() {
    console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.");
  };
  WebGLRenderer.prototype.getActiveMipMapLevel = function() {
    console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().");
    return this.getActiveMipmapLevel();
  };
  Object.defineProperties(WebGLRenderer.prototype, {
    shadowMapEnabled: {
      get: function() {
        return this.shadowMap.enabled;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");
        this.shadowMap.enabled = value;
      }
    },
    shadowMapType: {
      get: function() {
        return this.shadowMap.type;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");
        this.shadowMap.type = value;
      }
    },
    shadowMapCullFace: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
        return void 0;
      },
      set: function() {
        console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
      }
    },
    context: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.");
        return this.getContext();
      }
    },
    vr: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr");
        return this.xr;
      }
    },
    gammaInput: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");
        return false;
      },
      set: function() {
        console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");
      }
    },
    gammaOutput: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.");
        return false;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.");
        this.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;
      }
    },
    toneMappingWhitePoint: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.");
        return 1;
      },
      set: function() {
        console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.");
      }
    },
    gammaFactor: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .gammaFactor has been removed.");
        return 2;
      },
      set: function() {
        console.warn("THREE.WebGLRenderer: .gammaFactor has been removed.");
      }
    }
  });
  Object.defineProperties(WebGLShadowMap.prototype, {
    cullFace: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
        return void 0;
      },
      set: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
      }
    },
    renderReverseSided: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
        return void 0;
      },
      set: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
      }
    },
    renderSingleSided: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
        return void 0;
      },
      set: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
      }
    }
  });
  Object.defineProperties(WebGLRenderTarget.prototype, {
    wrapS: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
        return this.texture.wrapS;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
        this.texture.wrapS = value;
      }
    },
    wrapT: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
        return this.texture.wrapT;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
        this.texture.wrapT = value;
      }
    },
    magFilter: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
        return this.texture.magFilter;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
        this.texture.magFilter = value;
      }
    },
    minFilter: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
        return this.texture.minFilter;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
        this.texture.minFilter = value;
      }
    },
    anisotropy: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
        return this.texture.anisotropy;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
        this.texture.anisotropy = value;
      }
    },
    offset: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
        return this.texture.offset;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
        this.texture.offset = value;
      }
    },
    repeat: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
        return this.texture.repeat;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
        this.texture.repeat = value;
      }
    },
    format: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
        return this.texture.format;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
        this.texture.format = value;
      }
    },
    type: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
        return this.texture.type;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
        this.texture.type = value;
      }
    },
    generateMipmaps: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
        return this.texture.generateMipmaps;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
        this.texture.generateMipmaps = value;
      }
    }
  });
  Audio.prototype.load = function(file) {
    console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
    const scope = this;
    const audioLoader = new AudioLoader();
    audioLoader.load(file, function(buffer) {
      scope.setBuffer(buffer);
    });
    return this;
  };
  AudioAnalyser.prototype.getData = function() {
    console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData().");
    return this.getFrequencyData();
  };
  CubeCamera.prototype.updateCubeMap = function(renderer, scene2) {
    console.warn("THREE.CubeCamera: .updateCubeMap() is now .update().");
    return this.update(renderer, scene2);
  };
  CubeCamera.prototype.clear = function(renderer, color, depth, stencil) {
    console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear().");
    return this.renderTarget.clear(renderer, color, depth, stencil);
  };
  ImageUtils.crossOrigin = void 0;
  ImageUtils.loadTexture = function(url, mapping, onLoad, onError) {
    console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
    const loader = new TextureLoader();
    loader.setCrossOrigin(this.crossOrigin);
    const texture = loader.load(url, onLoad, void 0, onError);
    if (mapping)
      texture.mapping = mapping;
    return texture;
  };
  ImageUtils.loadTextureCube = function(urls, mapping, onLoad, onError) {
    console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
    const loader = new CubeTextureLoader();
    loader.setCrossOrigin(this.crossOrigin);
    const texture = loader.load(urls, onLoad, void 0, onError);
    if (mapping)
      texture.mapping = mapping;
    return texture;
  };
  ImageUtils.loadCompressedTexture = function() {
    console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
  };
  ImageUtils.loadCompressedTextureCube = function() {
    console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
  };
  if (typeof __THREE_DEVTOOLS__ !== "undefined") {
    __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
      revision: REVISION
    } }));
  }
  if (typeof window !== "undefined") {
    if (window.__THREE__) {
      console.warn("WARNING: Multiple instances of Three.js being imported.");
    } else {
      window.__THREE__ = REVISION;
    }
  }

  // node_modules/@pixiv/three-vrm/lib/three-vrm.module.min.js
  function n(e, t, n2, i2) {
    return new (n2 || (n2 = Promise))(function(r2, o2) {
      function s3(e2) {
        try {
          l2(i2.next(e2));
        } catch (e3) {
          o2(e3);
        }
      }
      function a2(e2) {
        try {
          l2(i2.throw(e2));
        } catch (e3) {
          o2(e3);
        }
      }
      function l2(e2) {
        var t2;
        e2.done ? r2(e2.value) : (t2 = e2.value, t2 instanceof n2 ? t2 : new n2(function(e3) {
          e3(t2);
        })).then(s3, a2);
      }
      l2((i2 = i2.apply(e, t || [])).next());
    });
  }
  function i(e) {
    Object.keys(e).forEach((t) => {
      const n2 = e[t];
      if (n2 == null ? void 0 : n2.isTexture) {
        n2.dispose();
      }
    }), e.dispose();
  }
  function r(e) {
    const t = e.geometry;
    t && t.dispose();
    const n2 = e.material;
    n2 && (Array.isArray(n2) ? n2.forEach((e2) => i(e2)) : n2 && i(n2));
  }
  var o;
  !function(e) {
    e[e.NUMBER = 0] = "NUMBER", e[e.VECTOR2 = 1] = "VECTOR2", e[e.VECTOR3 = 2] = "VECTOR3", e[e.VECTOR4 = 3] = "VECTOR4", e[e.COLOR = 4] = "COLOR";
  }(o || (o = {}));
  var s2 = new Vector2();
  var a = new Vector3();
  var l = new Vector4();
  var d = new Color();
  var h = class extends Object3D {
    constructor(e) {
      super(), this.weight = 0, this.isBinary = false, this._binds = [], this._materialValues = [], this.name = `BlendShapeController_${e}`, this.type = "BlendShapeController", this.visible = false;
    }
    addBind(e) {
      const t = e.weight / 100;
      this._binds.push({ meshes: e.meshes, morphTargetIndex: e.morphTargetIndex, weight: t });
    }
    addMaterialValue(t) {
      const n2 = t.material, i2 = t.propertyName;
      let r2, s3, a2, l2, d2 = n2[i2];
      d2 && (d2 = t.defaultValue || d2, d2.isVector2 ? (r2 = o.VECTOR2, s3 = d2.clone(), a2 = new Vector2().fromArray(t.targetValue), l2 = a2.clone().sub(s3)) : d2.isVector3 ? (r2 = o.VECTOR3, s3 = d2.clone(), a2 = new Vector3().fromArray(t.targetValue), l2 = a2.clone().sub(s3)) : d2.isVector4 ? (r2 = o.VECTOR4, s3 = d2.clone(), a2 = new Vector4().fromArray([t.targetValue[2], t.targetValue[3], t.targetValue[0], t.targetValue[1]]), l2 = a2.clone().sub(s3)) : d2.isColor ? (r2 = o.COLOR, s3 = d2.clone(), a2 = new Color().fromArray(t.targetValue), l2 = a2.clone().sub(s3)) : (r2 = o.NUMBER, s3 = d2, a2 = t.targetValue[0], l2 = a2 - s3), this._materialValues.push({ material: n2, propertyName: i2, defaultValue: s3, targetValue: a2, deltaValue: l2, type: r2 }));
    }
    applyWeight() {
      const e = this.isBinary ? this.weight < 0.5 ? 0 : 1 : this.weight;
      this._binds.forEach((t) => {
        t.meshes.forEach((n2) => {
          n2.morphTargetInfluences && (n2.morphTargetInfluences[t.morphTargetIndex] += e * t.weight);
        });
      }), this._materialValues.forEach((t) => {
        if (t.material[t.propertyName] !== void 0) {
          if (t.type === o.NUMBER) {
            const n2 = t.deltaValue;
            t.material[t.propertyName] += n2 * e;
          } else if (t.type === o.VECTOR2) {
            const n2 = t.deltaValue;
            t.material[t.propertyName].add(s2.copy(n2).multiplyScalar(e));
          } else if (t.type === o.VECTOR3) {
            const n2 = t.deltaValue;
            t.material[t.propertyName].add(a.copy(n2).multiplyScalar(e));
          } else if (t.type === o.VECTOR4) {
            const n2 = t.deltaValue;
            t.material[t.propertyName].add(l.copy(n2).multiplyScalar(e));
          } else if (t.type === o.COLOR) {
            const n2 = t.deltaValue;
            t.material[t.propertyName].add(d.copy(n2).multiplyScalar(e));
          }
          typeof t.material.shouldApplyUniforms == "boolean" && (t.material.shouldApplyUniforms = true);
        }
      });
    }
    clearAppliedWeight() {
      this._binds.forEach((e) => {
        e.meshes.forEach((t) => {
          t.morphTargetInfluences && (t.morphTargetInfluences[e.morphTargetIndex] = 0);
        });
      }), this._materialValues.forEach((e) => {
        if (e.material[e.propertyName] !== void 0) {
          if (e.type === o.NUMBER) {
            const t = e.defaultValue;
            e.material[e.propertyName] = t;
          } else if (e.type === o.VECTOR2) {
            const t = e.defaultValue;
            e.material[e.propertyName].copy(t);
          } else if (e.type === o.VECTOR3) {
            const t = e.defaultValue;
            e.material[e.propertyName].copy(t);
          } else if (e.type === o.VECTOR4) {
            const t = e.defaultValue;
            e.material[e.propertyName].copy(t);
          } else if (e.type === o.COLOR) {
            const t = e.defaultValue;
            e.material[e.propertyName].copy(t);
          }
          typeof e.material.shouldApplyUniforms == "boolean" && (e.material.shouldApplyUniforms = true);
        }
      });
    }
  };
  var u;
  function c(e, t, n2) {
    const i2 = e.parser.json.nodes[t].mesh;
    if (i2 == null)
      return null;
    const r2 = e.parser.json.meshes[i2].primitives.length, o2 = [];
    return n2.traverse((e2) => {
      o2.length < r2 && e2.isMesh && o2.push(e2);
    }), o2;
  }
  function p2(e) {
    return n(this, void 0, void 0, function* () {
      const t = yield e.parser.getDependencies("node"), n2 = /* @__PURE__ */ new Map();
      return t.forEach((t2, i2) => {
        const r2 = c(e, i2, t2);
        r2 != null && n2.set(i2, r2);
      }), n2;
    });
  }
  function m(e) {
    return e[0] !== "_" ? (console.warn(`renameMaterialProperty: Given property name "${e}" might be invalid`), e) : (e = e.substring(1), /[A-Z]/.test(e[0]) ? e[0].toLowerCase() + e.substring(1) : (console.warn(`renameMaterialProperty: Given property name "${e}" might be invalid`), e));
  }
  !function(e) {
    var t, n2, i2, r2, o2, s3;
    (t = e.BlendShapePresetName || (e.BlendShapePresetName = {})).A = "a", t.Angry = "angry", t.Blink = "blink", t.BlinkL = "blink_l", t.BlinkR = "blink_r", t.E = "e", t.Fun = "fun", t.I = "i", t.Joy = "joy", t.Lookdown = "lookdown", t.Lookleft = "lookleft", t.Lookright = "lookright", t.Lookup = "lookup", t.Neutral = "neutral", t.O = "o", t.Sorrow = "sorrow", t.U = "u", t.Unknown = "unknown", (n2 = e.FirstPersonLookAtTypeName || (e.FirstPersonLookAtTypeName = {})).BlendShape = "BlendShape", n2.Bone = "Bone", (i2 = e.HumanoidBoneName || (e.HumanoidBoneName = {})).Chest = "chest", i2.Head = "head", i2.Hips = "hips", i2.Jaw = "jaw", i2.LeftEye = "leftEye", i2.LeftFoot = "leftFoot", i2.LeftHand = "leftHand", i2.LeftIndexDistal = "leftIndexDistal", i2.LeftIndexIntermediate = "leftIndexIntermediate", i2.LeftIndexProximal = "leftIndexProximal", i2.LeftLittleDistal = "leftLittleDistal", i2.LeftLittleIntermediate = "leftLittleIntermediate", i2.LeftLittleProximal = "leftLittleProximal", i2.LeftLowerArm = "leftLowerArm", i2.LeftLowerLeg = "leftLowerLeg", i2.LeftMiddleDistal = "leftMiddleDistal", i2.LeftMiddleIntermediate = "leftMiddleIntermediate", i2.LeftMiddleProximal = "leftMiddleProximal", i2.LeftRingDistal = "leftRingDistal", i2.LeftRingIntermediate = "leftRingIntermediate", i2.LeftRingProximal = "leftRingProximal", i2.LeftShoulder = "leftShoulder", i2.LeftThumbDistal = "leftThumbDistal", i2.LeftThumbIntermediate = "leftThumbIntermediate", i2.LeftThumbProximal = "leftThumbProximal", i2.LeftToes = "leftToes", i2.LeftUpperArm = "leftUpperArm", i2.LeftUpperLeg = "leftUpperLeg", i2.Neck = "neck", i2.RightEye = "rightEye", i2.RightFoot = "rightFoot", i2.RightHand = "rightHand", i2.RightIndexDistal = "rightIndexDistal", i2.RightIndexIntermediate = "rightIndexIntermediate", i2.RightIndexProximal = "rightIndexProximal", i2.RightLittleDistal = "rightLittleDistal", i2.RightLittleIntermediate = "rightLittleIntermediate", i2.RightLittleProximal = "rightLittleProximal", i2.RightLowerArm = "rightLowerArm", i2.RightLowerLeg = "rightLowerLeg", i2.RightMiddleDistal = "rightMiddleDistal", i2.RightMiddleIntermediate = "rightMiddleIntermediate", i2.RightMiddleProximal = "rightMiddleProximal", i2.RightRingDistal = "rightRingDistal", i2.RightRingIntermediate = "rightRingIntermediate", i2.RightRingProximal = "rightRingProximal", i2.RightShoulder = "rightShoulder", i2.RightThumbDistal = "rightThumbDistal", i2.RightThumbIntermediate = "rightThumbIntermediate", i2.RightThumbProximal = "rightThumbProximal", i2.RightToes = "rightToes", i2.RightUpperArm = "rightUpperArm", i2.RightUpperLeg = "rightUpperLeg", i2.Spine = "spine", i2.UpperChest = "upperChest", (r2 = e.MetaAllowedUserName || (e.MetaAllowedUserName = {})).Everyone = "Everyone", r2.ExplicitlyLicensedPerson = "ExplicitlyLicensedPerson", r2.OnlyAuthor = "OnlyAuthor", (o2 = e.MetaUssageName || (e.MetaUssageName = {})).Allow = "Allow", o2.Disallow = "Disallow", (s3 = e.MetaLicenseName || (e.MetaLicenseName = {})).Cc0 = "CC0", s3.CcBy = "CC_BY", s3.CcByNc = "CC_BY_NC", s3.CcByNcNd = "CC_BY_NC_ND", s3.CcByNcSa = "CC_BY_NC_SA", s3.CcByNd = "CC_BY_ND", s3.CcBySa = "CC_BY_SA", s3.Other = "Other", s3.RedistributionProhibited = "Redistribution_Prohibited";
  }(u || (u = {}));
  var f = new Vector3();
  var g = new Vector3();
  function _(e, t) {
    return e.matrixWorld.decompose(f, t, g), t;
  }
  new Quaternion();
  var v = class {
    constructor() {
      this._blendShapeGroups = {}, this._blendShapePresetMap = {}, this._unknownGroupNames = [];
    }
    get expressions() {
      return Object.keys(this._blendShapeGroups);
    }
    get blendShapePresetMap() {
      return this._blendShapePresetMap;
    }
    get unknownGroupNames() {
      return this._unknownGroupNames;
    }
    getBlendShapeGroup(e) {
      const t = this._blendShapePresetMap[e], n2 = t ? this._blendShapeGroups[t] : this._blendShapeGroups[e];
      if (n2)
        return n2;
      console.warn(`no blend shape found by ${e}`);
    }
    registerBlendShapeGroup(e, t, n2) {
      this._blendShapeGroups[e] = n2, t ? this._blendShapePresetMap[t] = e : this._unknownGroupNames.push(e);
    }
    getValue(e) {
      var t;
      const n2 = this.getBlendShapeGroup(e);
      return (t = n2 == null ? void 0 : n2.weight) !== null && t !== void 0 ? t : null;
    }
    setValue(e, t) {
      const n2 = this.getBlendShapeGroup(e);
      var i2;
      n2 && (n2.weight = (i2 = t, Math.max(Math.min(i2, 1), 0)));
    }
    getBlendShapeTrackName(e) {
      const t = this.getBlendShapeGroup(e);
      return t ? `${t.name}.weight` : null;
    }
    update() {
      Object.keys(this._blendShapeGroups).forEach((e) => {
        this._blendShapeGroups[e].clearAppliedWeight();
      }), Object.keys(this._blendShapeGroups).forEach((e) => {
        this._blendShapeGroups[e].applyWeight();
      });
    }
  };
  var T = class {
    import(e) {
      var t;
      return n(this, void 0, void 0, function* () {
        const i2 = (t = e.parser.json.extensions) === null || t === void 0 ? void 0 : t.VRM;
        if (!i2)
          return null;
        const r2 = i2.blendShapeMaster;
        if (!r2)
          return null;
        const o2 = new v(), s3 = r2.blendShapeGroups;
        if (!s3)
          return o2;
        const a2 = {};
        return yield Promise.all(s3.map((t2) => n(this, void 0, void 0, function* () {
          const i3 = t2.name;
          if (i3 === void 0)
            return void console.warn("VRMBlendShapeImporter: One of blendShapeGroups has no name");
          let r3;
          t2.presetName && t2.presetName !== u.BlendShapePresetName.Unknown && !a2[t2.presetName] && (r3 = t2.presetName, a2[t2.presetName] = i3);
          const s4 = new h(i3);
          e.scene.add(s4), s4.isBinary = t2.isBinary || false, t2.binds && t2.binds.forEach((i4) => n(this, void 0, void 0, function* () {
            if (i4.mesh === void 0 || i4.index === void 0)
              return;
            const r4 = [];
            e.parser.json.nodes.forEach((e2, t3) => {
              e2.mesh === i4.mesh && r4.push(t3);
            });
            const o3 = i4.index;
            yield Promise.all(r4.map((r5) => n(this, void 0, void 0, function* () {
              var a3;
              const l3 = yield function(e2, t3) {
                return n(this, void 0, void 0, function* () {
                  const n2 = yield e2.parser.getDependency("node", t3);
                  return c(e2, t3, n2);
                });
              }(e, r5);
              l3.every((e2) => Array.isArray(e2.morphTargetInfluences) && o3 < e2.morphTargetInfluences.length) ? s4.addBind({ meshes: l3, morphTargetIndex: o3, weight: (a3 = i4.weight) !== null && a3 !== void 0 ? a3 : 100 }) : console.warn(`VRMBlendShapeImporter: ${t2.name} attempts to index ${o3}th morph but not found.`);
            })));
          }));
          const l2 = t2.materialValues;
          l2 && l2.forEach((t3) => {
            if (t3.materialName === void 0 || t3.propertyName === void 0 || t3.targetValue === void 0)
              return;
            const n2 = [];
            e.scene.traverse((e2) => {
              if (e2.material) {
                const i4 = e2.material;
                Array.isArray(i4) ? n2.push(...i4.filter((e3) => e3.name === t3.materialName && n2.indexOf(e3) === -1)) : i4.name === t3.materialName && n2.indexOf(i4) === -1 && n2.push(i4);
              }
            }), n2.forEach((e2) => {
              s4.addMaterialValue({ material: e2, propertyName: m(t3.propertyName), targetValue: t3.targetValue });
            });
          }), o2.registerBlendShapeGroup(i3, r3, s4);
        }))), o2;
      });
    }
  };
  var y = Object.freeze(new Vector3(0, 0, -1));
  var x = new Quaternion();
  var S;
  !function(e) {
    e[e.Auto = 0] = "Auto", e[e.Both = 1] = "Both", e[e.ThirdPersonOnly = 2] = "ThirdPersonOnly", e[e.FirstPersonOnly = 3] = "FirstPersonOnly";
  }(S || (S = {}));
  var M = class {
    constructor(e, t) {
      this.firstPersonFlag = M._parseFirstPersonFlag(e), this.primitives = t;
    }
    static _parseFirstPersonFlag(e) {
      switch (e) {
        case "Both":
          return S.Both;
        case "ThirdPersonOnly":
          return S.ThirdPersonOnly;
        case "FirstPersonOnly":
          return S.FirstPersonOnly;
        default:
          return S.Auto;
      }
    }
  };
  var E = class {
    constructor(e, t, n2) {
      this._meshAnnotations = [], this._firstPersonOnlyLayer = E._DEFAULT_FIRSTPERSON_ONLY_LAYER, this._thirdPersonOnlyLayer = E._DEFAULT_THIRDPERSON_ONLY_LAYER, this._initialized = false, this._firstPersonBone = e, this._firstPersonBoneOffset = t, this._meshAnnotations = n2;
    }
    get firstPersonBone() {
      return this._firstPersonBone;
    }
    get meshAnnotations() {
      return this._meshAnnotations;
    }
    getFirstPersonWorldDirection(e) {
      return e.copy(y).applyQuaternion(_(this._firstPersonBone, x));
    }
    get firstPersonOnlyLayer() {
      return this._firstPersonOnlyLayer;
    }
    get thirdPersonOnlyLayer() {
      return this._thirdPersonOnlyLayer;
    }
    getFirstPersonBoneOffset(e) {
      return e.copy(this._firstPersonBoneOffset);
    }
    getFirstPersonWorldPosition(t) {
      const n2 = this._firstPersonBoneOffset, i2 = new Vector4(n2.x, n2.y, n2.z, 1);
      return i2.applyMatrix4(this._firstPersonBone.matrixWorld), t.set(i2.x, i2.y, i2.z);
    }
    setup({ firstPersonOnlyLayer: e = E._DEFAULT_FIRSTPERSON_ONLY_LAYER, thirdPersonOnlyLayer: t = E._DEFAULT_THIRDPERSON_ONLY_LAYER } = {}) {
      this._initialized || (this._initialized = true, this._firstPersonOnlyLayer = e, this._thirdPersonOnlyLayer = t, this._meshAnnotations.forEach((e2) => {
        e2.firstPersonFlag === S.FirstPersonOnly ? e2.primitives.forEach((e3) => {
          e3.layers.set(this._firstPersonOnlyLayer);
        }) : e2.firstPersonFlag === S.ThirdPersonOnly ? e2.primitives.forEach((e3) => {
          e3.layers.set(this._thirdPersonOnlyLayer);
        }) : e2.firstPersonFlag === S.Auto && this._createHeadlessModel(e2.primitives);
      }));
    }
    _excludeTriangles(e, t, n2, i2) {
      let r2 = 0;
      if (t != null && t.length > 0)
        for (let o2 = 0; o2 < e.length; o2 += 3) {
          const s3 = e[o2], a2 = e[o2 + 1], l2 = e[o2 + 2], d2 = t[s3], h2 = n2[s3];
          if (d2[0] > 0 && i2.includes(h2[0]))
            continue;
          if (d2[1] > 0 && i2.includes(h2[1]))
            continue;
          if (d2[2] > 0 && i2.includes(h2[2]))
            continue;
          if (d2[3] > 0 && i2.includes(h2[3]))
            continue;
          const u2 = t[a2], c2 = n2[a2];
          if (u2[0] > 0 && i2.includes(c2[0]))
            continue;
          if (u2[1] > 0 && i2.includes(c2[1]))
            continue;
          if (u2[2] > 0 && i2.includes(c2[2]))
            continue;
          if (u2[3] > 0 && i2.includes(c2[3]))
            continue;
          const p3 = t[l2], m2 = n2[l2];
          p3[0] > 0 && i2.includes(m2[0]) || (p3[1] > 0 && i2.includes(m2[1]) || p3[2] > 0 && i2.includes(m2[2]) || p3[3] > 0 && i2.includes(m2[3]) || (e[r2++] = s3, e[r2++] = a2, e[r2++] = l2));
        }
      return r2;
    }
    _createErasedMesh(t, n2) {
      const i2 = new SkinnedMesh(t.geometry.clone(), t.material);
      i2.name = `${t.name}(erase)`, i2.frustumCulled = t.frustumCulled, i2.layers.set(this._firstPersonOnlyLayer);
      const r2 = i2.geometry, o2 = r2.getAttribute("skinIndex").array, s3 = [];
      for (let e = 0; e < o2.length; e += 4)
        s3.push([o2[e], o2[e + 1], o2[e + 2], o2[e + 3]]);
      const a2 = r2.getAttribute("skinWeight").array, l2 = [];
      for (let e = 0; e < a2.length; e += 4)
        l2.push([a2[e], a2[e + 1], a2[e + 2], a2[e + 3]]);
      const d2 = r2.getIndex();
      if (!d2)
        throw new Error("The geometry doesn't have an index buffer");
      const h2 = Array.from(d2.array), u2 = this._excludeTriangles(h2, l2, s3, n2), c2 = [];
      for (let e = 0; e < u2; e++)
        c2[e] = h2[e];
      return r2.setIndex(c2), t.onBeforeRender && (i2.onBeforeRender = t.onBeforeRender), i2.bind(new Skeleton(t.skeleton.bones, t.skeleton.boneInverses), new Matrix4()), i2;
    }
    _createHeadlessModelForSkinnedMesh(e, t) {
      const n2 = [];
      if (t.skeleton.bones.forEach((e2, t2) => {
        this._isEraseTarget(e2) && n2.push(t2);
      }), !n2.length)
        return t.layers.enable(this._thirdPersonOnlyLayer), void t.layers.enable(this._firstPersonOnlyLayer);
      t.layers.set(this._thirdPersonOnlyLayer);
      const i2 = this._createErasedMesh(t, n2);
      e.add(i2);
    }
    _createHeadlessModel(e) {
      e.forEach((e2) => {
        if (e2.type === "SkinnedMesh") {
          const t = e2;
          this._createHeadlessModelForSkinnedMesh(t.parent, t);
        } else
          this._isEraseTarget(e2) && e2.layers.set(this._thirdPersonOnlyLayer);
      });
    }
    _isEraseTarget(e) {
      return e === this._firstPersonBone || !!e.parent && this._isEraseTarget(e.parent);
    }
  };
  E._DEFAULT_FIRSTPERSON_ONLY_LAYER = 9, E._DEFAULT_THIRDPERSON_ONLY_LAYER = 10;
  var L = class {
    import(t, i2) {
      var r2;
      return n(this, void 0, void 0, function* () {
        const n2 = (r2 = t.parser.json.extensions) === null || r2 === void 0 ? void 0 : r2.VRM;
        if (!n2)
          return null;
        const o2 = n2.firstPerson;
        if (!o2)
          return null;
        const s3 = o2.firstPersonBone;
        let a2;
        if (a2 = s3 === void 0 || s3 === -1 ? i2.getBoneNode(u.HumanoidBoneName.Head) : yield t.parser.getDependency("node", s3), !a2)
          return console.warn("VRMFirstPersonImporter: Could not find firstPersonBone of the VRM"), null;
        const l2 = o2.firstPersonBoneOffset ? new Vector3(o2.firstPersonBoneOffset.x, o2.firstPersonBoneOffset.y, -o2.firstPersonBoneOffset.z) : new Vector3(0, 0.06, 0), d2 = [], h2 = yield p2(t);
        return Array.from(h2.entries()).forEach(([e, n3]) => {
          const i3 = t.parser.json.nodes[e], r3 = o2.meshAnnotations ? o2.meshAnnotations.find((e2) => e2.mesh === i3.mesh) : void 0;
          d2.push(new M(r3 == null ? void 0 : r3.firstPersonFlag, n3));
        }), new E(a2, l2, d2);
      });
    }
  };
  var R = class {
    constructor(e, t) {
      this.node = e, this.humanLimit = t;
    }
  };
  function w(e) {
    return e.invert ? e.invert() : e.inverse(), e;
  }
  var P = new Vector3();
  var A = new Quaternion();
  var b = class {
    constructor(e, t) {
      this.restPose = {}, this.humanBones = this._createHumanBones(e), this.humanDescription = t, this.restPose = this.getPose();
    }
    getPose() {
      const e = {};
      return Object.keys(this.humanBones).forEach((t) => {
        const n2 = this.getBoneNode(t);
        if (!n2)
          return;
        if (e[t])
          return;
        P.set(0, 0, 0), A.identity();
        const i2 = this.restPose[t];
        (i2 == null ? void 0 : i2.position) && P.fromArray(i2.position).negate(), (i2 == null ? void 0 : i2.rotation) && w(A.fromArray(i2.rotation)), P.add(n2.position), A.premultiply(n2.quaternion), e[t] = { position: P.toArray(), rotation: A.toArray() };
      }, {}), e;
    }
    setPose(e) {
      Object.keys(e).forEach((t) => {
        const n2 = e[t], i2 = this.getBoneNode(t);
        if (!i2)
          return;
        const r2 = this.restPose[t];
        r2 && (n2.position && (i2.position.fromArray(n2.position), r2.position && i2.position.add(P.fromArray(r2.position))), n2.rotation && (i2.quaternion.fromArray(n2.rotation), r2.rotation && i2.quaternion.multiply(A.fromArray(r2.rotation))));
      });
    }
    resetPose() {
      Object.entries(this.restPose).forEach(([e, t]) => {
        const n2 = this.getBoneNode(e);
        n2 && ((t == null ? void 0 : t.position) && n2.position.fromArray(t.position), (t == null ? void 0 : t.rotation) && n2.quaternion.fromArray(t.rotation));
      });
    }
    getBone(e) {
      var t;
      return (t = this.humanBones[e][0]) !== null && t !== void 0 ? t : void 0;
    }
    getBones(e) {
      var t;
      return (t = this.humanBones[e]) !== null && t !== void 0 ? t : [];
    }
    getBoneNode(e) {
      var t, n2;
      return (n2 = (t = this.humanBones[e][0]) === null || t === void 0 ? void 0 : t.node) !== null && n2 !== void 0 ? n2 : null;
    }
    getBoneNodes(e) {
      var t, n2;
      return (n2 = (t = this.humanBones[e]) === null || t === void 0 ? void 0 : t.map((e2) => e2.node)) !== null && n2 !== void 0 ? n2 : [];
    }
    _createHumanBones(e) {
      const t = Object.values(u.HumanoidBoneName).reduce((e2, t2) => (e2[t2] = [], e2), {});
      return e.forEach((e2) => {
        t[e2.name].push(e2.bone);
      }), t;
    }
  };
  var I = class {
    import(t) {
      var i2;
      return n(this, void 0, void 0, function* () {
        const r2 = (i2 = t.parser.json.extensions) === null || i2 === void 0 ? void 0 : i2.VRM;
        if (!r2)
          return null;
        const o2 = r2.humanoid;
        if (!o2)
          return null;
        const s3 = [];
        o2.humanBones && (yield Promise.all(o2.humanBones.map((i3) => n(this, void 0, void 0, function* () {
          if (!i3.bone || i3.node == null)
            return;
          const n2 = yield t.parser.getDependency("node", i3.node);
          s3.push({ name: i3.bone, bone: new R(n2, { axisLength: i3.axisLength, center: i3.center && new Vector3(i3.center.x, i3.center.y, i3.center.z), max: i3.max && new Vector3(i3.max.x, i3.max.y, i3.max.z), min: i3.min && new Vector3(i3.min.x, i3.min.y, i3.min.z), useDefaultValues: i3.useDefaultValues }) });
        }))));
        const a2 = { armStretch: o2.armStretch, legStretch: o2.legStretch, upperArmTwist: o2.upperArmTwist, lowerArmTwist: o2.lowerArmTwist, upperLegTwist: o2.upperLegTwist, lowerLegTwist: o2.lowerLegTwist, feetSpacing: o2.feetSpacing, hasTranslationDoF: o2.hasTranslationDoF };
        return new b(s3, a2);
      });
    }
  };
  var O = class {
    constructor(e, t, n2) {
      this.curve = [0, 0, 0, 1, 1, 1, 1, 0], this.curveXRangeDegree = 90, this.curveYRangeDegree = 10, e !== void 0 && (this.curveXRangeDegree = e), t !== void 0 && (this.curveYRangeDegree = t), n2 !== void 0 && (this.curve = n2);
    }
    map(e) {
      const t = Math.min(Math.max(e, 0), this.curveXRangeDegree) / this.curveXRangeDegree;
      return this.curveYRangeDegree * ((e2, t2) => {
        if (e2.length < 8)
          throw new Error("evaluateCurve: Invalid curve detected! (Array length must be 8 at least)");
        if (e2.length % 4 != 0)
          throw new Error("evaluateCurve: Invalid curve detected! (Array length must be multiples of 4");
        let n2;
        for (n2 = 0; ; n2++) {
          if (e2.length <= 4 * n2)
            return e2[4 * n2 - 3];
          if (t2 <= e2[4 * n2])
            break;
        }
        const i2 = n2 - 1;
        if (i2 < 0)
          return e2[4 * i2 + 5];
        const r2 = e2[4 * i2], o2 = (t2 - r2) / (e2[4 * n2] - r2);
        return ((e3, t3, n3, i3, r3) => {
          const o3 = r3 * r3 * r3, s3 = r3 * r3;
          return e3 + (t3 - e3) * (-2 * o3 + 3 * s3) + n3 * (o3 - 2 * s3 + r3) + i3 * (o3 - s3);
        })(e2[4 * i2 + 1], e2[4 * n2 + 1], e2[4 * i2 + 3], e2[4 * n2 + 2], o2);
      })(this.curve, t);
    }
  };
  var C = class {
  };
  var N = class extends C {
    constructor(e, t, n2, i2) {
      super(), this.type = u.FirstPersonLookAtTypeName.BlendShape, this._curveHorizontal = t, this._curveVerticalDown = n2, this._curveVerticalUp = i2, this._blendShapeProxy = e;
    }
    name() {
      return u.FirstPersonLookAtTypeName.BlendShape;
    }
    lookAt(e) {
      const t = e.x, n2 = e.y;
      t < 0 ? (this._blendShapeProxy.setValue(u.BlendShapePresetName.Lookup, 0), this._blendShapeProxy.setValue(u.BlendShapePresetName.Lookdown, this._curveVerticalDown.map(-t))) : (this._blendShapeProxy.setValue(u.BlendShapePresetName.Lookdown, 0), this._blendShapeProxy.setValue(u.BlendShapePresetName.Lookup, this._curveVerticalUp.map(t))), n2 < 0 ? (this._blendShapeProxy.setValue(u.BlendShapePresetName.Lookleft, 0), this._blendShapeProxy.setValue(u.BlendShapePresetName.Lookright, this._curveHorizontal.map(-n2))) : (this._blendShapeProxy.setValue(u.BlendShapePresetName.Lookright, 0), this._blendShapeProxy.setValue(u.BlendShapePresetName.Lookleft, this._curveHorizontal.map(n2)));
    }
  };
  var D = Object.freeze(new Vector3(0, 0, -1));
  var U = new Vector3();
  var V = new Vector3();
  var B = new Vector3();
  var G = new Quaternion();
  var H = class {
    constructor(t, n2) {
      this.autoUpdate = true, this._euler = new Euler(0, 0, 0, H.EULER_ORDER), this.firstPerson = t, this.applyer = n2;
    }
    getLookAtWorldDirection(e) {
      const t = _(this.firstPerson.firstPersonBone, G);
      return e.copy(D).applyEuler(this._euler).applyQuaternion(t);
    }
    lookAt(e) {
      this._calcEuler(this._euler, e), this.applyer && this.applyer.lookAt(this._euler);
    }
    update(e) {
      this.target && this.autoUpdate && (this.lookAt(this.target.getWorldPosition(U)), this.applyer && this.applyer.lookAt(this._euler));
    }
    _calcEuler(e, t) {
      const n2 = this.firstPerson.getFirstPersonWorldPosition(V), i2 = B.copy(t).sub(n2).normalize();
      return i2.applyQuaternion(w(_(this.firstPerson.firstPersonBone, G))), e.x = Math.atan2(i2.y, Math.sqrt(i2.x * i2.x + i2.z * i2.z)), e.y = Math.atan2(-i2.x, -i2.z), e;
    }
  };
  H.EULER_ORDER = "YXZ";
  var F = new Euler(0, 0, 0, H.EULER_ORDER);
  var k = class extends C {
    constructor(e, t, n2, i2, r2) {
      super(), this.type = u.FirstPersonLookAtTypeName.Bone, this._curveHorizontalInner = t, this._curveHorizontalOuter = n2, this._curveVerticalDown = i2, this._curveVerticalUp = r2, this._leftEye = e.getBoneNode(u.HumanoidBoneName.LeftEye), this._rightEye = e.getBoneNode(u.HumanoidBoneName.RightEye);
    }
    lookAt(e) {
      const t = e.x, n2 = e.y;
      this._leftEye && (F.x = t < 0 ? -this._curveVerticalDown.map(-t) : this._curveVerticalUp.map(t), F.y = n2 < 0 ? -this._curveHorizontalInner.map(-n2) : this._curveHorizontalOuter.map(n2), this._leftEye.quaternion.setFromEuler(F)), this._rightEye && (F.x = t < 0 ? -this._curveVerticalDown.map(-t) : this._curveVerticalUp.map(t), F.y = n2 < 0 ? -this._curveHorizontalOuter.map(-n2) : this._curveHorizontalInner.map(n2), this._rightEye.quaternion.setFromEuler(F));
    }
  };
  var W = Math.PI / 180;
  var z = class {
    import(e, t, n2, i2) {
      var r2;
      const o2 = (r2 = e.parser.json.extensions) === null || r2 === void 0 ? void 0 : r2.VRM;
      if (!o2)
        return null;
      const s3 = o2.firstPerson;
      if (!s3)
        return null;
      const a2 = this._importApplyer(s3, n2, i2);
      return new H(t, a2 || void 0);
    }
    _importApplyer(e, t, n2) {
      const i2 = e.lookAtHorizontalInner, r2 = e.lookAtHorizontalOuter, o2 = e.lookAtVerticalDown, s3 = e.lookAtVerticalUp;
      switch (e.lookAtTypeName) {
        case u.FirstPersonLookAtTypeName.Bone:
          return i2 === void 0 || r2 === void 0 || o2 === void 0 || s3 === void 0 ? null : new k(n2, this._importCurveMapperBone(i2), this._importCurveMapperBone(r2), this._importCurveMapperBone(o2), this._importCurveMapperBone(s3));
        case u.FirstPersonLookAtTypeName.BlendShape:
          return r2 === void 0 || o2 === void 0 || s3 === void 0 ? null : new N(t, this._importCurveMapperBlendShape(r2), this._importCurveMapperBlendShape(o2), this._importCurveMapperBlendShape(s3));
        default:
          return null;
      }
    }
    _importCurveMapperBone(e) {
      return new O(typeof e.xRange == "number" ? W * e.xRange : void 0, typeof e.yRange == "number" ? W * e.yRange : void 0, e.curve);
    }
    _importCurveMapperBlendShape(e) {
      return new O(typeof e.xRange == "number" ? W * e.xRange : void 0, e.yRange, e.curve);
    }
  };
  var j = '// #define PHONG\n\n#ifdef BLENDMODE_CUTOUT\n  uniform float cutoff;\n#endif\n\nuniform vec3 color;\nuniform float colorAlpha;\nuniform vec3 shadeColor;\n#ifdef USE_SHADETEXTURE\n  uniform sampler2D shadeTexture;\n#endif\n\nuniform float receiveShadowRate;\n#ifdef USE_RECEIVESHADOWTEXTURE\n  uniform sampler2D receiveShadowTexture;\n#endif\n\nuniform float shadingGradeRate;\n#ifdef USE_SHADINGGRADETEXTURE\n  uniform sampler2D shadingGradeTexture;\n#endif\n\nuniform float shadeShift;\nuniform float shadeToony;\nuniform float lightColorAttenuation;\nuniform float indirectLightIntensity;\n\n#ifdef USE_RIMTEXTURE\n  uniform sampler2D rimTexture;\n#endif\nuniform vec3 rimColor;\nuniform float rimLightingMix;\nuniform float rimFresnelPower;\nuniform float rimLift;\n\n#ifdef USE_SPHEREADD\n  uniform sampler2D sphereAdd;\n#endif\n\nuniform vec3 emissionColor;\n\nuniform vec3 outlineColor;\nuniform float outlineLightingMix;\n\n#ifdef USE_UVANIMMASKTEXTURE\n  uniform sampler2D uvAnimMaskTexture;\n#endif\n\nuniform float uvAnimOffsetX;\nuniform float uvAnimOffsetY;\nuniform float uvAnimTheta;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n\n// #include <uv_pars_fragment>\n#if ( defined( MTOON_USE_UV ) && !defined( MTOON_UVS_VERTEX_ONLY ) )\n  varying vec2 vUv;\n#endif\n\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n// #include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n// #include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n// #include <envmap_common_pars_fragment>\n// #include <envmap_pars_fragment>\n// #include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n\n// #include <bsdfs>\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n    return RECIPROCAL_PI * diffuseColor;\n}\n\n#include <lights_pars_begin>\n\n// #include <lights_phong_pars_fragment>\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n  varying vec3 vNormal;\n#endif\n\nstruct MToonMaterial {\n  vec3 diffuseColor;\n  vec3 shadeColor;\n  float shadingGrade;\n  float receiveShadow;\n};\n\n#define Material_LightProbeLOD( material ) (0)\n\n#include <shadowmap_pars_fragment>\n// #include <bumpmap_pars_fragment>\n\n// #include <normalmap_pars_fragment>\n#ifdef USE_NORMALMAP\n\n  uniform sampler2D normalMap;\n  uniform vec2 normalScale;\n\n#endif\n\n#ifdef OBJECTSPACE_NORMALMAP\n\n  uniform mat3 normalMatrix;\n\n#endif\n\n#if ! defined ( USE_TANGENT ) && defined ( TANGENTSPACE_NORMALMAP )\n\n  // Per-Pixel Tangent Space Normal Mapping\n  // http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\n\n  // three-vrm specific change: it requires `uv` as an input in order to support uv scrolls\n\n  // Temporary compat against shader change @ Three.js r126\n  // See: #21205, #21307, #21299\n  #if THREE_VRM_THREE_REVISION >= 126\n\n    vec3 perturbNormal2Arb( vec2 uv, vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\n      vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n      vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n      vec2 st0 = dFdx( uv.st );\n      vec2 st1 = dFdy( uv.st );\n\n      vec3 N = normalize( surf_norm );\n\n      vec3 q1perp = cross( q1, N );\n      vec3 q0perp = cross( N, q0 );\n\n      vec3 T = q1perp * st0.x + q0perp * st1.x;\n      vec3 B = q1perp * st0.y + q0perp * st1.y;\n\n      // three-vrm specific change: Workaround for the issue that happens when delta of uv = 0.0\n      // TODO: Is this still required? Or shall I make a PR about it?\n      if ( length( T ) == 0.0 || length( B ) == 0.0 ) {\n        return surf_norm;\n      }\n\n      float det = max( dot( T, T ), dot( B, B ) );\n      float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\n      return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\n    }\n\n  #else\n\n    vec3 perturbNormal2Arb( vec2 uv, vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n\n      // Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\n\n      vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n      vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n      vec2 st0 = dFdx( uv.st );\n      vec2 st1 = dFdy( uv.st );\n\n      float scale = sign( st1.t * st0.s - st0.t * st1.s ); // we do not care about the magnitude\n\n      vec3 S = ( q0 * st1.t - q1 * st0.t ) * scale;\n      vec3 T = ( - q0 * st1.s + q1 * st0.s ) * scale;\n\n      // three-vrm specific change: Workaround for the issue that happens when delta of uv = 0.0\n      // TODO: Is this still required? Or shall I make a PR about it?\n\n      if ( length( S ) == 0.0 || length( T ) == 0.0 ) {\n        return surf_norm;\n      }\n\n      S = normalize( S );\n      T = normalize( T );\n      vec3 N = normalize( surf_norm );\n\n      #ifdef DOUBLE_SIDED\n\n        // Workaround for Adreno GPUs gl_FrontFacing bug. See #15850 and #10331\n\n        bool frontFacing = dot( cross( S, T ), N ) > 0.0;\n\n        mapN.xy *= ( float( frontFacing ) * 2.0 - 1.0 );\n\n      #else\n\n        mapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\n      #endif\n\n      mat3 tsn = mat3( S, T, N );\n      return normalize( tsn * mapN );\n\n    }\n\n  #endif\n\n#endif\n\n// #include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\n// == lighting stuff ===========================================================\nfloat getLightIntensity(\n  const in IncidentLight directLight,\n  const in GeometricContext geometry,\n  const in float shadow,\n  const in float shadingGrade\n) {\n  float lightIntensity = dot( geometry.normal, directLight.direction );\n  lightIntensity = 0.5 + 0.5 * lightIntensity;\n  lightIntensity = lightIntensity * shadow;\n  lightIntensity = lightIntensity * shadingGrade;\n  lightIntensity = lightIntensity * 2.0 - 1.0;\n  return shadeToony == 1.0\n    ? step( shadeShift, lightIntensity )\n    : smoothstep( shadeShift, shadeShift + ( 1.0 - shadeToony ), lightIntensity );\n}\n\nvec3 getLighting( const in vec3 lightColor ) {\n  vec3 lighting = lightColor;\n  lighting = mix(\n    lighting,\n    vec3( max( 0.001, max( lighting.x, max( lighting.y, lighting.z ) ) ) ),\n    lightColorAttenuation\n  );\n\n  #if THREE_VRM_THREE_REVISION < 132\n    #ifndef PHYSICALLY_CORRECT_LIGHTS\n      lighting *= PI;\n    #endif\n  #endif\n\n  return lighting;\n}\n\nvec3 getDiffuse(\n  const in MToonMaterial material,\n  const in float lightIntensity,\n  const in vec3 lighting\n) {\n  #ifdef DEBUG_LITSHADERATE\n    return vec3( BRDF_Lambert( lightIntensity * lighting ) );\n  #endif\n\n  return lighting * BRDF_Lambert( mix( material.shadeColor, material.diffuseColor, lightIntensity ) );\n}\n\n// == post correction ==========================================================\nvoid postCorrection() {\n  #include <tonemapping_fragment>\n  #include <encodings_fragment>\n  #include <fog_fragment>\n  #include <premultiplied_alpha_fragment>\n  #include <dithering_fragment>\n}\n\n// == main procedure ===========================================================\nvoid main() {\n  #include <clipping_planes_fragment>\n\n  vec2 uv = vec2(0.5, 0.5);\n\n  #if ( defined( MTOON_USE_UV ) && !defined( MTOON_UVS_VERTEX_ONLY ) )\n    uv = vUv;\n\n    float uvAnimMask = 1.0;\n    #ifdef USE_UVANIMMASKTEXTURE\n      uvAnimMask = texture2D( uvAnimMaskTexture, uv ).x;\n    #endif\n\n    uv = uv + vec2( uvAnimOffsetX, uvAnimOffsetY ) * uvAnimMask;\n    float uvRotCos = cos( uvAnimTheta * uvAnimMask );\n    float uvRotSin = sin( uvAnimTheta * uvAnimMask );\n    uv = mat2( uvRotCos, uvRotSin, -uvRotSin, uvRotCos ) * ( uv - 0.5 ) + 0.5;\n  #endif\n\n  #ifdef DEBUG_UV\n    gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n    #if ( defined( MTOON_USE_UV ) && !defined( MTOON_UVS_VERTEX_ONLY ) )\n      gl_FragColor = vec4( uv, 0.0, 1.0 );\n    #endif\n    return;\n  #endif\n\n  vec4 diffuseColor = vec4( color, colorAlpha );\n  ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n  vec3 totalEmissiveRadiance = emissionColor;\n\n  #include <logdepthbuf_fragment>\n\n  // #include <map_fragment>\n  #ifdef USE_MAP\n    #if THREE_VRM_THREE_REVISION >= 137\n      vec4 sampledDiffuseColor = texture2D( map, uv );\n      #ifdef DECODE_VIDEO_TEXTURE\n        sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n      #endif\n      diffuseColor *= sampledDiffuseColor;\n    #else\n      // COMPAT: pre-r137\n      diffuseColor *= mapTexelToLinear( texture2D( map, uv ) );\n    #endif\n  #endif\n\n  #include <color_fragment>\n  // #include <alphamap_fragment>\n\n  // -- MToon: alpha -----------------------------------------------------------\n  // #include <alphatest_fragment>\n  #ifdef BLENDMODE_CUTOUT\n    if ( diffuseColor.a <= cutoff ) { discard; }\n    diffuseColor.a = 1.0;\n  #endif\n\n  #ifdef BLENDMODE_OPAQUE\n    diffuseColor.a = 1.0;\n  #endif\n\n  #if defined( OUTLINE ) && defined( OUTLINE_COLOR_FIXED ) // omitting DebugMode\n    gl_FragColor = vec4( outlineColor, diffuseColor.a );\n    postCorrection();\n    return;\n  #endif\n\n  // #include <specularmap_fragment>\n  #include <normal_fragment_begin>\n\n  #ifdef OUTLINE\n    normal *= -1.0;\n  #endif\n\n  // #include <normal_fragment_maps>\n\n  #ifdef OBJECTSPACE_NORMALMAP\n\n    normal = texture2D( normalMap, uv ).xyz * 2.0 - 1.0; // overrides both flatShading and attribute normals\n\n    #ifdef FLIP_SIDED\n\n      normal = - normal;\n\n    #endif\n\n    #ifdef DOUBLE_SIDED\n\n      // Temporary compat against shader change @ Three.js r126\n      // See: #21205, #21307, #21299\n      #if THREE_VRM_THREE_REVISION >= 126\n\n        normal = normal * faceDirection;\n\n      #else\n\n        normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\n      #endif\n\n    #endif\n\n    normal = normalize( normalMatrix * normal );\n\n  #elif defined( TANGENTSPACE_NORMALMAP )\n\n    vec3 mapN = texture2D( normalMap, uv ).xyz * 2.0 - 1.0;\n    mapN.xy *= normalScale;\n\n    #ifdef USE_TANGENT\n\n      normal = normalize( vTBN * mapN );\n\n    #else\n\n      // Temporary compat against shader change @ Three.js r126\n      // See: #21205, #21307, #21299\n      #if THREE_VRM_THREE_REVISION >= 126\n\n        normal = perturbNormal2Arb( uv, -vViewPosition, normal, mapN, faceDirection );\n\n      #else\n\n        normal = perturbNormal2Arb( uv, -vViewPosition, normal, mapN );\n\n      #endif\n\n    #endif\n\n  #endif\n\n  // #include <emissivemap_fragment>\n  #ifdef USE_EMISSIVEMAP\n    #if THREE_VRM_THREE_REVISION >= 137\n      totalEmissiveRadiance *= texture2D( emissiveMap, uv ).rgb;\n    #else\n      // COMPAT: pre-r137\n      totalEmissiveRadiance *= emissiveMapTexelToLinear( texture2D( emissiveMap, uv ) ).rgb;\n    #endif\n  #endif\n\n  #ifdef DEBUG_NORMAL\n    gl_FragColor = vec4( 0.5 + 0.5 * normal, 1.0 );\n    return;\n  #endif\n\n  // -- MToon: lighting --------------------------------------------------------\n  // accumulation\n  // #include <lights_phong_fragment>\n  MToonMaterial material;\n\n  material.diffuseColor = diffuseColor.rgb;\n\n  material.shadeColor = shadeColor;\n  #ifdef USE_SHADETEXTURE\n    #if THREE_VRM_THREE_REVISION >= 137\n      material.shadeColor *= texture2D( shadeTexture, uv ).rgb;\n    #else\n      // COMPAT: pre-r137\n      material.shadeColor *= shadeTextureTexelToLinear( texture2D( shadeTexture, uv ) ).rgb;\n    #endif\n  #endif\n\n  material.shadingGrade = 1.0;\n  #ifdef USE_SHADINGGRADETEXTURE\n    material.shadingGrade = 1.0 - shadingGradeRate * ( 1.0 - texture2D( shadingGradeTexture, uv ).r );\n  #endif\n\n  material.receiveShadow = receiveShadowRate;\n  #ifdef USE_RECEIVESHADOWTEXTURE\n    material.receiveShadow *= texture2D( receiveShadowTexture, uv ).a;\n  #endif\n\n  // #include <lights_fragment_begin>\n  GeometricContext geometry;\n\n  geometry.position = - vViewPosition;\n  geometry.normal = normal;\n  geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n\n  IncidentLight directLight;\n  vec3 lightingSum = vec3( 0.0 );\n\n  // since these variables will be used in unrolled loop, we have to define in prior\n  float atten, shadow, lightIntensity;\n  vec3 lighting;\n\n  #if ( NUM_POINT_LIGHTS > 0 )\n    PointLight pointLight;\n\n    #if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n    PointLightShadow pointLightShadow;\n    #endif\n\n    #pragma unroll_loop_start\n    for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n      pointLight = pointLights[ i ];\n\n      #if THREE_VRM_THREE_REVISION >= 132\n        getPointLightInfo( pointLight, geometry, directLight );\n      #else\n        getPointDirectLightIrradiance( pointLight, geometry, directLight );\n      #endif\n\n      atten = 1.0;\n      #if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n      pointLightShadow = pointLightShadows[ i ];\n      atten = all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n      #endif\n\n      shadow = 1.0 - material.receiveShadow * ( 1.0 - ( 0.5 + 0.5 * atten ) );\n      lightIntensity = getLightIntensity( directLight, geometry, shadow, material.shadingGrade );\n      lighting = getLighting( directLight.color );\n      reflectedLight.directDiffuse += getDiffuse( material, lightIntensity, lighting );\n      lightingSum += lighting;\n    }\n    #pragma unroll_loop_end\n  #endif\n\n  #if ( NUM_SPOT_LIGHTS > 0 )\n    SpotLight spotLight;\n\n    #if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n    SpotLightShadow spotLightShadow;\n    #endif\n\n    #pragma unroll_loop_start\n    for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n      spotLight = spotLights[ i ];\n\n      #if THREE_VRM_THREE_REVISION >= 132\n        getSpotLightInfo( spotLight, geometry, directLight );\n      #else\n        getSpotDirectLightIrradiance( spotLight, geometry, directLight );\n      #endif\n\n      atten = 1.0;\n      #if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n      spotLightShadow = spotLightShadows[ i ];\n      atten = all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n      #endif\n\n      shadow = 1.0 - material.receiveShadow * ( 1.0 - ( 0.5 + 0.5 * atten ) );\n      lightIntensity = getLightIntensity( directLight, geometry, shadow, material.shadingGrade );\n      lighting = getLighting( directLight.color );\n      reflectedLight.directDiffuse += getDiffuse( material, lightIntensity, lighting );\n      lightingSum += lighting;\n    }\n    #pragma unroll_loop_end\n  #endif\n\n  #if ( NUM_DIR_LIGHTS > 0 )\n    DirectionalLight directionalLight;\n\n    #if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n    DirectionalLightShadow directionalLightShadow;\n    #endif\n\n    #pragma unroll_loop_start\n    for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n      directionalLight = directionalLights[ i ];\n\n      #if THREE_VRM_THREE_REVISION >= 132\n        getDirectionalLightInfo( directionalLight, geometry, directLight );\n      #else\n        getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n      #endif\n\n      atten = 1.0;\n      #if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n      directionalLightShadow = directionalLightShadows[ i ];\n      atten = all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n      #endif\n\n      shadow = 1.0 - material.receiveShadow * ( 1.0 - ( 0.5 + 0.5 * atten ) );\n      lightIntensity = getLightIntensity( directLight, geometry, shadow, material.shadingGrade );\n      lighting = getLighting( directLight.color );\n      reflectedLight.directDiffuse += getDiffuse( material, lightIntensity, lighting );\n      lightingSum += lighting;\n    }\n    #pragma unroll_loop_end\n  #endif\n\n  // #if defined( RE_IndirectDiffuse )\n  vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n  #if THREE_VRM_THREE_REVISION >= 133\n    irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n  #else\n    irradiance += getLightProbeIrradiance( lightProbe, geometry );\n  #endif\n  #if ( NUM_HEMI_LIGHTS > 0 )\n    #pragma unroll_loop_start\n    for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n      irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n    }\n    #pragma unroll_loop_end\n  #endif\n  // #endif\n\n  // #include <lights_fragment_maps>\n  #ifdef USE_LIGHTMAP\n    vec4 lightMapTexel = texture2D( lightMap, vUv2 );\n    #if THREE_VRM_THREE_REVISION >= 137\n      vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n    #else\n      // COMPAT: pre-r137\n      vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n    #endif\n    #ifndef PHYSICALLY_CORRECT_LIGHTS\n      lightMapIrradiance *= PI;\n    #endif\n    irradiance += lightMapIrradiance;\n  #endif\n\n  // #include <lights_fragment_end>\n  // RE_IndirectDiffuse here\n  reflectedLight.indirectDiffuse += indirectLightIntensity * irradiance * BRDF_Lambert( material.diffuseColor );\n\n  // modulation\n  #include <aomap_fragment>\n\n  vec3 col = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\n  // The "comment out if you want to PBR absolutely" line\n  #ifndef DEBUG_LITSHADERATE\n    col = min(col, material.diffuseColor);\n  #endif\n\n  #if defined( OUTLINE ) && defined( OUTLINE_COLOR_MIXED )\n    gl_FragColor = vec4(\n      outlineColor.rgb * mix( vec3( 1.0 ), col, outlineLightingMix ),\n      diffuseColor.a\n    );\n    postCorrection();\n    return;\n  #endif\n\n  #ifdef DEBUG_LITSHADERATE\n    gl_FragColor = vec4( col, diffuseColor.a );\n    postCorrection();\n    return;\n  #endif\n\n  // -- MToon: parametric rim lighting -----------------------------------------\n  vec3 viewDir = normalize( vViewPosition );\n  vec3 rimMix = mix( vec3( 1.0 ), lightingSum + indirectLightIntensity * irradiance, rimLightingMix );\n  vec3 rim = rimColor * pow( saturate( 1.0 - dot( viewDir, normal ) + rimLift ), rimFresnelPower );\n  #ifdef USE_RIMTEXTURE\n    #if THREE_VRM_THREE_REVISION >= 137\n      rim *= texture2D( rimTexture, uv ).rgb;\n    #else\n      // COMPAT: pre-r137\n      rim *= rimTextureTexelToLinear( texture2D( rimTexture, uv ) ).rgb;\n    #endif\n  #endif\n  col += rim;\n\n  // -- MToon: additive matcap -------------------------------------------------\n  #ifdef USE_SPHEREADD\n    {\n      vec3 x = normalize( vec3( viewDir.z, 0.0, -viewDir.x ) );\n      vec3 y = cross( viewDir, x ); // guaranteed to be normalized\n      vec2 sphereUv = 0.5 + 0.5 * vec2( dot( x, normal ), -dot( y, normal ) );\n      #if THREE_VRM_THREE_REVISION >= 137\n        vec3 matcap = texture2D( sphereAdd, sphereUv ).xyz;\n      #else\n        // COMPAT: pre-r137\n        vec3 matcap = sphereAddTexelToLinear( texture2D( sphereAdd, sphereUv ) ).xyz;\n      #endif\n      col += matcap;\n    }\n  #endif\n\n  // -- MToon: Emission --------------------------------------------------------\n  col += totalEmissiveRadiance;\n\n  // #include <envmap_fragment>\n\n  // -- Almost done! -----------------------------------------------------------\n  gl_FragColor = vec4( col, diffuseColor.a );\n  postCorrection();\n}';
  var Y = (t, n2) => {
    const i2 = ((t2) => {
      if (parseInt(REVISION, 10) >= 136)
        switch (t2) {
          case LinearEncoding:
            return ["Linear", "( value )"];
          case sRGBEncoding:
            return ["sRGB", "( value )"];
          default:
            return console.warn("THREE.WebGLProgram: Unsupported encoding:", t2), ["Linear", "( value )"];
        }
      else
        switch (t2) {
          case LinearEncoding:
            return ["Linear", "( value )"];
          case sRGBEncoding:
            return ["sRGB", "( value )"];
          case 3002:
            return ["RGBE", "( value )"];
          case 3004:
            return ["RGBM", "( value, 7.0 )"];
          case 3005:
            return ["RGBM", "( value, 16.0 )"];
          case 3006:
            return ["RGBD", "( value, 256.0 )"];
          case 3007:
            return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];
          default:
            throw new Error("unsupported encoding: " + t2);
        }
    })(n2);
    return "vec4 " + t + "( vec4 value ) { return " + i2[0] + "ToLinear" + i2[1] + "; }";
  };
  var X = 2 * Math.PI;
  var q2;
  var Q;
  var Z;
  var $;
  var J;
  !function(e) {
    e[e.Off = 0] = "Off", e[e.Front = 1] = "Front", e[e.Back = 2] = "Back";
  }(q2 || (q2 = {})), function(e) {
    e[e.None = 0] = "None", e[e.Normal = 1] = "Normal", e[e.LitShadeRate = 2] = "LitShadeRate", e[e.UV = 3] = "UV";
  }(Q || (Q = {})), function(e) {
    e[e.FixedColor = 0] = "FixedColor", e[e.MixedLighting = 1] = "MixedLighting";
  }(Z || (Z = {})), function(e) {
    e[e.None = 0] = "None", e[e.WorldCoordinates = 1] = "WorldCoordinates", e[e.ScreenCoordinates = 2] = "ScreenCoordinates";
  }($ || ($ = {})), function(e) {
    e[e.Opaque = 0] = "Opaque", e[e.Cutout = 1] = "Cutout", e[e.Transparent = 2] = "Transparent", e[e.TransparentWithZWrite = 3] = "TransparentWithZWrite";
  }(J || (J = {}));
  var K = class extends ShaderMaterial {
    constructor(t = {}) {
      super(), this.isMToonMaterial = true, this.cutoff = 0.5, this.color = new Vector4(1, 1, 1, 1), this.shadeColor = new Vector4(0.97, 0.81, 0.86, 1), this.map = null, this.mainTex_ST = new Vector4(0, 0, 1, 1), this.shadeTexture = null, this.normalMap = null, this.normalMapType = TangentSpaceNormalMap, this.normalScale = new Vector2(1, 1), this.receiveShadowRate = 1, this.receiveShadowTexture = null, this.shadingGradeRate = 1, this.shadingGradeTexture = null, this.shadeShift = 0, this.shadeToony = 0.9, this.lightColorAttenuation = 0, this.indirectLightIntensity = 0.1, this.rimTexture = null, this.rimColor = new Vector4(0, 0, 0, 1), this.rimLightingMix = 0, this.rimFresnelPower = 1, this.rimLift = 0, this.sphereAdd = null, this.emissionColor = new Vector4(0, 0, 0, 1), this.emissiveMap = null, this.outlineWidthTexture = null, this.outlineWidth = 0.5, this.outlineScaledMaxDistance = 1, this.outlineColor = new Vector4(0, 0, 0, 1), this.outlineLightingMix = 1, this.uvAnimMaskTexture = null, this.uvAnimScrollX = 0, this.uvAnimScrollY = 0, this.uvAnimRotation = 0, this.shouldApplyUniforms = true, this._debugMode = Q.None, this._blendMode = J.Opaque, this._outlineWidthMode = $.None, this._outlineColorMode = Z.FixedColor, this._cullMode = q2.Back, this._outlineCullMode = q2.Front, this._isOutline = false, this._uvAnimOffsetX = 0, this._uvAnimOffsetY = 0, this._uvAnimPhase = 0, this.encoding = t.encoding || LinearEncoding, this.encoding !== LinearEncoding && this.encoding !== sRGBEncoding && console.warn("The specified color encoding does not work properly with MToonMaterial. You might want to use THREE.sRGBEncoding instead."), ["mToonVersion", "shadeTexture_ST", "bumpMap_ST", "receiveShadowTexture_ST", "shadingGradeTexture_ST", "rimTexture_ST", "sphereAdd_ST", "emissionMap_ST", "outlineWidthTexture_ST", "uvAnimMaskTexture_ST", "srcBlend", "dstBlend"].forEach((e) => {
        t[e] !== void 0 && delete t[e];
      }), t.fog = true, t.lights = true, t.clipping = true, parseInt(REVISION, 10) < 129 && (t.skinning = t.skinning || false), parseInt(REVISION, 10) < 131 && (t.morphTargets = t.morphTargets || false, t.morphNormals = t.morphNormals || false), t.uniforms = UniformsUtils.merge([UniformsLib.common, UniformsLib.normalmap, UniformsLib.emissivemap, UniformsLib.fog, UniformsLib.lights, { cutoff: { value: 0.5 }, color: { value: new Color(1, 1, 1) }, colorAlpha: { value: 1 }, shadeColor: { value: new Color(0.97, 0.81, 0.86) }, mainTex_ST: { value: new Vector4(0, 0, 1, 1) }, shadeTexture: { value: null }, receiveShadowRate: { value: 1 }, receiveShadowTexture: { value: null }, shadingGradeRate: { value: 1 }, shadingGradeTexture: { value: null }, shadeShift: { value: 0 }, shadeToony: { value: 0.9 }, lightColorAttenuation: { value: 0 }, indirectLightIntensity: { value: 0.1 }, rimTexture: { value: null }, rimColor: { value: new Color(0, 0, 0) }, rimLightingMix: { value: 0 }, rimFresnelPower: { value: 1 }, rimLift: { value: 0 }, sphereAdd: { value: null }, emissionColor: { value: new Color(0, 0, 0) }, outlineWidthTexture: { value: null }, outlineWidth: { value: 0.5 }, outlineScaledMaxDistance: { value: 1 }, outlineColor: { value: new Color(0, 0, 0) }, outlineLightingMix: { value: 1 }, uvAnimMaskTexture: { value: null }, uvAnimOffsetX: { value: 0 }, uvAnimOffsetY: { value: 0 }, uvAnimTheta: { value: 0 } }]), this.setValues(t), this._updateShaderCode(), this._applyUniforms();
    }
    get mainTex() {
      return this.map;
    }
    set mainTex(e) {
      this.map = e;
    }
    get bumpMap() {
      return this.normalMap;
    }
    set bumpMap(e) {
      this.normalMap = e;
    }
    get bumpScale() {
      return this.normalScale.x;
    }
    set bumpScale(e) {
      this.normalScale.set(e, e);
    }
    get emissionMap() {
      return this.emissiveMap;
    }
    set emissionMap(e) {
      this.emissiveMap = e;
    }
    get blendMode() {
      return this._blendMode;
    }
    set blendMode(e) {
      this._blendMode = e, this.depthWrite = this._blendMode !== J.Transparent, this.transparent = this._blendMode === J.Transparent || this._blendMode === J.TransparentWithZWrite, this._updateShaderCode();
    }
    get debugMode() {
      return this._debugMode;
    }
    set debugMode(e) {
      this._debugMode = e, this._updateShaderCode();
    }
    get outlineWidthMode() {
      return this._outlineWidthMode;
    }
    set outlineWidthMode(e) {
      this._outlineWidthMode = e, this._updateShaderCode();
    }
    get outlineColorMode() {
      return this._outlineColorMode;
    }
    set outlineColorMode(e) {
      this._outlineColorMode = e, this._updateShaderCode();
    }
    get cullMode() {
      return this._cullMode;
    }
    set cullMode(e) {
      this._cullMode = e, this._updateCullFace();
    }
    get outlineCullMode() {
      return this._outlineCullMode;
    }
    set outlineCullMode(e) {
      this._outlineCullMode = e, this._updateCullFace();
    }
    get zWrite() {
      return this.depthWrite ? 1 : 0;
    }
    set zWrite(e) {
      this.depthWrite = 0.5 <= e;
    }
    get isOutline() {
      return this._isOutline;
    }
    set isOutline(e) {
      this._isOutline = e, this._updateShaderCode(), this._updateCullFace();
    }
    updateVRMMaterials(e) {
      this._uvAnimOffsetX = this._uvAnimOffsetX + e * this.uvAnimScrollX, this._uvAnimOffsetY = this._uvAnimOffsetY - e * this.uvAnimScrollY, this._uvAnimPhase = this._uvAnimPhase + e * this.uvAnimRotation, this._applyUniforms();
    }
    copy(e) {
      return super.copy(e), this.cutoff = e.cutoff, this.color.copy(e.color), this.shadeColor.copy(e.shadeColor), this.map = e.map, this.mainTex_ST.copy(e.mainTex_ST), this.shadeTexture = e.shadeTexture, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(this.normalScale), this.receiveShadowRate = e.receiveShadowRate, this.receiveShadowTexture = e.receiveShadowTexture, this.shadingGradeRate = e.shadingGradeRate, this.shadingGradeTexture = e.shadingGradeTexture, this.shadeShift = e.shadeShift, this.shadeToony = e.shadeToony, this.lightColorAttenuation = e.lightColorAttenuation, this.indirectLightIntensity = e.indirectLightIntensity, this.rimTexture = e.rimTexture, this.rimColor.copy(e.rimColor), this.rimLightingMix = e.rimLightingMix, this.rimFresnelPower = e.rimFresnelPower, this.rimLift = e.rimLift, this.sphereAdd = e.sphereAdd, this.emissionColor.copy(e.emissionColor), this.emissiveMap = e.emissiveMap, this.outlineWidthTexture = e.outlineWidthTexture, this.outlineWidth = e.outlineWidth, this.outlineScaledMaxDistance = e.outlineScaledMaxDistance, this.outlineColor.copy(e.outlineColor), this.outlineLightingMix = e.outlineLightingMix, this.uvAnimMaskTexture = e.uvAnimMaskTexture, this.uvAnimScrollX = e.uvAnimScrollX, this.uvAnimScrollY = e.uvAnimScrollY, this.uvAnimRotation = e.uvAnimRotation, this.debugMode = e.debugMode, this.blendMode = e.blendMode, this.outlineWidthMode = e.outlineWidthMode, this.outlineColorMode = e.outlineColorMode, this.cullMode = e.cullMode, this.outlineCullMode = e.outlineCullMode, this.isOutline = e.isOutline, this;
    }
    _applyUniforms() {
      this.uniforms.uvAnimOffsetX.value = this._uvAnimOffsetX, this.uniforms.uvAnimOffsetY.value = this._uvAnimOffsetY, this.uniforms.uvAnimTheta.value = X * this._uvAnimPhase, this.shouldApplyUniforms && (this.shouldApplyUniforms = false, this.uniforms.cutoff.value = this.cutoff, this.uniforms.color.value.setRGB(this.color.x, this.color.y, this.color.z), this.uniforms.colorAlpha.value = this.color.w, this.uniforms.shadeColor.value.setRGB(this.shadeColor.x, this.shadeColor.y, this.shadeColor.z), this.uniforms.map.value = this.map, this.uniforms.mainTex_ST.value.copy(this.mainTex_ST), this.uniforms.shadeTexture.value = this.shadeTexture, this.uniforms.normalMap.value = this.normalMap, this.uniforms.normalScale.value.copy(this.normalScale), this.uniforms.receiveShadowRate.value = this.receiveShadowRate, this.uniforms.receiveShadowTexture.value = this.receiveShadowTexture, this.uniforms.shadingGradeRate.value = this.shadingGradeRate, this.uniforms.shadingGradeTexture.value = this.shadingGradeTexture, this.uniforms.shadeShift.value = this.shadeShift, this.uniforms.shadeToony.value = this.shadeToony, this.uniforms.lightColorAttenuation.value = this.lightColorAttenuation, this.uniforms.indirectLightIntensity.value = this.indirectLightIntensity, this.uniforms.rimTexture.value = this.rimTexture, this.uniforms.rimColor.value.setRGB(this.rimColor.x, this.rimColor.y, this.rimColor.z), this.uniforms.rimLightingMix.value = this.rimLightingMix, this.uniforms.rimFresnelPower.value = this.rimFresnelPower, this.uniforms.rimLift.value = this.rimLift, this.uniforms.sphereAdd.value = this.sphereAdd, this.uniforms.emissionColor.value.setRGB(this.emissionColor.x, this.emissionColor.y, this.emissionColor.z), this.uniforms.emissiveMap.value = this.emissiveMap, this.uniforms.outlineWidthTexture.value = this.outlineWidthTexture, this.uniforms.outlineWidth.value = this.outlineWidth, this.uniforms.outlineScaledMaxDistance.value = this.outlineScaledMaxDistance, this.uniforms.outlineColor.value.setRGB(this.outlineColor.x, this.outlineColor.y, this.outlineColor.z), this.uniforms.outlineLightingMix.value = this.outlineLightingMix, this.uniforms.uvAnimMaskTexture.value = this.uvAnimMaskTexture, this.encoding === sRGBEncoding && (this.uniforms.color.value.convertSRGBToLinear(), this.uniforms.shadeColor.value.convertSRGBToLinear(), this.uniforms.rimColor.value.convertSRGBToLinear(), this.uniforms.emissionColor.value.convertSRGBToLinear(), this.uniforms.outlineColor.value.convertSRGBToLinear()), this._updateCullFace());
    }
    _updateShaderCode() {
      const t = this.outlineWidthTexture !== null, n2 = this.map !== null || this.shadeTexture !== null || this.receiveShadowTexture !== null || this.shadingGradeTexture !== null || this.rimTexture !== null || this.uvAnimMaskTexture !== null;
      if (this.defines = { THREE_VRM_THREE_REVISION: parseInt(REVISION, 10), OUTLINE: this._isOutline, BLENDMODE_OPAQUE: this._blendMode === J.Opaque, BLENDMODE_CUTOUT: this._blendMode === J.Cutout, BLENDMODE_TRANSPARENT: this._blendMode === J.Transparent || this._blendMode === J.TransparentWithZWrite, MTOON_USE_UV: t || n2, MTOON_UVS_VERTEX_ONLY: t && !n2, USE_SHADETEXTURE: this.shadeTexture !== null, USE_RECEIVESHADOWTEXTURE: this.receiveShadowTexture !== null, USE_SHADINGGRADETEXTURE: this.shadingGradeTexture !== null, USE_RIMTEXTURE: this.rimTexture !== null, USE_SPHEREADD: this.sphereAdd !== null, USE_OUTLINEWIDTHTEXTURE: this.outlineWidthTexture !== null, USE_UVANIMMASKTEXTURE: this.uvAnimMaskTexture !== null, DEBUG_NORMAL: this._debugMode === Q.Normal, DEBUG_LITSHADERATE: this._debugMode === Q.LitShadeRate, DEBUG_UV: this._debugMode === Q.UV, OUTLINE_WIDTH_WORLD: this._outlineWidthMode === $.WorldCoordinates, OUTLINE_WIDTH_SCREEN: this._outlineWidthMode === $.ScreenCoordinates, OUTLINE_COLOR_FIXED: this._outlineColorMode === Z.FixedColor, OUTLINE_COLOR_MIXED: this._outlineColorMode === Z.MixedLighting }, this.vertexShader = "// #define PHONG\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n  varying vec3 vNormal;\n#endif\n\n#include <common>\n\n// #include <uv_pars_vertex>\n#ifdef MTOON_USE_UV\n  #ifdef MTOON_UVS_VERTEX_ONLY\n    vec2 vUv;\n  #else\n    varying vec2 vUv;\n  #endif\n\n  uniform vec4 mainTex_ST;\n#endif\n\n#include <uv2_pars_vertex>\n// #include <displacementmap_pars_vertex>\n// #include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n#ifdef USE_OUTLINEWIDTHTEXTURE\n  uniform sampler2D outlineWidthTexture;\n#endif\n\nuniform float outlineWidth;\nuniform float outlineScaledMaxDistance;\n\nvoid main() {\n\n  // #include <uv_vertex>\n  #ifdef MTOON_USE_UV\n    vUv = uv;\n    vUv.y = 1.0 - vUv.y; // uv.y is opposite from UniVRM's\n    vUv = mainTex_ST.st + mainTex_ST.pq * vUv;\n    vUv.y = 1.0 - vUv.y; // reverting the previous flip\n  #endif\n\n  #include <uv2_vertex>\n  #include <color_vertex>\n\n  #include <beginnormal_vertex>\n  #include <morphnormal_vertex>\n  #include <skinbase_vertex>\n  #include <skinnormal_vertex>\n\n  // we need this to compute the outline properly\n  objectNormal = normalize( objectNormal );\n\n  #include <defaultnormal_vertex>\n\n  #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n    vNormal = normalize( transformedNormal );\n  #endif\n\n  #include <begin_vertex>\n\n  #include <morphtarget_vertex>\n  #include <skinning_vertex>\n  // #include <displacementmap_vertex>\n  #include <project_vertex>\n  #include <logdepthbuf_vertex>\n  #include <clipping_planes_vertex>\n\n  vViewPosition = - mvPosition.xyz;\n\n  float outlineTex = 1.0;\n\n  #ifdef OUTLINE\n    #ifdef USE_OUTLINEWIDTHTEXTURE\n      outlineTex = texture2D( outlineWidthTexture, vUv ).r;\n    #endif\n\n    #ifdef OUTLINE_WIDTH_WORLD\n      float worldNormalLength = length( transformedNormal );\n      vec3 outlineOffset = 0.01 * outlineWidth * outlineTex * worldNormalLength * objectNormal;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( outlineOffset + transformed, 1.0 );\n    #endif\n\n    #ifdef OUTLINE_WIDTH_SCREEN\n      vec3 clipNormal = ( projectionMatrix * modelViewMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n      vec2 projectedNormal = normalize( clipNormal.xy );\n      projectedNormal *= min( gl_Position.w, outlineScaledMaxDistance );\n      projectedNormal.x *= projectionMatrix[ 0 ].x / projectionMatrix[ 1 ].y;\n      gl_Position.xy += 0.01 * outlineWidth * outlineTex * projectedNormal.xy;\n    #endif\n\n    gl_Position.z += 1E-6 * gl_Position.w; // anti-artifact magic\n  #endif\n\n  #include <worldpos_vertex>\n  // #include <envmap_vertex>\n  #include <shadowmap_vertex>\n  #include <fog_vertex>\n\n}", this.fragmentShader = j, parseInt(REVISION, 10) < 137) {
        const e = (this.shadeTexture !== null ? Y("shadeTextureTexelToLinear", this.shadeTexture.encoding) + "\n" : "") + (this.sphereAdd !== null ? Y("sphereAddTexelToLinear", this.sphereAdd.encoding) + "\n" : "") + (this.rimTexture !== null ? Y("rimTextureTexelToLinear", this.rimTexture.encoding) + "\n" : "");
        this.fragmentShader = e + j;
      }
      this.needsUpdate = true;
    }
    _updateCullFace() {
      this.isOutline ? this.outlineCullMode === q2.Off ? this.side = DoubleSide : this.outlineCullMode === q2.Front ? this.side = BackSide : this.outlineCullMode === q2.Back && (this.side = FrontSide) : this.cullMode === q2.Off ? this.side = DoubleSide : this.cullMode === q2.Front ? this.side = BackSide : this.cullMode === q2.Back && (this.side = FrontSide);
    }
  };
  var ee;
  !function(e) {
    e[e.Opaque = 0] = "Opaque", e[e.Cutout = 1] = "Cutout", e[e.Transparent = 2] = "Transparent", e[e.TransparentWithZWrite = 3] = "TransparentWithZWrite";
  }(ee || (ee = {}));
  var te = class extends ShaderMaterial {
    constructor(t) {
      super(), this.isVRMUnlitMaterial = true, this.cutoff = 0.5, this.map = null, this.mainTex_ST = new Vector4(0, 0, 1, 1), this._renderType = ee.Opaque, this.shouldApplyUniforms = true, t === void 0 && (t = {}), t.fog = true, t.clipping = true, parseInt(REVISION, 10) < 129 && (t.skinning = t.skinning || false), parseInt(REVISION, 10) < 131 && (t.morphTargets = t.morphTargets || false, t.morphNormals = t.morphNormals || false), t.uniforms = UniformsUtils.merge([UniformsLib.common, UniformsLib.fog, { cutoff: { value: 0.5 }, mainTex_ST: { value: new Vector4(0, 0, 1, 1) } }]), this.setValues(t), this._updateShaderCode(), this._applyUniforms();
    }
    get mainTex() {
      return this.map;
    }
    set mainTex(e) {
      this.map = e;
    }
    get renderType() {
      return this._renderType;
    }
    set renderType(e) {
      this._renderType = e, this.depthWrite = this._renderType !== ee.Transparent, this.transparent = this._renderType === ee.Transparent || this._renderType === ee.TransparentWithZWrite, this._updateShaderCode();
    }
    updateVRMMaterials(e) {
      this._applyUniforms();
    }
    copy(e) {
      return super.copy(e), this.cutoff = e.cutoff, this.map = e.map, this.mainTex_ST.copy(e.mainTex_ST), this.renderType = e.renderType, this;
    }
    _applyUniforms() {
      this.shouldApplyUniforms && (this.shouldApplyUniforms = false, this.uniforms.cutoff.value = this.cutoff, this.uniforms.map.value = this.map, this.uniforms.mainTex_ST.value.copy(this.mainTex_ST));
    }
    _updateShaderCode() {
      this.defines = { RENDERTYPE_OPAQUE: this._renderType === ee.Opaque, RENDERTYPE_CUTOUT: this._renderType === ee.Cutout, RENDERTYPE_TRANSPARENT: this._renderType === ee.Transparent || this._renderType === ee.TransparentWithZWrite }, this.vertexShader = "#include <common>\n\n// #include <uv_pars_vertex>\n#ifdef USE_MAP\n  varying vec2 vUv;\n  uniform vec4 mainTex_ST;\n#endif\n\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n  // #include <uv_vertex>\n  #ifdef USE_MAP\n    vUv = vec2( mainTex_ST.p * uv.x + mainTex_ST.s, mainTex_ST.q * uv.y + mainTex_ST.t );\n  #endif\n\n  #include <uv2_vertex>\n  #include <color_vertex>\n  #include <skinbase_vertex>\n\n  #ifdef USE_ENVMAP\n\n  #include <beginnormal_vertex>\n  #include <morphnormal_vertex>\n  #include <skinnormal_vertex>\n  #include <defaultnormal_vertex>\n\n  #endif\n\n  #include <begin_vertex>\n  #include <morphtarget_vertex>\n  #include <skinning_vertex>\n  #include <project_vertex>\n  #include <logdepthbuf_vertex>\n\n  #include <worldpos_vertex>\n  #include <clipping_planes_vertex>\n  #include <envmap_vertex>\n  #include <fog_vertex>\n\n}", this.fragmentShader = "#ifdef RENDERTYPE_CUTOUT\n  uniform float cutoff;\n#endif\n\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n// #include <alphamap_pars_fragment>\n// #include <aomap_pars_fragment>\n// #include <lightmap_pars_fragment>\n// #include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n// #include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\n// == main procedure ===========================================================\nvoid main() {\n  #include <clipping_planes_fragment>\n\n  vec4 diffuseColor = vec4( 1.0 );\n\n  #include <logdepthbuf_fragment>\n\n  #include <map_fragment>\n  #include <color_fragment>\n  // #include <alphamap_fragment>\n\n  // MToon: alpha\n  // #include <alphatest_fragment>\n  #ifdef RENDERTYPE_CUTOUT\n    if ( diffuseColor.a <= cutoff ) { discard; }\n    diffuseColor.a = 1.0;\n  #endif\n\n  #ifdef RENDERTYPE_OPAQUE\n    diffuseColor.a = 1.0;\n  #endif\n\n  // #include <specularmap_fragment>\n\n  ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\n  // accumulation (baked indirect lighting only)\n  #ifdef USE_LIGHTMAP\n    reflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n  #else\n    reflectedLight.indirectDiffuse += vec3( 1.0 );\n  #endif\n\n  // modulation\n  // #include <aomap_fragment>\n\n  reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n  vec3 outgoingLight = reflectedLight.indirectDiffuse;\n\n  // #include <envmap_fragment>\n\n  gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n  #include <premultiplied_alpha_fragment>\n  #include <tonemapping_fragment>\n  #include <encodings_fragment>\n  #include <fog_fragment>\n}", this.needsUpdate = true;
    }
  };
  var ne = class {
    constructor(t = {}) {
      this._encoding = t.encoding || LinearEncoding, this._encoding !== LinearEncoding && this._encoding !== sRGBEncoding && console.warn("The specified color encoding might not work properly with VRMMaterialImporter. You might want to use THREE.sRGBEncoding instead."), this._requestEnvMap = t.requestEnvMap;
    }
    convertGLTFMaterials(e) {
      var t;
      return n(this, void 0, void 0, function* () {
        const i2 = (t = e.parser.json.extensions) === null || t === void 0 ? void 0 : t.VRM;
        if (!i2)
          return null;
        const r2 = i2.materialProperties;
        if (!r2)
          return null;
        const o2 = yield p2(e), s3 = {}, a2 = [];
        return yield Promise.all(Array.from(o2.entries()).map(([t2, i3]) => n(this, void 0, void 0, function* () {
          const o3 = e.parser.json.nodes[t2], l2 = e.parser.json.meshes[o3.mesh];
          yield Promise.all(i3.map((t3, i4) => n(this, void 0, void 0, function* () {
            const n2 = l2.primitives[i4];
            if (!n2)
              return;
            const o4 = t3.geometry, d2 = o4.index ? o4.index.count : o4.attributes.position.count / 3;
            Array.isArray(t3.material) || (t3.material = [t3.material], o4.addGroup(0, d2, 0));
            const h2 = n2.material;
            let u2, c2 = r2[h2];
            c2 || (console.warn(`VRMMaterialImporter: There are no material definition for material #${h2} on VRM extension.`), c2 = { shader: "VRM_USE_GLTFSHADER" }), s3[h2] ? u2 = s3[h2] : (u2 = yield this.createVRMMaterials(t3.material[0], c2, e), s3[h2] = u2, a2.push(u2.surface), u2.outline && a2.push(u2.outline)), t3.material[0] = u2.surface, this._requestEnvMap && u2.surface.isMeshStandardMaterial && this._requestEnvMap().then((e2) => {
              u2.surface.envMap = e2, u2.surface.needsUpdate = true;
            }), t3.renderOrder = c2.renderQueue || 2e3, u2.outline && (t3.material[1] = u2.outline, o4.addGroup(0, d2, 1));
          })));
        }))), a2;
      });
    }
    createVRMMaterials(e, t, i2) {
      return n(this, void 0, void 0, function* () {
        let n2, r2;
        if (t.shader === "VRM/MToon") {
          const o2 = yield this._extractMaterialProperties(e, t, i2);
          ["srcBlend", "dstBlend", "isFirstSetup"].forEach((e2) => {
            o2[e2] !== void 0 && delete o2[e2];
          }), ["mainTex", "shadeTexture", "emissionMap", "sphereAdd", "rimTexture"].forEach((e2) => {
            o2[e2] !== void 0 && (o2[e2].encoding = this._encoding);
          }), o2.encoding = this._encoding, n2 = new K(o2), o2.outlineWidthMode !== $.None && (o2.isOutline = true, r2 = new K(o2));
        } else if (t.shader === "VRM/UnlitTexture") {
          const r3 = yield this._extractMaterialProperties(e, t, i2);
          r3.renderType = ee.Opaque, n2 = new te(r3);
        } else if (t.shader === "VRM/UnlitCutout") {
          const r3 = yield this._extractMaterialProperties(e, t, i2);
          r3.renderType = ee.Cutout, n2 = new te(r3);
        } else if (t.shader === "VRM/UnlitTransparent") {
          const r3 = yield this._extractMaterialProperties(e, t, i2);
          r3.renderType = ee.Transparent, n2 = new te(r3);
        } else if (t.shader === "VRM/UnlitTransparentZWrite") {
          const r3 = yield this._extractMaterialProperties(e, t, i2);
          r3.renderType = ee.TransparentWithZWrite, n2 = new te(r3);
        } else
          t.shader !== "VRM_USE_GLTFSHADER" && console.warn(`Unknown shader detected: "${t.shader}"`), n2 = this._convertGLTFMaterial(e.clone());
        return n2.name = e.name, n2.userData = JSON.parse(JSON.stringify(e.userData)), n2.userData.vrmMaterialProperties = t, r2 && (r2.name = e.name + " (Outline)", r2.userData = JSON.parse(JSON.stringify(e.userData)), r2.userData.vrmMaterialProperties = t), { surface: n2, outline: r2 };
      });
    }
    _renameMaterialProperty(e) {
      return e[0] !== "_" ? (console.warn(`VRMMaterials: Given property name "${e}" might be invalid`), e) : (e = e.substring(1), /[A-Z]/.test(e[0]) ? e[0].toLowerCase() + e.substring(1) : (console.warn(`VRMMaterials: Given property name "${e}" might be invalid`), e));
    }
    _convertGLTFMaterial(t) {
      if (t.isMeshStandardMaterial) {
        const n2 = t;
        n2.map && (n2.map.encoding = this._encoding), n2.emissiveMap && (n2.emissiveMap.encoding = this._encoding), this._encoding === LinearEncoding && (n2.color.convertLinearToSRGB(), n2.emissive.convertLinearToSRGB());
      }
      if (t.isMeshBasicMaterial) {
        const n2 = t;
        n2.map && (n2.map.encoding = this._encoding), this._encoding === LinearEncoding && n2.color.convertLinearToSRGB();
      }
      return t;
    }
    _extractMaterialProperties(t, n2, i2) {
      const r2 = [], o2 = {};
      if (n2.textureProperties)
        for (const e of Object.keys(n2.textureProperties)) {
          const t2 = this._renameMaterialProperty(e), s3 = n2.textureProperties[e];
          r2.push(i2.parser.getDependency("texture", s3).then((e2) => {
            o2[t2] = e2;
          }));
        }
      if (n2.floatProperties)
        for (const e of Object.keys(n2.floatProperties)) {
          const t2 = this._renameMaterialProperty(e);
          o2[t2] = n2.floatProperties[e];
        }
      if (n2.vectorProperties)
        for (const t2 of Object.keys(n2.vectorProperties)) {
          let i3 = this._renameMaterialProperty(t2);
          ["_MainTex", "_ShadeTexture", "_BumpMap", "_ReceiveShadowTexture", "_ShadingGradeTexture", "_RimTexture", "_SphereAdd", "_EmissionMap", "_OutlineWidthTexture", "_UvAnimMaskTexture"].some((e) => t2 === e) && (i3 += "_ST"), o2[i3] = new Vector4(...n2.vectorProperties[t2]);
        }
      return parseInt(REVISION, 10) < 129 && (o2.skinning = t.skinning || false), parseInt(REVISION, 10) < 131 && (o2.morphTargets = t.morphTargets || false, o2.morphNormals = t.morphNormals || false), Promise.all(r2).then(() => o2);
    }
  };
  var ie = class {
    constructor(e) {
      var t;
      this.ignoreTexture = (t = e == null ? void 0 : e.ignoreTexture) !== null && t !== void 0 && t;
    }
    import(e) {
      var t;
      return n(this, void 0, void 0, function* () {
        const n2 = (t = e.parser.json.extensions) === null || t === void 0 ? void 0 : t.VRM;
        if (!n2)
          return null;
        const i2 = n2.meta;
        if (!i2)
          return null;
        let r2;
        return this.ignoreTexture || i2.texture == null || i2.texture === -1 || (r2 = yield e.parser.getDependency("texture", i2.texture)), { allowedUserName: i2.allowedUserName, author: i2.author, commercialUssageName: i2.commercialUssageName, contactInformation: i2.contactInformation, licenseName: i2.licenseName, otherLicenseUrl: i2.otherLicenseUrl, otherPermissionUrl: i2.otherPermissionUrl, reference: i2.reference, sexualUssageName: i2.sexualUssageName, texture: r2 != null ? r2 : void 0, title: i2.title, version: i2.version, violentUssageName: i2.violentUssageName };
      });
    }
  };
  var re = new Matrix4();
  function oe(e) {
    return e.invert ? e.invert() : e.getInverse(re.copy(e)), e;
  }
  var se = class {
    constructor(t) {
      this._inverseCache = new Matrix4(), this._shouldUpdateInverse = true, this.matrix = t;
      const n2 = { set: (e, t2, n3) => (this._shouldUpdateInverse = true, e[t2] = n3, true) };
      this._originalElements = t.elements, t.elements = new Proxy(t.elements, n2);
    }
    get inverse() {
      return this._shouldUpdateInverse && (oe(this._inverseCache.copy(this.matrix)), this._shouldUpdateInverse = false), this._inverseCache;
    }
    revert() {
      this.matrix.elements = this._originalElements;
    }
  };
  var ae = Object.freeze(new Matrix4());
  var le = Object.freeze(new Quaternion());
  var de = new Vector3();
  var he = new Vector3();
  var ue = new Vector3();
  var ce = new Quaternion();
  var pe = new Matrix4();
  var me = new Matrix4();
  var fe = class {
    constructor(t, n2 = {}) {
      var i2, r2, o2, s3, a2, l2;
      if (this._currentTail = new Vector3(), this._prevTail = new Vector3(), this._nextTail = new Vector3(), this._boneAxis = new Vector3(), this._centerSpacePosition = new Vector3(), this._center = null, this._parentWorldRotation = new Quaternion(), this._initialLocalMatrix = new Matrix4(), this._initialLocalRotation = new Quaternion(), this._initialLocalChildPosition = new Vector3(), this.bone = t, this.bone.matrixAutoUpdate = false, this.radius = (i2 = n2.radius) !== null && i2 !== void 0 ? i2 : 0.02, this.stiffnessForce = (r2 = n2.stiffnessForce) !== null && r2 !== void 0 ? r2 : 1, this.gravityDir = n2.gravityDir ? new Vector3().copy(n2.gravityDir) : new Vector3().set(0, -1, 0), this.gravityPower = (o2 = n2.gravityPower) !== null && o2 !== void 0 ? o2 : 0, this.dragForce = (s3 = n2.dragForce) !== null && s3 !== void 0 ? s3 : 0.4, this.colliders = (a2 = n2.colliders) !== null && a2 !== void 0 ? a2 : [], this._centerSpacePosition.setFromMatrixPosition(this.bone.matrixWorld), this._initialLocalMatrix.copy(this.bone.matrix), this._initialLocalRotation.copy(this.bone.quaternion), this.bone.children.length === 0)
        this._initialLocalChildPosition.copy(this.bone.position).normalize().multiplyScalar(0.07);
      else {
        const e = this.bone.children[0];
        this._initialLocalChildPosition.copy(e.position);
      }
      this.bone.localToWorld(this._currentTail.copy(this._initialLocalChildPosition)), this._prevTail.copy(this._currentTail), this._nextTail.copy(this._currentTail), this._boneAxis.copy(this._initialLocalChildPosition).normalize(), this._centerSpaceBoneLength = de.copy(this._initialLocalChildPosition).applyMatrix4(this.bone.matrixWorld).sub(this._centerSpacePosition).length(), this.center = (l2 = n2.center) !== null && l2 !== void 0 ? l2 : null;
    }
    get center() {
      return this._center;
    }
    set center(e) {
      var t;
      this._getMatrixCenterToWorld(pe), this._currentTail.applyMatrix4(pe), this._prevTail.applyMatrix4(pe), this._nextTail.applyMatrix4(pe), ((t = this._center) === null || t === void 0 ? void 0 : t.userData.inverseCacheProxy) && (this._center.userData.inverseCacheProxy.revert(), delete this._center.userData.inverseCacheProxy), this._center = e, this._center && (this._center.userData.inverseCacheProxy || (this._center.userData.inverseCacheProxy = new se(this._center.matrixWorld))), this._getMatrixWorldToCenter(pe), this._currentTail.applyMatrix4(pe), this._prevTail.applyMatrix4(pe), this._nextTail.applyMatrix4(pe), pe.multiply(this.bone.matrixWorld), this._centerSpacePosition.setFromMatrixPosition(pe), this._centerSpaceBoneLength = de.copy(this._initialLocalChildPosition).applyMatrix4(pe).sub(this._centerSpacePosition).length();
    }
    reset() {
      this.bone.quaternion.copy(this._initialLocalRotation), this.bone.updateMatrix(), this.bone.matrixWorld.multiplyMatrices(this._getParentMatrixWorld(), this.bone.matrix), this._centerSpacePosition.setFromMatrixPosition(this.bone.matrixWorld), this.bone.localToWorld(this._currentTail.copy(this._initialLocalChildPosition)), this._prevTail.copy(this._currentTail), this._nextTail.copy(this._currentTail);
    }
    update(e) {
      if (e <= 0)
        return;
      this.bone.matrixWorld.multiplyMatrices(this._getParentMatrixWorld(), this.bone.matrix), this.bone.parent ? _(this.bone.parent, this._parentWorldRotation) : this._parentWorldRotation.copy(le), this._getMatrixWorldToCenter(pe), pe.multiply(this.bone.matrixWorld), this._centerSpacePosition.setFromMatrixPosition(pe), this._getMatrixWorldToCenter(me), me.multiply(this._getParentMatrixWorld());
      const t = this.stiffnessForce * e, n2 = he.copy(this.gravityDir).multiplyScalar(this.gravityPower * e);
      this._nextTail.copy(this._currentTail).add(de.copy(this._currentTail).sub(this._prevTail).multiplyScalar(1 - this.dragForce)).add(de.copy(this._boneAxis).applyMatrix4(this._initialLocalMatrix).applyMatrix4(me).sub(this._centerSpacePosition).normalize().multiplyScalar(t)).add(n2), this._nextTail.sub(this._centerSpacePosition).normalize().multiplyScalar(this._centerSpaceBoneLength).add(this._centerSpacePosition), this._collision(this._nextTail), this._prevTail.copy(this._currentTail), this._currentTail.copy(this._nextTail);
      const i2 = oe(pe.copy(me.multiply(this._initialLocalMatrix))), r2 = ce.setFromUnitVectors(this._boneAxis, de.copy(this._nextTail).applyMatrix4(i2).normalize());
      this.bone.quaternion.copy(this._initialLocalRotation).multiply(r2), this.bone.updateMatrix(), this.bone.matrixWorld.multiplyMatrices(this._getParentMatrixWorld(), this.bone.matrix);
    }
    _collision(e) {
      this.colliders.forEach((t) => {
        this._getMatrixWorldToCenter(pe), pe.multiply(t.matrixWorld);
        const n2 = de.setFromMatrixPosition(pe), i2 = t.geometry.boundingSphere.radius, r2 = this.radius + i2;
        if (e.distanceToSquared(n2) <= r2 * r2) {
          const t2 = he.subVectors(e, n2).normalize(), i3 = ue.addVectors(n2, t2.multiplyScalar(r2));
          e.copy(i3.sub(this._centerSpacePosition).normalize().multiplyScalar(this._centerSpaceBoneLength).add(this._centerSpacePosition));
        }
      });
    }
    _getMatrixCenterToWorld(e) {
      return this._center ? e.copy(this._center.matrixWorld) : e.identity(), e;
    }
    _getMatrixWorldToCenter(e) {
      return this._center ? e.copy(this._center.userData.inverseCacheProxy.inverse) : e.identity(), e;
    }
    _getParentMatrixWorld() {
      return this.bone.parent ? this.bone.parent.matrixWorld : ae;
    }
  };
  var ge = class {
    constructor(e, t) {
      this.colliderGroups = [], this.springBoneGroupList = [], this.colliderGroups = e, this.springBoneGroupList = t;
    }
    setCenter(e) {
      this.springBoneGroupList.forEach((t) => {
        t.forEach((t2) => {
          t2.center = e;
        });
      });
    }
    lateUpdate(e) {
      this.springBoneGroupList.forEach((t) => {
        t.forEach((t2) => {
          t2.update(e);
        });
      });
    }
    reset() {
      this.springBoneGroupList.forEach((e) => {
        e.forEach((e2) => {
          e2.reset();
        });
      });
    }
  };
  var _e = new Vector3();
  var ve = new MeshBasicMaterial({ visible: false });
  var Te = class {
    import(e) {
      var t;
      return n(this, void 0, void 0, function* () {
        const n2 = (t = e.parser.json.extensions) === null || t === void 0 ? void 0 : t.VRM;
        if (!n2)
          return null;
        const i2 = n2.secondaryAnimation;
        if (!i2)
          return null;
        const r2 = yield this._importColliderMeshGroups(e, i2), o2 = yield this._importSpringBoneGroupList(e, i2, r2);
        return new ge(r2, o2);
      });
    }
    _createSpringBone(e, t = {}) {
      return new fe(e, t);
    }
    _importSpringBoneGroupList(t, i2, r2) {
      return n(this, void 0, void 0, function* () {
        const o2 = i2.boneGroups || [], s3 = [];
        return yield Promise.all(o2.map((i3) => n(this, void 0, void 0, function* () {
          if (i3.stiffiness === void 0 || i3.gravityDir === void 0 || i3.gravityDir.x === void 0 || i3.gravityDir.y === void 0 || i3.gravityDir.z === void 0 || i3.gravityPower === void 0 || i3.dragForce === void 0 || i3.hitRadius === void 0 || i3.colliderGroups === void 0 || i3.bones === void 0 || i3.center === void 0)
            return;
          const o3 = i3.stiffiness, a2 = new Vector3(i3.gravityDir.x, i3.gravityDir.y, -i3.gravityDir.z), l2 = i3.gravityPower, d2 = i3.dragForce, h2 = i3.hitRadius, u2 = [];
          i3.colliderGroups.forEach((e) => {
            u2.push(...r2[e].colliders);
          });
          const c2 = [];
          yield Promise.all(i3.bones.map((e) => n(this, void 0, void 0, function* () {
            const n2 = yield t.parser.getDependency("node", e), r3 = i3.center !== -1 ? yield t.parser.getDependency("node", i3.center) : null;
            n2 && n2.traverse((e2) => {
              const t2 = this._createSpringBone(e2, { radius: h2, stiffnessForce: o3, gravityDir: a2, gravityPower: l2, dragForce: d2, colliders: u2, center: r3 });
              c2.push(t2);
            });
          }))), s3.push(c2);
        }))), s3;
      });
    }
    _importColliderMeshGroups(e, t) {
      return n(this, void 0, void 0, function* () {
        const i2 = t.colliderGroups;
        if (i2 === void 0)
          return [];
        const r2 = [];
        return i2.forEach((t2) => n(this, void 0, void 0, function* () {
          if (t2.node === void 0 || t2.colliders === void 0)
            return;
          const n2 = yield e.parser.getDependency("node", t2.node), i3 = [];
          t2.colliders.forEach((e2) => {
            if (e2.offset === void 0 || e2.offset.x === void 0 || e2.offset.y === void 0 || e2.offset.z === void 0 || e2.radius === void 0)
              return;
            const t3 = _e.set(e2.offset.x, e2.offset.y, -e2.offset.z), r3 = this._createColliderMesh(e2.radius, t3);
            n2.add(r3), i3.push(r3);
          });
          const o2 = { node: t2.node, colliders: i3 };
          r2.push(o2);
        })), r2;
      });
    }
    _createColliderMesh(t, n2) {
      const i2 = new Mesh(new SphereGeometry(t, 8, 4), ve);
      return i2.position.copy(n2), i2.name = "vrmColliderSphere", i2.geometry.computeBoundingSphere(), i2;
    }
  };
  var ye = class {
    constructor(e = {}) {
      this._metaImporter = e.metaImporter || new ie(), this._blendShapeImporter = e.blendShapeImporter || new T(), this._lookAtImporter = e.lookAtImporter || new z(), this._humanoidImporter = e.humanoidImporter || new I(), this._firstPersonImporter = e.firstPersonImporter || new L(), this._materialImporter = e.materialImporter || new ne(), this._springBoneImporter = e.springBoneImporter || new Te();
    }
    import(e) {
      return n(this, void 0, void 0, function* () {
        if (e.parser.json.extensions === void 0 || e.parser.json.extensions.VRM === void 0)
          throw new Error("Could not find VRM extension on the GLTF");
        const t = e.scene;
        t.updateMatrixWorld(false), t.traverse((e2) => {
          e2.isMesh && (e2.frustumCulled = false);
        });
        const n2 = (yield this._metaImporter.import(e)) || void 0, i2 = (yield this._materialImporter.convertGLTFMaterials(e)) || void 0, r2 = (yield this._humanoidImporter.import(e)) || void 0, o2 = r2 && (yield this._firstPersonImporter.import(e, r2)) || void 0, s3 = (yield this._blendShapeImporter.import(e)) || void 0, a2 = o2 && s3 && r2 && (yield this._lookAtImporter.import(e, o2, s3, r2)) || void 0, l2 = (yield this._springBoneImporter.import(e)) || void 0;
        return new xe({ scene: e.scene, meta: n2, materials: i2, humanoid: r2, firstPerson: o2, blendShapeProxy: s3, lookAt: a2, springBoneManager: l2 });
      });
    }
  };
  var xe = class {
    constructor(e) {
      this.scene = e.scene, this.humanoid = e.humanoid, this.blendShapeProxy = e.blendShapeProxy, this.firstPerson = e.firstPerson, this.lookAt = e.lookAt, this.materials = e.materials, this.springBoneManager = e.springBoneManager, this.meta = e.meta;
    }
    static from(e, t = {}) {
      return n(this, void 0, void 0, function* () {
        const n2 = new ye(t);
        return yield n2.import(e);
      });
    }
    update(e) {
      this.lookAt && this.lookAt.update(e), this.blendShapeProxy && this.blendShapeProxy.update(), this.springBoneManager && this.springBoneManager.lateUpdate(e), this.materials && this.materials.forEach((t) => {
        t.updateVRMMaterials && t.updateVRMMaterials(e);
      });
    }
    dispose() {
      var e, t;
      const n2 = this.scene;
      n2 && n2.traverse(r), (t = (e = this.meta) === null || e === void 0 ? void 0 : e.texture) === null || t === void 0 || t.dispose();
    }
  };
  var Se = new Vector2();
  var Me = new OrthographicCamera(-1, 1, -1, 1, -1, 1);
  var Ee = new MeshBasicMaterial({ color: 16777215, side: DoubleSide });
  var Le = new Mesh(new PlaneGeometry(2, 2), Ee);
  var Re = new Scene();
  Re.add(Le);
  var we = class {
    constructor() {
    }
  };
  we.extractThumbnailBlob = function(e, t, n2 = 512) {
    var i2;
    const r2 = (i2 = t.meta) === null || i2 === void 0 ? void 0 : i2.texture;
    if (!r2)
      throw new Error("extractThumbnailBlob: This VRM does not have a thumbnail");
    const o2 = e.getContext().canvas;
    e.getSize(Se);
    const s3 = Se.x, a2 = Se.y;
    return e.setSize(n2, n2, false), Ee.map = r2, e.render(Re, Me), Ee.map = null, o2 instanceof OffscreenCanvas ? o2.convertToBlob().finally(() => {
      e.setSize(s3, a2, false);
    }) : new Promise((t2, n3) => {
      o2.toBlob((i3) => {
        e.setSize(s3, a2, false), i3 == null ? n3("extractThumbnailBlob: Failed to create a blob") : t2(i3);
      });
    });
  }, we.removeUnnecessaryJoints = function(t) {
    const n2 = /* @__PURE__ */ new Map();
    t.traverse((t2) => {
      if (t2.type !== "SkinnedMesh")
        return;
      const i2 = t2, r2 = i2.geometry.getAttribute("skinIndex");
      let o2 = n2.get(r2);
      if (!o2) {
        const t3 = [], s3 = [], a2 = {}, l2 = r2.array;
        for (let e = 0; e < l2.length; e++) {
          const n3 = l2[e];
          a2[n3] === void 0 && (a2[n3] = t3.length, t3.push(i2.skeleton.bones[n3]), s3.push(i2.skeleton.boneInverses[n3])), l2[e] = a2[n3];
        }
        r2.copyArray(l2), r2.needsUpdate = true, o2 = new Skeleton(t3, s3), n2.set(r2, o2);
      }
      i2.bind(o2, new Matrix4());
    });
  }, we.removeUnnecessaryVertices = function(n2) {
    const i2 = /* @__PURE__ */ new Map();
    n2.traverse((n3) => {
      var r2, o2, s3, a2;
      if (!n3.isMesh)
        return;
      const l2 = n3, d2 = l2.geometry, h2 = d2.index;
      if (h2 == null)
        return;
      const u2 = i2.get(d2);
      if (u2 != null)
        return void (l2.geometry = u2);
      const c2 = new BufferGeometry();
      c2.name = d2.name, c2.morphTargetsRelative = d2.morphTargetsRelative, d2.groups.forEach((e) => {
        c2.addGroup(e.start, e.count, e.materialIndex);
      }), c2.boundingBox = (o2 = (r2 = d2.boundingBox) === null || r2 === void 0 ? void 0 : r2.clone()) !== null && o2 !== void 0 ? o2 : null, c2.boundingSphere = (a2 = (s3 = d2.boundingSphere) === null || s3 === void 0 ? void 0 : s3.clone()) !== null && a2 !== void 0 ? a2 : null, c2.setDrawRange(d2.drawRange.start, d2.drawRange.count), c2.userData = d2.userData, i2.set(d2, c2);
      const p3 = [], m2 = [];
      {
        const e = h2.array, n4 = new e.constructor(e.length);
        let i3 = 0;
        for (let t = 0; t < e.length; t++) {
          const r3 = e[t];
          let o3 = p3[r3];
          o3 == null && (p3[r3] = i3, m2[i3] = r3, o3 = i3, i3++), n4[t] = o3;
        }
        c2.setIndex(new BufferAttribute(n4, 1, false));
      }
      Object.keys(d2.attributes).forEach((e) => {
        const n4 = d2.attributes[e];
        if (n4.isInterleavedBufferAttribute)
          throw new Error("removeUnnecessaryVertices: InterleavedBufferAttribute is not supported");
        const i3 = n4.array, { itemSize: r3, normalized: o3 } = n4, s4 = new i3.constructor(m2.length * r3);
        m2.forEach((e2, t) => {
          for (let n5 = 0; n5 < r3; n5++)
            s4[t * r3 + n5] = i3[e2 * r3 + n5];
        }), c2.setAttribute(e, new BufferAttribute(s4, r3, o3));
      });
      let f2 = true;
      Object.keys(d2.morphAttributes).forEach((e) => {
        c2.morphAttributes[e] = [];
        const n4 = d2.morphAttributes[e];
        for (let i3 = 0; i3 < n4.length; i3++) {
          const r3 = n4[i3];
          if (r3.isInterleavedBufferAttribute)
            throw new Error("removeUnnecessaryVertices: InterleavedBufferAttribute is not supported");
          const o3 = r3.array, { itemSize: s4, normalized: a3 } = r3, l3 = new o3.constructor(m2.length * s4);
          m2.forEach((e2, t) => {
            for (let n5 = 0; n5 < s4; n5++)
              l3[t * s4 + n5] = o3[e2 * s4 + n5];
          }), f2 = f2 && l3.every((e2) => e2 === 0), c2.morphAttributes[e][i3] = new BufferAttribute(l3, s4, a3);
        }
      }), f2 && (c2.morphAttributes = {}), l2.geometry = c2;
    }), Array.from(i2.keys()).forEach((e) => {
      e.dispose();
    });
  };
  var Pe = new Vector3();
  var Ie = new MeshBasicMaterial({ color: 16711935, wireframe: true, transparent: true, depthTest: false });
  var Ce = new Vector3();

  // src/component/vrm.ts
  var currentVRM = new Value();
  var mirrorVRM = new Value();
  currentVRM.on(($vrm) => {
    if (!$vrm || !open_loading.$)
      return;
    currentVRM.$.scene.visible = toggle_visible.$;
    open_loading.set(false);
  });
  toggle_visible.on(() => {
    if (!currentVRM.$)
      return;
    currentVRM.$.scene.visible = toggle_visible.$;
  });
  function Load(url) {
    return new Promise((resolve, reject) => {
      const loader = new AFRAME.THREE.GLTFLoader();
      loader.crossOrigin = "anonymous";
      loader.load(url, (gltf) => {
        xe.from(gltf).then((vrm) => {
          resolve(vrm);
        });
      }, (progress) => {
      }, reject);
    });
  }
  AFRAME.registerComponent("vrm", {
    schema: {
      src: { type: "string", default: "" },
      fps: { type: "bool", default: false },
      current: { type: "bool", default: false },
      mirror: { type: "bool", default: false }
    },
    load() {
      Load(this.data.src).then((vrm) => {
        we.removeUnnecessaryVertices(vrm.scene);
        we.removeUnnecessaryJoints(vrm.scene);
        this.el.setObject3D("mesh", vrm.scene);
        this.data.vrm = vrm;
        if (this.data.current) {
          vrm.firstPerson.setup();
          camera.$.layers.enable(vrm.firstPerson.firstPersonOnlyLayer);
          camera.$.layers.disable(vrm.firstPerson.thirdPersonOnlyLayer);
          currentVRM.set(vrm);
        }
        if (this.data.mirror) {
          mirrorVRM.set(vrm);
        }
      });
    },
    init() {
      this.cancel();
      this.load();
      if (this.data.src !== "") {
        if (this.data.current) {
          this.cancels.push(avatar_current.on(($av) => {
            if ($av !== this.data.src) {
              this.el.removeObject3D("mesh");
              currentVRM.$?.dispose();
              this.data.src = $av;
              open_loading.set(true);
              this.load();
            }
          }));
        }
        if (this.data.doer) {
          this.cancels.push(avatar_doer.on(($av) => {
            if ($av !== this.data.src) {
              this.el.removeObject3D("mesh");
              mirrorVRM.$?.dispose();
              this.data.src = $av;
              open_loading.set(true);
              this.load();
            }
          }));
        }
      }
    },
    cancel() {
      if (!this.cancels) {
        this.cancels = [];
        return;
      }
      this.cancels.forEach((c2) => c2());
      this.cancels = [];
    },
    remove() {
      this.cancel();
      this.el.removeObject3D("mesh");
    }
  });

  // src/control.ts
  var binds = new Value(clone(state_default.binds)).save("binds");
  var vars = new Value(clone(state_default.vars)).save("vars");
  function clone(target) {
    return Object.fromEntries(Object.entries(target));
  }
  function saveState() {
    console.log(JSON.stringify({
      binds: binds.$,
      vars: vars.$,
      selfie: toggle_selfie.$
    }, null, "	"));
  }
  function loadState(state2) {
    binds.set(state2.binds);
    vars.set(state2.vars);
    toggle_selfie.set(state2.selfie);
  }
  window.loadState = loadState;
  var controls = {
    ["bind" /* Bind */]: (items) => {
      binds.$[items[2]] = items.slice(3).join(" ");
      binds.poke();
    },
    ["notbind" /* NotBind */]: (items) => {
      delete binds.$[items[3]];
      binds.poke();
    },
    ["clearbind" /* ClearBind */]: (items) => {
      binds.set(clone(state_default.binds));
    },
    ["var" /* Var */]: (items) => {
      vars.$[items[2]] = items.slice(3).join(" ");
      vars.poke();
    },
    ["notvar" /* NotVar */]: (items) => {
      delete vars.$[items[3]];
      vars.poke();
    },
    ["clearvar" /* ClearVar */]: (items) => {
      vars.set(clone(state_default.vars));
    },
    ["selfie" /* Selfie */]: (items) => {
      toggle_selfie.set(true);
    },
    ["notselfie" /* NotSelfie */]: (items) => {
      toggle_selfie.set(false);
    },
    ["save" /* Save */]: () => {
      saveState();
    },
    ["swap" /* Swap */]: (items) => {
      const cur = avatar_current.$;
      avatar_current.set(avatar_doer.$);
      avatar_doer.set(cur);
    },
    ["visible" /* Visible */]: (items) => {
      toggle_visible.set(true);
    },
    ["notvisible" /* NotVisible */]: (items) => {
      toggle_visible.set(false);
    },
    ["avatar" /* Avatar */]: (items) => {
      avatar_current.set(items[2]);
    },
    ["clearavatar" /* ClearAvatar */]: (items) => {
      avatar_current.set(state_default.avatar.current);
    },
    ["echo" /* Echo */]: (items) => {
      do_echo.set(true);
    },
    ["notecho" /* NotEcho */]: (items) => {
      do_echo.set(false);
    },
    ["help" /* Help */]: (items) => {
      open_help.set(true);
    },
    ["nothelp" /* NotHelp */]: (items) => {
      open_help.set(false);
    },
    ["stats" /* Stats */]: (items) => {
      open_stats.set(true);
    },
    ["notstats" /* NotStats */]: (items) => {
      open_stats.set(false);
    },
    ["heard" /* Heard */]: (items) => {
      open_heard.set(true);
    },
    ["notheard" /* NotHeard */]: (items) => {
      open_heard.set(false);
    },
    ["voice" /* Voice */]: (items) => {
      voice_current.set(items.slice(2).join(" "));
    },
    ["host" /* Host */]: (items) => {
      host.set(true);
    },
    ["nothost" /* NotHost */]: (items) => {
      host.set(false);
    },
    ["target" /* Target */]: (items) => {
      open_targeting.set(true);
    },
    ["nottarget" /* NotTarget */]: (items) => {
      open_targeting.set(false);
    },
    ["debug" /* Debug */]: (items) => {
      open_debug.set(true);
    },
    ["notdebug" /* NotDebug */]: (items) => {
      open_debug.set(false);
    },
    ["vary" /* Vary */]: (items) => {
      do_vary.poke();
    },
    ["scouter" /* Scouter */]: (items) => {
      scouter.set(items.join(" "));
    },
    ["notscouter" /* NotScouter */]: (items) => {
      scouter.set("green");
    },
    ["size" /* Size */]: (items) => {
      const n2 = parseFloat(items[2]);
      size.$.set(n2, n2, n2);
      size.poke();
    },
    ["notsize" /* NotSize */]: (items) => {
      size.$.set(1, 1, 1);
      size.poke();
    },
    ["pos" /* Pos */]: (items) => {
    },
    ["notpos" /* NotPos */]: (items) => {
    },
    ["room" /* Room */]: (items) => {
      open_hostid.set(true);
    },
    ["notroom" /* NotRoom */]: (items) => {
      open_hostid.set(false);
    },
    ["join" /* Join */]: (items) => {
      if (host.$)
        host.set(false);
      guest.set(true);
      room.set(items.slice(2).join(" "));
    },
    ["notjoin" /* NotJoin */]: (items) => {
      guest.set(false);
      room.set("");
    },
    ["ui" /* UI */]: (items) => {
      open_ui.set(true);
    },
    ["notui" /* NotUI */]: (items) => {
      open_ui.set(false);
    }
  };

  // src/keyboard.ts
  var key_down = new Value("");
  var key_up = new Value("");
  var key_map = new Value({});
  function bounce(e) {
    return e.target.tagName === "INPUT";
  }
  window.addEventListener("keydown", (e) => {
    if (bounce(e))
      return;
    const k2 = e.key.toLowerCase();
    key_down.set(k2);
    key_map.$[k2] = true;
    key_map.poke();
  });
  window.addEventListener("keyup", (e) => {
    if (bounce(e))
      return;
    const k2 = e.key.toLowerCase();
    key_up.set(k2);
    key_map.$[k2] = false;
    key_map.poke();
  });

  // src/chat.ts
  var recog = new Value();
  var recognition;
  var synth = window.speechSynthesis;
  function init() {
    recognition = new webkitSpeechRecognition();
    recognition.continuous = false;
    recognition.lang = "en-US";
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;
    recognition.onresult = (event) => {
      recog.set(event);
    };
    recognition.onend = () => {
      if (open_live.$)
        recognition.start();
    };
  }
  function findVoice(voiceName) {
    const voices = synth.getVoices();
    return voices.find((voice) => voice.name.toLowerCase().indexOf(voiceName.toLowerCase()) !== -1);
  }
  var talk = new Value("");
  var assist = new Value("");
  var findTilde = /~/g;
  function say(said) {
    if (!said)
      return;
    said = said.replace(findTilde, "control");
    if (doControl(said) && !do_echo.$)
      return;
    const spli = said.split("|");
    said = spli[Math.floor(Math.random() * spli.length)];
    const voices = synth.getVoices();
    var utterThis = new SpeechSynthesisUtterance(said);
    utterThis.voice = findVoice(voice_current.$) || findVoice("Aus") || findVoice("UK English Female") || voices[0];
    utterThis.pitch = 1;
    utterThis.rate = 0.8;
    utterThis.volume = 1;
    synth.speak(utterThis);
  }
  function doControl(said) {
    const items = said.toLowerCase().trim().split(" ");
    if (items[0] !== "control")
      return false;
    switch (items[1]) {
      case "not":
      case "clear":
        items[1] += items[2];
    }
    if (controls[items[1]]) {
      controls[items[1]](items);
    } else if (vars.$[items[1]]) {
      talk.set(vars.$[items[1]]);
    } else {
      return false;
    }
    return true;
  }
  talk.on(say);
  recog.on((event) => {
    if (!event)
      return;
    var said = event.results[event.results.length - 1][0].transcript.trim();
    talk.set(said);
  });
  var start = () => {
    if (!recognition)
      init();
    recognition.start();
  };
  function end() {
    recognition?.stop();
  }
  var cancels = [];
  open_live.on(($l) => {
    if ($l) {
      start();
    } else {
      end();
    }
  });
  binds.on(($binds) => {
    cancels.forEach((cancel) => cancel());
    cancels = [];
    Object.entries($binds).forEach(([key, value]) => {
      const cancel = key_down.on(($k) => {
        if ($k !== key)
          return;
        talk.set(value);
      });
      cancels.push(cancel);
    });
  });

  // node_modules/svelte/internal/index.mjs
  function noop() {
  }
  function run(fn) {
    return fn();
  }
  function blank_object() {
    return /* @__PURE__ */ Object.create(null);
  }
  function run_all(fns) {
    fns.forEach(run);
  }
  function is_function(thing) {
    return typeof thing === "function";
  }
  function safe_not_equal(a2, b2) {
    return a2 != a2 ? b2 == b2 : a2 !== b2 || (a2 && typeof a2 === "object" || typeof a2 === "function");
  }
  function is_empty(obj) {
    return Object.keys(obj).length === 0;
  }
  function subscribe(store, ...callbacks) {
    if (store == null) {
      return noop;
    }
    const unsub = store.subscribe(...callbacks);
    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
  }
  function component_subscribe(component, store, callback) {
    component.$$.on_destroy.push(subscribe(store, callback));
  }
  var is_hydrating = false;
  function start_hydrating() {
    is_hydrating = true;
  }
  function end_hydrating() {
    is_hydrating = false;
  }
  function append(target, node) {
    target.appendChild(node);
  }
  function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
  }
  function detach(node) {
    node.parentNode.removeChild(node);
  }
  function element(name) {
    return document.createElement(name);
  }
  function text(data) {
    return document.createTextNode(data);
  }
  function space() {
    return text(" ");
  }
  function empty() {
    return text("");
  }
  function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
  }
  function attr(node, attribute, value) {
    if (value == null)
      node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
      node.setAttribute(attribute, value);
  }
  function set_custom_element_data(node, prop, value) {
    if (prop in node) {
      node[prop] = typeof node[prop] === "boolean" && value === "" ? true : value;
    } else {
      attr(node, prop, value);
    }
  }
  function children(element2) {
    return Array.from(element2.childNodes);
  }
  function set_data(text2, data) {
    data = "" + data;
    if (text2.wholeText !== data)
      text2.data = data;
  }
  function set_input_value(input, value) {
    input.value = value == null ? "" : value;
  }
  var current_component;
  function set_current_component(component) {
    current_component = component;
  }
  var dirty_components = [];
  var binding_callbacks = [];
  var render_callbacks = [];
  var flush_callbacks = [];
  var resolved_promise = Promise.resolve();
  var update_scheduled = false;
  function schedule_update() {
    if (!update_scheduled) {
      update_scheduled = true;
      resolved_promise.then(flush);
    }
  }
  function add_render_callback(fn) {
    render_callbacks.push(fn);
  }
  var seen_callbacks = /* @__PURE__ */ new Set();
  var flushidx = 0;
  function flush() {
    const saved_component = current_component;
    do {
      while (flushidx < dirty_components.length) {
        const component = dirty_components[flushidx];
        flushidx++;
        set_current_component(component);
        update2(component.$$);
      }
      set_current_component(null);
      dirty_components.length = 0;
      flushidx = 0;
      while (binding_callbacks.length)
        binding_callbacks.pop()();
      for (let i2 = 0; i2 < render_callbacks.length; i2 += 1) {
        const callback = render_callbacks[i2];
        if (!seen_callbacks.has(callback)) {
          seen_callbacks.add(callback);
          callback();
        }
      }
      render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
      flush_callbacks.pop()();
    }
    update_scheduled = false;
    seen_callbacks.clear();
    set_current_component(saved_component);
  }
  function update2($$) {
    if ($$.fragment !== null) {
      $$.update();
      run_all($$.before_update);
      const dirty = $$.dirty;
      $$.dirty = [-1];
      $$.fragment && $$.fragment.p($$.ctx, dirty);
      $$.after_update.forEach(add_render_callback);
    }
  }
  var outroing = /* @__PURE__ */ new Set();
  var outros;
  function group_outros() {
    outros = {
      r: 0,
      c: [],
      p: outros
    };
  }
  function check_outros() {
    if (!outros.r) {
      run_all(outros.c);
    }
    outros = outros.p;
  }
  function transition_in(block, local) {
    if (block && block.i) {
      outroing.delete(block);
      block.i(local);
    }
  }
  function transition_out(block, local, detach2, callback) {
    if (block && block.o) {
      if (outroing.has(block))
        return;
      outroing.add(block);
      outros.c.push(() => {
        outroing.delete(block);
        if (callback) {
          if (detach2)
            block.d(1);
          callback();
        }
      });
      block.o(local);
    }
  }
  var globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : global;
  function create_component(block) {
    block && block.c();
  }
  function mount_component(component, target, anchor, customElement) {
    const { fragment: fragment2, on_mount, on_destroy, after_update } = component.$$;
    fragment2 && fragment2.m(target, anchor);
    if (!customElement) {
      add_render_callback(() => {
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) {
          on_destroy.push(...new_on_destroy);
        } else {
          run_all(new_on_destroy);
        }
        component.$$.on_mount = [];
      });
    }
    after_update.forEach(add_render_callback);
  }
  function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
      run_all($$.on_destroy);
      $$.fragment && $$.fragment.d(detaching);
      $$.on_destroy = $$.fragment = null;
      $$.ctx = [];
    }
  }
  function make_dirty(component, i2) {
    if (component.$$.dirty[0] === -1) {
      dirty_components.push(component);
      schedule_update();
      component.$$.dirty.fill(0);
    }
    component.$$.dirty[i2 / 31 | 0] |= 1 << i2 % 31;
  }
  function init2(component, options, instance11, create_fragment12, not_equal, props, append_styles, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
      fragment: null,
      ctx: null,
      props,
      update: noop,
      not_equal,
      bound: blank_object(),
      on_mount: [],
      on_destroy: [],
      on_disconnect: [],
      before_update: [],
      after_update: [],
      context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
      callbacks: blank_object(),
      dirty,
      skip_bound: false,
      root: options.target || parent_component.$$.root
    };
    append_styles && append_styles($$.root);
    let ready = false;
    $$.ctx = instance11 ? instance11(component, options.props || {}, (i2, ret, ...rest) => {
      const value = rest.length ? rest[0] : ret;
      if ($$.ctx && not_equal($$.ctx[i2], $$.ctx[i2] = value)) {
        if (!$$.skip_bound && $$.bound[i2])
          $$.bound[i2](value);
        if (ready)
          make_dirty(component, i2);
      }
      return ret;
    }) : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    $$.fragment = create_fragment12 ? create_fragment12($$.ctx) : false;
    if (options.target) {
      if (options.hydrate) {
        start_hydrating();
        const nodes = children(options.target);
        $$.fragment && $$.fragment.l(nodes);
        nodes.forEach(detach);
      } else {
        $$.fragment && $$.fragment.c();
      }
      if (options.intro)
        transition_in(component.$$.fragment);
      mount_component(component, options.target, options.anchor, options.customElement);
      end_hydrating();
      flush();
    }
    set_current_component(parent_component);
  }
  var SvelteElement;
  if (typeof HTMLElement === "function") {
    SvelteElement = class extends HTMLElement {
      constructor() {
        super();
        this.attachShadow({ mode: "open" });
      }
      connectedCallback() {
        const { on_mount } = this.$$;
        this.$$.on_disconnect = on_mount.map(run).filter(is_function);
        for (const key in this.$$.slotted) {
          this.appendChild(this.$$.slotted[key]);
        }
      }
      attributeChangedCallback(attr2, _oldValue, newValue) {
        this[attr2] = newValue;
      }
      disconnectedCallback() {
        run_all(this.$$.on_disconnect);
      }
      $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
      }
      $on(type, callback) {
        const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
        callbacks.push(callback);
        return () => {
          const index = callbacks.indexOf(callback);
          if (index !== -1)
            callbacks.splice(index, 1);
        };
      }
      $set($$props) {
        if (this.$$set && !is_empty($$props)) {
          this.$$.skip_bound = true;
          this.$$set($$props);
          this.$$.skip_bound = false;
        }
      }
    };
  }
  var SvelteComponent = class {
    $destroy() {
      destroy_component(this, 1);
      this.$destroy = noop;
    }
    $on(type, callback) {
      const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
      callbacks.push(callback);
      return () => {
        const index = callbacks.indexOf(callback);
        if (index !== -1)
          callbacks.splice(index, 1);
      };
    }
    $set($$props) {
      if (this.$$set && !is_empty($$props)) {
        this.$$.skip_bound = true;
        this.$$set($$props);
        this.$$.skip_bound = false;
      }
    }
  };

  // src/ui/heard.svelte
  function create_if_block(ctx) {
    let div;
    let input;
    return {
      c() {
        div = element("div");
        input = element("input");
        attr(input, "type", "text");
        attr(input, "class", "entry svelte-pqe1v5");
        input.readOnly = true;
        attr(div, "class", "lofi svelte-pqe1v5");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, input);
        ctx[2](input);
      },
      p: noop,
      d(detaching) {
        if (detaching)
          detach(div);
        ctx[2](null);
      }
    };
  }
  function create_fragment(ctx) {
    let if_block_anchor;
    let if_block = ctx[1] && create_if_block(ctx);
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
      },
      p(ctx2, [dirty]) {
        if (ctx2[1]) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (if_block)
          if_block.d(detaching);
        if (detaching)
          detach(if_block_anchor);
      }
    };
  }
  function instance($$self, $$props, $$invalidate) {
    let $open_heard;
    component_subscribe($$self, open_heard, ($$value) => $$invalidate(1, $open_heard = $$value));
    let text2;
    talk.on(() => {
      if (!text2 || !talk.$)
        return;
      $$invalidate(0, text2.value = talk.$, text2);
    });
    function input_binding($$value) {
      binding_callbacks[$$value ? "unshift" : "push"](() => {
        text2 = $$value;
        $$invalidate(0, text2);
      });
    }
    return [text2, $open_heard, input_binding];
  }
  var Heard = class extends SvelteComponent {
    constructor(options) {
      super();
      init2(this, options, instance, create_fragment, safe_not_equal, {});
    }
  };
  var heard_default = Heard;

  // src/ui/help.svelte
  function create_fragment2(ctx) {
    let div5;
    let div0;
    let t0;
    let div4;
    let div3;
    let div1;
    let t1;
    let textarea;
    let t2;
    let div2;
    let mounted;
    let dispose;
    return {
      c() {
        div5 = element("div");
        div0 = element("div");
        t0 = space();
        div4 = element("div");
        div3 = element("div");
        div1 = element("div");
        t1 = space();
        textarea = element("textarea");
        t2 = space();
        div2 = element("div");
        attr(div0, "class", "sprites sprite svelte-1qmwcry");
        attr(div1, "class", "flex svelte-1qmwcry");
        attr(textarea, "type", "text");
        attr(textarea, "class", "text button svelte-1qmwcry");
        attr(textarea, "maxlength", "200");
        textarea.value = ctx[0];
        textarea.readOnly = true;
        attr(div2, "class", "flex svelte-1qmwcry");
        attr(div3, "class", "span2 full svelte-1qmwcry");
        attr(div4, "class", "vbox svelte-1qmwcry");
        attr(div5, "class", "menu svelte-1qmwcry");
      },
      m(target, anchor) {
        insert(target, div5, anchor);
        append(div5, div0);
        append(div5, t0);
        append(div5, div4);
        append(div4, div3);
        append(div3, div1);
        append(div3, t1);
        append(div3, textarea);
        append(div3, t2);
        append(div3, div2);
        if (!mounted) {
          dispose = [
            listen(div1, "click", ctx[1]),
            listen(div2, "click", ctx[1])
          ];
          mounted = true;
        }
      },
      p(ctx2, [dirty]) {
        if (dirty & 1) {
          textarea.value = ctx2[0];
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching)
          detach(div5);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function instance2($$self, $$props, $$invalidate) {
    let $helptext;
    component_subscribe($$self, helptext, ($$value) => $$invalidate(0, $helptext = $$value));
    function close() {
      open_help.set(false);
    }
    return [$helptext, close];
  }
  var Help = class extends SvelteComponent {
    constructor(options) {
      super();
      init2(this, options, instance2, create_fragment2, safe_not_equal, {});
    }
  };
  var help_default = Help;

  // src/ui/title.svelte
  function create_fragment3(ctx) {
    let div3;
    let t8;
    let center;
    return {
      c() {
        div3 = element("div");
        div3.innerHTML = `<div class="favicon svelte-1uatlh0"></div> 
	<div class="full svelte-1uatlh0"><div class="title svelte-1uatlh0"><offset class="svelte-1uatlh0"><b class="svelte-1uatlh0">a</b>  <br/></offset> 
			<b class="svelte-1uatlh0">G</b>oblin
			<offset class="svelte-1uatlh0"><b class="svelte-1uatlh0">L</b>ife</offset></div></div>`;
        t8 = space();
        center = element("center");
        center.innerHTML = `<a href="https://ko-fi.com/Z8Z1C37O3" target="_blank" class="svelte-1uatlh0"><img style="border:0px;height:4vh;" src="https://cdn.ko-fi.com/cdn/kofi1.png?v=3" border="0" alt="Buy Me a Coffee at ko-fi.com"/></a> 
	<a href="https://discord.gg/8tkEQwsmwM" target="_blank" class="svelte-1uatlh0">\u{1F4AC}</a>`;
        attr(div3, "class", "intro svelte-1uatlh0");
      },
      m(target, anchor) {
        insert(target, div3, anchor);
        insert(target, t8, anchor);
        insert(target, center, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching)
          detach(div3);
        if (detaching)
          detach(t8);
        if (detaching)
          detach(center);
      }
    };
  }
  var Title = class extends SvelteComponent {
    constructor(options) {
      super();
      init2(this, options, null, create_fragment3, safe_not_equal, {});
    }
  };
  var title_default = Title;

  // src/ui/loading.svelte
  function create_fragment4(ctx) {
    let div5;
    let div0;
    let t0;
    let title;
    let t1;
    let div4;
    let div3;
    let div1;
    let t2;
    let textarea;
    let t3;
    let div2;
    let current;
    title = new title_default({});
    return {
      c() {
        div5 = element("div");
        div0 = element("div");
        t0 = space();
        create_component(title.$$.fragment);
        t1 = space();
        div4 = element("div");
        div3 = element("div");
        div1 = element("div");
        t2 = space();
        textarea = element("textarea");
        t3 = space();
        div2 = element("div");
        attr(div0, "class", "sprites sprite svelte-7z92og");
        attr(div1, "class", "flex svelte-7z92og");
        attr(textarea, "type", "text");
        attr(textarea, "class", "text button svelte-7z92og");
        attr(textarea, "maxlength", "200");
        textarea.value = ctx[0];
        textarea.readOnly = true;
        attr(div2, "class", "flex svelte-7z92og");
        attr(div3, "class", "span2 full svelte-7z92og");
        attr(div4, "class", "vbox svelte-7z92og");
        attr(div5, "class", "menu svelte-7z92og");
      },
      m(target, anchor) {
        insert(target, div5, anchor);
        append(div5, div0);
        append(div5, t0);
        mount_component(title, div5, null);
        append(div5, t1);
        append(div5, div4);
        append(div4, div3);
        append(div3, div1);
        append(div3, t2);
        append(div3, textarea);
        append(div3, t3);
        append(div3, div2);
        current = true;
      },
      p(ctx2, [dirty]) {
        if (!current || dirty & 1) {
          textarea.value = ctx2[0];
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(title.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(title.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching)
          detach(div5);
        destroy_component(title);
      }
    };
  }
  function instance3($$self, $$props, $$invalidate) {
    let $loading;
    component_subscribe($$self, loading, ($$value) => $$invalidate(0, $loading = $$value));
    return [$loading];
  }
  var Loading = class extends SvelteComponent {
    constructor(options) {
      super();
      init2(this, options, instance3, create_fragment4, safe_not_equal, {});
    }
  };
  var loading_default = Loading;

  // src/ui/text.svelte
  function create_if_block2(ctx) {
    let div;
    let input;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        input = element("input");
        attr(input, "type", "text");
        attr(input, "class", "entry svelte-kqsr2i");
        attr(div, "class", "lofi svelte-kqsr2i");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, input);
        set_input_value(input, ctx[1]);
        ctx[5](input);
        if (!mounted) {
          dispose = [
            listen(input, "input", ctx[4]),
            listen(input, "blur", ctx[3]),
            listen(input, "keydown", ctx[6])
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & 2 && input.value !== ctx2[1]) {
          set_input_value(input, ctx2[1]);
        }
      },
      d(detaching) {
        if (detaching)
          detach(div);
        ctx[5](null);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_fragment5(ctx) {
    let if_block_anchor;
    let if_block = ctx[1] !== void 0 && create_if_block2(ctx);
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
      },
      p(ctx2, [dirty]) {
        if (ctx2[1] !== void 0) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block2(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (if_block)
          if_block.d(detaching);
        if (detaching)
          detach(if_block_anchor);
      }
    };
  }
  function instance4($$self, $$props, $$invalidate) {
    let $open_text;
    component_subscribe($$self, open_text, ($$value) => $$invalidate(1, $open_text = $$value));
    let ele;
    function send() {
      talk.set(open_text.$);
      open_text.set(void 0);
    }
    function escape2() {
      open_text.set(void 0);
    }
    key_down.on(() => {
      switch (key_down.$) {
        case "`":
          if (open_text.$ === void 0) {
            open_text.set("~ ");
            requestAnimationFrame(() => ele?.focus());
          }
          break;
        case "enter":
          if (open_text.$ === void 0) {
            open_text.set("");
            requestAnimationFrame(() => ele?.focus());
          }
      }
    });
    function input_input_handler() {
      $open_text = this.value;
      open_text.set($open_text);
    }
    function input_binding($$value) {
      binding_callbacks[$$value ? "unshift" : "push"](() => {
        ele = $$value;
        $$invalidate(0, ele);
      });
    }
    const keydown_handler = (e) => {
      if (e.key === "Enter") {
        send();
      }
      switch (e.key) {
        case "Enter":
          send();
          break;
        case "Escape":
          escape2();
          break;
      }
    };
    return [
      ele,
      $open_text,
      send,
      escape2,
      input_input_handler,
      input_binding,
      keydown_handler
    ];
  }
  var Text = class extends SvelteComponent {
    constructor(options) {
      super();
      init2(this, options, instance4, create_fragment5, safe_not_equal, {});
    }
  };
  var text_default = Text;

  // node_modules/kalidokit/dist/utils/helpers.js
  var helpers_exports = {};
  __export(helpers_exports, {
    RestingDefault: () => RestingDefault,
    clamp: () => clamp2,
    remap: () => remap
  });
  var clamp2 = (val, min, max) => {
    return Math.max(Math.min(val, max), min);
  };
  var remap = (val, min, max) => {
    return (clamp2(val, min, max) - min) / (max - min);
  };
  var RestingDefault = {
    Face: {
      eye: {
        l: 1,
        r: 1
      },
      mouth: {
        x: 0,
        y: 0,
        shape: {
          A: 0,
          E: 0,
          I: 0,
          O: 0,
          U: 0
        }
      },
      head: {
        x: 0,
        y: 0,
        z: 0,
        width: 0.3,
        height: 0.6,
        position: {
          x: 0.5,
          y: 0.5,
          z: 0
        }
      },
      brow: 0,
      pupil: {
        x: 0,
        y: 0
      }
    },
    Pose: {
      RightUpperArm: {
        x: 0,
        y: 0,
        z: -1.25
      },
      LeftUpperArm: {
        x: 0,
        y: 0,
        z: 1.25
      },
      RightLowerArm: {
        x: 0,
        y: 0,
        z: 0
      },
      LeftLowerArm: {
        x: 0,
        y: 0,
        z: 0
      },
      LeftUpperLeg: {
        x: 0,
        y: 0,
        z: 0
      },
      RightUpperLeg: {
        x: 0,
        y: 0,
        z: 0
      },
      RightLowerLeg: {
        x: 0,
        y: 0,
        z: 0
      },
      LeftLowerLeg: {
        x: 0,
        y: 0,
        z: 0
      },
      LeftHand: {
        x: 0,
        y: 0,
        z: 0
      },
      RightHand: {
        x: 0,
        y: 0,
        z: 0
      },
      Spine: {
        x: 0,
        y: 0,
        z: 0
      },
      Hips: {
        position: {
          x: 0,
          y: 0,
          z: 0
        },
        rotation: {
          x: 0,
          y: 0,
          z: 0
        }
      }
    },
    RightHand: {
      RightWrist: {
        x: -0.13,
        y: -0.07,
        z: -1.04
      },
      RightRingProximal: {
        x: 0,
        y: 0,
        z: -0.13
      },
      RightRingIntermediate: {
        x: 0,
        y: 0,
        z: -0.4
      },
      RightRingDistal: {
        x: 0,
        y: 0,
        z: -0.04
      },
      RightIndexProximal: {
        x: 0,
        y: 0,
        z: -0.24
      },
      RightIndexIntermediate: {
        x: 0,
        y: 0,
        z: -0.25
      },
      RightIndexDistal: {
        x: 0,
        y: 0,
        z: -0.06
      },
      RightMiddleProximal: {
        x: 0,
        y: 0,
        z: -0.09
      },
      RightMiddleIntermediate: {
        x: 0,
        y: 0,
        z: -0.44
      },
      RightMiddleDistal: {
        x: 0,
        y: 0,
        z: -0.06
      },
      RightThumbProximal: {
        x: -0.23,
        y: -0.33,
        z: -0.12
      },
      RightThumbIntermediate: {
        x: -0.2,
        y: -0.199,
        z: -0.0139
      },
      RightThumbDistal: {
        x: -0.2,
        y: 2e-3,
        z: 0.15
      },
      RightLittleProximal: {
        x: 0,
        y: 0,
        z: -0.09
      },
      RightLittleIntermediate: {
        x: 0,
        y: 0,
        z: -0.225
      },
      RightLittleDistal: {
        x: 0,
        y: 0,
        z: -0.1
      }
    },
    LeftHand: {
      LeftWrist: {
        x: -0.13,
        y: -0.07,
        z: -1.04
      },
      LeftRingProximal: {
        x: 0,
        y: 0,
        z: 0.13
      },
      LeftRingIntermediate: {
        x: 0,
        y: 0,
        z: 0.4
      },
      LeftRingDistal: {
        x: 0,
        y: 0,
        z: 0.049
      },
      LeftIndexProximal: {
        x: 0,
        y: 0,
        z: 0.24
      },
      LeftIndexIntermediate: {
        x: 0,
        y: 0,
        z: 0.25
      },
      LeftIndexDistal: {
        x: 0,
        y: 0,
        z: 0.06
      },
      LeftMiddleProximal: {
        x: 0,
        y: 0,
        z: 0.09
      },
      LeftMiddleIntermediate: {
        x: 0,
        y: 0,
        z: 0.44
      },
      LeftMiddleDistal: {
        x: 0,
        y: 0,
        z: 0.066
      },
      LeftThumbProximal: {
        x: -0.23,
        y: 0.33,
        z: 0.12
      },
      LeftThumbIntermediate: {
        x: -0.2,
        y: 0.25,
        z: 0.05
      },
      LeftThumbDistal: {
        x: -0.2,
        y: 0.17,
        z: -0.06
      },
      LeftLittleProximal: {
        x: 0,
        y: 0,
        z: 0.17
      },
      LeftLittleIntermediate: {
        x: 0,
        y: 0,
        z: 0.4
      },
      LeftLittleDistal: {
        x: 0,
        y: 0,
        z: 0.1
      }
    }
  };

  // node_modules/kalidokit/dist/constants.js
  var RIGHT = "Right";
  var LEFT = "Left";
  var PI = Math.PI;
  var TWO_PI = Math.PI * 2;

  // node_modules/kalidokit/dist/utils/vector.js
  var Vector = class {
    constructor(a2, b2, c2) {
      var _a, _b, _c, _d, _e2, _f;
      if (Array.isArray(a2)) {
        this.x = (_a = a2[0]) !== null && _a !== void 0 ? _a : 0;
        this.y = (_b = a2[1]) !== null && _b !== void 0 ? _b : 0;
        this.z = (_c = a2[2]) !== null && _c !== void 0 ? _c : 0;
        return;
      }
      if (!!a2 && typeof a2 === "object") {
        this.x = (_d = a2.x) !== null && _d !== void 0 ? _d : 0;
        this.y = (_e2 = a2.y) !== null && _e2 !== void 0 ? _e2 : 0;
        this.z = (_f = a2.z) !== null && _f !== void 0 ? _f : 0;
        return;
      }
      this.x = a2 !== null && a2 !== void 0 ? a2 : 0;
      this.y = b2 !== null && b2 !== void 0 ? b2 : 0;
      this.z = c2 !== null && c2 !== void 0 ? c2 : 0;
    }
    negative() {
      return new Vector(-this.x, -this.y, -this.z);
    }
    add(v2) {
      if (v2 instanceof Vector)
        return new Vector(this.x + v2.x, this.y + v2.y, this.z + v2.z);
      else
        return new Vector(this.x + v2, this.y + v2, this.z + v2);
    }
    subtract(v2) {
      if (v2 instanceof Vector)
        return new Vector(this.x - v2.x, this.y - v2.y, this.z - v2.z);
      else
        return new Vector(this.x - v2, this.y - v2, this.z - v2);
    }
    multiply(v2) {
      if (v2 instanceof Vector)
        return new Vector(this.x * v2.x, this.y * v2.y, this.z * v2.z);
      else
        return new Vector(this.x * v2, this.y * v2, this.z * v2);
    }
    divide(v2) {
      if (v2 instanceof Vector)
        return new Vector(this.x / v2.x, this.y / v2.y, this.z / v2.z);
      else
        return new Vector(this.x / v2, this.y / v2, this.z / v2);
    }
    equals(v2) {
      return this.x == v2.x && this.y == v2.y && this.z == v2.z;
    }
    dot(v2) {
      return this.x * v2.x + this.y * v2.y + this.z * v2.z;
    }
    cross(v2) {
      return new Vector(this.y * v2.z - this.z * v2.y, this.z * v2.x - this.x * v2.z, this.x * v2.y - this.y * v2.x);
    }
    length() {
      return Math.sqrt(this.dot(this));
    }
    distance(v2, d2 = 3) {
      if (d2 === 2)
        return Math.sqrt(Math.pow(this.x - v2.x, 2) + Math.pow(this.y - v2.y, 2));
      else
        return Math.sqrt(Math.pow(this.x - v2.x, 2) + Math.pow(this.y - v2.y, 2) + Math.pow(this.z - v2.z, 2));
    }
    lerp(v2, fraction) {
      return v2.subtract(this).multiply(fraction).add(this);
    }
    unit() {
      return this.divide(this.length());
    }
    min() {
      return Math.min(Math.min(this.x, this.y), this.z);
    }
    max() {
      return Math.max(Math.max(this.x, this.y), this.z);
    }
    toSphericalCoords(axisMap = { x: "x", y: "y", z: "z" }) {
      return {
        theta: Math.atan2(this[axisMap.y], this[axisMap.x]),
        phi: Math.acos(this[axisMap.z] / this.length())
      };
    }
    angleTo(a2) {
      return Math.acos(this.dot(a2) / (this.length() * a2.length()));
    }
    toArray(n2) {
      return [this.x, this.y, this.z].slice(0, n2 || 3);
    }
    clone() {
      return new Vector(this.x, this.y, this.z);
    }
    init(x2, y2, z2) {
      this.x = x2;
      this.y = y2;
      this.z = z2;
      return this;
    }
    static negative(a2, b2 = new Vector()) {
      b2.x = -a2.x;
      b2.y = -a2.y;
      b2.z = -a2.z;
      return b2;
    }
    static add(a2, b2, c2 = new Vector()) {
      if (b2 instanceof Vector) {
        c2.x = a2.x + b2.x;
        c2.y = a2.y + b2.y;
        c2.z = a2.z + b2.z;
      } else {
        c2.x = a2.x + b2;
        c2.y = a2.y + b2;
        c2.z = a2.z + b2;
      }
      return c2;
    }
    static subtract(a2, b2, c2 = new Vector()) {
      if (b2 instanceof Vector) {
        c2.x = a2.x - b2.x;
        c2.y = a2.y - b2.y;
        c2.z = a2.z - b2.z;
      } else {
        c2.x = a2.x - b2;
        c2.y = a2.y - b2;
        c2.z = a2.z - b2;
      }
      return c2;
    }
    static multiply(a2, b2, c2 = new Vector()) {
      if (b2 instanceof Vector) {
        c2.x = a2.x * b2.x;
        c2.y = a2.y * b2.y;
        c2.z = a2.z * b2.z;
      } else {
        c2.x = a2.x * b2;
        c2.y = a2.y * b2;
        c2.z = a2.z * b2;
      }
      return c2;
    }
    static divide(a2, b2, c2 = new Vector()) {
      if (b2 instanceof Vector) {
        c2.x = a2.x / b2.x;
        c2.y = a2.y / b2.y;
        c2.z = a2.z / b2.z;
      } else {
        c2.x = a2.x / b2;
        c2.y = a2.y / b2;
        c2.z = a2.z / b2;
      }
      return c2;
    }
    static cross(a2, b2, c2 = new Vector()) {
      c2.x = a2.y * b2.z - a2.z * b2.y;
      c2.y = a2.z * b2.x - a2.x * b2.z;
      c2.z = a2.x * b2.y - a2.y * b2.x;
      return c2;
    }
    static unit(a2, b2) {
      const length = a2.length();
      b2.x = a2.x / length;
      b2.y = a2.y / length;
      b2.z = a2.z / length;
      return b2;
    }
    static fromAngles(theta, phi) {
      return new Vector(Math.cos(theta) * Math.cos(phi), Math.sin(phi), Math.sin(theta) * Math.cos(phi));
    }
    static randomDirection() {
      return Vector.fromAngles(Math.random() * TWO_PI, Math.asin(Math.random() * 2 - 1));
    }
    static min(a2, b2) {
      return new Vector(Math.min(a2.x, b2.x), Math.min(a2.y, b2.y), Math.min(a2.z, b2.z));
    }
    static max(a2, b2) {
      return new Vector(Math.max(a2.x, b2.x), Math.max(a2.y, b2.y), Math.max(a2.z, b2.z));
    }
    static lerp(a2, b2, fraction) {
      if (b2 instanceof Vector) {
        return b2.subtract(a2).multiply(fraction).add(a2);
      } else {
        return (b2 - a2) * fraction + a2;
      }
    }
    static fromArray(a2) {
      if (Array.isArray(a2)) {
        return new Vector(a2[0], a2[1], a2[2]);
      }
      return new Vector(a2.x, a2.y, a2.z);
    }
    static angleBetween(a2, b2) {
      return a2.angleTo(b2);
    }
    static distance(a2, b2, d2) {
      if (d2 === 2)
        return Math.sqrt(Math.pow(a2.x - b2.x, 2) + Math.pow(a2.y - b2.y, 2));
      else
        return Math.sqrt(Math.pow(a2.x - b2.x, 2) + Math.pow(a2.y - b2.y, 2) + Math.pow(a2.z - b2.z, 2));
    }
    static toDegrees(a2) {
      return a2 * (180 / PI);
    }
    static normalizeAngle(radians) {
      let angle = radians % TWO_PI;
      angle = angle > PI ? angle - TWO_PI : angle < -PI ? TWO_PI + angle : angle;
      return angle / PI;
    }
    static normalizeRadians(radians) {
      if (radians >= PI / 2) {
        radians -= TWO_PI;
      }
      if (radians <= -PI / 2) {
        radians += TWO_PI;
        radians = PI - radians;
      }
      return radians / PI;
    }
    static find2DAngle(cx, cy, ex, ey) {
      const dy = ey - cy;
      const dx = ex - cx;
      const theta = Math.atan2(dy, dx);
      return theta;
    }
    static findRotation(a2, b2, normalize = true) {
      if (normalize) {
        return new Vector(Vector.normalizeRadians(Vector.find2DAngle(a2.z, a2.x, b2.z, b2.x)), Vector.normalizeRadians(Vector.find2DAngle(a2.z, a2.y, b2.z, b2.y)), Vector.normalizeRadians(Vector.find2DAngle(a2.x, a2.y, b2.x, b2.y)));
      } else {
        return new Vector(Vector.find2DAngle(a2.z, a2.x, b2.z, b2.x), Vector.find2DAngle(a2.z, a2.y, b2.z, b2.y), Vector.find2DAngle(a2.x, a2.y, b2.x, b2.y));
      }
    }
    static rollPitchYaw(a2, b2, c2) {
      if (!c2) {
        return new Vector(Vector.normalizeAngle(Vector.find2DAngle(a2.z, a2.y, b2.z, b2.y)), Vector.normalizeAngle(Vector.find2DAngle(a2.z, a2.x, b2.z, b2.x)), Vector.normalizeAngle(Vector.find2DAngle(a2.x, a2.y, b2.x, b2.y)));
      }
      const qb = b2.subtract(a2);
      const qc = c2.subtract(a2);
      const n2 = qb.cross(qc);
      const unitZ = n2.unit();
      const unitX = qb.unit();
      const unitY = unitZ.cross(unitX);
      const beta = Math.asin(unitZ.x) || 0;
      const alpha = Math.atan2(-unitZ.y, unitZ.z) || 0;
      const gamma = Math.atan2(-unitY.x, unitX.x) || 0;
      return new Vector(Vector.normalizeAngle(alpha), Vector.normalizeAngle(beta), Vector.normalizeAngle(gamma));
    }
    static angleBetween3DCoords(a2, b2, c2) {
      if (!(a2 instanceof Vector)) {
        a2 = new Vector(a2);
        b2 = new Vector(b2);
        c2 = new Vector(c2);
      }
      const v1 = a2.subtract(b2);
      const v2 = c2.subtract(b2);
      const v1norm = v1.unit();
      const v2norm = v2.unit();
      const dotProducts = v1norm.dot(v2norm);
      const angle = Math.acos(dotProducts);
      return Vector.normalizeRadians(angle);
    }
    static getRelativeSphericalCoords(a2, b2, c2, axisMap) {
      if (!(a2 instanceof Vector)) {
        a2 = new Vector(a2);
        b2 = new Vector(b2);
        c2 = new Vector(c2);
      }
      const v1 = b2.subtract(a2);
      const v2 = c2.subtract(b2);
      const v1norm = v1.unit();
      const v2norm = v2.unit();
      const { theta: theta1, phi: phi1 } = v1norm.toSphericalCoords(axisMap);
      const { theta: theta2, phi: phi2 } = v2norm.toSphericalCoords(axisMap);
      const theta = theta1 - theta2;
      const phi = phi1 - phi2;
      return {
        theta: Vector.normalizeAngle(theta),
        phi: Vector.normalizeAngle(phi)
      };
    }
    static getSphericalCoords(a2, b2, axisMap = { x: "x", y: "y", z: "z" }) {
      if (!(a2 instanceof Vector)) {
        a2 = new Vector(a2);
        b2 = new Vector(b2);
      }
      const v1 = b2.subtract(a2);
      const v1norm = v1.unit();
      const { theta, phi } = v1norm.toSphericalCoords(axisMap);
      return {
        theta: Vector.normalizeAngle(-theta),
        phi: Vector.normalizeAngle(PI / 2 - phi)
      };
    }
  };

  // node_modules/kalidokit/dist/PoseSolver/calcArms.js
  var calcArms = (lm) => {
    const UpperArm = {
      r: Vector.findRotation(lm[11], lm[13]),
      l: Vector.findRotation(lm[12], lm[14])
    };
    UpperArm.r.y = Vector.angleBetween3DCoords(lm[12], lm[11], lm[13]);
    UpperArm.l.y = Vector.angleBetween3DCoords(lm[11], lm[12], lm[14]);
    const LowerArm = {
      r: Vector.findRotation(lm[13], lm[15]),
      l: Vector.findRotation(lm[14], lm[16])
    };
    LowerArm.r.y = Vector.angleBetween3DCoords(lm[11], lm[13], lm[15]);
    LowerArm.l.y = Vector.angleBetween3DCoords(lm[12], lm[14], lm[16]);
    LowerArm.r.z = clamp2(LowerArm.r.z, -2.14, 0);
    LowerArm.l.z = clamp2(LowerArm.l.z, -2.14, 0);
    const Hand = {
      r: Vector.findRotation(Vector.fromArray(lm[15]), Vector.lerp(Vector.fromArray(lm[17]), Vector.fromArray(lm[19]), 0.5)),
      l: Vector.findRotation(Vector.fromArray(lm[16]), Vector.lerp(Vector.fromArray(lm[18]), Vector.fromArray(lm[20]), 0.5))
    };
    const rightArmRig = rigArm(UpperArm.r, LowerArm.r, Hand.r, RIGHT);
    const leftArmRig = rigArm(UpperArm.l, LowerArm.l, Hand.l, LEFT);
    return {
      UpperArm: {
        r: rightArmRig.UpperArm,
        l: leftArmRig.UpperArm
      },
      LowerArm: {
        r: rightArmRig.LowerArm,
        l: leftArmRig.LowerArm
      },
      Hand: {
        r: rightArmRig.Hand,
        l: leftArmRig.Hand
      },
      Unscaled: {
        UpperArm,
        LowerArm,
        Hand
      }
    };
  };
  var rigArm = (UpperArm, LowerArm, Hand, side = RIGHT) => {
    const invert = side === RIGHT ? 1 : -1;
    UpperArm.z *= -2.3 * invert;
    UpperArm.y *= PI * invert;
    UpperArm.y -= Math.max(LowerArm.x);
    UpperArm.y -= -invert * Math.max(LowerArm.z, 0);
    UpperArm.x -= 0.3 * invert;
    LowerArm.z *= -2.14 * invert;
    LowerArm.y *= 2.14 * invert;
    LowerArm.x *= 2.14 * invert;
    UpperArm.x = clamp2(UpperArm.x, -0.5, PI);
    LowerArm.x = clamp2(LowerArm.x, -0.3, 0.3);
    Hand.y = clamp2(Hand.z * 2, -0.6, 0.6);
    Hand.z = Hand.z * -2.3 * invert;
    return {
      UpperArm,
      LowerArm,
      Hand
    };
  };

  // node_modules/kalidokit/dist/PoseSolver/calcHips.js
  var calcHips = (lm3d, lm2d) => {
    const hipLeft2d = Vector.fromArray(lm2d[23]);
    const hipRight2d = Vector.fromArray(lm2d[24]);
    const shoulderLeft2d = Vector.fromArray(lm2d[11]);
    const shoulderRight2d = Vector.fromArray(lm2d[12]);
    const hipCenter2d = hipLeft2d.lerp(hipRight2d, 1);
    const shoulderCenter2d = shoulderLeft2d.lerp(shoulderRight2d, 1);
    const spineLength = hipCenter2d.distance(shoulderCenter2d);
    const hips = {
      position: {
        x: clamp2(hipCenter2d.x - 0.4, -1, 1),
        y: 0,
        z: clamp2(spineLength - 1, -2, 0)
      }
    };
    hips.worldPosition = {
      x: hips.position.x,
      y: 0,
      z: hips.position.z * Math.pow(hips.position.z * -2, 2)
    };
    hips.worldPosition.x *= hips.worldPosition.z;
    hips.rotation = Vector.rollPitchYaw(lm3d[23], lm3d[24]);
    if (hips.rotation.y > 0.5) {
      hips.rotation.y -= 2;
    }
    hips.rotation.y += 0.5;
    if (hips.rotation.z > 0) {
      hips.rotation.z = 1 - hips.rotation.z;
    }
    if (hips.rotation.z < 0) {
      hips.rotation.z = -1 - hips.rotation.z;
    }
    const turnAroundAmountHips = remap(Math.abs(hips.rotation.y), 0.2, 0.4);
    hips.rotation.z *= 1 - turnAroundAmountHips;
    hips.rotation.x = 0;
    const spine = Vector.rollPitchYaw(lm3d[11], lm3d[12]);
    if (spine.y > 0.5) {
      spine.y -= 2;
    }
    spine.y += 0.5;
    if (spine.z > 0) {
      spine.z = 1 - spine.z;
    }
    if (spine.z < 0) {
      spine.z = -1 - spine.z;
    }
    const turnAroundAmount = remap(Math.abs(spine.y), 0.2, 0.4);
    spine.z *= 1 - turnAroundAmount;
    spine.x = 0;
    return rigHips(hips, spine);
  };
  var rigHips = (hips, spine) => {
    if (hips.rotation) {
      hips.rotation.x *= Math.PI;
      hips.rotation.y *= Math.PI;
      hips.rotation.z *= Math.PI;
    }
    spine.x *= PI;
    spine.y *= PI;
    spine.z *= PI;
    return {
      Hips: hips,
      Spine: spine
    };
  };

  // node_modules/kalidokit/dist/utils/euler.js
  var Euler2 = class {
    constructor(a2, b2, c2, rotationOrder) {
      var _a, _b, _c, _d;
      if (!!a2 && typeof a2 === "object") {
        this.x = (_a = a2.x) !== null && _a !== void 0 ? _a : 0;
        this.y = (_b = a2.y) !== null && _b !== void 0 ? _b : 0;
        this.z = (_c = a2.z) !== null && _c !== void 0 ? _c : 0;
        this.rotationOrder = (_d = a2.rotationOrder) !== null && _d !== void 0 ? _d : "XYZ";
        return;
      }
      this.x = a2 !== null && a2 !== void 0 ? a2 : 0;
      this.y = b2 !== null && b2 !== void 0 ? b2 : 0;
      this.z = c2 !== null && c2 !== void 0 ? c2 : 0;
      this.rotationOrder = rotationOrder !== null && rotationOrder !== void 0 ? rotationOrder : "XYZ";
    }
    multiply(v2) {
      return new Euler2(this.x * v2, this.y * v2, this.z * v2, this.rotationOrder);
    }
  };

  // node_modules/kalidokit/dist/PoseSolver/calcLegs.js
  var offsets = {
    upperLeg: {
      z: 0.1
    }
  };
  var calcLegs = (lm) => {
    const rightUpperLegSphericalCoords = Vector.getSphericalCoords(lm[23], lm[25], { x: "y", y: "z", z: "x" });
    const leftUpperLegSphericalCoords = Vector.getSphericalCoords(lm[24], lm[26], { x: "y", y: "z", z: "x" });
    const rightLowerLegSphericalCoords = Vector.getRelativeSphericalCoords(lm[23], lm[25], lm[27], {
      x: "y",
      y: "z",
      z: "x"
    });
    const leftLowerLegSphericalCoords = Vector.getRelativeSphericalCoords(lm[24], lm[26], lm[28], {
      x: "y",
      y: "z",
      z: "x"
    });
    const hipRotation = Vector.findRotation(lm[23], lm[24]);
    const UpperLeg = {
      r: new Vector({
        x: rightUpperLegSphericalCoords.theta,
        y: rightLowerLegSphericalCoords.phi,
        z: rightUpperLegSphericalCoords.phi - hipRotation.z
      }),
      l: new Vector({
        x: leftUpperLegSphericalCoords.theta,
        y: leftLowerLegSphericalCoords.phi,
        z: leftUpperLegSphericalCoords.phi - hipRotation.z
      })
    };
    const LowerLeg = {
      r: new Vector({
        x: -Math.abs(rightLowerLegSphericalCoords.theta),
        y: 0,
        z: 0
      }),
      l: new Vector({
        x: -Math.abs(leftLowerLegSphericalCoords.theta),
        y: 0,
        z: 0
      })
    };
    const rightLegRig = rigLeg(UpperLeg.r, LowerLeg.r, RIGHT);
    const leftLegRig = rigLeg(UpperLeg.l, LowerLeg.l, LEFT);
    return {
      UpperLeg: {
        r: rightLegRig.UpperLeg,
        l: leftLegRig.UpperLeg
      },
      LowerLeg: {
        r: rightLegRig.LowerLeg,
        l: leftLegRig.LowerLeg
      },
      Unscaled: {
        UpperLeg,
        LowerLeg
      }
    };
  };
  var rigLeg = (UpperLeg, LowerLeg, side = RIGHT) => {
    const invert = side === RIGHT ? 1 : -1;
    const rigedUpperLeg = new Euler2({
      x: clamp2(UpperLeg.x, 0, 0.5) * PI,
      y: clamp2(UpperLeg.y, -0.25, 0.25) * PI,
      z: clamp2(UpperLeg.z, -0.5, 0.5) * PI + invert * offsets.upperLeg.z,
      rotationOrder: "XYZ"
    });
    const rigedLowerLeg = new Euler2({
      x: LowerLeg.x * PI,
      y: LowerLeg.y * PI,
      z: LowerLeg.z * PI
    });
    return {
      UpperLeg: rigedUpperLeg,
      LowerLeg: rigedLowerLeg
    };
  };

  // node_modules/kalidokit/dist/PoseSolver/index.js
  var PoseSolver = class {
    static solve(lm3d, lm2d, { runtime = "mediapipe", video: video2 = null, imageSize = null, enableLegs = true } = {}) {
      var _a, _b, _c, _d;
      if (!lm3d && !lm2d) {
        console.error("Need both World Pose and Pose Landmarks");
        return;
      }
      if (video2) {
        const videoEl = typeof video2 === "string" ? document.querySelector(video2) : video2;
        imageSize = {
          width: videoEl.videoWidth,
          height: videoEl.videoHeight
        };
      }
      if (runtime === "tfjs" && imageSize) {
        for (const e of lm3d) {
          e.visibility = e.score;
        }
        for (const e of lm2d) {
          e.x /= imageSize.width;
          e.y /= imageSize.height;
          e.z = 0;
          e.visibility = e.score;
        }
      }
      const Arms = calcArms(lm3d);
      const Hips = calcHips(lm3d, lm2d);
      const Legs = enableLegs ? calcLegs(lm3d) : null;
      const rightHandOffscreen = lm3d[15].y > 0.1 || ((_a = lm3d[15].visibility) !== null && _a !== void 0 ? _a : 0) < 0.23 || 0.995 < lm2d[15].y;
      const leftHandOffscreen = lm3d[16].y > 0.1 || ((_b = lm3d[16].visibility) !== null && _b !== void 0 ? _b : 0) < 0.23 || 0.995 < lm2d[16].y;
      const leftFootOffscreen = lm3d[23].y > 0.1 || ((_c = lm3d[23].visibility) !== null && _c !== void 0 ? _c : 0) < 0.63 || Hips.Hips.position.z > -0.4;
      const rightFootOffscreen = lm3d[24].y > 0.1 || ((_d = lm3d[24].visibility) !== null && _d !== void 0 ? _d : 0) < 0.63 || Hips.Hips.position.z > -0.4;
      Arms.UpperArm.l = Arms.UpperArm.l.multiply(leftHandOffscreen ? 0 : 1);
      Arms.UpperArm.l.z = leftHandOffscreen ? RestingDefault.Pose.LeftUpperArm.z : Arms.UpperArm.l.z;
      Arms.UpperArm.r = Arms.UpperArm.r.multiply(rightHandOffscreen ? 0 : 1);
      Arms.UpperArm.r.z = rightHandOffscreen ? RestingDefault.Pose.RightUpperArm.z : Arms.UpperArm.r.z;
      Arms.LowerArm.l = Arms.LowerArm.l.multiply(leftHandOffscreen ? 0 : 1);
      Arms.LowerArm.r = Arms.LowerArm.r.multiply(rightHandOffscreen ? 0 : 1);
      Arms.Hand.l = Arms.Hand.l.multiply(leftHandOffscreen ? 0 : 1);
      Arms.Hand.r = Arms.Hand.r.multiply(rightHandOffscreen ? 0 : 1);
      if (Legs) {
        Legs.UpperLeg.l = Legs.UpperLeg.l.multiply(rightFootOffscreen ? 0 : 1);
        Legs.UpperLeg.r = Legs.UpperLeg.r.multiply(leftFootOffscreen ? 0 : 1);
        Legs.LowerLeg.l = Legs.LowerLeg.l.multiply(rightFootOffscreen ? 0 : 1);
        Legs.LowerLeg.r = Legs.LowerLeg.r.multiply(leftFootOffscreen ? 0 : 1);
      }
      return {
        RightUpperArm: Arms.UpperArm.r,
        RightLowerArm: Arms.LowerArm.r,
        LeftUpperArm: Arms.UpperArm.l,
        LeftLowerArm: Arms.LowerArm.l,
        RightHand: Arms.Hand.r,
        LeftHand: Arms.Hand.l,
        RightUpperLeg: Legs ? Legs.UpperLeg.r : RestingDefault.Pose.RightUpperLeg,
        RightLowerLeg: Legs ? Legs.LowerLeg.r : RestingDefault.Pose.RightLowerLeg,
        LeftUpperLeg: Legs ? Legs.UpperLeg.l : RestingDefault.Pose.LeftUpperLeg,
        LeftLowerLeg: Legs ? Legs.LowerLeg.l : RestingDefault.Pose.LeftLowerLeg,
        Hips: Hips.Hips,
        Spine: Hips.Spine
      };
    }
  };
  PoseSolver.calcArms = calcArms;
  PoseSolver.calcHips = calcHips;
  PoseSolver.calcLegs = calcLegs;

  // node_modules/kalidokit/dist/HandSolver/index.js
  var HandSolver = class {
    static solve(lm, side = RIGHT) {
      if (!lm) {
        console.error("Need Hand Landmarks");
        return;
      }
      const palm = [
        new Vector(lm[0]),
        new Vector(lm[side === RIGHT ? 17 : 5]),
        new Vector(lm[side === RIGHT ? 5 : 17])
      ];
      const handRotation = Vector.rollPitchYaw(palm[0], palm[1], palm[2]);
      handRotation.y = handRotation.z;
      handRotation.y -= side === LEFT ? 0.4 : 0.4;
      let hand = {};
      hand[side + "Wrist"] = { x: handRotation.x, y: handRotation.y, z: handRotation.z };
      hand[side + "RingProximal"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[0], lm[13], lm[14]) };
      hand[side + "RingIntermediate"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[13], lm[14], lm[15]) };
      hand[side + "RingDistal"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[14], lm[15], lm[16]) };
      hand[side + "IndexProximal"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[0], lm[5], lm[6]) };
      hand[side + "IndexIntermediate"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[5], lm[6], lm[7]) };
      hand[side + "IndexDistal"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[6], lm[7], lm[8]) };
      hand[side + "MiddleProximal"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[0], lm[9], lm[10]) };
      hand[side + "MiddleIntermediate"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[9], lm[10], lm[11]) };
      hand[side + "MiddleDistal"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[10], lm[11], lm[12]) };
      hand[side + "ThumbProximal"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[0], lm[1], lm[2]) };
      hand[side + "ThumbIntermediate"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[1], lm[2], lm[3]) };
      hand[side + "ThumbDistal"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[2], lm[3], lm[4]) };
      hand[side + "LittleProximal"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[0], lm[17], lm[18]) };
      hand[side + "LittleIntermediate"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[17], lm[18], lm[19]) };
      hand[side + "LittleDistal"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[18], lm[19], lm[20]) };
      hand = rigFingers(hand, side);
      return hand;
    }
  };
  var rigFingers = (hand, side = RIGHT) => {
    const invert = side === RIGHT ? 1 : -1;
    const digits = ["Ring", "Index", "Little", "Thumb", "Middle"];
    const segments = ["Proximal", "Intermediate", "Distal"];
    hand[side + "Wrist"].x = clamp2(hand[side + "Wrist"].x * 2 * invert, -0.3, 0.3);
    hand[side + "Wrist"].y = clamp2(hand[side + "Wrist"].y * 2.3, side === RIGHT ? -1.2 : -0.6, side === RIGHT ? 0.6 : 1.6);
    hand[side + "Wrist"].z = hand[side + "Wrist"].z * -2.3 * invert;
    digits.forEach((e) => {
      segments.forEach((j2) => {
        const trackedFinger = hand[side + e + j2];
        if (e === "Thumb") {
          const dampener = {
            x: j2 === "Proximal" ? 2.2 : j2 === "Intermediate" ? 0 : 0,
            y: j2 === "Proximal" ? 2.2 : j2 === "Intermediate" ? 0.7 : 1,
            z: j2 === "Proximal" ? 0.5 : j2 === "Intermediate" ? 0.5 : 0.5
          };
          const startPos = {
            x: j2 === "Proximal" ? 1.2 : j2 === "Distal" ? -0.2 : -0.2,
            y: j2 === "Proximal" ? 1.1 * invert : j2 === "Distal" ? 0.1 * invert : 0.1 * invert,
            z: j2 === "Proximal" ? 0.2 * invert : j2 === "Distal" ? 0.2 * invert : 0.2 * invert
          };
          const newThumb = { x: 0, y: 0, z: 0 };
          if (j2 === "Proximal") {
            newThumb.z = clamp2(startPos.z + trackedFinger.z * -PI * dampener.z * invert, side === RIGHT ? -0.6 : -0.3, side === RIGHT ? 0.3 : 0.6);
            newThumb.x = clamp2(startPos.x + trackedFinger.z * -PI * dampener.x, -0.6, 0.3);
            newThumb.y = clamp2(startPos.y + trackedFinger.z * -PI * dampener.y * invert, side === RIGHT ? -1 : -0.3, side === RIGHT ? 0.3 : 1);
          } else {
            newThumb.z = clamp2(startPos.z + trackedFinger.z * -PI * dampener.z * invert, -2, 2);
            newThumb.x = clamp2(startPos.x + trackedFinger.z * -PI * dampener.x, -2, 2);
            newThumb.y = clamp2(startPos.y + trackedFinger.z * -PI * dampener.y * invert, -2, 2);
          }
          trackedFinger.x = newThumb.x;
          trackedFinger.y = newThumb.y;
          trackedFinger.z = newThumb.z;
        } else {
          trackedFinger.z = clamp2(trackedFinger.z * -PI * invert, side === RIGHT ? -PI : 0, side === RIGHT ? 0 : PI);
        }
      });
    });
    return hand;
  };

  // node_modules/kalidokit/dist/FaceSolver/calcHead.js
  var createEulerPlane = (lm) => {
    const p1 = new Vector(lm[21]);
    const p22 = new Vector(lm[251]);
    const p3 = new Vector(lm[397]);
    const p4 = new Vector(lm[172]);
    const p3mid = p3.lerp(p4, 0.5);
    return {
      vector: [p1, p22, p3mid],
      points: [p1, p22, p3, p4]
    };
  };
  var calcHead = (lm) => {
    const plane = createEulerPlane(lm).vector;
    const rotate = Vector.rollPitchYaw(plane[0], plane[1], plane[2]);
    const midPoint = plane[0].lerp(plane[1], 0.5);
    const width2 = plane[0].distance(plane[1]);
    const height2 = midPoint.distance(plane[2]);
    rotate.x *= -1;
    rotate.z *= -1;
    return {
      y: rotate.y * PI,
      x: rotate.x * PI,
      z: rotate.z * PI,
      width: width2,
      height: height2,
      position: midPoint.lerp(plane[2], 0.5),
      normalized: {
        y: rotate.y,
        x: rotate.x,
        z: rotate.z
      },
      degrees: {
        y: rotate.y * 180,
        x: rotate.x * 180,
        z: rotate.z * 180
      }
    };
  };

  // node_modules/kalidokit/dist/FaceSolver/calcEyes.js
  var points = {
    eye: {
      [LEFT]: [130, 133, 160, 159, 158, 144, 145, 153],
      [RIGHT]: [263, 362, 387, 386, 385, 373, 374, 380]
    },
    brow: {
      [LEFT]: [35, 244, 63, 105, 66, 229, 230, 231],
      [RIGHT]: [265, 464, 293, 334, 296, 449, 450, 451]
    },
    pupil: {
      [LEFT]: [468, 469, 470, 471, 472],
      [RIGHT]: [473, 474, 475, 476, 477]
    }
  };
  var getEyeOpen = (lm, side = LEFT, { high = 0.85, low = 0.55 } = {}) => {
    const eyePoints = points.eye[side];
    const eyeDistance = eyeLidRatio(lm[eyePoints[0]], lm[eyePoints[1]], lm[eyePoints[2]], lm[eyePoints[3]], lm[eyePoints[4]], lm[eyePoints[5]], lm[eyePoints[6]], lm[eyePoints[7]]);
    const maxRatio = 0.285;
    const ratio = clamp2(eyeDistance / maxRatio, 0, 2);
    const eyeOpenRatio = remap(ratio, low, high);
    return {
      norm: eyeOpenRatio,
      raw: ratio
    };
  };
  var eyeLidRatio = (eyeOuterCorner, eyeInnerCorner, eyeOuterUpperLid, eyeMidUpperLid, eyeInnerUpperLid, eyeOuterLowerLid, eyeMidLowerLid, eyeInnerLowerLid) => {
    eyeOuterCorner = new Vector(eyeOuterCorner);
    eyeInnerCorner = new Vector(eyeInnerCorner);
    eyeOuterUpperLid = new Vector(eyeOuterUpperLid);
    eyeMidUpperLid = new Vector(eyeMidUpperLid);
    eyeInnerUpperLid = new Vector(eyeInnerUpperLid);
    eyeOuterLowerLid = new Vector(eyeOuterLowerLid);
    eyeMidLowerLid = new Vector(eyeMidLowerLid);
    eyeInnerLowerLid = new Vector(eyeInnerLowerLid);
    const eyeWidth = eyeOuterCorner.distance(eyeInnerCorner, 2);
    const eyeOuterLidDistance = eyeOuterUpperLid.distance(eyeOuterLowerLid, 2);
    const eyeMidLidDistance = eyeMidUpperLid.distance(eyeMidLowerLid, 2);
    const eyeInnerLidDistance = eyeInnerUpperLid.distance(eyeInnerLowerLid, 2);
    const eyeLidAvg = (eyeOuterLidDistance + eyeMidLidDistance + eyeInnerLidDistance) / 3;
    const ratio = eyeLidAvg / eyeWidth;
    return ratio;
  };
  var pupilPos = (lm, side = LEFT) => {
    const eyeOuterCorner = new Vector(lm[points.eye[side][0]]);
    const eyeInnerCorner = new Vector(lm[points.eye[side][1]]);
    const eyeWidth = eyeOuterCorner.distance(eyeInnerCorner, 2);
    const midPoint = eyeOuterCorner.lerp(eyeInnerCorner, 0.5);
    const pupil = new Vector(lm[points.pupil[side][0]]);
    const dx = midPoint.x - pupil.x;
    const dy = midPoint.y - eyeWidth * 0.075 - pupil.y;
    let ratioX = dx / (eyeWidth / 2);
    let ratioY = dy / (eyeWidth / 4);
    ratioX *= 4;
    ratioY *= 4;
    return { x: ratioX, y: ratioY };
  };
  var stabilizeBlink = (eye, headY, { enableWink = true, maxRot = 0.5 } = {}) => {
    eye.r = clamp2(eye.r, 0, 1);
    eye.l = clamp2(eye.l, 0, 1);
    const blinkDiff = Math.abs(eye.l - eye.r);
    const blinkThresh = enableWink ? 0.8 : 1.2;
    const isClosing = eye.l < 0.3 && eye.r < 0.3;
    const isOpen = eye.l > 0.6 && eye.r > 0.6;
    if (headY > maxRot) {
      return { l: eye.r, r: eye.r };
    }
    if (headY < -maxRot) {
      return { l: eye.l, r: eye.l };
    }
    return {
      l: blinkDiff >= blinkThresh && !isClosing && !isOpen ? eye.l : eye.r > eye.l ? Vector.lerp(eye.r, eye.l, 0.95) : Vector.lerp(eye.r, eye.l, 0.05),
      r: blinkDiff >= blinkThresh && !isClosing && !isOpen ? eye.r : eye.r > eye.l ? Vector.lerp(eye.r, eye.l, 0.95) : Vector.lerp(eye.r, eye.l, 0.05)
    };
  };
  var calcEyes = (lm, { high = 0.85, low = 0.55 } = {}) => {
    if (lm.length !== 478) {
      return {
        l: 1,
        r: 1
      };
    }
    const leftEyeLid = getEyeOpen(lm, LEFT, { high, low });
    const rightEyeLid = getEyeOpen(lm, RIGHT, { high, low });
    return {
      l: leftEyeLid.norm || 0,
      r: rightEyeLid.norm || 0
    };
  };
  var calcPupils = (lm) => {
    if (lm.length !== 478) {
      return { x: 0, y: 0 };
    } else {
      const pupilL = pupilPos(lm, LEFT);
      const pupilR = pupilPos(lm, RIGHT);
      return {
        x: (pupilL.x + pupilR.x) * 0.5 || 0,
        y: (pupilL.y + pupilR.y) * 0.5 || 0
      };
    }
  };
  var getBrowRaise = (lm, side = LEFT) => {
    const browPoints = points.brow[side];
    const browDistance = eyeLidRatio(lm[browPoints[0]], lm[browPoints[1]], lm[browPoints[2]], lm[browPoints[3]], lm[browPoints[4]], lm[browPoints[5]], lm[browPoints[6]], lm[browPoints[7]]);
    const maxBrowRatio = 1.15;
    const browHigh = 0.125;
    const browLow = 0.07;
    const browRatio = browDistance / maxBrowRatio - 1;
    const browRaiseRatio = (clamp2(browRatio, browLow, browHigh) - browLow) / (browHigh - browLow);
    return browRaiseRatio;
  };
  var calcBrow = (lm) => {
    if (lm.length !== 478) {
      return 0;
    } else {
      const leftBrow = getBrowRaise(lm, LEFT);
      const rightBrow = getBrowRaise(lm, RIGHT);
      return (leftBrow + rightBrow) / 2 || 0;
    }
  };

  // node_modules/kalidokit/dist/FaceSolver/calcMouth.js
  var calcMouth = (lm) => {
    const eyeInnerCornerL = new Vector(lm[133]);
    const eyeInnerCornerR = new Vector(lm[362]);
    const eyeOuterCornerL = new Vector(lm[130]);
    const eyeOuterCornerR = new Vector(lm[263]);
    const eyeInnerDistance = eyeInnerCornerL.distance(eyeInnerCornerR);
    const eyeOuterDistance = eyeOuterCornerL.distance(eyeOuterCornerR);
    const upperInnerLip = new Vector(lm[13]);
    const lowerInnerLip = new Vector(lm[14]);
    const mouthCornerLeft = new Vector(lm[61]);
    const mouthCornerRight = new Vector(lm[291]);
    const mouthOpen = upperInnerLip.distance(lowerInnerLip);
    const mouthWidth = mouthCornerLeft.distance(mouthCornerRight);
    let ratioY = mouthOpen / eyeInnerDistance;
    let ratioX = mouthWidth / eyeOuterDistance;
    ratioY = remap(ratioY, 0.15, 0.7);
    ratioX = remap(ratioX, 0.45, 0.9);
    ratioX = (ratioX - 0.3) * 2;
    const mouthX = ratioX;
    const mouthY = remap(mouthOpen / eyeInnerDistance, 0.17, 0.5);
    const ratioI = clamp2(remap(mouthX, 0, 1) * 2 * remap(mouthY, 0.2, 0.7), 0, 1);
    const ratioA = mouthY * 0.4 + mouthY * (1 - ratioI) * 0.6;
    const ratioU = mouthY * remap(1 - ratioI, 0, 0.3) * 0.1;
    const ratioE = remap(ratioU, 0.2, 1) * (1 - ratioI) * 0.3;
    const ratioO = (1 - ratioI) * remap(mouthY, 0.3, 1) * 0.4;
    return {
      x: ratioX || 0,
      y: ratioY || 0,
      shape: {
        A: ratioA || 0,
        E: ratioE || 0,
        I: ratioI || 0,
        O: ratioO || 0,
        U: ratioU || 0
      }
    };
  };

  // node_modules/kalidokit/dist/FaceSolver/index.js
  var FaceSolver = class {
    static solve(lm, { runtime = "tfjs", video: video2 = null, imageSize = null, smoothBlink = false, blinkSettings = [] } = {}) {
      if (!lm) {
        console.error("Need Face Landmarks");
        return;
      }
      if (video2) {
        const videoEl = typeof video2 === "string" ? document.querySelector(video2) : video2;
        imageSize = {
          width: videoEl.videoWidth,
          height: videoEl.videoHeight
        };
      }
      if (runtime === "mediapipe" && imageSize) {
        for (const e of lm) {
          e.x *= imageSize.width;
          e.y *= imageSize.height;
          e.z *= imageSize.width;
        }
      }
      const getHead = calcHead(lm);
      const getMouth = calcMouth(lm);
      blinkSettings = blinkSettings.length > 0 ? blinkSettings : runtime === "tfjs" ? [0.55, 0.85] : [0.35, 0.5];
      let getEye = calcEyes(lm, {
        high: blinkSettings[1],
        low: blinkSettings[0]
      });
      if (smoothBlink) {
        getEye = stabilizeBlink(getEye, getHead.y);
      }
      const getPupils = calcPupils(lm);
      const getBrow = calcBrow(lm);
      return {
        head: getHead,
        eye: getEye,
        brow: getBrow,
        pupil: getPupils,
        mouth: getMouth
      };
    }
  };
  FaceSolver.stabilizeBlink = stabilizeBlink;

  // src/component/webcam-vrm.ts
  var import_holistic = __toESM(require_holistic());
  var import_camera_utils = __toESM(require_camera_utils());
  var remap2 = helpers_exports.remap;
  var clamp3 = helpers_exports.clamp;
  var lerp2 = Vector.lerp;
  var euler = new AFRAME.THREE.Euler();
  var quat = new AFRAME.THREE.Quaternion();
  var rigRotation = (vrm, name, rotation = { x: 0, y: 0, z: 0 }, dampener = 1, lerpAmount = 0.3) => {
    const Part = vrm.humanoid.getBoneNode(u.HumanoidBoneName[name]);
    if (!Part) {
      return;
    }
    euler.set(rotation.x * dampener, rotation.y * dampener, rotation.z * dampener);
    let quaternion = quat.setFromEuler(euler);
    Part.quaternion.slerp(quaternion, lerpAmount);
  };
  var v3 = new AFRAME.THREE.Vector3();
  var rigPosition = (vrm, name, position = { x: 0, y: 0, z: 0 }, dampener = 1, lerpAmount = 0.3) => {
    const Part = vrm.humanoid.getBoneNode(u.HumanoidBoneName[name]);
    if (!Part) {
      return;
    }
    let vector = v3.set(position.x * dampener, position.y * dampener, position.z * dampener);
    Part.position.lerp(vector, lerpAmount);
  };
  var oldLookTarget = new AFRAME.THREE.Euler();
  var rigFace = (vrm, riggedFace) => {
    rigRotation(vrm, "Neck", riggedFace.head, 0.7);
    const Blendshape = vrm.blendShapeProxy;
    const PresetName = u.BlendShapePresetName;
    riggedFace.eye.l = lerp2(clamp3(1 - riggedFace.eye.l, 0, 1), Blendshape.getValue(PresetName.Blink), 0.5);
    riggedFace.eye.r = lerp2(clamp3(1 - riggedFace.eye.r, 0, 1), Blendshape.getValue(PresetName.Blink), 0.5);
    riggedFace.eye = FaceSolver.stabilizeBlink(riggedFace.eye, riggedFace.head.y);
    Blendshape.setValue(PresetName.Blink, riggedFace.eye.l);
    Blendshape.setValue(PresetName.I, lerp2(riggedFace.mouth.shape.I, Blendshape.getValue(PresetName.I), 0.5));
    Blendshape.setValue(PresetName.A, lerp2(riggedFace.mouth.shape.A, Blendshape.getValue(PresetName.A), 0.5));
    Blendshape.setValue(PresetName.E, lerp2(riggedFace.mouth.shape.E, Blendshape.getValue(PresetName.E), 0.5));
    Blendshape.setValue(PresetName.O, lerp2(riggedFace.mouth.shape.O, Blendshape.getValue(PresetName.O), 0.5));
    Blendshape.setValue(PresetName.U, lerp2(riggedFace.mouth.shape.U, Blendshape.getValue(PresetName.U), 0.5));
    let lookTarget = euler.set(lerp2(oldLookTarget.x, riggedFace.pupil.y, 0.4), lerp2(oldLookTarget.y, riggedFace.pupil.x, 0.4), 0, "XYZ");
    oldLookTarget.copy(lookTarget);
    vrm.lookAt.applyer.lookAt(lookTarget);
  };
  var animateVRM = (vrm, results, riggedPose, riggedLeftHand, riggedRightHand) => {
    if (!vrm || !videoElement.$) {
      return;
    }
    let riggedFace;
    const faceLandmarks = results.faceLandmarks;
    const pose3DLandmarks = results.ea;
    const pose2DLandmarks = results.poseLandmarks;
    const leftHandLandmarks = results.rightHandLandmarks;
    const rightHandLandmarks = results.leftHandLandmarks;
    if (faceLandmarks) {
      riggedFace = FaceSolver.solve(faceLandmarks, {
        runtime: "mediapipe",
        video: videoElement.$
      });
      rigFace(vrm, riggedFace);
    }
    if (pose2DLandmarks && pose3DLandmarks) {
      rigRotation(vrm, "Hips", riggedPose.Hips.rotation, 0.7);
      rigPosition(vrm, "Hips", {
        x: -riggedPose.Hips.position.x,
        y: riggedPose.Hips.position.y + 1,
        z: -riggedPose.Hips.position.z
      }, 1, 0.07);
      rigRotation(vrm, "Chest", riggedPose.Spine, 0.25, 0.3);
      rigRotation(vrm, "Spine", riggedPose.Spine, 0.45, 0.3);
      rigRotation(vrm, "RightUpperArm", riggedPose.RightUpperArm, 1, 0.3);
      rigRotation(vrm, "RightLowerArm", riggedPose.RightLowerArm, 1, 0.3);
      rigRotation(vrm, "LeftUpperArm", riggedPose.LeftUpperArm, 1, 0.3);
      rigRotation(vrm, "LeftLowerArm", riggedPose.LeftLowerArm, 1, 0.3);
      rigRotation(vrm, "LeftUpperLeg", riggedPose.LeftUpperLeg, 1, 0.3);
      rigRotation(vrm, "LeftLowerLeg", riggedPose.LeftLowerLeg, 1, 0.3);
      rigRotation(vrm, "RightUpperLeg", riggedPose.RightUpperLeg, 1, 0.3);
      rigRotation(vrm, "RightLowerLeg", riggedPose.RightLowerLeg, 1, 0.3);
    }
    if (leftHandLandmarks) {
      rigRotation(vrm, "LeftHand", {
        z: riggedPose.LeftHand.z,
        y: riggedLeftHand.LeftWrist.y,
        x: riggedLeftHand.LeftWrist.x
      });
      rigRotation(vrm, "LeftRingProximal", riggedLeftHand.LeftRingProximal);
      rigRotation(vrm, "LeftRingIntermediate", riggedLeftHand.LeftRingIntermediate);
      rigRotation(vrm, "LeftRingDistal", riggedLeftHand.LeftRingDistal);
      rigRotation(vrm, "LeftIndexProximal", riggedLeftHand.LeftIndexProximal);
      rigRotation(vrm, "LeftIndexIntermediate", riggedLeftHand.LeftIndexIntermediate);
      rigRotation(vrm, "LeftIndexDistal", riggedLeftHand.LeftIndexDistal);
      rigRotation(vrm, "LeftMiddleProximal", riggedLeftHand.LeftMiddleProximal);
      rigRotation(vrm, "LeftMiddleIntermediate", riggedLeftHand.LeftMiddleIntermediate);
      rigRotation(vrm, "LeftMiddleDistal", riggedLeftHand.LeftMiddleDistal);
      rigRotation(vrm, "LeftThumbProximal", riggedLeftHand.LeftThumbProximal);
      rigRotation(vrm, "LeftThumbIntermediate", riggedLeftHand.LeftThumbIntermediate);
      rigRotation(vrm, "LeftThumbDistal", riggedLeftHand.LeftThumbDistal);
      rigRotation(vrm, "LeftLittleProximal", riggedLeftHand.LeftLittleProximal);
      rigRotation(vrm, "LeftLittleIntermediate", riggedLeftHand.LeftLittleIntermediate);
      rigRotation(vrm, "LeftLittleDistal", riggedLeftHand.LeftLittleDistal);
    }
    if (rightHandLandmarks) {
      rigRotation(vrm, "RightHand", {
        z: riggedPose.RightHand.z,
        y: riggedRightHand.RightWrist.y,
        x: riggedRightHand.RightWrist.x
      });
      rigRotation(vrm, "RightRingProximal", riggedRightHand.RightRingProximal);
      rigRotation(vrm, "RightRingIntermediate", riggedRightHand.RightRingIntermediate);
      rigRotation(vrm, "RightRingDistal", riggedRightHand.RightRingDistal);
      rigRotation(vrm, "RightIndexProximal", riggedRightHand.RightIndexProximal);
      rigRotation(vrm, "RightIndexIntermediate", riggedRightHand.RightIndexIntermediate);
      rigRotation(vrm, "RightIndexDistal", riggedRightHand.RightIndexDistal);
      rigRotation(vrm, "RightMiddleProximal", riggedRightHand.RightMiddleProximal);
      rigRotation(vrm, "RightMiddleIntermediate", riggedRightHand.RightMiddleIntermediate);
      rigRotation(vrm, "RightMiddleDistal", riggedRightHand.RightMiddleDistal);
      rigRotation(vrm, "RightThumbProximal", riggedRightHand.RightThumbProximal);
      rigRotation(vrm, "RightThumbIntermediate", riggedRightHand.RightThumbIntermediate);
      rigRotation(vrm, "RightThumbDistal", riggedRightHand.RightThumbDistal);
      rigRotation(vrm, "RightLittleProximal", riggedRightHand.RightLittleProximal);
      rigRotation(vrm, "RightLittleIntermediate", riggedRightHand.RightLittleIntermediate);
      rigRotation(vrm, "RightLittleDistal", riggedRightHand.RightLittleDistal);
    }
  };
  var bones = Object.keys(u.HumanoidBoneName);
  var videoElement = new Value();
  var canvasElement = new Value();
  var onResults = (results) => {
    if (!open_live.$)
      return;
    const faceLandmarks = results.faceLandmarks;
    const pose3DLandmarks = results.ea;
    const pose2DLandmarks = results.poseLandmarks;
    const leftHandLandmarks = results.rightHandLandmarks;
    const rightHandLandmarks = results.leftHandLandmarks;
    let riggedFace, riggedPose, riggedLeftHand, riggedRightHand;
    if (pose2DLandmarks && pose3DLandmarks) {
      riggedPose = PoseSolver.solve(pose3DLandmarks, pose2DLandmarks, {
        runtime: "mediapipe",
        video: videoElement.$
      });
    }
    if (leftHandLandmarks) {
      riggedLeftHand = HandSolver.solve(leftHandLandmarks, "Left");
    }
    if (rightHandLandmarks) {
      riggedRightHand = HandSolver.solve(rightHandLandmarks, "Right");
    }
    animateVRM(currentVRM.$, results, riggedPose, riggedLeftHand, riggedRightHand);
    animateVRM(mirrorVRM.$, results, riggedPose, riggedLeftHand, riggedRightHand);
  };
  var holistic = new import_holistic.Holistic({
    locateFile: (file) => {
      return `https://cdn.jsdelivr.net/npm/@mediapipe/holistic@0.5.1635989137/${file}`;
    }
  });
  holistic.setOptions({
    modelComplexity: 0.5,
    smoothLandmarks: true,
    minDetectionConfidence: 0.7,
    minTrackingConfidence: 0.7,
    refineFaceLandmarks: true
  });
  holistic.onResults(onResults);
  var width = 320;
  var height = 240;
  videoElement.on(($ve) => {
    if (!$ve)
      return;
    canvasElement.$.width = width;
    canvasElement.$.height = height;
    const ctx = canvasElement.$.getContext("2d");
    ctx.translate(width, 0);
    ctx.scale(-1, 1);
    let camera3;
    open_live.on(($l) => {
      if (!camera3 && $l) {
        camera3 = new import_camera_utils.Camera($ve, {
          onFrame: async () => {
            ctx.drawImage($ve, 0, 0, width, height);
            await holistic.send({ image: canvasElement.$ });
          },
          width,
          height
        });
      }
      if ($l)
        camera3.start();
      if (!$l && camera3)
        camera3.stop();
    });
  });
  tick.on(() => {
    if (currentVRM.$) {
      currentVRM.$.update(0.01);
    }
    if (mirrorVRM.$) {
      mirrorVRM.$.update(0.01);
    }
  });
  function Random(items) {
    return items[Math.floor(Math.random() * items.length)];
  }
  talk.on(async ($talk) => {
    if (!$talk)
      return;
    const s3 = Math.sin(Math.PI * tick.$);
    const spl = $talk.split(" ");
    spl.push("pop");
    const intv = setInterval(() => {
      const item = spl.pop();
      if (!item) {
        clearInterval(intv);
        return;
      }
      mirrorVRM.$?.blendShapeProxy.setValue(u.BlendShapePresetName[Random("OEIAU")], 0.5 + 2 * s3);
    }, 1 / 3.5 * 1e3);
  });

  // src/template/webcam.svelte
  function create_fragment6(ctx) {
    let div;
    let video2;
    let t;
    let canvas;
    return {
      c() {
        div = element("div");
        video2 = element("video");
        t = space();
        canvas = element("canvas");
        attr(div, "class", "hidden svelte-oofj5h");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, video2);
        ctx[2](video2);
        append(div, t);
        append(div, canvas);
        ctx[3](canvas);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching)
          detach(div);
        ctx[2](null);
        ctx[3](null);
      }
    };
  }
  function instance5($$self, $$props, $$invalidate) {
    let videoElementSource;
    let canvasElementSource;
    function video_binding($$value) {
      binding_callbacks[$$value ? "unshift" : "push"](() => {
        videoElementSource = $$value;
        $$invalidate(0, videoElementSource);
      });
    }
    function canvas_binding($$value) {
      binding_callbacks[$$value ? "unshift" : "push"](() => {
        canvasElementSource = $$value;
        $$invalidate(1, canvasElementSource);
      });
    }
    $$self.$$.update = () => {
      if ($$self.$$.dirty & 3) {
        $: {
          if (canvasElementSource && !canvasElement.$) {
            canvasElement.set(canvasElementSource);
          }
          if (videoElementSource && !videoElement.$) {
            videoElement.set(videoElementSource);
          }
        }
      }
    };
    return [videoElementSource, canvasElementSource, video_binding, canvas_binding];
  }
  var Webcam = class extends SvelteComponent {
    constructor(options) {
      super();
      init2(this, options, instance5, create_fragment6, safe_not_equal, {});
    }
  };
  var webcam_default = Webcam;

  // src/component/wasd-controller.ts
  var vec3 = new AFRAME.THREE.Vector3();
  var quat2 = new AFRAME.THREE.Quaternion();
  function getRoot(o3d) {
    if (o3d.parent.name === "Root") {
      return o3d.parent;
    }
    return getRoot(o3d.parent);
  }
  AFRAME.registerComponent("wasd-controller", {
    schema: {
      speed: { type: "number", default: 0.3 },
      rot: { type: "number", default: 25e-4 }
    },
    init() {
      this.jump = AFRAME.utils.throttleTick(this.jump, 2e3, this);
    },
    jump() {
      this.el.emit("jump");
    },
    tick(_2, delta) {
      if (guest.$)
        return;
      if (!this.el.body)
        return;
      const o3d = this.el.object3D;
      let force;
      let torq;
      vec3.set(0, 0, 0);
      let intensity = 1;
      let hop = 5;
      if (key_map.$["shift"]) {
        intensity = 1.5;
      }
      if (key_map.$[" "] && o3d.position.y < 0.5) {
        hop = 3 * delta;
        this.jump();
      }
      if (key_map.$["w"]) {
        vec3.y = hop;
        vec3.z += -this.data.speed * delta * intensity;
      }
      if (key_map.$["s"]) {
        vec3.y = hop;
        vec3.z += this.data.speed * delta * intensity;
      }
      if (key_map.$["a"]) {
        vec3.y = hop;
        vec3.x += -this.data.speed * delta * intensity;
      }
      if (key_map.$["d"]) {
        vec3.y = hop;
        vec3.x += this.data.speed * delta * intensity;
      }
      if (key_map.$["q"]) {
        const root = getRoot(camera.$);
        root.rotation.y += this.data.rot * delta;
      }
      if (key_map.$["e"]) {
        const root = getRoot(camera.$);
        root.rotation.y -= this.data.rot * delta;
      }
      if (Math.abs(vec3.length()) > 0 && camera.$) {
        camera.$.updateMatrixWorld();
        quat2.setFromRotationMatrix(camera.$.matrixWorld);
        const up = vec3.y;
        vec3.applyQuaternion(quat2);
        force = new Ammo.btVector3(vec3.x, up, vec3.z);
        this.el.body.applyForce(force);
        this.el.body.activate();
        Ammo.destroy(force);
      }
      if (torq)
        Ammo.destroy(torq);
    }
  });

  // src/component/sfxr.ts
  AFRAME.registerComponent("sfxr", {
    multiple: true,
    schema: {
      oldParams: { default: true },
      wave_type: { default: 1 },
      p_env_attack: { default: 0 },
      p_env_sustain: { default: 0.31718502829007483 },
      p_env_punch: { default: 0 },
      p_env_decay: { default: 0.2718540993592685 },
      p_base_freq: { default: 0.26126191208337196 },
      p_freq_limit: { default: 0 },
      p_freq_ramp: { default: 0.43787689856926615 },
      p_freq_dramp: { default: 0 },
      p_vib_strength: { default: 0 },
      p_vib_speed: { default: 0 },
      p_arp_mod: { default: 0 },
      p_arp_speed: { default: 0 },
      p_duty: { default: 1 },
      p_duty_ramp: { default: 0 },
      p_repeat_speed: { default: 0.7558565452384385 },
      p_pha_offset: { default: 0 },
      p_pha_ramp: { default: 0 },
      p_lpf_freq: { default: 1 },
      p_lpf_ramp: { default: 0 },
      p_lpf_resonance: { default: 0 },
      p_hpf_freq: { default: 0 },
      p_hpf_ramp: { default: 0 },
      sound_vol: { default: 0.25 },
      sample_rate: { default: 44100 },
      sample_size: { default: 8 },
      autoplay: { type: "boolean", default: false },
      spatial: { type: "boolean", default: true }
    },
    init: function() {
      if (this.id) {
        this.event = this.event.bind(this);
        this.el.addEventListener(this.id, this.event);
      }
      if (this.autoplay) {
        this.event();
      }
    },
    event() {
      if (!this.audio) {
        this.audio = new SoundEffect(this.data).generate();
      }
      this.audio.getAudio().play();
    },
    remove() {
      if (this.cancel)
        clearTimeout(this.cancel);
      this.el.removeEventlistener(this.id, this.event);
    }
  });

  // src/component/uniforms.ts
  AFRAME.registerComponent("uniforms", {
    tick() {
      time.$.value = this.el.time;
      time.poke();
    }
  });

  // src/sound/action.ts
  var sfx_jump = {
    "oldParams": true,
    "wave_type": 0,
    "p_env_attack": 0,
    "p_env_sustain": 0.14827504779514308,
    "p_env_punch": 0,
    "p_env_decay": 0.2604416321207049,
    "p_base_freq": 0.3492950945673611,
    "p_freq_limit": 0,
    "p_freq_ramp": 0.1370009340411704,
    "p_freq_dramp": 0,
    "p_vib_strength": 0,
    "p_vib_speed": 0,
    "p_arp_mod": 0,
    "p_arp_speed": 0,
    "p_duty": 0.4063339547539369,
    "p_duty_ramp": 0,
    "p_repeat_speed": 0,
    "p_pha_offset": 0,
    "p_pha_ramp": 0,
    "p_lpf_freq": 1,
    "p_lpf_ramp": 0,
    "p_lpf_resonance": 0,
    "p_hpf_freq": 0.25097654676858755,
    "p_hpf_ramp": 0,
    "sound_vol": 1e-3,
    "sample_rate": 44100,
    "sample_size": 8
  };

  // src/ui/netdata.svelte
  function create_if_block3(ctx) {
    let div;
    let t;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        t = text(ctx[1]);
        attr(div, "class", "netdata svelte-1beqevp");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, t);
        if (!mounted) {
          dispose = listen(div, "click", ctx[2]);
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & 2)
          set_data(t, ctx2[1]);
      },
      d(detaching) {
        if (detaching)
          detach(div);
        mounted = false;
        dispose();
      }
    };
  }
  function create_fragment7(ctx) {
    let if_block_anchor;
    let if_block = ctx[0] && ctx[1] && create_if_block3(ctx);
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
      },
      p(ctx2, [dirty]) {
        if (ctx2[0] && ctx2[1]) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block3(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (if_block)
          if_block.d(detaching);
        if (detaching)
          detach(if_block_anchor);
      }
    };
  }
  function instance6($$self, $$props, $$invalidate) {
    let $open_hostid;
    let $room;
    component_subscribe($$self, open_hostid, ($$value) => $$invalidate(0, $open_hostid = $$value));
    component_subscribe($$self, room, ($$value) => $$invalidate(1, $room = $$value));
    const click_handler = () => {
      const p3 = `${location.protocol}//${location.host}/?go&join=${$room}`;
      navigator.clipboard.writeText(p3);
    };
    return [$open_hostid, $room, click_handler];
  }
  var Netdata = class extends SvelteComponent {
    constructor(options) {
      super();
      init2(this, options, instance6, create_fragment7, safe_not_equal, {});
    }
  };
  var netdata_default = Netdata;

  // src/component/character-camera.ts
  var pos = new Vector3();
  var quat3 = new Quaternion();
  var scale = new Vector3();
  AFRAME.registerComponent("character-camera", {
    init() {
      camera.set(this.el.object3D);
      camera_el.set(this);
      currentVRM.on(($vrm) => {
        if (!$vrm)
          return;
        this.hideHead();
        $vrm.firstPerson.firstPersonBone.add(this.el.object3D);
      });
    },
    showHead() {
      const { layers } = this.el.object3D.children[0];
      this.data.head = true;
      layers.disable(currentVRM.$.firstPerson.firstPersonOnlyLayer);
      layers.enable(currentVRM.$.firstPerson.thirdPersonOnlyLayer);
    },
    hideHead() {
      const { layers } = this.el.object3D.children[0];
      this.data.head = false;
      layers.enable(currentVRM.$.firstPerson.firstPersonOnlyLayer);
      layers.disable(currentVRM.$.firstPerson.thirdPersonOnlyLayer);
    },
    remove() {
      if (currentVRM.$) {
        currentVRM.$?.firstPerson.firstPersonBone.remove(this.el.object3D);
      }
      this.cancel();
    },
    tick(_2, dt) {
      if (!currentVRM.$)
        return;
      if (toggle_selfie.$ !== this.selfie) {
        if (toggle_selfie.$) {
          this.showHead();
          this.el.object3D.position.set(0, 0.1, -0.75);
          this.el.object3D.lookAt(0, 5, 0);
        } else {
          this.el.object3D.position.set(0, 0, 0);
          this.el.object3D.quaternion.identity();
          this.hideHead();
        }
        this.selfie = toggle_selfie.$;
      }
    }
  });

  // src/component/copy.ts
  var vec32 = new AFRAME.THREE.Vector3();
  var quat4 = new AFRAME.THREE.Quaternion();
  var scale2 = new AFRAME.THREE.Vector3();
  AFRAME.registerComponent("copy", {
    schema: {
      target: { type: "selector" },
      position: { type: "bool", default: true },
      quaternion: { type: "bool", defualt: true },
      scale: { type: "bool", default: false }
    },
    tick() {
      if (!this.data.target)
        return;
      const o3d = this.el.object3D;
      const o_o3d = this.data.target.object3D;
      o_o3d.updateMatrixWorld();
      o_o3d.matrixWorld.decompose(vec32, quat4, scale2);
      if (this.data.position) {
        o3d.position.copy(vec32);
      }
      if (this.data.quaternion) {
        o3d.quaternion.copy(quat4);
      }
    }
  });

  // src/component/look.ts
  var registerComponent = AFRAME.registerComponent;
  var THREE = AFRAME.THREE;
  var utils = AFRAME.utils;
  var PI_2 = Math.PI / 2;
  registerComponent("look", {
    dependencies: ["position", "rotation"],
    schema: {
      enabled: { default: true },
      magicWindowTrackingEnabled: { default: true },
      pointerLockEnabled: { default: false },
      reverseMouseDrag: { default: false },
      reverseTouchDrag: { default: false },
      touchEnabled: { default: true },
      mouseEnabled: { default: true }
    },
    init: function() {
      this.deltaYaw = 0;
      this.previousHMDPosition = new THREE.Vector3();
      this.hmdQuaternion = new THREE.Quaternion();
      this.magicWindowAbsoluteEuler = new THREE.Euler();
      this.magicWindowDeltaEuler = new THREE.Euler();
      this.position = new THREE.Vector3();
      this.magicWindowObject = new THREE.Object3D();
      this.rotation = {};
      this.deltaRotation = {};
      this.savedPose = null;
      this.pointerLocked = false;
      this.setupMouseControls();
      this.bindMethods();
      this.previousMouseEvent = {};
      this.setupMagicWindowControls();
      this.savedPose = {
        position: new THREE.Vector3(),
        rotation: new THREE.Euler()
      };
      if (this.el.sceneEl.is("vr-mode") || this.el.sceneEl.is("ar-mode")) {
        this.onEnterVR();
      }
    },
    setupMagicWindowControls: function() {
      var magicWindowControls;
      var data = this.data;
      if (utils.device.isMobile() || utils.device.isMobileDeviceRequestingDesktopSite()) {
        magicWindowControls = this.magicWindowControls = new THREE.DeviceOrientationControls(this.magicWindowObject);
        if (typeof DeviceOrientationEvent !== "undefined" && DeviceOrientationEvent.requestPermission) {
          magicWindowControls.enabled = false;
          if (this.el.sceneEl.components["device-orientation-permission-ui"].permissionGranted) {
            magicWindowControls.enabled = data.magicWindowTrackingEnabled;
          } else {
            this.el.sceneEl.addEventListener("deviceorientationpermissiongranted", function() {
              magicWindowControls.enabled = data.magicWindowTrackingEnabled;
            });
          }
        }
      }
    },
    update: function(oldData) {
      var data = this.data;
      if (data.enabled !== oldData.enabled) {
        this.updateGrabCursor(data.enabled);
      }
      if (oldData && !data.magicWindowTrackingEnabled && oldData.magicWindowTrackingEnabled) {
        this.magicWindowAbsoluteEuler.set(0, 0, 0);
        this.magicWindowDeltaEuler.set(0, 0, 0);
      }
      if (this.magicWindowControls) {
        this.magicWindowControls.enabled = data.magicWindowTrackingEnabled;
      }
      if (oldData && !data.pointerLockEnabled !== oldData.pointerLockEnabled) {
        this.removeEventListeners();
        this.addEventListeners();
        if (this.pointerLocked) {
          this.exitPointerLock();
        }
      }
    },
    tick: function(t) {
      var data = this.data;
      if (!data.enabled) {
        return;
      }
      this.updateOrientation();
    },
    play: function() {
      this.addEventListeners();
    },
    pause: function() {
      this.removeEventListeners();
      if (this.pointerLocked) {
        this.exitPointerLock();
      }
    },
    remove: function() {
      this.removeEventListeners();
      if (this.pointerLocked) {
        this.exitPointerLock();
      }
    },
    bindMethods: function() {
      this.onMouseDown = this.onMouseDown.bind(this);
      this.onMouseMove = this.onMouseMove.bind(this);
      this.onMouseUp = this.onMouseUp.bind(this);
      this.onTouchStart = this.onTouchStart.bind(this);
      this.onTouchMove = this.onTouchMove.bind(this);
      this.onTouchEnd = this.onTouchEnd.bind(this);
      this.onEnterVR = this.onEnterVR.bind(this);
      this.onExitVR = this.onExitVR.bind(this);
      this.onPointerLockChange = this.onPointerLockChange.bind(this);
      this.onPointerLockError = this.onPointerLockError.bind(this);
    },
    setupMouseControls: function() {
      this.mouseDown = false;
      this.pitchObject = new THREE.Object3D();
      this.yawObject = new THREE.Object3D();
      this.yawObject.position.y = 10;
      this.yawObject.add(this.pitchObject);
    },
    addEventListeners: function() {
      var sceneEl = this.el.sceneEl;
      var canvasEl = sceneEl.canvas;
      if (!canvasEl) {
        sceneEl.addEventListener("render-target-loaded", this.addEventListeners.bind(this));
        return;
      }
      canvasEl.addEventListener("mousedown", this.onMouseDown, false);
      window.addEventListener("mousemove", this.onMouseMove, false);
      window.addEventListener("mouseup", this.onMouseUp, false);
      canvasEl.addEventListener("touchstart", this.onTouchStart);
      window.addEventListener("touchmove", this.onTouchMove);
      window.addEventListener("touchend", this.onTouchEnd);
      sceneEl.addEventListener("enter-vr", this.onEnterVR);
      sceneEl.addEventListener("exit-vr", this.onExitVR);
      if (this.data.pointerLockEnabled) {
        document.addEventListener("pointerlockchange", this.onPointerLockChange, false);
        document.addEventListener("mozpointerlockchange", this.onPointerLockChange, false);
        document.addEventListener("pointerlockerror", this.onPointerLockError, false);
      }
    },
    removeEventListeners: function() {
      var sceneEl = this.el.sceneEl;
      var canvasEl = sceneEl && sceneEl.canvas;
      if (!canvasEl) {
        return;
      }
      canvasEl.removeEventListener("mousedown", this.onMouseDown);
      window.removeEventListener("mousemove", this.onMouseMove);
      window.removeEventListener("mouseup", this.onMouseUp);
      canvasEl.removeEventListener("touchstart", this.onTouchStart);
      window.removeEventListener("touchmove", this.onTouchMove);
      window.removeEventListener("touchend", this.onTouchEnd);
      sceneEl.removeEventListener("enter-vr", this.onEnterVR);
      sceneEl.removeEventListener("exit-vr", this.onExitVR);
      document.removeEventListener("pointerlockchange", this.onPointerLockChange, false);
      document.removeEventListener("mozpointerlockchange", this.onPointerLockChange, false);
      document.removeEventListener("pointerlockerror", this.onPointerLockError, false);
    },
    updateOrientation: function() {
      var object3D = this.el.object3D;
      var pitchObject = this.pitchObject;
      var yawObject = this.yawObject;
      var sceneEl = this.el.sceneEl;
      if ((sceneEl.is("vr-mode") || sceneEl.is("ar-mode")) && sceneEl.checkHeadsetConnected()) {
        return;
      }
      this.updateMagicWindowOrientation();
      object3D.rotation.x = this.magicWindowDeltaEuler.x + pitchObject.rotation.x;
      object3D.rotation.y = this.magicWindowDeltaEuler.y + yawObject.rotation.y;
      object3D.rotation.z = this.magicWindowDeltaEuler.z;
    },
    updateMagicWindowOrientation: function() {
      var magicWindowAbsoluteEuler = this.magicWindowAbsoluteEuler;
      var magicWindowDeltaEuler = this.magicWindowDeltaEuler;
      if (this.magicWindowControls && this.magicWindowControls.enabled) {
        this.magicWindowControls.update();
        magicWindowAbsoluteEuler.setFromQuaternion(this.magicWindowObject.quaternion, "YXZ");
        if (!this.previousMagicWindowYaw && magicWindowAbsoluteEuler.y !== 0) {
          this.previousMagicWindowYaw = magicWindowAbsoluteEuler.y;
        }
        if (this.previousMagicWindowYaw) {
          magicWindowDeltaEuler.x = magicWindowAbsoluteEuler.x;
          magicWindowDeltaEuler.y += magicWindowAbsoluteEuler.y - this.previousMagicWindowYaw;
          magicWindowDeltaEuler.z = magicWindowAbsoluteEuler.z;
          this.previousMagicWindowYaw = magicWindowAbsoluteEuler.y;
        }
      }
    },
    onMouseMove: function(evt) {
      var direction;
      var movementX;
      var movementY;
      var pitchObject = this.pitchObject;
      var previousMouseEvent = this.previousMouseEvent;
      var yawObject = this.yawObject;
      if (!this.data.enabled || !this.mouseDown && !this.pointerLocked) {
        return;
      }
      if (this.pointerLocked) {
        movementX = evt.movementX || evt.mozMovementX || 0;
        movementY = evt.movementY || evt.mozMovementY || 0;
      } else {
        movementX = evt.screenX - previousMouseEvent.screenX;
        movementY = evt.screenY - previousMouseEvent.screenY;
      }
      this.previousMouseEvent.screenX = evt.screenX;
      this.previousMouseEvent.screenY = evt.screenY;
      direction = this.data.reverseMouseDrag ? 1 : -1;
      yawObject.rotation.y += movementX * 2e-3 * direction;
      pitchObject.rotation.x += movementY * 2e-3 * direction;
      pitchObject.rotation.x = Math.max(-PI_2 / 3, Math.min(PI_2 / 3, pitchObject.rotation.x));
    },
    onMouseDown: function(evt) {
      var sceneEl = this.el.sceneEl;
      if (!this.data.enabled || !this.data.mouseEnabled || (sceneEl.is("vr-mode") || sceneEl.is("ar-mode")) && sceneEl.checkHeadsetConnected()) {
        return;
      }
      if (evt.button !== 0) {
        return;
      }
      var canvasEl = sceneEl && sceneEl.canvas;
      this.mouseDown = true;
      this.previousMouseEvent.screenX = evt.screenX;
      this.previousMouseEvent.screenY = evt.screenY;
      this.showGrabbingCursor();
      if (this.data.pointerLockEnabled && !this.pointerLocked) {
        if (canvasEl.requestPointerLock) {
          canvasEl.requestPointerLock();
        } else if (canvasEl.mozRequestPointerLock) {
          canvasEl.mozRequestPointerLock();
        }
      }
    },
    showGrabbingCursor: function() {
      this.el.sceneEl.canvas.style.cursor = "grabbing";
    },
    hideGrabbingCursor: function() {
      this.el.sceneEl.canvas.style.cursor = "";
    },
    onMouseUp: function() {
      this.mouseDown = false;
      this.hideGrabbingCursor();
    },
    onTouchStart: function(evt) {
      if (evt.touches.length !== 1 || !this.data.touchEnabled || this.el.sceneEl.is("vr-mode") || this.el.sceneEl.is("ar-mode")) {
        return;
      }
      this.touchStart = {
        x: evt.touches[0].pageX,
        y: evt.touches[0].pageY
      };
      this.touchStarted = true;
    },
    onTouchMove: function(evt) {
      var direction;
      var canvas = this.el.sceneEl.canvas;
      var deltaY;
      var yawObject = this.yawObject;
      if (!this.touchStarted || !this.data.touchEnabled) {
        return;
      }
      deltaY = 2 * Math.PI * (evt.touches[0].pageX - this.touchStart.x) / canvas.clientWidth;
      direction = this.data.reverseTouchDrag ? 1 : -1;
      yawObject.rotation.y -= deltaY * 0.5 * direction;
      this.touchStart = {
        x: evt.touches[0].pageX,
        y: evt.touches[0].pageY
      };
    },
    onTouchEnd: function() {
      this.touchStarted = false;
    },
    onEnterVR: function() {
      var sceneEl = this.el.sceneEl;
      if (!sceneEl.checkHeadsetConnected()) {
        return;
      }
      this.saveCameraPose();
      this.el.object3D.position.set(0, 0, 0);
      this.el.object3D.rotation.set(0, 0, 0);
      if (sceneEl.hasWebXR) {
        this.el.object3D.matrixAutoUpdate = false;
        this.el.object3D.updateMatrix();
      }
    },
    onExitVR: function() {
      if (!this.el.sceneEl.checkHeadsetConnected()) {
        return;
      }
      this.restoreCameraPose();
      this.previousHMDPosition.set(0, 0, 0);
      this.el.object3D.matrixAutoUpdate = true;
    },
    onPointerLockChange: function() {
      this.pointerLocked = !!(document.pointerLockElement || document.mozPointerLockElement);
    },
    onPointerLockError: function() {
      this.pointerLocked = false;
    },
    exitPointerLock: function() {
      document.exitPointerLock();
      this.pointerLocked = false;
    },
    updateGrabCursor: function(enabled) {
      var sceneEl = this.el.sceneEl;
      function enableGrabCursor() {
        sceneEl.canvas.classList.add("a-grab-cursor");
      }
      function disableGrabCursor() {
        sceneEl.canvas.classList.remove("a-grab-cursor");
      }
      if (!sceneEl.canvas) {
        if (enabled) {
          sceneEl.addEventListener("render-target-loaded", enableGrabCursor);
        } else {
          sceneEl.addEventListener("render-target-loaded", disableGrabCursor);
        }
        return;
      }
      if (enabled) {
        enableGrabCursor();
        return;
      }
      disableGrabCursor();
    },
    saveCameraPose: function() {
      var el = this.el;
      this.savedPose.position.copy(el.object3D.position);
      this.savedPose.rotation.copy(el.object3D.rotation);
      this.hasSavedPose = true;
    },
    restoreCameraPose: function() {
      var el = this.el;
      var savedPose = this.savedPose;
      if (!this.hasSavedPose) {
        return;
      }
      el.object3D.position.copy(savedPose.position);
      el.object3D.rotation.copy(savedPose.rotation);
      this.hasSavedPose = false;
    }
  });

  // src/template/camera-fps.svelte
  function create_if_block4(ctx) {
    let a_entity;
    let a_entity_material_value;
    let mounted;
    let dispose;
    return {
      c() {
        a_entity = element("a-entity");
        set_custom_element_data(a_entity, "geometry", "");
        set_custom_element_data(a_entity, "material", a_entity_material_value = "wireframe: true; opacity: 0.05s;color: #0F0; shader: flat;transparent: true; visible: " + ctx[1] + " };");
        set_custom_element_data(a_entity, "scale", "0.1 0.1 20");
        set_custom_element_data(a_entity, "position", "0 0 -1");
        set_custom_element_data(a_entity, "ammo-body", "type: kinematic;disableCollision: true;emitCollisionEvents: true;collisionFilterMask: 3;");
        set_custom_element_data(a_entity, "ammo-shape", "type: box; halfExtents: 0.05 0.05 6;offset: 0 0 -9.5");
      },
      m(target, anchor) {
        insert(target, a_entity, anchor);
        if (!mounted) {
          dispose = [
            listen(a_entity, "collidestart", ctx[2]),
            listen(a_entity, "collideend", ctx[3])
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & 2 && a_entity_material_value !== (a_entity_material_value = "wireframe: true; opacity: 0.05s;color: #0F0; shader: flat;transparent: true; visible: " + ctx2[1] + " };")) {
          set_custom_element_data(a_entity, "material", a_entity_material_value);
        }
      },
      d(detaching) {
        if (detaching)
          detach(a_entity);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_fragment8(ctx) {
    let a_mixin;
    let t0;
    let a_camera;
    let t1;
    let a_entity;
    let if_block = ctx[1] && create_if_block4(ctx);
    return {
      c() {
        a_mixin = element("a-mixin");
        t0 = space();
        a_camera = element("a-camera");
        if (if_block)
          if_block.c();
        t1 = space();
        a_entity = element("a-entity");
        set_custom_element_data(a_mixin, "id", "bbs");
        set_custom_element_data(a_mixin, "geometry", "");
        set_custom_element_data(a_mixin, "material", " opacity: 0.15; color: #00ff00; transparent: true; shader: flat;");
        set_custom_element_data(a_mixin, "text", "value: targeting info");
        set_custom_element_data(a_camera, "active", "");
        set_custom_element_data(a_camera, "fov", "75");
        set_custom_element_data(a_camera, "id", "camera");
        set_custom_element_data(a_camera, "character-camera", "");
        set_custom_element_data(a_camera, "position", "0 4 0");
        set_custom_element_data(a_camera, "wasd-controls", "enabled: false;");
        set_custom_element_data(a_camera, "look", "enabled: true;pointerLockEnabled: true;");
        set_custom_element_data(a_camera, "look-controls", "enabled: false;");
        set_custom_element_data(a_entity, "geometry", "");
        set_custom_element_data(a_entity, "material", "color: blue; opacity: 0.15; shader: flat; visible: false;");
        set_custom_element_data(a_entity, "position", "0 0 -1");
        set_custom_element_data(a_entity, "pool__targeting", "mixin: bbs; size: 10");
      },
      m(target, anchor) {
        insert(target, a_mixin, anchor);
        insert(target, t0, anchor);
        insert(target, a_camera, anchor);
        if (if_block)
          if_block.m(a_camera, null);
        insert(target, t1, anchor);
        insert(target, a_entity, anchor);
        ctx[4](a_entity);
      },
      p(ctx2, [dirty]) {
        if (ctx2[1]) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block4(ctx2);
            if_block.c();
            if_block.m(a_camera, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching)
          detach(a_mixin);
        if (detaching)
          detach(t0);
        if (detaching)
          detach(a_camera);
        if (if_block)
          if_block.d();
        if (detaching)
          detach(t1);
        if (detaching)
          detach(a_entity);
        ctx[4](null);
      }
    };
  }
  function instance7($$self, $$props, $$invalidate) {
    let $open_targeting;
    component_subscribe($$self, open_targeting, ($$value) => $$invalidate(1, $open_targeting = $$value));
    let el;
    open_targeting.on(($t) => {
      if (!$t)
        return;
    });
    const ents = {};
    const box = new AFRAME.THREE.Box3();
    open_targeting.on((t) => {
      if (!t) {
        Object.values(ents).forEach((e) => {
          el.components.pool__targeting.returnEntity(e);
          delete ents[e.object3D.uuid];
        });
      }
    });
    function collidestart(e) {
      const who = e.detail.targetEl;
      if (who.id === "ground")
        return;
      const keys = Object.keys(ents);
      if (keys.length >= 10) {
        const key = keys[Math.floor(Math.random() * keys.length)];
        el.components.pool__targeting.returnEntity(ents[key]);
        delete ents[key];
      }
      const ent = el.components.pool__targeting.requestEntity();
      ent.play();
      ents[who.object3D.uuid] = ent;
      box.setFromObject(who.object3D);
      box.getSize(ent.object3D.scale);
      box.getCenter(ent.object3D.position);
    }
    function collideend(e) {
      const who = e.detail.targetEl;
      if (!ents[who.object3D.uuid])
        return;
      el.components.pool__targeting.returnEntity(ents[who.object3D.uuid]);
      delete ents[who.object3D.uuid];
    }
    function a_entity_binding($$value) {
      binding_callbacks[$$value ? "unshift" : "push"](() => {
        el = $$value;
        $$invalidate(0, el);
      });
    }
    return [el, $open_targeting, collidestart, collideend, a_entity_binding];
  }
  var Camera_fps = class extends SvelteComponent {
    constructor(options) {
      super();
      init2(this, options, instance7, create_fragment8, safe_not_equal, {});
    }
  };
  var camera_fps_default = Camera_fps;

  // src/ui/live.svelte
  function create_fragment9(ctx) {
    let div;
    let div_class_value;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        attr(div, "class", div_class_value = "action " + (ctx[0] ? "live" : "") + " svelte-1898r5o");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        if (!mounted) {
          dispose = listen(div, "click", ctx[1]);
          mounted = true;
        }
      },
      p(ctx2, [dirty]) {
        if (dirty & 1 && div_class_value !== (div_class_value = "action " + (ctx2[0] ? "live" : "") + " svelte-1898r5o")) {
          attr(div, "class", div_class_value);
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching)
          detach(div);
        mounted = false;
        dispose();
      }
    };
  }
  function instance8($$self, $$props, $$invalidate) {
    let $open_live;
    component_subscribe($$self, open_live, ($$value) => $$invalidate(0, $open_live = $$value));
    const click_handler = () => {
      open_live.set(!open_live.$);
    };
    return [$open_live, click_handler];
  }
  var Live = class extends SvelteComponent {
    constructor(options) {
      super();
      init2(this, options, instance8, create_fragment9, safe_not_equal, {});
    }
  };
  var live_default = Live;

  // src/component/scatter.ts
  var bb = new AFRAME.THREE.Box3();
  AFRAME.registerComponent("scatter", {
    schema: {
      type: "string",
      default: "-0.5 -0.5 -0.5 0.5 0.5 0.5"
    },
    update() {
      bb.setFromArray(this.data.split(" ").map(parseFloat));
      this.el.object3D.position.x += bb.min.x + Math.random() * (bb.max.x - bb.min.x);
      this.el.object3D.position.y += bb.min.y + Math.random() * (bb.max.y - bb.min.y);
      this.el.object3D.position.z += bb.min.z + Math.random() * (bb.max.z - bb.min.z);
    }
  });

  // src/component/activate.ts
  AFRAME.registerComponent("activate", {
    multiple: true,
    update() {
      const pool = this.el.components[`pool__${this.id}`];
      if (!pool)
        return;
      let ent;
      for (let i2 = 0; i2 < pool.data.size; i2++) {
        ent = pool.requestEntity();
        ent.play();
      }
    }
  });

  // src/component/ring.ts
  AFRAME.registerComponent("ring", {
    schema: {
      count: { type: "number", default: 10 },
      radius: { type: "number", default: 5 }
    },
    update() {
      const d2 = this.el.object3D.parent.userData;
      const i2 = (d2.ringDex === void 0 ? d2.ringDex = 1 : d2.ringDex++) % this.data.count / this.data.count * Math.PI * 2;
      this.el.object3D.position.set(Math.sin(i2), 0, Math.cos(i2)).multiplyScalar(this.data.radius);
    }
  });

  // src/component/vary.ts
  var vec33 = new AFRAME.THREE.Vector3();
  var bb2 = new AFRAME.THREE.Box3();
  AFRAME.registerComponent("vary", {
    multiple: true,
    schema: {
      property: { type: "string", default: "position" },
      range: { type: "string", default: "-1 -1 -1 1 1 1" }
    },
    init() {
      const range = this.data.range.split(" ").map((v2) => parseFloat(v2));
      this.cancel = do_vary.on(($v) => {
        const o3d = this.el.object3D;
        bb2.setFromArray(range);
        o3d[this.data.property]?.set(bb2.min.x + Math.random() * (bb2.max.x - bb2.min.x), bb2.min.y + Math.random() * (bb2.max.y - bb2.min.y), bb2.min.z + Math.random() * (bb2.max.z - bb2.min.z));
      });
    },
    remove() {
      this.cancel();
    }
  });

  // src/shader/floaty.vert
  var floaty_default = "// time uniform\nvec4 Floaty(in vec4 v) {\n    float t = time * 0.00005 + v.x*v.y*v.z / 100.;\n    float dst = 100.;\n    v.x += sin(t) * dst + cos(t * 2.) * dst;\n    v.y += cos(t) * dst/100. ;\n    v.z += sin(t) * dst+ sin(t * 2.) * dst;\n    return v;\n}";

  // src/component/floaty.ts
  var main = `
vec4 mvPosition = vec4(transformed, 1.0);

mvPosition = modelViewMatrix * Floaty(mvPosition);
mvPosition = projectionMatrix * mvPosition;
gl_Position = mvPosition;
`;
  AFRAME.registerComponent("floaty", {
    init() {
      this.setup = this.setup.bind(this);
      this.setup();
      this.el.addEventListener("model-loaded", this.setup);
    },
    remove() {
      this.el.removeEventListener("model-loaded", this.setup);
    },
    setup() {
      this.el.object3D.traverse((c2) => {
        if (c2.material) {
          const prev = c2.material.onBeforeCompile;
          c2.material.onBeforeCompile = (shader) => {
            if (!shader.uniforms.time) {
              shader.uniforms.time = time.$;
              shader.vertexShader = shader.vertexShader.replace("#include <common>", [
                "#include <common>",
                "uniform float time;",
                floaty_default
              ].join("\n")).replace("#include <project_vertex>", main);
            } else {
              shader.vertexShader = shader.vertexShader.replace("#include <common>", [
                "#include <common>",
                floaty_default
              ].join("\n")).replace("(mvPosition);", "(Floaty(mvPosition));");
            }
            if (prev) {
              prev(shader);
            }
          };
          c2.material.needsUpdate = true;
        }
      });
    }
  });

  // src/shader/windy.vert
  var windy_default = "vec4 Windy(in vec4 v) {\n    float t = -time * 0.0005 + v.x*v.y*v.z*100.;\n    float dst = 0.025;\n    v.x += sin(t) * dst;\n    v.y += cos(t) * dst/10.;\n    v.z += sin(t) * dst;\n    return v; \n}";

  // src/component/windy.ts
  var main2 = `
vec4 mvPosition = vec4(transformed, 1.0);

mvPosition = modelViewMatrix * Windy(mvPosition);
mvPosition = projectionMatrix * mvPosition;
gl_Position = mvPosition;
`;
  AFRAME.registerComponent("windy", {
    init() {
      this.setup = this.setup.bind(this);
      this.setup();
      this.el.addEventListener("model-loaded", this.setup);
    },
    remove() {
      this.el.removeEventListener("model-loaded", this.setup);
    },
    setup() {
      this.el.object3D.traverse((c2) => {
        if (c2.material) {
          const prev = c2.material.onBeforeCompile;
          c2.material.onBeforeCompile = (shader) => {
            if (!shader.uniforms.time) {
              shader.uniforms.time = time.$;
              shader.vertexShader = shader.vertexShader.replace("#include <common>", [
                "#include <common>",
                "uniform float time;",
                windy_default
              ].join("\n")).replace("#include <project_vertex>", main2);
            } else {
              shader.vertexShader = shader.vertexShader.replace("#include <common>", [
                "#include <common>",
                windy_default
              ].join("\n")).replace("(mvPosition);", "(Windy(mvPosition));");
            }
            if (prev) {
              prev(shader);
            }
          };
          c2.material.needsUpdate = true;
        }
      });
    }
  });

  // src/component/ai.ts
  AFRAME.registerComponent("ai", {
    schema: {
      type: { type: "string", default: "random" }
    },
    init() {
      this.tick = AFRAME.utils.throttleTick(this.tick, 250, this);
    },
    tick() {
      if (this[this.data.type])
        this[this.data.type]();
    },
    random() {
      if (!this.el.body || guest.$)
        return;
      const speed = 250;
      const x2 = (Math.random() - 0.5) * speed, y2 = (Math.random() - 0.5) * speed, z2 = (Math.random() - 0.5) * speed;
      const force = new Ammo.btVector3(x2, y2, z2);
      this.el.body.applyForce(force);
      const torq = new Ammo.btVector3(x2 * 0.2, y2 * 0.2, z2 * 0.2);
      this.el.body.applyTorque(torq);
      this.el.body.activate();
      Ammo.destroy(force);
      Ammo.destroy(torq);
    }
  });

  // src/template/environmental.svelte
  function create_fragment10(ctx) {
    let a_plane;
    let a_plane_width_value;
    let a_plane_height_value;
    let t0;
    let a_entity0;
    let a_sphere;
    let a_entity0_position_value;
    let a_entity0_light_value;
    let t1;
    let a_entity1;
    let a_entity1_position_value;
    let a_entity1_light_value;
    let t2;
    let a_entity2;
    let t3;
    let a_mixin0;
    let t4;
    let a_entity3;
    let a_entity3_position_value;
    let a_entity3_animation_value;
    let a_entity3_animation__scale_value;
    let t5;
    let a_entity4;
    let t6;
    let a_mixin1;
    let a_mixin1_vary_value;
    let t7;
    let a_entity5;
    let t8;
    let a_mixin2;
    let a_mixin2_vary_value;
    let t9;
    let a_entity6;
    let t10;
    let a_sky;
    let a_sky_animate_value;
    return {
      c() {
        a_plane = element("a-plane");
        t0 = space();
        a_entity0 = element("a-entity");
        a_sphere = element("a-sphere");
        t1 = space();
        a_entity1 = element("a-entity");
        t2 = space();
        a_entity2 = element("a-entity");
        t3 = space();
        a_mixin0 = element("a-mixin");
        t4 = space();
        a_entity3 = element("a-entity");
        t5 = space();
        a_entity4 = element("a-entity");
        t6 = space();
        a_mixin1 = element("a-mixin");
        t7 = space();
        a_entity5 = element("a-entity");
        t8 = space();
        a_mixin2 = element("a-mixin");
        t9 = space();
        a_entity6 = element("a-entity");
        t10 = space();
        a_sky = element("a-sky");
        set_custom_element_data(a_plane, "shadow", "");
        set_custom_element_data(a_plane, "id", "ground");
        set_custom_element_data(a_plane, "position", "0 0 0");
        set_custom_element_data(a_plane, "rotation", "-90 0 0");
        set_custom_element_data(a_plane, "width", a_plane_width_value = ctx[0] * 1.5);
        set_custom_element_data(a_plane, "height", a_plane_height_value = ctx[0] * 1.5);
        set_custom_element_data(a_plane, "ammo-body", "type: static; mass: 0;");
        set_custom_element_data(a_plane, "ammo-shape", "type:box");
        set_custom_element_data(a_plane, "color", "#334411");
        set_custom_element_data(a_sphere, "position", "0 100 0");
        set_custom_element_data(a_sphere, "radius", "10");
        set_custom_element_data(a_sphere, "material", "color: yellow; shader: flat;");
        set_custom_element_data(a_entity0, "position", a_entity0_position_value = ctx[0] / 4 + " " + ctx[0] * 2 + " " + ctx[0] / 4);
        set_custom_element_data(a_entity0, "light", a_entity0_light_value = ctx[1]({
          type: "directional",
          color: light,
          castShadow: true,
          shadowCameraTop: ctx[0],
          shadowCameraLeft: -ctx[0],
          shadowCameraRight: ctx[0],
          shadowCameraBottom: -ctx[0],
          shadowBias: -1e-4,
          shadowMapHeight: 1024 * 4,
          shadowMapWidth: 1024 * 4,
          intensity: 0.75
        }));
        set_custom_element_data(a_entity1, "position", a_entity1_position_value = "-" + ctx[0] / 4 + " " + ctx[0] * 2 + " -" + ctx[0] / 4);
        set_custom_element_data(a_entity1, "light", a_entity1_light_value = ctx[1]({
          type: "directional",
          color: light,
          intensity: 0.75
        }));
        set_custom_element_data(a_entity2, "light", "type:ambient; color:white; intensity:1;");
        set_custom_element_data(a_mixin0, "id", "cloud");
        set_custom_element_data(a_mixin0, "scatter", ctx[2]);
        set_custom_element_data(a_mixin0, "material", "color: #ffffff; shader: flat; ");
        set_custom_element_data(a_mixin0, "geometry", "");
        set_custom_element_data(a_mixin0, "scale", "15 5 10");
        set_custom_element_data(a_mixin0, "vary", "property: scale; range: 1 1 1 1.5 1.5 1.5");
        set_custom_element_data(a_entity3, "pool__cloud", "mixin: shadow cloud; size: 50");
        set_custom_element_data(a_entity3, "activate__cloud", "");
        set_custom_element_data(a_entity3, "position", a_entity3_position_value = "0 35 " + ctx[0]);
        set_custom_element_data(a_entity3, "animation", a_entity3_animation_value = "property:object3D.position.z; to:-" + ctx[0] + "; dur: " + 400 * 300 * 2 + "; loop: true;");
        set_custom_element_data(a_entity3, "animation__scale", a_entity3_animation__scale_value = "property:object3D.scale; from: 0 0 0; to:1 1 1; dur: " + 400 * 300 / 2 + "; loop: true; dir: alternate");
        set_custom_element_data(a_entity4, "sound", "autoplay: true; loop: true; volume: 0.05; src:#sound-bg;positional:false");
        set_custom_element_data(a_mixin1, "id", "floof");
        set_custom_element_data(a_mixin1, "geometry", "");
        set_custom_element_data(a_mixin1, "scale", "0.05 0.05 0.05");
        set_custom_element_data(a_mixin1, "material", "color: white; shader: flat;");
        set_custom_element_data(a_mixin1, "vary", a_mixin1_vary_value = "property: position; range: -" + ctx[0] * 0.75 + " 0 -" + ctx[0] * 0.75 + " " + ctx[0] * 0.75 + " 4 " + ctx[0] * 0.75);
        set_custom_element_data(a_mixin1, "floaty", "");
        set_custom_element_data(a_entity5, "pool__floof", "mixin: floof; size: 300;");
        set_custom_element_data(a_entity5, "activate__floof", "");
        set_custom_element_data(a_mixin2, "id", "birds");
        set_custom_element_data(a_mixin2, "geometry", "");
        set_custom_element_data(a_mixin2, "scale", "0.25 0.15 0.15");
        set_custom_element_data(a_mixin2, "material", "color: yellow; shader: flat;");
        set_custom_element_data(a_mixin2, "vary", a_mixin2_vary_value = "property: position; range: -" + ctx[0] * 0.75 + " 10.5 -" + ctx[0] * 0.75 + " " + ctx[0] * 0.75 + " 40 " + ctx[0] * 0.75);
        set_custom_element_data(a_mixin2, "floaty", "");
        set_custom_element_data(a_entity6, "pool__birds", "mixin: birds; size: 50;");
        set_custom_element_data(a_entity6, "activate__birds", "");
        set_custom_element_data(a_sky, "color", sky);
        set_custom_element_data(a_sky, "animate", a_sky_animate_value = "property: color; to: " + sky_dark + "; easing: easeInOut; dur: 6000 ");
      },
      m(target, anchor) {
        insert(target, a_plane, anchor);
        insert(target, t0, anchor);
        insert(target, a_entity0, anchor);
        append(a_entity0, a_sphere);
        insert(target, t1, anchor);
        insert(target, a_entity1, anchor);
        insert(target, t2, anchor);
        insert(target, a_entity2, anchor);
        insert(target, t3, anchor);
        insert(target, a_mixin0, anchor);
        insert(target, t4, anchor);
        insert(target, a_entity3, anchor);
        insert(target, t5, anchor);
        insert(target, a_entity4, anchor);
        insert(target, t6, anchor);
        insert(target, a_mixin1, anchor);
        insert(target, t7, anchor);
        insert(target, a_entity5, anchor);
        insert(target, t8, anchor);
        insert(target, a_mixin2, anchor);
        insert(target, t9, anchor);
        insert(target, a_entity6, anchor);
        insert(target, t10, anchor);
        insert(target, a_sky, anchor);
      },
      p(ctx2, [dirty]) {
        if (dirty & 1 && a_plane_width_value !== (a_plane_width_value = ctx2[0] * 1.5)) {
          set_custom_element_data(a_plane, "width", a_plane_width_value);
        }
        if (dirty & 1 && a_plane_height_value !== (a_plane_height_value = ctx2[0] * 1.5)) {
          set_custom_element_data(a_plane, "height", a_plane_height_value);
        }
        if (dirty & 1 && a_entity0_position_value !== (a_entity0_position_value = ctx2[0] / 4 + " " + ctx2[0] * 2 + " " + ctx2[0] / 4)) {
          set_custom_element_data(a_entity0, "position", a_entity0_position_value);
        }
        if (dirty & 1 && a_entity0_light_value !== (a_entity0_light_value = ctx2[1]({
          type: "directional",
          color: light,
          castShadow: true,
          shadowCameraTop: ctx2[0],
          shadowCameraLeft: -ctx2[0],
          shadowCameraRight: ctx2[0],
          shadowCameraBottom: -ctx2[0],
          shadowBias: -1e-4,
          shadowMapHeight: 1024 * 4,
          shadowMapWidth: 1024 * 4,
          intensity: 0.75
        }))) {
          set_custom_element_data(a_entity0, "light", a_entity0_light_value);
        }
        if (dirty & 1 && a_entity1_position_value !== (a_entity1_position_value = "-" + ctx2[0] / 4 + " " + ctx2[0] * 2 + " -" + ctx2[0] / 4)) {
          set_custom_element_data(a_entity1, "position", a_entity1_position_value);
        }
        if (dirty & 1 && a_entity3_position_value !== (a_entity3_position_value = "0 35 " + ctx2[0])) {
          set_custom_element_data(a_entity3, "position", a_entity3_position_value);
        }
        if (dirty & 1 && a_entity3_animation_value !== (a_entity3_animation_value = "property:object3D.position.z; to:-" + ctx2[0] + "; dur: " + 400 * 300 * 2 + "; loop: true;")) {
          set_custom_element_data(a_entity3, "animation", a_entity3_animation_value);
        }
        if (dirty & 1 && a_mixin1_vary_value !== (a_mixin1_vary_value = "property: position; range: -" + ctx2[0] * 0.75 + " 0 -" + ctx2[0] * 0.75 + " " + ctx2[0] * 0.75 + " 4 " + ctx2[0] * 0.75)) {
          set_custom_element_data(a_mixin1, "vary", a_mixin1_vary_value);
        }
        if (dirty & 1 && a_mixin2_vary_value !== (a_mixin2_vary_value = "property: position; range: -" + ctx2[0] * 0.75 + " 10.5 -" + ctx2[0] * 0.75 + " " + ctx2[0] * 0.75 + " 40 " + ctx2[0] * 0.75)) {
          set_custom_element_data(a_mixin2, "vary", a_mixin2_vary_value);
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching)
          detach(a_plane);
        if (detaching)
          detach(t0);
        if (detaching)
          detach(a_entity0);
        if (detaching)
          detach(t1);
        if (detaching)
          detach(a_entity1);
        if (detaching)
          detach(t2);
        if (detaching)
          detach(a_entity2);
        if (detaching)
          detach(t3);
        if (detaching)
          detach(a_mixin0);
        if (detaching)
          detach(t4);
        if (detaching)
          detach(a_entity3);
        if (detaching)
          detach(t5);
        if (detaching)
          detach(a_entity4);
        if (detaching)
          detach(t6);
        if (detaching)
          detach(a_mixin1);
        if (detaching)
          detach(t7);
        if (detaching)
          detach(a_entity5);
        if (detaching)
          detach(t8);
        if (detaching)
          detach(a_mixin2);
        if (detaching)
          detach(t9);
        if (detaching)
          detach(a_entity6);
        if (detaching)
          detach(t10);
        if (detaching)
          detach(a_sky);
      }
    };
  }
  var light = "#FEE";
  var sky = "#336";
  var sky_dark = "#003";
  function instance9($$self, $$props, $$invalidate) {
    const str = AFRAME.utils.styleParser.stringify.bind(AFRAME.utils.styleParser);
    let { groundSize = 100 } = $$props;
    const scatterBig = [-groundSize, 0, -groundSize, groundSize, 0, groundSize].join(" ");
    $$self.$$set = ($$props2) => {
      if ("groundSize" in $$props2)
        $$invalidate(0, groundSize = $$props2.groundSize);
    };
    return [groundSize, str, scatterBig];
  }
  var Environmental = class extends SvelteComponent {
    constructor(options) {
      super();
      init2(this, options, instance9, create_fragment10, safe_not_equal, { groundSize: 0 });
    }
  };
  var environmental_default = Environmental;

  // src/template/guest.svelte
  function create_if_block_1(ctx) {
    let help;
    let current;
    help = new help_default({});
    return {
      c() {
        create_component(help.$$.fragment);
      },
      m(target, anchor) {
        mount_component(help, target, anchor);
        current = true;
      },
      i(local) {
        if (current)
          return;
        transition_in(help.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(help.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(help, detaching);
      }
    };
  }
  function create_if_block5(ctx) {
    let loading3;
    let current;
    loading3 = new loading_default({});
    return {
      c() {
        create_component(loading3.$$.fragment);
      },
      m(target, anchor) {
        mount_component(loading3, target, anchor);
        current = true;
      },
      i(local) {
        if (current)
          return;
        transition_in(loading3.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(loading3.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(loading3, detaching);
      }
    };
  }
  function create_fragment11(ctx) {
    let text_1;
    let t0;
    let t1;
    let t2;
    let live;
    let t3;
    let netdata;
    let t4;
    let webcam;
    let t5;
    let heard;
    let t6;
    let a_scene;
    let a_assets;
    let t8;
    let camerafps;
    let t9;
    let a_entity0;
    let a_entity0_vrm_value;
    let a_entity0_scale_value;
    let a_entity0_sfxr__jump_value;
    let t10;
    let a_entity1;
    let a_entity1_vrm_value;
    let t11;
    let environmental;
    let current;
    text_1 = new text_default({});
    let if_block0 = ctx[0] && create_if_block_1(ctx);
    let if_block1 = ctx[1] && create_if_block5(ctx);
    live = new live_default({});
    netdata = new netdata_default({});
    webcam = new webcam_default({});
    heard = new heard_default({});
    camerafps = new camera_fps_default({});
    environmental = new environmental_default({});
    return {
      c() {
        create_component(text_1.$$.fragment);
        t0 = space();
        if (if_block0)
          if_block0.c();
        t1 = space();
        if (if_block1)
          if_block1.c();
        t2 = space();
        create_component(live.$$.fragment);
        t3 = space();
        create_component(netdata.$$.fragment);
        t4 = space();
        create_component(webcam.$$.fragment);
        t5 = space();
        create_component(heard.$$.fragment);
        t6 = space();
        a_scene = element("a-scene");
        a_assets = element("a-assets");
        a_assets.innerHTML = `<audio id="sound-bg" src="./sound/bg-ocean.mp3"></audio> 
		<a-mixin id="shadow" shadow="cast: true"></a-mixin>`;
        t8 = space();
        create_component(camerafps.$$.fragment);
        t9 = space();
        a_entity0 = element("a-entity");
        t10 = space();
        a_entity1 = element("a-entity");
        t11 = space();
        create_component(environmental.$$.fragment);
        set_custom_element_data(a_entity0, "mixin", "shadow ");
        set_custom_element_data(a_entity0, "position", "0 0 15");
        set_custom_element_data(a_entity0, "guest", "");
        set_custom_element_data(a_entity0, "vrm", a_entity0_vrm_value = "src: " + ctx[3] + "; current: true");
        set_custom_element_data(a_entity0, "look-controls", "");
        set_custom_element_data(a_entity0, "scale", a_entity0_scale_value = ctx[4].x + " " + ctx[4].y + " " + ctx[4].z);
        set_custom_element_data(a_entity0, "id", "focus");
        set_custom_element_data(a_entity0, "sfxr__jump", a_entity0_sfxr__jump_value = AFRAME.utils.styleParser.stringify(sfx_jump));
        set_custom_element_data(a_entity1, "mixin", "shadow ");
        set_custom_element_data(a_entity1, "guest", "");
        set_custom_element_data(a_entity1, "position", "0 0.25 14");
        set_custom_element_data(a_entity1, "rotation", "0 180 0");
        set_custom_element_data(a_entity1, "vrm", a_entity1_vrm_value = "src: " + ctx[5] + "; mirror: true");
        set_custom_element_data(a_scene, "keyboard-shortcuts", "enterVR: false");
        set_custom_element_data(a_scene, "stats", ctx[2]);
        set_custom_element_data(a_scene, "renderer", "highRefreshRate: true; alpha: false;precision: low;");
        set_custom_element_data(a_scene, "shadow", "type:basic;");
        set_custom_element_data(a_scene, "uniforms", "");
        set_custom_element_data(a_scene, "fog", "type: exponential; color: #555");
      },
      m(target, anchor) {
        mount_component(text_1, target, anchor);
        insert(target, t0, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t1, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, t2, anchor);
        mount_component(live, target, anchor);
        insert(target, t3, anchor);
        mount_component(netdata, target, anchor);
        insert(target, t4, anchor);
        mount_component(webcam, target, anchor);
        insert(target, t5, anchor);
        mount_component(heard, target, anchor);
        insert(target, t6, anchor);
        insert(target, a_scene, anchor);
        append(a_scene, a_assets);
        append(a_scene, t8);
        mount_component(camerafps, a_scene, null);
        append(a_scene, t9);
        append(a_scene, a_entity0);
        append(a_scene, t10);
        append(a_scene, a_entity1);
        append(a_scene, t11);
        mount_component(environmental, a_scene, null);
        current = true;
      },
      p(ctx2, [dirty]) {
        if (ctx2[0]) {
          if (if_block0) {
            if (dirty & 1) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_1(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t1.parentNode, t1);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (ctx2[1]) {
          if (if_block1) {
            if (dirty & 2) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block5(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(t2.parentNode, t2);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (!current || dirty & 8 && a_entity0_vrm_value !== (a_entity0_vrm_value = "src: " + ctx2[3] + "; current: true")) {
          set_custom_element_data(a_entity0, "vrm", a_entity0_vrm_value);
        }
        if (!current || dirty & 16 && a_entity0_scale_value !== (a_entity0_scale_value = ctx2[4].x + " " + ctx2[4].y + " " + ctx2[4].z)) {
          set_custom_element_data(a_entity0, "scale", a_entity0_scale_value);
        }
        if (!current || dirty & 32 && a_entity1_vrm_value !== (a_entity1_vrm_value = "src: " + ctx2[5] + "; mirror: true")) {
          set_custom_element_data(a_entity1, "vrm", a_entity1_vrm_value);
        }
        if (!current || dirty & 4) {
          set_custom_element_data(a_scene, "stats", ctx2[2]);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(text_1.$$.fragment, local);
        transition_in(if_block0);
        transition_in(if_block1);
        transition_in(live.$$.fragment, local);
        transition_in(netdata.$$.fragment, local);
        transition_in(webcam.$$.fragment, local);
        transition_in(heard.$$.fragment, local);
        transition_in(camerafps.$$.fragment, local);
        transition_in(environmental.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(text_1.$$.fragment, local);
        transition_out(if_block0);
        transition_out(if_block1);
        transition_out(live.$$.fragment, local);
        transition_out(netdata.$$.fragment, local);
        transition_out(webcam.$$.fragment, local);
        transition_out(heard.$$.fragment, local);
        transition_out(camerafps.$$.fragment, local);
        transition_out(environmental.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(text_1, detaching);
        if (detaching)
          detach(t0);
        if (if_block0)
          if_block0.d(detaching);
        if (detaching)
          detach(t1);
        if (if_block1)
          if_block1.d(detaching);
        if (detaching)
          detach(t2);
        destroy_component(live, detaching);
        if (detaching)
          detach(t3);
        destroy_component(netdata, detaching);
        if (detaching)
          detach(t4);
        destroy_component(webcam, detaching);
        if (detaching)
          detach(t5);
        destroy_component(heard, detaching);
        if (detaching)
          detach(t6);
        if (detaching)
          detach(a_scene);
        destroy_component(camerafps);
        destroy_component(environmental);
      }
    };
  }
  function instance10($$self, $$props, $$invalidate) {
    let $open_help;
    let $open_loading;
    let $open_stats;
    let $avatar_current;
    let $size;
    let $avatar_doer;
    component_subscribe($$self, open_help, ($$value) => $$invalidate(0, $open_help = $$value));
    component_subscribe($$self, open_loading, ($$value) => $$invalidate(1, $open_loading = $$value));
    component_subscribe($$self, open_stats, ($$value) => $$invalidate(2, $open_stats = $$value));
    component_subscribe($$self, avatar_current, ($$value) => $$invalidate(3, $avatar_current = $$value));
    component_subscribe($$self, size, ($$value) => $$invalidate(4, $size = $$value));
    component_subscribe($$self, avatar_doer, ($$value) => $$invalidate(5, $avatar_doer = $$value));
    return [$open_help, $open_loading, $open_stats, $avatar_current, $size, $avatar_doer];
  }
  var Guest = class extends SvelteComponent {
    constructor(options) {
      super();
      init2(this, options, instance10, create_fragment11, safe_not_equal, {});
    }
  };
  var guest_default = Guest;

  // src/guest.ts
  var app = new guest_default({
    target: document.getElementById("svelte"),
    props: {}
  });
})();
/*! (c) 2019-2021 pixiv Inc. - https://github.com/pixiv/three-vrm/blob/release/LICENSE */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/**
 * @license
 * Copyright 2010-2022 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
